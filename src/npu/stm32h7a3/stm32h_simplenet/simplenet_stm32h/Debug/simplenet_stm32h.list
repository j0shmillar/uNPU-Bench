
simplenet_stm32h.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe9c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005f080  08010160  08010160  00020160  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0806f1e0  0806f1e0  0007f1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0806f1e8  0806f1e8  0007f1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0806f1ec  0806f1ec  0007f1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00001e8c  24000000  0806f1f0  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a760  24001ea0  0807107c  00081ea0  2**5
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  00090000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00081e8c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e075  00000000  00000000  00081eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032f4  00000000  00000000  0009ff2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000be0  00000000  00000000  000a3228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ae0  00000000  00000000  000a3e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000316dd  00000000  00000000  000a48e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011050  00000000  00000000  000d5fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140426  00000000  00000000  000e7015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000a3  00000000  00000000  0022743b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000040f0  00000000  00000000  002274e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000cc  00000000  00000000  0022b5d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001b9  00000000  00000000  0022b69c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24001ea0 	.word	0x24001ea0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08010134 	.word	0x08010134

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24001ea4 	.word	0x24001ea4
 80002ec:	08010134 	.word	0x08010134

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b9a2 	b.w	80006fc <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f83a 	bl	8000438 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__aeabi_f2lz>:
 80003d0:	ee07 0a90 	vmov	s15, r0
 80003d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003dc:	d401      	bmi.n	80003e2 <__aeabi_f2lz+0x12>
 80003de:	f000 b80b 	b.w	80003f8 <__aeabi_f2ulz>
 80003e2:	eef1 7a67 	vneg.f32	s15, s15
 80003e6:	b508      	push	{r3, lr}
 80003e8:	ee17 0a90 	vmov	r0, s15
 80003ec:	f000 f804 	bl	80003f8 <__aeabi_f2ulz>
 80003f0:	4240      	negs	r0, r0
 80003f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f6:	bd08      	pop	{r3, pc}

080003f8 <__aeabi_f2ulz>:
 80003f8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000428 <__aeabi_f2ulz+0x30>
 80003fc:	ee07 0a90 	vmov	s15, r0
 8000400:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000430 <__aeabi_f2ulz+0x38>
 8000404:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000408:	ee27 6b06 	vmul.f64	d6, d7, d6
 800040c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000410:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000414:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000418:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800041c:	ee16 1a10 	vmov	r1, s12
 8000420:	ee17 0a90 	vmov	r0, s15
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	00000000 	.word	0x00000000
 800042c:	3df00000 	.word	0x3df00000
 8000430:	00000000 	.word	0x00000000
 8000434:	41f00000 	.word	0x41f00000

08000438 <__udivmoddi4>:
 8000438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800043c:	9d08      	ldr	r5, [sp, #32]
 800043e:	4604      	mov	r4, r0
 8000440:	468c      	mov	ip, r1
 8000442:	2b00      	cmp	r3, #0
 8000444:	f040 8083 	bne.w	800054e <__udivmoddi4+0x116>
 8000448:	428a      	cmp	r2, r1
 800044a:	4617      	mov	r7, r2
 800044c:	d947      	bls.n	80004de <__udivmoddi4+0xa6>
 800044e:	fab2 f282 	clz	r2, r2
 8000452:	b142      	cbz	r2, 8000466 <__udivmoddi4+0x2e>
 8000454:	f1c2 0020 	rsb	r0, r2, #32
 8000458:	fa24 f000 	lsr.w	r0, r4, r0
 800045c:	4091      	lsls	r1, r2
 800045e:	4097      	lsls	r7, r2
 8000460:	ea40 0c01 	orr.w	ip, r0, r1
 8000464:	4094      	lsls	r4, r2
 8000466:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800046a:	0c23      	lsrs	r3, r4, #16
 800046c:	fbbc f6f8 	udiv	r6, ip, r8
 8000470:	fa1f fe87 	uxth.w	lr, r7
 8000474:	fb08 c116 	mls	r1, r8, r6, ip
 8000478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047c:	fb06 f10e 	mul.w	r1, r6, lr
 8000480:	4299      	cmp	r1, r3
 8000482:	d909      	bls.n	8000498 <__udivmoddi4+0x60>
 8000484:	18fb      	adds	r3, r7, r3
 8000486:	f106 30ff 	add.w	r0, r6, #4294967295
 800048a:	f080 8119 	bcs.w	80006c0 <__udivmoddi4+0x288>
 800048e:	4299      	cmp	r1, r3
 8000490:	f240 8116 	bls.w	80006c0 <__udivmoddi4+0x288>
 8000494:	3e02      	subs	r6, #2
 8000496:	443b      	add	r3, r7
 8000498:	1a5b      	subs	r3, r3, r1
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a0:	fb08 3310 	mls	r3, r8, r0, r3
 80004a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	45a6      	cmp	lr, r4
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x8c>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b6:	f080 8105 	bcs.w	80006c4 <__udivmoddi4+0x28c>
 80004ba:	45a6      	cmp	lr, r4
 80004bc:	f240 8102 	bls.w	80006c4 <__udivmoddi4+0x28c>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004c8:	eba4 040e 	sub.w	r4, r4, lr
 80004cc:	2600      	movs	r6, #0
 80004ce:	b11d      	cbz	r5, 80004d8 <__udivmoddi4+0xa0>
 80004d0:	40d4      	lsrs	r4, r2
 80004d2:	2300      	movs	r3, #0
 80004d4:	e9c5 4300 	strd	r4, r3, [r5]
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	b902      	cbnz	r2, 80004e2 <__udivmoddi4+0xaa>
 80004e0:	deff      	udf	#255	; 0xff
 80004e2:	fab2 f282 	clz	r2, r2
 80004e6:	2a00      	cmp	r2, #0
 80004e8:	d150      	bne.n	800058c <__udivmoddi4+0x154>
 80004ea:	1bcb      	subs	r3, r1, r7
 80004ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f0:	fa1f f887 	uxth.w	r8, r7
 80004f4:	2601      	movs	r6, #1
 80004f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80004fa:	0c21      	lsrs	r1, r4, #16
 80004fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb08 f30c 	mul.w	r3, r8, ip
 8000508:	428b      	cmp	r3, r1
 800050a:	d907      	bls.n	800051c <__udivmoddi4+0xe4>
 800050c:	1879      	adds	r1, r7, r1
 800050e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0xe2>
 8000514:	428b      	cmp	r3, r1
 8000516:	f200 80e9 	bhi.w	80006ec <__udivmoddi4+0x2b4>
 800051a:	4684      	mov	ip, r0
 800051c:	1ac9      	subs	r1, r1, r3
 800051e:	b2a3      	uxth	r3, r4
 8000520:	fbb1 f0fe 	udiv	r0, r1, lr
 8000524:	fb0e 1110 	mls	r1, lr, r0, r1
 8000528:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800052c:	fb08 f800 	mul.w	r8, r8, r0
 8000530:	45a0      	cmp	r8, r4
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x10c>
 8000534:	193c      	adds	r4, r7, r4
 8000536:	f100 33ff 	add.w	r3, r0, #4294967295
 800053a:	d202      	bcs.n	8000542 <__udivmoddi4+0x10a>
 800053c:	45a0      	cmp	r8, r4
 800053e:	f200 80d9 	bhi.w	80006f4 <__udivmoddi4+0x2bc>
 8000542:	4618      	mov	r0, r3
 8000544:	eba4 0408 	sub.w	r4, r4, r8
 8000548:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800054c:	e7bf      	b.n	80004ce <__udivmoddi4+0x96>
 800054e:	428b      	cmp	r3, r1
 8000550:	d909      	bls.n	8000566 <__udivmoddi4+0x12e>
 8000552:	2d00      	cmp	r5, #0
 8000554:	f000 80b1 	beq.w	80006ba <__udivmoddi4+0x282>
 8000558:	2600      	movs	r6, #0
 800055a:	e9c5 0100 	strd	r0, r1, [r5]
 800055e:	4630      	mov	r0, r6
 8000560:	4631      	mov	r1, r6
 8000562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000566:	fab3 f683 	clz	r6, r3
 800056a:	2e00      	cmp	r6, #0
 800056c:	d14a      	bne.n	8000604 <__udivmoddi4+0x1cc>
 800056e:	428b      	cmp	r3, r1
 8000570:	d302      	bcc.n	8000578 <__udivmoddi4+0x140>
 8000572:	4282      	cmp	r2, r0
 8000574:	f200 80b8 	bhi.w	80006e8 <__udivmoddi4+0x2b0>
 8000578:	1a84      	subs	r4, r0, r2
 800057a:	eb61 0103 	sbc.w	r1, r1, r3
 800057e:	2001      	movs	r0, #1
 8000580:	468c      	mov	ip, r1
 8000582:	2d00      	cmp	r5, #0
 8000584:	d0a8      	beq.n	80004d8 <__udivmoddi4+0xa0>
 8000586:	e9c5 4c00 	strd	r4, ip, [r5]
 800058a:	e7a5      	b.n	80004d8 <__udivmoddi4+0xa0>
 800058c:	f1c2 0320 	rsb	r3, r2, #32
 8000590:	fa20 f603 	lsr.w	r6, r0, r3
 8000594:	4097      	lsls	r7, r2
 8000596:	fa01 f002 	lsl.w	r0, r1, r2
 800059a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800059e:	40d9      	lsrs	r1, r3
 80005a0:	4330      	orrs	r0, r6
 80005a2:	0c03      	lsrs	r3, r0, #16
 80005a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80005a8:	fa1f f887 	uxth.w	r8, r7
 80005ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80005b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b4:	fb06 f108 	mul.w	r1, r6, r8
 80005b8:	4299      	cmp	r1, r3
 80005ba:	fa04 f402 	lsl.w	r4, r4, r2
 80005be:	d909      	bls.n	80005d4 <__udivmoddi4+0x19c>
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80005c6:	f080 808d 	bcs.w	80006e4 <__udivmoddi4+0x2ac>
 80005ca:	4299      	cmp	r1, r3
 80005cc:	f240 808a 	bls.w	80006e4 <__udivmoddi4+0x2ac>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	443b      	add	r3, r7
 80005d4:	1a5b      	subs	r3, r3, r1
 80005d6:	b281      	uxth	r1, r0
 80005d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80005dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80005e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005e4:	fb00 f308 	mul.w	r3, r0, r8
 80005e8:	428b      	cmp	r3, r1
 80005ea:	d907      	bls.n	80005fc <__udivmoddi4+0x1c4>
 80005ec:	1879      	adds	r1, r7, r1
 80005ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80005f2:	d273      	bcs.n	80006dc <__udivmoddi4+0x2a4>
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d971      	bls.n	80006dc <__udivmoddi4+0x2a4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4439      	add	r1, r7
 80005fc:	1acb      	subs	r3, r1, r3
 80005fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000602:	e778      	b.n	80004f6 <__udivmoddi4+0xbe>
 8000604:	f1c6 0c20 	rsb	ip, r6, #32
 8000608:	fa03 f406 	lsl.w	r4, r3, r6
 800060c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000610:	431c      	orrs	r4, r3
 8000612:	fa20 f70c 	lsr.w	r7, r0, ip
 8000616:	fa01 f306 	lsl.w	r3, r1, r6
 800061a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800061e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000622:	431f      	orrs	r7, r3
 8000624:	0c3b      	lsrs	r3, r7, #16
 8000626:	fbb1 f9fe 	udiv	r9, r1, lr
 800062a:	fa1f f884 	uxth.w	r8, r4
 800062e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000632:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000636:	fb09 fa08 	mul.w	sl, r9, r8
 800063a:	458a      	cmp	sl, r1
 800063c:	fa02 f206 	lsl.w	r2, r2, r6
 8000640:	fa00 f306 	lsl.w	r3, r0, r6
 8000644:	d908      	bls.n	8000658 <__udivmoddi4+0x220>
 8000646:	1861      	adds	r1, r4, r1
 8000648:	f109 30ff 	add.w	r0, r9, #4294967295
 800064c:	d248      	bcs.n	80006e0 <__udivmoddi4+0x2a8>
 800064e:	458a      	cmp	sl, r1
 8000650:	d946      	bls.n	80006e0 <__udivmoddi4+0x2a8>
 8000652:	f1a9 0902 	sub.w	r9, r9, #2
 8000656:	4421      	add	r1, r4
 8000658:	eba1 010a 	sub.w	r1, r1, sl
 800065c:	b2bf      	uxth	r7, r7
 800065e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000662:	fb0e 1110 	mls	r1, lr, r0, r1
 8000666:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800066a:	fb00 f808 	mul.w	r8, r0, r8
 800066e:	45b8      	cmp	r8, r7
 8000670:	d907      	bls.n	8000682 <__udivmoddi4+0x24a>
 8000672:	19e7      	adds	r7, r4, r7
 8000674:	f100 31ff 	add.w	r1, r0, #4294967295
 8000678:	d22e      	bcs.n	80006d8 <__udivmoddi4+0x2a0>
 800067a:	45b8      	cmp	r8, r7
 800067c:	d92c      	bls.n	80006d8 <__udivmoddi4+0x2a0>
 800067e:	3802      	subs	r0, #2
 8000680:	4427      	add	r7, r4
 8000682:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000686:	eba7 0708 	sub.w	r7, r7, r8
 800068a:	fba0 8902 	umull	r8, r9, r0, r2
 800068e:	454f      	cmp	r7, r9
 8000690:	46c6      	mov	lr, r8
 8000692:	4649      	mov	r1, r9
 8000694:	d31a      	bcc.n	80006cc <__udivmoddi4+0x294>
 8000696:	d017      	beq.n	80006c8 <__udivmoddi4+0x290>
 8000698:	b15d      	cbz	r5, 80006b2 <__udivmoddi4+0x27a>
 800069a:	ebb3 020e 	subs.w	r2, r3, lr
 800069e:	eb67 0701 	sbc.w	r7, r7, r1
 80006a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80006a6:	40f2      	lsrs	r2, r6
 80006a8:	ea4c 0202 	orr.w	r2, ip, r2
 80006ac:	40f7      	lsrs	r7, r6
 80006ae:	e9c5 2700 	strd	r2, r7, [r5]
 80006b2:	2600      	movs	r6, #0
 80006b4:	4631      	mov	r1, r6
 80006b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ba:	462e      	mov	r6, r5
 80006bc:	4628      	mov	r0, r5
 80006be:	e70b      	b.n	80004d8 <__udivmoddi4+0xa0>
 80006c0:	4606      	mov	r6, r0
 80006c2:	e6e9      	b.n	8000498 <__udivmoddi4+0x60>
 80006c4:	4618      	mov	r0, r3
 80006c6:	e6fd      	b.n	80004c4 <__udivmoddi4+0x8c>
 80006c8:	4543      	cmp	r3, r8
 80006ca:	d2e5      	bcs.n	8000698 <__udivmoddi4+0x260>
 80006cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80006d0:	eb69 0104 	sbc.w	r1, r9, r4
 80006d4:	3801      	subs	r0, #1
 80006d6:	e7df      	b.n	8000698 <__udivmoddi4+0x260>
 80006d8:	4608      	mov	r0, r1
 80006da:	e7d2      	b.n	8000682 <__udivmoddi4+0x24a>
 80006dc:	4660      	mov	r0, ip
 80006de:	e78d      	b.n	80005fc <__udivmoddi4+0x1c4>
 80006e0:	4681      	mov	r9, r0
 80006e2:	e7b9      	b.n	8000658 <__udivmoddi4+0x220>
 80006e4:	4666      	mov	r6, ip
 80006e6:	e775      	b.n	80005d4 <__udivmoddi4+0x19c>
 80006e8:	4630      	mov	r0, r6
 80006ea:	e74a      	b.n	8000582 <__udivmoddi4+0x14a>
 80006ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80006f0:	4439      	add	r1, r7
 80006f2:	e713      	b.n	800051c <__udivmoddi4+0xe4>
 80006f4:	3802      	subs	r0, #2
 80006f6:	443c      	add	r4, r7
 80006f8:	e724      	b.n	8000544 <__udivmoddi4+0x10c>
 80006fa:	bf00      	nop

080006fc <__aeabi_idiv0>:
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop

08000700 <acquire_and_process_data>:
/* Define global variables */
char buf[50]; // Define printf
int buf_len = 0;
ai_error err;
//
int acquire_and_process_data(const void *in_data){
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

//	AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
//	AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

	for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e009      	b.n	8000722 <acquire_and_process_data+0x22>
	{
		((ai_float *)in_data)[i] = (ai_float)2.0f;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800071a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3301      	adds	r3, #1
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000728:	d3f1      	bcc.n	800070e <acquire_and_process_data+0xe>
	}

	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <aiInit>:
int aiInit(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
//  ai_error err;

  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <aiInit+0x74>)
 8000740:	607b      	str	r3, [r7, #4]
  err = ai_network_create_and_init(&network, acts, NULL);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	4619      	mov	r1, r3
 8000748:	4819      	ldr	r0, [pc, #100]	; (80007b0 <aiInit+0x78>)
 800074a:	f005 faed 	bl	8005d28 <ai_network_create_and_init>
 800074e:	4603      	mov	r3, r0
 8000750:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <aiInit+0x7c>)
 8000752:	6013      	str	r3, [r2, #0]
  if (err.type != AI_ERROR_NONE) {
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <aiInit+0x7c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00f      	beq.n	800077c <aiInit+0x44>
	  buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 800075c:	4916      	ldr	r1, [pc, #88]	; (80007b8 <aiInit+0x80>)
 800075e:	4817      	ldr	r0, [pc, #92]	; (80007bc <aiInit+0x84>)
 8000760:	f00d fb18 	bl	800dd94 <siprintf>
 8000764:	4603      	mov	r3, r0
 8000766:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <aiInit+0x88>)
 8000768:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <aiInit+0x88>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	b29a      	uxth	r2, r3
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	4912      	ldr	r1, [pc, #72]	; (80007bc <aiInit+0x84>)
 8000774:	4813      	ldr	r0, [pc, #76]	; (80007c4 <aiInit+0x8c>)
 8000776:	f003 fca1 	bl	80040bc <HAL_UART_Transmit>
	  while(1);
 800077a:	e7fe      	b.n	800077a <aiInit+0x42>
 };

  /* Reteive pointers to the model's input/output tensors */
  ai_input = ai_network_inputs_get(network, NULL);
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <aiInit+0x78>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f005 fb44 	bl	8005e10 <ai_network_inputs_get>
 8000788:	4603      	mov	r3, r0
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <aiInit+0x90>)
 800078c:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <aiInit+0x78>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f005 fb55 	bl	8005e44 <ai_network_outputs_get>
 800079a:	4603      	mov	r3, r0
 800079c:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <aiInit+0x94>)
 800079e:	6013      	str	r3, [r2, #0]

  return 0;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	24001ec0 	.word	0x24001ec0
 80007b0:	24001ebc 	.word	0x24001ebc
 80007b4:	2400c5b4 	.word	0x2400c5b4
 80007b8:	08010160 	.word	0x08010160
 80007bc:	2400c5b8 	.word	0x2400c5b8
 80007c0:	2400c3f8 	.word	0x2400c3f8
 80007c4:	2400c500 	.word	0x2400c500
 80007c8:	2400c3f0 	.word	0x2400c3f0
 80007cc:	2400c3f4 	.word	0x2400c3f4

080007d0 <aiRun>:

int aiRun(const void *in_data, void *out_data) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  ai_i32 n_batch;
//  ai_error err;

  /* 1 - Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <aiRun+0x6c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <aiRun+0x70>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	605a      	str	r2, [r3, #4]

  /* 2 - Perform the inference */
  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <aiRun+0x74>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <aiRun+0x6c>)
 80007f0:	6811      	ldr	r1, [r2, #0]
 80007f2:	4a13      	ldr	r2, [pc, #76]	; (8000840 <aiRun+0x70>)
 80007f4:	6812      	ldr	r2, [r2, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 fb7a 	bl	8005ef0 <ai_network_run>
 80007fc:	60f8      	str	r0, [r7, #12]
  if (n_batch != 1) {
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d016      	beq.n	8000832 <aiRun+0x62>
      err = ai_network_get_error(network);
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <aiRun+0x74>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f005 fa6b 	bl	8005ce4 <ai_network_get_error>
 800080e:	4603      	mov	r3, r0
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <aiRun+0x78>)
 8000812:	6013      	str	r3, [r2, #0]
	  buf_len = sprintf(buf, "Error: could not run inference \r\n");
 8000814:	490d      	ldr	r1, [pc, #52]	; (800084c <aiRun+0x7c>)
 8000816:	480e      	ldr	r0, [pc, #56]	; (8000850 <aiRun+0x80>)
 8000818:	f00d fabc 	bl	800dd94 <siprintf>
 800081c:	4603      	mov	r3, r0
 800081e:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <aiRun+0x84>)
 8000820:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <aiRun+0x84>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	b29a      	uxth	r2, r3
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	4909      	ldr	r1, [pc, #36]	; (8000850 <aiRun+0x80>)
 800082c:	480a      	ldr	r0, [pc, #40]	; (8000858 <aiRun+0x88>)
 800082e:	f003 fc45 	bl	80040bc <HAL_UART_Transmit>

  };

  return 0;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2400c3f0 	.word	0x2400c3f0
 8000840:	2400c3f4 	.word	0x2400c3f4
 8000844:	24001ebc 	.word	0x24001ebc
 8000848:	2400c5b4 	.word	0x2400c5b4
 800084c:	08010188 	.word	0x08010188
 8000850:	2400c5b8 	.word	0x2400c5b8
 8000854:	2400c3f8 	.word	0x2400c3f8
 8000858:	2400c500 	.word	0x2400c500

0800085c <softmax_process>:

	return 0;
}

int softmax_process(void *out_data)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
    float *logits = (float *)out_data;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	60bb      	str	r3, [r7, #8]

    float max_val = logits[0];
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	61fb      	str	r3, [r7, #28]
    for (int i = 1; i < AI_NETWORK_OUT_1_SIZE; i++)
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
 8000872:	e015      	b.n	80008a0 <softmax_process+0x44>
    {
        if (logits[i] > max_val)
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	4413      	add	r3, r2
 800087c:	edd3 7a00 	vldr	s15, [r3]
 8000880:	ed97 7a07 	vldr	s14, [r7, #28]
 8000884:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800088c:	d505      	bpl.n	800089a <softmax_process+0x3e>
        {
            max_val = logits[i];
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	4413      	add	r3, r2
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	61fb      	str	r3, [r7, #28]
    for (int i = 1; i < AI_NETWORK_OUT_1_SIZE; i++)
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	3301      	adds	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	2b63      	cmp	r3, #99	; 0x63
 80008a4:	dde6      	ble.n	8000874 <softmax_process+0x18>
        }
    }

    float sum_exp = 0.0f;
 80008a6:	f04f 0300 	mov.w	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	e024      	b.n	80008fc <softmax_process+0xa0>
    {
        logits[i] = expf(logits[i] - max_val);
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	4413      	add	r3, r2
 80008ba:	ed93 7a00 	vldr	s14, [r3]
 80008be:	edd7 7a07 	vldr	s15, [r7, #28]
 80008c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	18d4      	adds	r4, r2, r3
 80008ce:	eeb0 0a67 	vmov.f32	s0, s15
 80008d2:	f00f fb4f 	bl	800ff74 <expf>
 80008d6:	eef0 7a40 	vmov.f32	s15, s0
 80008da:	edc4 7a00 	vstr	s15, [r4]
        sum_exp += logits[i];
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	4413      	add	r3, r2
 80008e6:	edd3 7a00 	vldr	s15, [r3]
 80008ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80008ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f2:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	3301      	adds	r3, #1
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	2b63      	cmp	r3, #99	; 0x63
 8000900:	ddd7      	ble.n	80008b2 <softmax_process+0x56>
    }

    for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	e012      	b.n	800092e <softmax_process+0xd2>
    {
        logits[i] /= sum_exp;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	4413      	add	r3, r2
 8000910:	edd3 6a00 	vldr	s13, [r3]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	4413      	add	r3, r2
 800091c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000924:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3301      	adds	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b63      	cmp	r3, #99	; 0x63
 8000932:	dde9      	ble.n	8000908 <softmax_process+0xac>
    }

//    buf_len = sprintf(buf, "Output[0] = %f\r\n", logits[0]);
//    HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);

    return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3724      	adds	r7, #36	; 0x24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd90      	pop	{r4, r7, pc}
	...

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0ae      	sub	sp, #184	; 0xb8
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/* USER CODE BEGIN 1 */

	__HAL_RCC_CRC_CLK_ENABLE();
 8000946:	4ba9      	ldr	r3, [pc, #676]	; (8000bec <main+0x2ac>)
 8000948:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800094c:	4aa7      	ldr	r2, [pc, #668]	; (8000bec <main+0x2ac>)
 800094e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000952:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000956:	4ba5      	ldr	r3, [pc, #660]	; (8000bec <main+0x2ac>)
 8000958:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800095c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000960:	663b      	str	r3, [r7, #96]	; 0x60
 8000962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000964:	4ba2      	ldr	r3, [pc, #648]	; (8000bf0 <main+0x2b0>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096c:	2b00      	cmp	r3, #0
 800096e:	d11b      	bne.n	80009a8 <main+0x68>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000970:	f3bf 8f4f 	dsb	sy
}
 8000974:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000976:	f3bf 8f6f 	isb	sy
}
 800097a:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800097c:	4b9c      	ldr	r3, [pc, #624]	; (8000bf0 <main+0x2b0>)
 800097e:	2200      	movs	r2, #0
 8000980:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000984:	f3bf 8f4f 	dsb	sy
}
 8000988:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800098a:	f3bf 8f6f 	isb	sy
}
 800098e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000990:	4b97      	ldr	r3, [pc, #604]	; (8000bf0 <main+0x2b0>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	4a96      	ldr	r2, [pc, #600]	; (8000bf0 <main+0x2b0>)
 8000996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800099c:	f3bf 8f4f 	dsb	sy
}
 80009a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009a2:	f3bf 8f6f 	isb	sy
}
 80009a6:	e000      	b.n	80009aa <main+0x6a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009a8:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009aa:	4b91      	ldr	r3, [pc, #580]	; (8000bf0 <main+0x2b0>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d138      	bne.n	8000a28 <main+0xe8>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80009b6:	4b8e      	ldr	r3, [pc, #568]	; (8000bf0 <main+0x2b0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009be:	f3bf 8f4f 	dsb	sy
}
 80009c2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009c4:	4b8a      	ldr	r3, [pc, #552]	; (8000bf0 <main+0x2b0>)
 80009c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009ca:	66fb      	str	r3, [r7, #108]	; 0x6c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ce:	0b5b      	lsrs	r3, r3, #13
 80009d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009d4:	66bb      	str	r3, [r7, #104]	; 0x68
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009d8:	08db      	lsrs	r3, r3, #3
 80009da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009de:	667b      	str	r3, [r7, #100]	; 0x64
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009e2:	015a      	lsls	r2, r3, #5
 80009e4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009e8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009ec:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009ee:	4980      	ldr	r1, [pc, #512]	; (8000bf0 <main+0x2b0>)
 80009f0:	4313      	orrs	r3, r2
 80009f2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009f8:	1e5a      	subs	r2, r3, #1
 80009fa:	667a      	str	r2, [r7, #100]	; 0x64
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1ef      	bne.n	80009e0 <main+0xa0>
    } while(sets-- != 0U);
 8000a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a02:	1e5a      	subs	r2, r3, #1
 8000a04:	66ba      	str	r2, [r7, #104]	; 0x68
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1e5      	bne.n	80009d6 <main+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a0a:	f3bf 8f4f 	dsb	sy
}
 8000a0e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a10:	4b77      	ldr	r3, [pc, #476]	; (8000bf0 <main+0x2b0>)
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	4a76      	ldr	r2, [pc, #472]	; (8000bf0 <main+0x2b0>)
 8000a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a1a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a1c:	f3bf 8f4f 	dsb	sy
}
 8000a20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a22:	f3bf 8f6f 	isb	sy
}
 8000a26:	e000      	b.n	8000a2a <main+0xea>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a28:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2a:	f000 fbab 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2e:	f000 f8f5 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a32:	f000 f9d3 	bl	8000ddc <MX_GPIO_Init>
  MX_CRC_Init();
 8000a36:	f000 f963 	bl	8000d00 <MX_CRC_Init>
  MX_USART3_UART_Init();
 8000a3a:	f000 f983 	bl	8000d44 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE BEGIN 2 */

  HAL_UART_Init(&huart3);
 8000a3e:	486d      	ldr	r0, [pc, #436]	; (8000bf4 <main+0x2b4>)
 8000a40:	f003 faec 	bl	800401c <HAL_UART_Init>
  // Greetings
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8000a44:	496c      	ldr	r1, [pc, #432]	; (8000bf8 <main+0x2b8>)
 8000a46:	486d      	ldr	r0, [pc, #436]	; (8000bfc <main+0x2bc>)
 8000a48:	f00d f9a4 	bl	800dd94 <siprintf>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4a6c      	ldr	r2, [pc, #432]	; (8000c00 <main+0x2c0>)
 8000a50:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000a52:	4b6b      	ldr	r3, [pc, #428]	; (8000c00 <main+0x2c0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	2364      	movs	r3, #100	; 0x64
 8000a5a:	4968      	ldr	r1, [pc, #416]	; (8000bfc <main+0x2bc>)
 8000a5c:	4865      	ldr	r0, [pc, #404]	; (8000bf4 <main+0x2b4>)
 8000a5e:	f003 fb2d 	bl	80040bc <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */
	    /* USER CODE END WHILE */
		  /* 1 - Acquire, pre-process and fill the input buffers */
		  uint32_t start_time_init = HAL_GetTick(); // time start
 8000a62:	f000 fc15 	bl	8001290 <HAL_GetTick>
 8000a66:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
		  for (int i = 0; i < 1000; i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000a70:	e009      	b.n	8000a86 <main+0x146>
		  {
			  aiInit();
 8000a72:	f7ff fe61 	bl	8000738 <aiInit>
			  acquire_and_process_data(in_data);
 8000a76:	4863      	ldr	r0, [pc, #396]	; (8000c04 <main+0x2c4>)
 8000a78:	f7ff fe42 	bl	8000700 <acquire_and_process_data>
		  for (int i = 0; i < 1000; i++)
 8000a7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000a80:	3301      	adds	r3, #1
 8000a82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a8e:	dbf0      	blt.n	8000a72 <main+0x132>
		  }
		  uint32_t end_time_init = HAL_GetTick(); // time end
 8000a90:	f000 fbfe 	bl	8001290 <HAL_GetTick>
 8000a94:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  uint32_t total_time_init = end_time_init - start_time_init;
 8000a98:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000a9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		  float average_time_init = (float)total_time_init / 1000; // ms
 8000aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000aaa:	ee07 3a90 	vmov	s15, r3
 8000aae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ab2:	eddf 6a55 	vldr	s13, [pc, #340]	; 8000c08 <main+0x2c8>
 8000ab6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aba:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		  char buf_init[32];
		  int buf_len_init = sprintf(buf_init, "Init Time: %.3f ms\r\n", average_time_init);
 8000abe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8000ac2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac6:	4638      	mov	r0, r7
 8000ac8:	ec53 2b17 	vmov	r2, r3, d7
 8000acc:	494f      	ldr	r1, [pc, #316]	; (8000c0c <main+0x2cc>)
 8000ace:	f00d f961 	bl	800dd94 <siprintf>
 8000ad2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		  HAL_UART_Transmit(&huart3, (uint8_t *)buf_init, buf_len_init, HAL_MAX_DELAY);
 8000ad6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	4639      	mov	r1, r7
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	4844      	ldr	r0, [pc, #272]	; (8000bf4 <main+0x2b4>)
 8000ae4:	f003 faea 	bl	80040bc <HAL_UART_Transmit>


		  /* 2 - Call inference engine */
		  uint32_t start_time_inf = HAL_GetTick(); // time start
 8000ae8:	f000 fbd2 	bl	8001290 <HAL_GetTick>
 8000aec:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

		  for (int i = 0; i < 1; i++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000af6:	e008      	b.n	8000b0a <main+0x1ca>
		  {
			  aiRun(in_data, out_data);
 8000af8:	4945      	ldr	r1, [pc, #276]	; (8000c10 <main+0x2d0>)
 8000afa:	4842      	ldr	r0, [pc, #264]	; (8000c04 <main+0x2c4>)
 8000afc:	f7ff fe68 	bl	80007d0 <aiRun>
		  for (int i = 0; i < 1; i++)
 8000b00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b04:	3301      	adds	r3, #1
 8000b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000b0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	ddf2      	ble.n	8000af8 <main+0x1b8>
		  }

		  uint32_t end_time_inf = HAL_GetTick(); // time end
 8000b12:	f000 fbbd 	bl	8001290 <HAL_GetTick>
 8000b16:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		  uint32_t total_time_inf = end_time_inf - start_time_inf;
 8000b1a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000b1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  float average_time_inf = (float)total_time_inf / 1; // ms
 8000b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b2c:	ee07 3a90 	vmov	s15, r3
 8000b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b34:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		  char buf_inf[32];
		  int buf_len_inf = sprintf(buf_inf, "CNN Time: %.3f ms\r\n", average_time_inf);
 8000b38:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000b3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b40:	f107 0020 	add.w	r0, r7, #32
 8000b44:	ec53 2b17 	vmov	r2, r3, d7
 8000b48:	4932      	ldr	r1, [pc, #200]	; (8000c14 <main+0x2d4>)
 8000b4a:	f00d f923 	bl	800dd94 <siprintf>
 8000b4e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		  HAL_UART_Transmit(&huart3, (uint8_t *)buf_inf, buf_len_inf, HAL_MAX_DELAY);
 8000b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	f107 0120 	add.w	r1, r7, #32
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b60:	4824      	ldr	r0, [pc, #144]	; (8000bf4 <main+0x2b4>)
 8000b62:	f003 faab 	bl	80040bc <HAL_UART_Transmit>

		  /* 3 - Post-process the predictions */
	//	  post_process(out_data);
		  uint32_t start_time_sm = HAL_GetTick(); // time start
 8000b66:	f000 fb93 	bl	8001290 <HAL_GetTick>
 8000b6a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		  for (int i = 0; i < 1000; i++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000b74:	e007      	b.n	8000b86 <main+0x246>
		  {
		      softmax_process(out_data);
 8000b76:	4826      	ldr	r0, [pc, #152]	; (8000c10 <main+0x2d0>)
 8000b78:	f7ff fe70 	bl	800085c <softmax_process>
		  for (int i = 0; i < 1000; i++)
 8000b7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b80:	3301      	adds	r3, #1
 8000b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b8e:	dbf2      	blt.n	8000b76 <main+0x236>
		  }
		  uint32_t end_time_sm = HAL_GetTick(); // time end
 8000b90:	f000 fb7e 	bl	8001290 <HAL_GetTick>
 8000b94:	67f8      	str	r0, [r7, #124]	; 0x7c
		  uint32_t total_time_sm = end_time_sm - start_time_sm;
 8000b96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000b98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	67bb      	str	r3, [r7, #120]	; 0x78
		  float average_time_sm = (float)total_time_sm / 1000; // ms
 8000ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ba2:	ee07 3a90 	vmov	s15, r3
 8000ba6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000baa:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000c08 <main+0x2c8>
 8000bae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bb2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		  char buf_sm[32];
		  int buf_len_sm = sprintf(buf_sm, "Softmax Time: %.3f ms\r\n", average_time_sm);
 8000bb6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8000bba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bbe:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000bc2:	ec53 2b17 	vmov	r2, r3, d7
 8000bc6:	4914      	ldr	r1, [pc, #80]	; (8000c18 <main+0x2d8>)
 8000bc8:	f00d f8e4 	bl	800dd94 <siprintf>
 8000bcc:	6738      	str	r0, [r7, #112]	; 0x70
		  HAL_UART_Transmit(&huart3, (uint8_t *)buf_sm, buf_len_sm, HAL_MAX_DELAY);
 8000bce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <main+0x2b4>)
 8000bdc:	f003 fa6e 	bl	80040bc <HAL_UART_Transmit>


		  /* USER CODE END WHILE */
		  HAL_Delay(500);
 8000be0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be4:	f000 fb60 	bl	80012a8 <HAL_Delay>
  {
 8000be8:	e73b      	b.n	8000a62 <main+0x122>
 8000bea:	bf00      	nop
 8000bec:	58024400 	.word	0x58024400
 8000bf0:	e000ed00 	.word	0xe000ed00
 8000bf4:	2400c500 	.word	0x2400c500
 8000bf8:	080101b8 	.word	0x080101b8
 8000bfc:	2400c5b8 	.word	0x2400c5b8
 8000c00:	2400c3f8 	.word	0x2400c3f8
 8000c04:	24009260 	.word	0x24009260
 8000c08:	447a0000 	.word	0x447a0000
 8000c0c:	080101d4 	.word	0x080101d4
 8000c10:	2400c260 	.word	0x2400c260
 8000c14:	080101ec 	.word	0x080101ec
 8000c18:	08010200 	.word	0x08010200

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b09c      	sub	sp, #112	; 0x70
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	224c      	movs	r2, #76	; 0x4c
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f00c fbae 	bl	800d38c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2220      	movs	r2, #32
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f00c fba8 	bl	800d38c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c3c:	2004      	movs	r0, #4
 8000c3e:	f000 fed5 	bl	80019ec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <SystemClock_Config+0xe0>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c4e:	4a2b      	ldr	r2, [pc, #172]	; (8000cfc <SystemClock_Config+0xe0>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <SystemClock_Config+0xe0>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c62:	bf00      	nop
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <SystemClock_Config+0xe0>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c70:	d1f8      	bne.n	8000c64 <SystemClock_Config+0x48>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c72:	2302      	movs	r3, #2
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7a:	2340      	movs	r3, #64	; 0x40
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c82:	2300      	movs	r3, #0
 8000c84:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c86:	2304      	movs	r3, #4
 8000c88:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 fef7 	bl	8001aa0 <HAL_RCC_OscConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000cb8:	f000 f8ba 	bl	8000e30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbc:	233f      	movs	r3, #63	; 0x3f
 8000cbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ccc:	2340      	movs	r3, #64	; 0x40
 8000cce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cd0:	2340      	movs	r3, #64	; 0x40
 8000cd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cda:	2340      	movs	r3, #64	; 0x40
 8000cdc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 fae0 	bl	80022a8 <HAL_RCC_ClockConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000cee:	f000 f89f 	bl	8000e30 <Error_Handler>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3770      	adds	r7, #112	; 0x70
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	58024800 	.word	0x58024800

08000d00 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <MX_CRC_Init+0x3c>)
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <MX_CRC_Init+0x40>)
 8000d08:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_CRC_Init+0x3c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_CRC_Init+0x3c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_CRC_Init+0x3c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_CRC_Init+0x3c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_CRC_Init+0x3c>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_CRC_Init+0x3c>)
 8000d2a:	f000 fbc5 	bl	80014b8 <HAL_CRC_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d34:	f000 f87c 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2400c590 	.word	0x2400c590
 8000d40:	40023000 	.word	0x40023000

08000d44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d48:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d4a:	4a23      	ldr	r2, [pc, #140]	; (8000dd8 <MX_USART3_UART_Init+0x94>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d8c:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d8e:	f003 f945 	bl	800401c <HAL_UART_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d98:	f000 f84a 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000da0:	f004 fa6e 	bl	8005280 <HAL_UARTEx_SetTxFifoThreshold>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000daa:	f000 f841 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000db2:	f004 faa3 	bl	80052fc <HAL_UARTEx_SetRxFifoThreshold>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dbc:	f000 f838 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000dc2:	f004 fa24 	bl	800520e <HAL_UARTEx_DisableFifoMode>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dcc:	f000 f830 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2400c500 	.word	0x2400c500
 8000dd8:	40004800 	.word	0x40004800

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_GPIO_Init+0x50>)
 8000de4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000de8:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <MX_GPIO_Init+0x50>)
 8000dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_GPIO_Init+0x50>)
 8000df4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_GPIO_Init+0x50>)
 8000e02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <MX_GPIO_Init+0x50>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_GPIO_Init+0x50>)
 8000e12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]

}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	58024400 	.word	0x58024400

08000e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <Error_Handler+0x8>
	...

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_MspInit+0x30>)
 8000e44:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e48:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HAL_MspInit+0x30>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_MspInit+0x30>)
 8000e54:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	58024400 	.word	0x58024400

08000e70 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <HAL_CRC_MspInit+0x3c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d10e      	bne.n	8000ea0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_CRC_MspInit+0x40>)
 8000e84:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e88:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <HAL_CRC_MspInit+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <HAL_CRC_MspInit+0x40>)
 8000e94:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	40023000 	.word	0x40023000
 8000eb0:	58024400 	.word	0x58024400

08000eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0b8      	sub	sp, #224	; 0xe0
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	22b8      	movs	r2, #184	; 0xb8
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f00c fa59 	bl	800d38c <memset>
  if(huart->Instance==USART3)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <HAL_UART_MspInit+0xc0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d142      	bne.n	8000f6a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 fd64 	bl	80029c0 <HAL_RCCEx_PeriphCLKConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000efe:	f7ff ff97 	bl	8000e30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f04:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f0e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f14:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f26:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <HAL_UART_MspInit+0xc8>)
 8000f66:	f000 fb91 	bl	800168c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	37e0      	adds	r7, #224	; 0xe0
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40004800 	.word	0x40004800
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	58020c00 	.word	0x58020c00

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <NMI_Handler+0x4>

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <MemManage_Handler+0x4>

08000f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <UsageFault_Handler+0x4>

08000f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fcc:	f000 f94c 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f00c f982 	bl	800d30c <__errno>
 8001008:	4603      	mov	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20020000 	.word	0x20020000
 8001034:	00000800 	.word	0x00000800
 8001038:	2400c3fc 	.word	0x2400c3fc
 800103c:	20000000 	.word	0x20000000

08001040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001044:	4b32      	ldr	r3, [pc, #200]	; (8001110 <SystemInit+0xd0>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104a:	4a31      	ldr	r2, [pc, #196]	; (8001110 <SystemInit+0xd0>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001054:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <SystemInit+0xd4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 030f 	and.w	r3, r3, #15
 800105c:	2b02      	cmp	r3, #2
 800105e:	d807      	bhi.n	8001070 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001060:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <SystemInit+0xd4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f023 030f 	bic.w	r3, r3, #15
 8001068:	4a2a      	ldr	r2, [pc, #168]	; (8001114 <SystemInit+0xd4>)
 800106a:	f043 0303 	orr.w	r3, r3, #3
 800106e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001070:	4b29      	ldr	r3, [pc, #164]	; (8001118 <SystemInit+0xd8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a28      	ldr	r2, [pc, #160]	; (8001118 <SystemInit+0xd8>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <SystemInit+0xd8>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <SystemInit+0xd8>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4924      	ldr	r1, [pc, #144]	; (8001118 <SystemInit+0xd8>)
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <SystemInit+0xdc>)
 800108a:	4013      	ands	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <SystemInit+0xd4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <SystemInit+0xd4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 030f 	bic.w	r3, r3, #15
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <SystemInit+0xd4>)
 80010a4:	f043 0303 	orr.w	r3, r3, #3
 80010a8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <SystemInit+0xd8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <SystemInit+0xd8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <SystemInit+0xd8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <SystemInit+0xd8>)
 80010be:	4a18      	ldr	r2, [pc, #96]	; (8001120 <SystemInit+0xe0>)
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <SystemInit+0xd8>)
 80010c4:	4a17      	ldr	r2, [pc, #92]	; (8001124 <SystemInit+0xe4>)
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <SystemInit+0xd8>)
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <SystemInit+0xe8>)
 80010cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <SystemInit+0xd8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <SystemInit+0xd8>)
 80010d6:	4a14      	ldr	r2, [pc, #80]	; (8001128 <SystemInit+0xe8>)
 80010d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <SystemInit+0xd8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <SystemInit+0xd8>)
 80010e2:	4a11      	ldr	r2, [pc, #68]	; (8001128 <SystemInit+0xe8>)
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <SystemInit+0xd8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <SystemInit+0xd8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a09      	ldr	r2, [pc, #36]	; (8001118 <SystemInit+0xd8>)
 80010f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <SystemInit+0xd8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <SystemInit+0xec>)
 8001100:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001104:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00
 8001114:	52002000 	.word	0x52002000
 8001118:	58024400 	.word	0x58024400
 800111c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001120:	02020200 	.word	0x02020200
 8001124:	01ff0000 	.word	0x01ff0000
 8001128:	01010280 	.word	0x01010280
 800112c:	52004000 	.word	0x52004000

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001168 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001134:	f7ff ff84 	bl	8001040 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113a:	490d      	ldr	r1, [pc, #52]	; (8001170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001150:	4c0a      	ldr	r4, [pc, #40]	; (800117c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800115e:	f00c f8db 	bl	800d318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff fbed 	bl	8000940 <main>
  bx  lr
 8001166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800116c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001170:	24001e8c 	.word	0x24001e8c
  ldr r2, =_sidata
 8001174:	0806f1f0 	.word	0x0806f1f0
  ldr r2, =_sbss
 8001178:	24001ea0 	.word	0x24001ea0
  ldr r4, =_ebss
 800117c:	2400c600 	.word	0x2400c600

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118a:	2003      	movs	r0, #3
 800118c:	f000 f962 	bl	8001454 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001190:	f001 fa40 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8001194:	4602      	mov	r2, r0
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_Init+0x68>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	4913      	ldr	r1, [pc, #76]	; (80011f0 <HAL_Init+0x6c>)
 80011a2:	5ccb      	ldrb	r3, [r1, r3]
 80011a4:	f003 031f 	and.w	r3, r3, #31
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_Init+0x68>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_Init+0x6c>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	fa22 f303 	lsr.w	r3, r2, r3
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <HAL_Init+0x70>)
 80011c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011c8:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <HAL_Init+0x74>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ce:	2000      	movs	r0, #0
 80011d0:	f000 f814 	bl	80011fc <HAL_InitTick>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e002      	b.n	80011e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011de:	f7ff fe2d 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	58024400 	.word	0x58024400
 80011f0:	08010248 	.word	0x08010248
 80011f4:	24000004 	.word	0x24000004
 80011f8:	24000000 	.word	0x24000000

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_InitTick+0x60>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e021      	b.n	8001254 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <HAL_InitTick+0x64>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_InitTick+0x60>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f939 	bl	800149e <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 f911 	bl	800146a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x68>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2400000c 	.word	0x2400000c
 8001260:	24000000 	.word	0x24000000
 8001264:	24000008 	.word	0x24000008

08001268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	2400000c 	.word	0x2400000c
 800128c:	2400c5ec 	.word	0x2400c5ec

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2400c5ec 	.word	0x2400c5ec

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffee 	bl	8001290 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffde 	bl	8001290 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2400000c 	.word	0x2400000c

080012f0 <__NVIC_SetPriorityGrouping>:
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <__NVIC_SetPriorityGrouping+0x40>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	4313      	orrs	r3, r2
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	; (8001330 <__NVIC_SetPriorityGrouping+0x40>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00
 8001334:	05fa0000 	.word	0x05fa0000

08001338 <__NVIC_GetPriorityGrouping>:
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_SetPriority>:
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001364:	2b00      	cmp	r3, #0
 8001366:	db0a      	blt.n	800137e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	490c      	ldr	r1, [pc, #48]	; (80013a0 <__NVIC_SetPriority+0x4c>)
 800136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	440b      	add	r3, r1
 8001378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800137c:	e00a      	b.n	8001394 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <__NVIC_SetPriority+0x50>)
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	3b04      	subs	r3, #4
 800138c:	0112      	lsls	r2, r2, #4
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	440b      	add	r3, r1
 8001392:	761a      	strb	r2, [r3, #24]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000e100 	.word	0xe000e100
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <NVIC_EncodePriority>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f1c3 0307 	rsb	r3, r3, #7
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	bf28      	it	cs
 80013c6:	2304      	movcs	r3, #4
 80013c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3304      	adds	r3, #4
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d902      	bls.n	80013d8 <NVIC_EncodePriority+0x30>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3b03      	subs	r3, #3
 80013d6:	e000      	b.n	80013da <NVIC_EncodePriority+0x32>
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f0:	f04f 31ff 	mov.w	r1, #4294967295
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	4313      	orrs	r3, r2
}
 8001402:	4618      	mov	r0, r3
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001420:	d301      	bcc.n	8001426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <SysTick_Config+0x40>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142e:	210f      	movs	r1, #15
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f7ff ff8e 	bl	8001354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SysTick_Config+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SysTick_Config+0x40>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff47 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff5e 	bl	8001338 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff90 	bl	80013a8 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5f 	bl	8001354 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffb2 	bl	8001410 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e054      	b.n	8001574 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7f5b      	ldrb	r3, [r3, #29]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d105      	bne.n	80014e0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fcc8 	bl	8000e70 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2202      	movs	r2, #2
 80014e4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	791b      	ldrb	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10c      	bne.n	8001508 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a22      	ldr	r2, [pc, #136]	; (800157c <HAL_CRC_Init+0xc4>)
 80014f4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0218 	bic.w	r2, r2, #24
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	e00c      	b.n	8001522 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6899      	ldr	r1, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	461a      	mov	r2, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f834 	bl	8001580 <HAL_CRCEx_Polynomial_Set>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e028      	b.n	8001574 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	795b      	ldrb	r3, [r3, #5]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f04f 32ff 	mov.w	r2, #4294967295
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	e004      	b.n	8001540 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6912      	ldr	r2, [r2, #16]
 800153e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699a      	ldr	r2, [r3, #24]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	04c11db7 	.word	0x04c11db7

08001580 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001590:	231f      	movs	r3, #31
 8001592:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001594:	bf00      	nop
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1e5a      	subs	r2, r3, #1
 800159a:	613a      	str	r2, [r7, #16]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d009      	beq.n	80015b4 <HAL_CRCEx_Polynomial_Set+0x34>
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	f003 031f 	and.w	r3, r3, #31
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_CRCEx_Polynomial_Set+0x16>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b18      	cmp	r3, #24
 80015b8:	d846      	bhi.n	8001648 <HAL_CRCEx_Polynomial_Set+0xc8>
 80015ba:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	0800164f 	.word	0x0800164f
 80015c4:	08001649 	.word	0x08001649
 80015c8:	08001649 	.word	0x08001649
 80015cc:	08001649 	.word	0x08001649
 80015d0:	08001649 	.word	0x08001649
 80015d4:	08001649 	.word	0x08001649
 80015d8:	08001649 	.word	0x08001649
 80015dc:	08001649 	.word	0x08001649
 80015e0:	0800163d 	.word	0x0800163d
 80015e4:	08001649 	.word	0x08001649
 80015e8:	08001649 	.word	0x08001649
 80015ec:	08001649 	.word	0x08001649
 80015f0:	08001649 	.word	0x08001649
 80015f4:	08001649 	.word	0x08001649
 80015f8:	08001649 	.word	0x08001649
 80015fc:	08001649 	.word	0x08001649
 8001600:	08001631 	.word	0x08001631
 8001604:	08001649 	.word	0x08001649
 8001608:	08001649 	.word	0x08001649
 800160c:	08001649 	.word	0x08001649
 8001610:	08001649 	.word	0x08001649
 8001614:	08001649 	.word	0x08001649
 8001618:	08001649 	.word	0x08001649
 800161c:	08001649 	.word	0x08001649
 8001620:	08001625 	.word	0x08001625
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	2b06      	cmp	r3, #6
 8001628:	d913      	bls.n	8001652 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800162e:	e010      	b.n	8001652 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	2b07      	cmp	r3, #7
 8001634:	d90f      	bls.n	8001656 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800163a:	e00c      	b.n	8001656 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	2b0f      	cmp	r3, #15
 8001640:	d90b      	bls.n	800165a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001646:	e008      	b.n	800165a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	75fb      	strb	r3, [r7, #23]
      break;
 800164c:	e006      	b.n	800165c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800164e:	bf00      	nop
 8001650:	e004      	b.n	800165c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001652:	bf00      	nop
 8001654:	e002      	b.n	800165c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001656:	bf00      	nop
 8001658:	e000      	b.n	800165c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800165a:	bf00      	nop
  }
  if (status == HAL_OK)
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10d      	bne.n	800167e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 0118 	bic.w	r1, r3, #24
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	430a      	orrs	r2, r1
 800167c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800167e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001680:	4618      	mov	r0, r3
 8001682:	371c      	adds	r7, #28
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800169a:	4b89      	ldr	r3, [pc, #548]	; (80018c0 <HAL_GPIO_Init+0x234>)
 800169c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800169e:	e194      	b.n	80019ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8186 	beq.w	80019c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d005      	beq.n	80016d0 <HAL_GPIO_Init+0x44>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d130      	bne.n	8001732 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001706:	2201      	movs	r2, #1
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	091b      	lsrs	r3, r3, #4
 800171c:	f003 0201 	and.w	r2, r3, #1
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	2b03      	cmp	r3, #3
 800173c:	d017      	beq.n	800176e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d123      	bne.n	80017c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	08da      	lsrs	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3208      	adds	r2, #8
 8001782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	220f      	movs	r2, #15
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	691a      	ldr	r2, [r3, #16]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	69b9      	ldr	r1, [r7, #24]
 80017be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	2203      	movs	r2, #3
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0203 	and.w	r2, r3, #3
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80e0 	beq.w	80019c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001804:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <HAL_GPIO_Init+0x238>)
 8001806:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800180a:	4a2e      	ldr	r2, [pc, #184]	; (80018c4 <HAL_GPIO_Init+0x238>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001814:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <HAL_GPIO_Init+0x238>)
 8001816:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001822:	4a29      	ldr	r2, [pc, #164]	; (80018c8 <HAL_GPIO_Init+0x23c>)
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a20      	ldr	r2, [pc, #128]	; (80018cc <HAL_GPIO_Init+0x240>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d052      	beq.n	80018f4 <HAL_GPIO_Init+0x268>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a1f      	ldr	r2, [pc, #124]	; (80018d0 <HAL_GPIO_Init+0x244>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d031      	beq.n	80018ba <HAL_GPIO_Init+0x22e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <HAL_GPIO_Init+0x248>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d02b      	beq.n	80018b6 <HAL_GPIO_Init+0x22a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <HAL_GPIO_Init+0x24c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d025      	beq.n	80018b2 <HAL_GPIO_Init+0x226>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a1c      	ldr	r2, [pc, #112]	; (80018dc <HAL_GPIO_Init+0x250>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d01f      	beq.n	80018ae <HAL_GPIO_Init+0x222>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <HAL_GPIO_Init+0x254>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d019      	beq.n	80018aa <HAL_GPIO_Init+0x21e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a1a      	ldr	r2, [pc, #104]	; (80018e4 <HAL_GPIO_Init+0x258>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_GPIO_Init+0x21a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_GPIO_Init+0x25c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00d      	beq.n	80018a2 <HAL_GPIO_Init+0x216>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a18      	ldr	r2, [pc, #96]	; (80018ec <HAL_GPIO_Init+0x260>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d007      	beq.n	800189e <HAL_GPIO_Init+0x212>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_GPIO_Init+0x264>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d101      	bne.n	800189a <HAL_GPIO_Init+0x20e>
 8001896:	2309      	movs	r3, #9
 8001898:	e02d      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 800189a:	230a      	movs	r3, #10
 800189c:	e02b      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 800189e:	2308      	movs	r3, #8
 80018a0:	e029      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018a2:	2307      	movs	r3, #7
 80018a4:	e027      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018a6:	2306      	movs	r3, #6
 80018a8:	e025      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018aa:	2305      	movs	r3, #5
 80018ac:	e023      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018ae:	2304      	movs	r3, #4
 80018b0:	e021      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018b2:	2303      	movs	r3, #3
 80018b4:	e01f      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e01d      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e01b      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018be:	bf00      	nop
 80018c0:	58000080 	.word	0x58000080
 80018c4:	58024400 	.word	0x58024400
 80018c8:	58000400 	.word	0x58000400
 80018cc:	58020000 	.word	0x58020000
 80018d0:	58020400 	.word	0x58020400
 80018d4:	58020800 	.word	0x58020800
 80018d8:	58020c00 	.word	0x58020c00
 80018dc:	58021000 	.word	0x58021000
 80018e0:	58021400 	.word	0x58021400
 80018e4:	58021800 	.word	0x58021800
 80018e8:	58021c00 	.word	0x58021c00
 80018ec:	58022000 	.word	0x58022000
 80018f0:	58022400 	.word	0x58022400
 80018f4:	2300      	movs	r3, #0
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	f002 0203 	and.w	r2, r2, #3
 80018fc:	0092      	lsls	r2, r2, #2
 80018fe:	4093      	lsls	r3, r2
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001906:	4938      	ldr	r1, [pc, #224]	; (80019e8 <HAL_GPIO_Init+0x35c>)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800193a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	3301      	adds	r3, #1
 80019c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f47f ae63 	bne.w	80016a0 <HAL_GPIO_Init+0x14>
  }
}
 80019da:	bf00      	nop
 80019dc:	bf00      	nop
 80019de:	3724      	adds	r7, #36	; 0x24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	58000400 	.word	0x58000400

080019ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80019f4:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <HAL_PWREx_ConfigSupply+0xb0>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	2b06      	cmp	r3, #6
 80019fe:	d00a      	beq.n	8001a16 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a00:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d001      	beq.n	8001a12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e040      	b.n	8001a94 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e03e      	b.n	8001a94 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a16:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001a1e:	491f      	ldr	r1, [pc, #124]	; (8001a9c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a26:	f7ff fc33 	bl	8001290 <HAL_GetTick>
 8001a2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a2c:	e009      	b.n	8001a42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a2e:	f7ff fc2f 	bl	8001290 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a3c:	d901      	bls.n	8001a42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e028      	b.n	8001a94 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a4e:	d1ee      	bne.n	8001a2e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b1e      	cmp	r3, #30
 8001a54:	d008      	beq.n	8001a68 <HAL_PWREx_ConfigSupply+0x7c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b2e      	cmp	r3, #46	; 0x2e
 8001a5a:	d005      	beq.n	8001a68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b1d      	cmp	r3, #29
 8001a60:	d002      	beq.n	8001a68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b2d      	cmp	r3, #45	; 0x2d
 8001a66:	d114      	bne.n	8001a92 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a68:	f7ff fc12 	bl	8001290 <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a6e:	e009      	b.n	8001a84 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a70:	f7ff fc0e 	bl	8001290 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a7e:	d901      	bls.n	8001a84 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e007      	b.n	8001a94 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a90:	d1ee      	bne.n	8001a70 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	58024800 	.word	0x58024800

08001aa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e3f3      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 80b3 	beq.w	8001c26 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac0:	4b9e      	ldr	r3, [pc, #632]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001aca:	4b9c      	ldr	r3, [pc, #624]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad2:	2b10      	cmp	r3, #16
 8001ad4:	d007      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x46>
 8001ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad8:	2b18      	cmp	r3, #24
 8001ada:	d112      	bne.n	8001b02 <HAL_RCC_OscConfig+0x62>
 8001adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d10d      	bne.n	8001b02 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae6:	4b95      	ldr	r3, [pc, #596]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 8098 	beq.w	8001c24 <HAL_RCC_OscConfig+0x184>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f040 8093 	bne.w	8001c24 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e3cb      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x7a>
 8001b0c:	4b8b      	ldr	r3, [pc, #556]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a8a      	ldr	r2, [pc, #552]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e058      	b.n	8001bcc <HAL_RCC_OscConfig+0x12c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d112      	bne.n	8001b48 <HAL_RCC_OscConfig+0xa8>
 8001b22:	4b86      	ldr	r3, [pc, #536]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a85      	ldr	r2, [pc, #532]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b83      	ldr	r3, [pc, #524]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a82      	ldr	r2, [pc, #520]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b80      	ldr	r3, [pc, #512]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7f      	ldr	r2, [pc, #508]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e041      	b.n	8001bcc <HAL_RCC_OscConfig+0x12c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b50:	d112      	bne.n	8001b78 <HAL_RCC_OscConfig+0xd8>
 8001b52:	4b7a      	ldr	r3, [pc, #488]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a79      	ldr	r2, [pc, #484]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b77      	ldr	r3, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a76      	ldr	r2, [pc, #472]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b74      	ldr	r3, [pc, #464]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a73      	ldr	r2, [pc, #460]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e029      	b.n	8001bcc <HAL_RCC_OscConfig+0x12c>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001b80:	d112      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x108>
 8001b82:	4b6e      	ldr	r3, [pc, #440]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6d      	ldr	r2, [pc, #436]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a6a      	ldr	r2, [pc, #424]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b68      	ldr	r3, [pc, #416]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a67      	ldr	r2, [pc, #412]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e011      	b.n	8001bcc <HAL_RCC_OscConfig+0x12c>
 8001ba8:	4b64      	ldr	r3, [pc, #400]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a63      	ldr	r2, [pc, #396]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b61      	ldr	r3, [pc, #388]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a60      	ldr	r2, [pc, #384]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b5e      	ldr	r3, [pc, #376]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a5d      	ldr	r2, [pc, #372]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001bc6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fb5c 	bl	8001290 <HAL_GetTick>
 8001bd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fb58 	bl	8001290 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e355      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bee:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x13c>
 8001bfa:	e014      	b.n	8001c26 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fb48 	bl	8001290 <HAL_GetTick>
 8001c00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fb44 	bl	8001290 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e341      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c16:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x164>
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 808c 	beq.w	8001d4c <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c34:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1ba>
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	2b18      	cmp	r3, #24
 8001c4e:	d137      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x220>
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d132      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1d2>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e313      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 0219 	bic.w	r2, r3, #25
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	492f      	ldr	r1, [pc, #188]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c84:	f7ff fb04 	bl	8001290 <HAL_GetTick>
 8001c88:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fb00 	bl	8001290 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e2fd      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c9e:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	061b      	lsls	r3, r3, #24
 8001cb8:	4920      	ldr	r1, [pc, #128]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cbe:	e045      	b.n	8001d4c <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d026      	beq.n	8001d16 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 0219 	bic.w	r2, r3, #25
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4919      	ldr	r1, [pc, #100]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7ff fad9 	bl	8001290 <HAL_GetTick>
 8001cde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7ff fad5 	bl	8001290 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e2d2      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	061b      	lsls	r3, r3, #24
 8001d0e:	490b      	ldr	r1, [pc, #44]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
 8001d14:	e01a      	b.n	8001d4c <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7ff fab5 	bl	8001290 <HAL_GetTick>
 8001d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2a:	f7ff fab1 	bl	8001290 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d903      	bls.n	8001d40 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e2ae      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
 8001d3c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d40:	4b99      	ldr	r3, [pc, #612]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ee      	bne.n	8001d2a <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d06a      	beq.n	8001e2e <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d58:	4b93      	ldr	r3, [pc, #588]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d60:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d62:	4b91      	ldr	r3, [pc, #580]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d007      	beq.n	8001d7e <HAL_RCC_OscConfig+0x2de>
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b18      	cmp	r3, #24
 8001d72:	d11b      	bne.n	8001dac <HAL_RCC_OscConfig+0x30c>
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d116      	bne.n	8001dac <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d7e:	4b8a      	ldr	r3, [pc, #552]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2f6>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	2b80      	cmp	r3, #128	; 0x80
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e281      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d96:	4b84      	ldr	r3, [pc, #528]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	061b      	lsls	r3, r3, #24
 8001da4:	4980      	ldr	r1, [pc, #512]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001daa:	e040      	b.n	8001e2e <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d023      	beq.n	8001dfc <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001db4:	4b7c      	ldr	r3, [pc, #496]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a7b      	ldr	r2, [pc, #492]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fa66 	bl	8001290 <HAL_GetTick>
 8001dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fa62 	bl	8001290 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e25f      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dda:	4b73      	ldr	r3, [pc, #460]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001de6:	4b70      	ldr	r3, [pc, #448]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	061b      	lsls	r3, r3, #24
 8001df4:	496c      	ldr	r1, [pc, #432]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60cb      	str	r3, [r1, #12]
 8001dfa:	e018      	b.n	8001e2e <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001dfc:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a69      	ldr	r2, [pc, #420]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff fa42 	bl	8001290 <HAL_GetTick>
 8001e0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e10:	f7ff fa3e 	bl	8001290 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e23b      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e22:	4b61      	ldr	r3, [pc, #388]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d036      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d019      	beq.n	8001e76 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e46:	4a58      	ldr	r2, [pc, #352]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4e:	f7ff fa1f 	bl	8001290 <HAL_GetTick>
 8001e52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e56:	f7ff fa1b 	bl	8001290 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e218      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e68:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x3b6>
 8001e74:	e018      	b.n	8001ea8 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e76:	4b4c      	ldr	r3, [pc, #304]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e7a:	4a4b      	ldr	r2, [pc, #300]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7ff fa05 	bl	8001290 <HAL_GetTick>
 8001e86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8a:	f7ff fa01 	bl	8001290 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e1fe      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e9c:	4b42      	ldr	r3, [pc, #264]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d036      	beq.n	8001f22 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d019      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ebc:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a39      	ldr	r2, [pc, #228]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001ec2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ec6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ec8:	f7ff f9e2 	bl	8001290 <HAL_GetTick>
 8001ecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ed0:	f7ff f9de 	bl	8001290 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e1db      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ee2:	4b31      	ldr	r3, [pc, #196]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x430>
 8001eee:	e018      	b.n	8001f22 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001ef6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001efc:	f7ff f9c8 	bl	8001290 <HAL_GetTick>
 8001f00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f04:	f7ff f9c4 	bl	8001290 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1c1      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80af 	beq.w	800208e <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_RCC_OscConfig+0x50c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <HAL_RCC_OscConfig+0x50c>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f3c:	f7ff f9a8 	bl	8001290 <HAL_GetTick>
 8001f40:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f44:	f7ff f9a4 	bl	8001290 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1a1      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_RCC_OscConfig+0x50c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d106      	bne.n	8001f78 <HAL_RCC_OscConfig+0x4d8>
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6713      	str	r3, [r2, #112]	; 0x70
 8001f76:	e05b      	b.n	8002030 <HAL_RCC_OscConfig+0x590>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d117      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x510>
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f86:	f023 0301 	bic.w	r3, r3, #1
 8001f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f90:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f96:	6713      	str	r3, [r2, #112]	; 0x70
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	4a02      	ldr	r2, [pc, #8]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f9e:	f023 0304 	bic.w	r3, r3, #4
 8001fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa4:	e044      	b.n	8002030 <HAL_RCC_OscConfig+0x590>
 8001fa6:	bf00      	nop
 8001fa8:	58024400 	.word	0x58024400
 8001fac:	58024800 	.word	0x58024800
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d112      	bne.n	8001fde <HAL_RCC_OscConfig+0x53e>
 8001fb8:	4b95      	ldr	r3, [pc, #596]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbc:	4a94      	ldr	r2, [pc, #592]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc4:	4b92      	ldr	r3, [pc, #584]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	4a91      	ldr	r2, [pc, #580]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fce:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd0:	4b8f      	ldr	r3, [pc, #572]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4a8e      	ldr	r2, [pc, #568]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70
 8001fdc:	e028      	b.n	8002030 <HAL_RCC_OscConfig+0x590>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b85      	cmp	r3, #133	; 0x85
 8001fe4:	d112      	bne.n	800200c <HAL_RCC_OscConfig+0x56c>
 8001fe6:	4b8a      	ldr	r3, [pc, #552]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4a89      	ldr	r2, [pc, #548]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff2:	4b87      	ldr	r3, [pc, #540]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a86      	ldr	r2, [pc, #536]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	4b84      	ldr	r3, [pc, #528]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	4a83      	ldr	r2, [pc, #524]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6713      	str	r3, [r2, #112]	; 0x70
 800200a:	e011      	b.n	8002030 <HAL_RCC_OscConfig+0x590>
 800200c:	4b80      	ldr	r3, [pc, #512]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a7f      	ldr	r2, [pc, #508]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
 8002018:	4b7d      	ldr	r3, [pc, #500]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	4a7c      	ldr	r2, [pc, #496]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800201e:	f023 0304 	bic.w	r3, r3, #4
 8002022:	6713      	str	r3, [r2, #112]	; 0x70
 8002024:	4b7a      	ldr	r3, [pc, #488]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	4a79      	ldr	r2, [pc, #484]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800202a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800202e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d015      	beq.n	8002064 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff f92a 	bl	8001290 <HAL_GetTick>
 800203c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7ff f926 	bl	8001290 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e121      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002056:	4b6e      	ldr	r3, [pc, #440]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0ee      	beq.n	8002040 <HAL_RCC_OscConfig+0x5a0>
 8002062:	e014      	b.n	800208e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002064:	f7ff f914 	bl	8001290 <HAL_GetTick>
 8002068:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800206a:	e00a      	b.n	8002082 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f7ff f910 	bl	8001290 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e10b      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002082:	4b63      	ldr	r3, [pc, #396]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1ee      	bne.n	800206c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8100 	beq.w	8002298 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002098:	4b5d      	ldr	r3, [pc, #372]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020a0:	2b18      	cmp	r3, #24
 80020a2:	f000 80bb 	beq.w	800221c <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	f040 8095 	bne.w	80021da <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b0:	4b57      	ldr	r3, [pc, #348]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a56      	ldr	r2, [pc, #344]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80020b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff f8e8 	bl	8001290 <HAL_GetTick>
 80020c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c4:	f7ff f8e4 	bl	8001290 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e0e1      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020d6:	4b4e      	ldr	r3, [pc, #312]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e2:	4b4b      	ldr	r3, [pc, #300]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80020e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e6:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <HAL_RCC_OscConfig+0x774>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	430a      	orrs	r2, r1
 80020f6:	4946      	ldr	r1, [pc, #280]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	628b      	str	r3, [r1, #40]	; 0x28
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	3b01      	subs	r3, #1
 8002102:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210a:	3b01      	subs	r3, #1
 800210c:	025b      	lsls	r3, r3, #9
 800210e:	b29b      	uxth	r3, r3
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002116:	3b01      	subs	r3, #1
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	3b01      	subs	r3, #1
 8002126:	061b      	lsls	r3, r3, #24
 8002128:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800212c:	4938      	ldr	r1, [pc, #224]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800212e:	4313      	orrs	r3, r2
 8002130:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002132:	4b37      	ldr	r3, [pc, #220]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	4a36      	ldr	r2, [pc, #216]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800213e:	4b34      	ldr	r3, [pc, #208]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002142:	4b35      	ldr	r3, [pc, #212]	; (8002218 <HAL_RCC_OscConfig+0x778>)
 8002144:	4013      	ands	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800214a:	00d2      	lsls	r2, r2, #3
 800214c:	4930      	ldr	r1, [pc, #192]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800214e:	4313      	orrs	r3, r2
 8002150:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002152:	4b2f      	ldr	r3, [pc, #188]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	f023 020c 	bic.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	492c      	ldr	r1, [pc, #176]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002160:	4313      	orrs	r3, r2
 8002162:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002164:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	f023 0202 	bic.w	r2, r3, #2
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	4927      	ldr	r1, [pc, #156]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002172:	4313      	orrs	r3, r2
 8002174:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002176:	4b26      	ldr	r3, [pc, #152]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	4a25      	ldr	r2, [pc, #148]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002182:	4b23      	ldr	r3, [pc, #140]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	4a22      	ldr	r2, [pc, #136]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002198:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219e:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a6:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a19      	ldr	r2, [pc, #100]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80021ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7ff f86d 	bl	8001290 <HAL_GetTick>
 80021b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ba:	f7ff f869 	bl	8001290 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e066      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x71a>
 80021d8:	e05e      	b.n	8002298 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80021e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7ff f853 	bl	8001290 <HAL_GetTick>
 80021ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ee:	f7ff f84f 	bl	8001290 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e04c      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f0      	bne.n	80021ee <HAL_RCC_OscConfig+0x74e>
 800220c:	e044      	b.n	8002298 <HAL_RCC_OscConfig+0x7f8>
 800220e:	bf00      	nop
 8002210:	58024400 	.word	0x58024400
 8002214:	fffffc0c 	.word	0xfffffc0c
 8002218:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <HAL_RCC_OscConfig+0x804>)
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_RCC_OscConfig+0x804>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	2b01      	cmp	r3, #1
 800222e:	d031      	beq.n	8002294 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f003 0203 	and.w	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d12a      	bne.n	8002294 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d122      	bne.n	8002294 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d11a      	bne.n	8002294 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	0a5b      	lsrs	r3, r3, #9
 8002262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d111      	bne.n	8002294 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	0c1b      	lsrs	r3, r3, #16
 8002274:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d108      	bne.n	8002294 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	0e1b      	lsrs	r3, r3, #24
 8002286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3730      	adds	r7, #48	; 0x30
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	58024400 	.word	0x58024400

080022a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e19c      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b8a      	ldr	r3, [pc, #552]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d910      	bls.n	80022ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b87      	ldr	r3, [pc, #540]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 020f 	bic.w	r2, r3, #15
 80022d2:	4985      	ldr	r1, [pc, #532]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b83      	ldr	r3, [pc, #524]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e184      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d010      	beq.n	800231a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	4b7b      	ldr	r3, [pc, #492]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002304:	429a      	cmp	r2, r3
 8002306:	d908      	bls.n	800231a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002308:	4b78      	ldr	r3, [pc, #480]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	4975      	ldr	r1, [pc, #468]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002316:	4313      	orrs	r3, r2
 8002318:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d010      	beq.n	8002348 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	4b70      	ldr	r3, [pc, #448]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002332:	429a      	cmp	r2, r3
 8002334:	d908      	bls.n	8002348 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002336:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	496a      	ldr	r1, [pc, #424]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002344:	4313      	orrs	r3, r2
 8002346:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	4b64      	ldr	r3, [pc, #400]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002360:	429a      	cmp	r2, r3
 8002362:	d908      	bls.n	8002376 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002364:	4b61      	ldr	r3, [pc, #388]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	495e      	ldr	r1, [pc, #376]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002372:	4313      	orrs	r3, r2
 8002374:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d010      	beq.n	80023a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	4b59      	ldr	r3, [pc, #356]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800238e:	429a      	cmp	r2, r3
 8002390:	d908      	bls.n	80023a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002392:	4b56      	ldr	r3, [pc, #344]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4953      	ldr	r1, [pc, #332]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d010      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	429a      	cmp	r2, r3
 80023be:	d908      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c0:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f023 020f 	bic.w	r2, r3, #15
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4947      	ldr	r1, [pc, #284]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d055      	beq.n	800248a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023de:	4b43      	ldr	r3, [pc, #268]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4940      	ldr	r1, [pc, #256]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023f8:	4b3c      	ldr	r3, [pc, #240]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d121      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0f6      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d107      	bne.n	8002420 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002410:	4b36      	ldr	r3, [pc, #216]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d115      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0ea      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002428:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d109      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0de      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002438:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0d6      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002448:	4b28      	ldr	r3, [pc, #160]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f023 0207 	bic.w	r2, r3, #7
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4925      	ldr	r1, [pc, #148]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002456:	4313      	orrs	r3, r2
 8002458:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245a:	f7fe ff19 	bl	8001290 <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002460:	e00a      	b.n	8002478 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002462:	f7fe ff15 	bl	8001290 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0be      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	429a      	cmp	r2, r3
 8002488:	d1eb      	bne.n	8002462 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d010      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d208      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f023 020f 	bic.w	r2, r3, #15
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	490e      	ldr	r1, [pc, #56]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d214      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 020f 	bic.w	r2, r3, #15
 80024ce:	4906      	ldr	r1, [pc, #24]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e086      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
 80024e8:	52002000 	.word	0x52002000
 80024ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d010      	beq.n	800251e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	4b3f      	ldr	r3, [pc, #252]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002508:	429a      	cmp	r2, r3
 800250a:	d208      	bcs.n	800251e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800250c:	4b3c      	ldr	r3, [pc, #240]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	4939      	ldr	r1, [pc, #228]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800251a:	4313      	orrs	r3, r2
 800251c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d010      	beq.n	800254c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	4b34      	ldr	r3, [pc, #208]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002536:	429a      	cmp	r2, r3
 8002538:	d208      	bcs.n	800254c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800253a:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	492e      	ldr	r1, [pc, #184]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002548:	4313      	orrs	r3, r2
 800254a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d010      	beq.n	800257a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	4b28      	ldr	r3, [pc, #160]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002564:	429a      	cmp	r2, r3
 8002566:	d208      	bcs.n	800257a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002568:	4b25      	ldr	r3, [pc, #148]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4922      	ldr	r1, [pc, #136]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002576:	4313      	orrs	r3, r2
 8002578:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b00      	cmp	r3, #0
 8002584:	d010      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002592:	429a      	cmp	r2, r3
 8002594:	d208      	bcs.n	80025a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4917      	ldr	r1, [pc, #92]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80025a8:	f000 f834 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	4912      	ldr	r1, [pc, #72]	; (8002604 <HAL_RCC_ClockConfig+0x35c>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
 80025c4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <HAL_RCC_ClockConfig+0x35c>)
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x360>)
 80025de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025e0:	4a0a      	ldr	r2, [pc, #40]	; (800260c <HAL_RCC_ClockConfig+0x364>)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_RCC_ClockConfig+0x368>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fe06 	bl	80011fc <HAL_InitTick>
 80025f0:	4603      	mov	r3, r0
 80025f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	58024400 	.word	0x58024400
 8002604:	08010248 	.word	0x08010248
 8002608:	24000004 	.word	0x24000004
 800260c:	24000000 	.word	0x24000000
 8002610:	24000008 	.word	0x24000008

08002614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800261a:	4bb3      	ldr	r3, [pc, #716]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002622:	2b18      	cmp	r3, #24
 8002624:	f200 8155 	bhi.w	80028d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <HAL_RCC_GetSysClockFreq+0x1c>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002695 	.word	0x08002695
 8002634:	080028d3 	.word	0x080028d3
 8002638:	080028d3 	.word	0x080028d3
 800263c:	080028d3 	.word	0x080028d3
 8002640:	080028d3 	.word	0x080028d3
 8002644:	080028d3 	.word	0x080028d3
 8002648:	080028d3 	.word	0x080028d3
 800264c:	080028d3 	.word	0x080028d3
 8002650:	080026bb 	.word	0x080026bb
 8002654:	080028d3 	.word	0x080028d3
 8002658:	080028d3 	.word	0x080028d3
 800265c:	080028d3 	.word	0x080028d3
 8002660:	080028d3 	.word	0x080028d3
 8002664:	080028d3 	.word	0x080028d3
 8002668:	080028d3 	.word	0x080028d3
 800266c:	080028d3 	.word	0x080028d3
 8002670:	080026c1 	.word	0x080026c1
 8002674:	080028d3 	.word	0x080028d3
 8002678:	080028d3 	.word	0x080028d3
 800267c:	080028d3 	.word	0x080028d3
 8002680:	080028d3 	.word	0x080028d3
 8002684:	080028d3 	.word	0x080028d3
 8002688:	080028d3 	.word	0x080028d3
 800268c:	080028d3 	.word	0x080028d3
 8002690:	080026c7 	.word	0x080026c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002694:	4b94      	ldr	r3, [pc, #592]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d009      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80026a0:	4b91      	ldr	r3, [pc, #580]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	4a90      	ldr	r2, [pc, #576]	; (80028ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80026b2:	e111      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026b4:	4b8d      	ldr	r3, [pc, #564]	; (80028ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026b6:	61bb      	str	r3, [r7, #24]
    break;
 80026b8:	e10e      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80026ba:	4b8d      	ldr	r3, [pc, #564]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026bc:	61bb      	str	r3, [r7, #24]
    break;
 80026be:	e10b      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80026c0:	4b8c      	ldr	r3, [pc, #560]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026c2:	61bb      	str	r3, [r7, #24]
    break;
 80026c4:	e108      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026c6:	4b88      	ldr	r3, [pc, #544]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80026d0:	4b85      	ldr	r3, [pc, #532]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026dc:	4b82      	ldr	r3, [pc, #520]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026e6:	4b80      	ldr	r3, [pc, #512]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ea:	08db      	lsrs	r3, r3, #3
 80026ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	ee07 3a90 	vmov	s15, r3
 80026fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80e1 	beq.w	80028cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b02      	cmp	r3, #2
 800270e:	f000 8083 	beq.w	8002818 <HAL_RCC_GetSysClockFreq+0x204>
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b02      	cmp	r3, #2
 8002716:	f200 80a1 	bhi.w	800285c <HAL_RCC_GetSysClockFreq+0x248>
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x114>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d056      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002726:	e099      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002728:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d02d      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002734:	4b6c      	ldr	r3, [pc, #432]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	08db      	lsrs	r3, r3, #3
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	4a6b      	ldr	r2, [pc, #428]	; (80028ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800275a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800275e:	4b62      	ldr	r3, [pc, #392]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800276e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002772:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800277a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800277e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800278e:	e087      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800279e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a2:	4b51      	ldr	r3, [pc, #324]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027d2:	e065      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002900 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e6:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800280a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002816:	e043      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002822:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002904 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800282a:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800283a:	ed97 6a02 	vldr	s12, [r7, #8]
 800283e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800284a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800284e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800285a:	e021      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002866:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002900 <HAL_RCC_GetSysClockFreq+0x2ec>
 800286a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800286e:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800287e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002882:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800288a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800288e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800289e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	0a5b      	lsrs	r3, r3, #9
 80028a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028aa:	3301      	adds	r3, #1
 80028ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80028bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028c4:	ee17 3a90 	vmov	r3, s15
 80028c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80028ca:	e005      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
    break;
 80028d0:	e002      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028d4:	61bb      	str	r3, [r7, #24]
    break;
 80028d6:	bf00      	nop
  }

  return sysclockfreq;
 80028d8:	69bb      	ldr	r3, [r7, #24]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	58024400 	.word	0x58024400
 80028ec:	03d09000 	.word	0x03d09000
 80028f0:	003d0900 	.word	0x003d0900
 80028f4:	007a1200 	.word	0x007a1200
 80028f8:	46000000 	.word	0x46000000
 80028fc:	4c742400 	.word	0x4c742400
 8002900:	4a742400 	.word	0x4a742400
 8002904:	4af42400 	.word	0x4af42400

08002908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800290e:	f7ff fe81 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_RCC_GetHCLKFreq+0x50>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	490f      	ldr	r1, [pc, #60]	; (800295c <HAL_RCC_GetHCLKFreq+0x54>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	f003 031f 	and.w	r3, r3, #31
 8002926:	fa22 f303 	lsr.w	r3, r2, r3
 800292a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_GetHCLKFreq+0x50>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_RCC_GetHCLKFreq+0x54>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	fa22 f303 	lsr.w	r3, r2, r3
 8002942:	4a07      	ldr	r2, [pc, #28]	; (8002960 <HAL_RCC_GetHCLKFreq+0x58>)
 8002944:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002946:	4a07      	ldr	r2, [pc, #28]	; (8002964 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <HAL_RCC_GetHCLKFreq+0x58>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	58024400 	.word	0x58024400
 800295c:	08010248 	.word	0x08010248
 8002960:	24000004 	.word	0x24000004
 8002964:	24000000 	.word	0x24000000

08002968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800296c:	f7ff ffcc 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4904      	ldr	r1, [pc, #16]	; (8002990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	58024400 	.word	0x58024400
 8002990:	08010248 	.word	0x08010248

08002994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002998:	f7ff ffb6 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4904      	ldr	r1, [pc, #16]	; (80029bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	58024400 	.word	0x58024400
 80029bc:	08010248 	.word	0x08010248

080029c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029c8:	2300      	movs	r3, #0
 80029ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029cc:	2300      	movs	r3, #0
 80029ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d03f      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029e4:	d02a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029ea:	d824      	bhi.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029f0:	d018      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029f6:	d81e      	bhi.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a00:	d007      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a02:	e018      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a04:	4ba6      	ldr	r3, [pc, #664]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	4aa5      	ldr	r2, [pc, #660]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a10:	e015      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	2102      	movs	r1, #2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f001 f99b 	bl	8003d54 <RCCEx_PLL2_Config>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a22:	e00c      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3324      	adds	r3, #36	; 0x24
 8002a28:	2102      	movs	r1, #2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f001 fa44 	bl	8003eb8 <RCCEx_PLL3_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a34:	e003      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	75fb      	strb	r3, [r7, #23]
      break;
 8002a3a:	e000      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d109      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a44:	4b96      	ldr	r3, [pc, #600]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a50:	4993      	ldr	r1, [pc, #588]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	650b      	str	r3, [r1, #80]	; 0x50
 8002a56:	e001      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
 8002a5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d03d      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d826      	bhi.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a70:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002a8d 	.word	0x08002a8d
 8002a7c:	08002a9b 	.word	0x08002a9b
 8002a80:	08002aad 	.word	0x08002aad
 8002a84:	08002ac5 	.word	0x08002ac5
 8002a88:	08002ac5 	.word	0x08002ac5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a8c:	4b84      	ldr	r3, [pc, #528]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	4a83      	ldr	r2, [pc, #524]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a98:	e015      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 f957 	bl	8003d54 <RCCEx_PLL2_Config>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002aaa:	e00c      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3324      	adds	r3, #36	; 0x24
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 fa00 	bl	8003eb8 <RCCEx_PLL3_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002abc:	e003      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d109      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002acc:	4b74      	ldr	r3, [pc, #464]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad0:	f023 0207 	bic.w	r2, r3, #7
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	4971      	ldr	r1, [pc, #452]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	650b      	str	r3, [r1, #80]	; 0x50
 8002ade:	e001      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae0:	7dfb      	ldrb	r3, [r7, #23]
 8002ae2:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d04a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002af8:	d031      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8002afa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002afe:	d82b      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b04:	d02d      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0a:	d825      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b0c:	2bc0      	cmp	r3, #192	; 0xc0
 8002b0e:	d02a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002b10:	2bc0      	cmp	r3, #192	; 0xc0
 8002b12:	d821      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b14:	2b80      	cmp	r3, #128	; 0x80
 8002b16:	d016      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002b18:	2b80      	cmp	r3, #128	; 0x80
 8002b1a:	d81d      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002b20:	2b40      	cmp	r3, #64	; 0x40
 8002b22:	d007      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002b24:	e018      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b26:	4b5e      	ldr	r3, [pc, #376]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	4a5d      	ldr	r2, [pc, #372]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002b32:	e019      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3304      	adds	r3, #4
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 f90a 	bl	8003d54 <RCCEx_PLL2_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002b44:	e010      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3324      	adds	r3, #36	; 0x24
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 f9b3 	bl	8003eb8 <RCCEx_PLL3_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002b56:	e007      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b5c:	e004      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e002      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002b62:	bf00      	nop
 8002b64:	e000      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002b6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b72:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	4949      	ldr	r1, [pc, #292]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	650b      	str	r3, [r1, #80]	; 0x50
 8002b80:	e001      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d04f      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002b9a:	d036      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002b9c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002ba0:	d830      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba6:	d032      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bac:	d82a      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002bae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002bb2:	d02e      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002bb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002bb8:	d824      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d018      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc4:	d81e      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bce:	d007      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002bd0:	e018      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bd2:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	4a32      	ldr	r2, [pc, #200]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002bde:	e019      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3304      	adds	r3, #4
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 f8b4 	bl	8003d54 <RCCEx_PLL2_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002bf0:	e010      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3324      	adds	r3, #36	; 0x24
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f001 f95d 	bl	8003eb8 <RCCEx_PLL3_Config>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002c02:	e007      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	75fb      	strb	r3, [r7, #23]
      break;
 8002c08:	e004      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002c0a:	bf00      	nop
 8002c0c:	e002      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002c0e:	bf00      	nop
 8002c10:	e000      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002c1a:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c26:	491e      	ldr	r1, [pc, #120]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	650b      	str	r3, [r1, #80]	; 0x50
 8002c2c:	e001      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
 8002c30:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d034      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c42:	2b30      	cmp	r3, #48	; 0x30
 8002c44:	d01c      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002c46:	2b30      	cmp	r3, #48	; 0x30
 8002c48:	d817      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d00c      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d813      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d016      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d10f      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c5a:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	4a10      	ldr	r2, [pc, #64]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002c66:	e00e      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 f870 	bl	8003d54 <RCCEx_PLL2_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002c78:	e005      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c7e:	e002      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002c80:	bf00      	nop
 8002c82:	e000      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002c84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c98:	4901      	ldr	r1, [pc, #4]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c9e:	e003      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002ca0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d047      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cbc:	d030      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cc2:	d82a      	bhi.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002cc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cc8:	d02c      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002cca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cce:	d824      	bhi.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd4:	d018      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cda:	d81e      	bhi.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce4:	d007      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002ce6:	e018      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce8:	4bb0      	ldr	r3, [pc, #704]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	4aaf      	ldr	r2, [pc, #700]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cf4:	e017      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 f829 	bl	8003d54 <RCCEx_PLL2_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d06:	e00e      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3324      	adds	r3, #36	; 0x24
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f001 f8d2 	bl	8003eb8 <RCCEx_PLL3_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d18:	e005      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d1e:	e002      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002d20:	bf00      	nop
 8002d22:	e000      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d2c:	4b9f      	ldr	r3, [pc, #636]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d30:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d38:	499c      	ldr	r1, [pc, #624]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	650b      	str	r3, [r1, #80]	; 0x50
 8002d3e:	e001      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d049      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d58:	d02e      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d5e:	d828      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002d60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d64:	d02a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002d66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d6a:	d822      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002d6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d70:	d026      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002d72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d76:	d81c      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002d7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d82:	d816      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01d      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8c:	d111      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3304      	adds	r3, #4
 8002d92:	2101      	movs	r1, #1
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 ffdd 	bl	8003d54 <RCCEx_PLL2_Config>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d9e:	e012      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3324      	adds	r3, #36	; 0x24
 8002da4:	2101      	movs	r1, #1
 8002da6:	4618      	mov	r0, r3
 8002da8:	f001 f886 	bl	8003eb8 <RCCEx_PLL3_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002db0:	e009      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	75fb      	strb	r3, [r7, #23]
      break;
 8002db6:	e006      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002db8:	bf00      	nop
 8002dba:	e004      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002dbc:	bf00      	nop
 8002dbe:	e002      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002dc0:	bf00      	nop
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002dc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002dcc:	4b77      	ldr	r3, [pc, #476]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd8:	4974      	ldr	r1, [pc, #464]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	650b      	str	r3, [r1, #80]	; 0x50
 8002dde:	e001      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d053      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002df6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002dfa:	d034      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002dfc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002e00:	d82e      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e06:	d030      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e0c:	d828      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e12:	d02c      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d822      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002e1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e1e:	d028      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002e20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e24:	d81c      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002e26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e2a:	d010      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e30:	d816      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01f      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e3a:	d111      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	2101      	movs	r1, #1
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 ff86 	bl	8003d54 <RCCEx_PLL2_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e4c:	e014      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3324      	adds	r3, #36	; 0x24
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 f82f 	bl	8003eb8 <RCCEx_PLL3_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	75fb      	strb	r3, [r7, #23]
      break;
 8002e64:	e008      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002e66:	bf00      	nop
 8002e68:	e006      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002e6a:	bf00      	nop
 8002e6c:	e004      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002e6e:	bf00      	nop
 8002e70:	e002      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002e72:	bf00      	nop
 8002e74:	e000      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10a      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e7e:	4b4b      	ldr	r3, [pc, #300]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e8c:	4947      	ldr	r1, [pc, #284]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	658b      	str	r3, [r1, #88]	; 0x58
 8002e92:	e001      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d02f      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eac:	d00e      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb2:	d814      	bhi.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d015      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ebc:	d10f      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	4a3a      	ldr	r2, [pc, #232]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002eca:	e00c      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 ff3e 	bl	8003d54 <RCCEx_PLL2_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002edc:	e003      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002eec:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef8:	492c      	ldr	r1, [pc, #176]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	650b      	str	r3, [r1, #80]	; 0x50
 8002efe:	e001      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d032      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d81b      	bhi.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002f18:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1e:	bf00      	nop
 8002f20:	08002f57 	.word	0x08002f57
 8002f24:	08002f31 	.word	0x08002f31
 8002f28:	08002f3f 	.word	0x08002f3f
 8002f2c:	08002f57 	.word	0x08002f57
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f30:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	4a1d      	ldr	r2, [pc, #116]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f3c:	e00c      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2102      	movs	r1, #2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 ff05 	bl	8003d54 <RCCEx_PLL2_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f4e:	e003      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	75fb      	strb	r3, [r7, #23]
      break;
 8002f54:	e000      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f5e:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	f023 0203 	bic.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	4910      	ldr	r1, [pc, #64]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f70:	e001      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 808a 	beq.w	8003098 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f90:	f7fe f97e 	bl	8001290 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f96:	e00d      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f98:	f7fe f97a 	bl	8001290 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d906      	bls.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	75fb      	strb	r3, [r7, #23]
        break;
 8002faa:	e009      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002fac:	58024400 	.word	0x58024400
 8002fb0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fb4:	4bba      	ldr	r3, [pc, #744]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0eb      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d166      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002fc6:	4bb7      	ldr	r3, [pc, #732]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fd0:	4053      	eors	r3, r2
 8002fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d013      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fda:	4bb2      	ldr	r3, [pc, #712]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fe4:	4baf      	ldr	r3, [pc, #700]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4aae      	ldr	r2, [pc, #696]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff0:	4bac      	ldr	r3, [pc, #688]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	4aab      	ldr	r2, [pc, #684]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ffa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ffc:	4aa9      	ldr	r2, [pc, #676]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300c:	d115      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe f93f 	bl	8001290 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003014:	e00b      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe f93b 	bl	8001290 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	; 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d902      	bls.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	75fb      	strb	r3, [r7, #23]
            break;
 800302c:	e005      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800302e:	4b9d      	ldr	r3, [pc, #628]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0ed      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d126      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800304e:	d10d      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003050:	4b94      	ldr	r3, [pc, #592]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800305e:	0919      	lsrs	r1, r3, #4
 8003060:	4b91      	ldr	r3, [pc, #580]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003062:	400b      	ands	r3, r1
 8003064:	498f      	ldr	r1, [pc, #572]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003066:	4313      	orrs	r3, r2
 8003068:	610b      	str	r3, [r1, #16]
 800306a:	e005      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800306c:	4b8d      	ldr	r3, [pc, #564]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	4a8c      	ldr	r2, [pc, #560]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003072:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003076:	6113      	str	r3, [r2, #16]
 8003078:	4b8a      	ldr	r3, [pc, #552]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800307a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003086:	4987      	ldr	r1, [pc, #540]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003088:	4313      	orrs	r3, r2
 800308a:	670b      	str	r3, [r1, #112]	; 0x70
 800308c:	e004      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800308e:	7dfb      	ldrb	r3, [r7, #23]
 8003090:	75bb      	strb	r3, [r7, #22]
 8003092:	e001      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d07f      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030aa:	2b28      	cmp	r3, #40	; 0x28
 80030ac:	d866      	bhi.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80030ae:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80030b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b4:	08003183 	.word	0x08003183
 80030b8:	0800317d 	.word	0x0800317d
 80030bc:	0800317d 	.word	0x0800317d
 80030c0:	0800317d 	.word	0x0800317d
 80030c4:	0800317d 	.word	0x0800317d
 80030c8:	0800317d 	.word	0x0800317d
 80030cc:	0800317d 	.word	0x0800317d
 80030d0:	0800317d 	.word	0x0800317d
 80030d4:	08003159 	.word	0x08003159
 80030d8:	0800317d 	.word	0x0800317d
 80030dc:	0800317d 	.word	0x0800317d
 80030e0:	0800317d 	.word	0x0800317d
 80030e4:	0800317d 	.word	0x0800317d
 80030e8:	0800317d 	.word	0x0800317d
 80030ec:	0800317d 	.word	0x0800317d
 80030f0:	0800317d 	.word	0x0800317d
 80030f4:	0800316b 	.word	0x0800316b
 80030f8:	0800317d 	.word	0x0800317d
 80030fc:	0800317d 	.word	0x0800317d
 8003100:	0800317d 	.word	0x0800317d
 8003104:	0800317d 	.word	0x0800317d
 8003108:	0800317d 	.word	0x0800317d
 800310c:	0800317d 	.word	0x0800317d
 8003110:	0800317d 	.word	0x0800317d
 8003114:	08003183 	.word	0x08003183
 8003118:	0800317d 	.word	0x0800317d
 800311c:	0800317d 	.word	0x0800317d
 8003120:	0800317d 	.word	0x0800317d
 8003124:	0800317d 	.word	0x0800317d
 8003128:	0800317d 	.word	0x0800317d
 800312c:	0800317d 	.word	0x0800317d
 8003130:	0800317d 	.word	0x0800317d
 8003134:	08003183 	.word	0x08003183
 8003138:	0800317d 	.word	0x0800317d
 800313c:	0800317d 	.word	0x0800317d
 8003140:	0800317d 	.word	0x0800317d
 8003144:	0800317d 	.word	0x0800317d
 8003148:	0800317d 	.word	0x0800317d
 800314c:	0800317d 	.word	0x0800317d
 8003150:	0800317d 	.word	0x0800317d
 8003154:	08003183 	.word	0x08003183
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3304      	adds	r3, #4
 800315c:	2101      	movs	r1, #1
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fdf8 	bl	8003d54 <RCCEx_PLL2_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003168:	e00c      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3324      	adds	r3, #36	; 0x24
 800316e:	2101      	movs	r1, #1
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fea1 	bl	8003eb8 <RCCEx_PLL3_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800317a:	e003      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	75fb      	strb	r3, [r7, #23]
      break;
 8003180:	e000      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800318a:	4b46      	ldr	r3, [pc, #280]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003198:	4942      	ldr	r1, [pc, #264]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800319a:	4313      	orrs	r3, r2
 800319c:	654b      	str	r3, [r1, #84]	; 0x54
 800319e:	e001      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d038      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d821      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80031b8:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80031ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	08003203 	.word	0x08003203
 80031c4:	080031d9 	.word	0x080031d9
 80031c8:	080031eb 	.word	0x080031eb
 80031cc:	08003203 	.word	0x08003203
 80031d0:	08003203 	.word	0x08003203
 80031d4:	08003203 	.word	0x08003203
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3304      	adds	r3, #4
 80031dc:	2101      	movs	r1, #1
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fdb8 	bl	8003d54 <RCCEx_PLL2_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031e8:	e00c      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3324      	adds	r3, #36	; 0x24
 80031ee:	2101      	movs	r1, #1
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fe61 	bl	8003eb8 <RCCEx_PLL3_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031fa:	e003      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003200:	e000      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003204:	7dfb      	ldrb	r3, [r7, #23]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800320a:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800320c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320e:	f023 0207 	bic.w	r2, r3, #7
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003216:	4923      	ldr	r1, [pc, #140]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003218:	4313      	orrs	r3, r2
 800321a:	654b      	str	r3, [r1, #84]	; 0x54
 800321c:	e001      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321e:	7dfb      	ldrb	r3, [r7, #23]
 8003220:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d040      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003234:	2b05      	cmp	r3, #5
 8003236:	d821      	bhi.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003238:	a201      	add	r2, pc, #4	; (adr r2, 8003240 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323e:	bf00      	nop
 8003240:	08003283 	.word	0x08003283
 8003244:	08003259 	.word	0x08003259
 8003248:	0800326b 	.word	0x0800326b
 800324c:	08003283 	.word	0x08003283
 8003250:	08003283 	.word	0x08003283
 8003254:	08003283 	.word	0x08003283
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3304      	adds	r3, #4
 800325c:	2101      	movs	r1, #1
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fd78 	bl	8003d54 <RCCEx_PLL2_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003268:	e00c      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3324      	adds	r3, #36	; 0x24
 800326e:	2101      	movs	r1, #1
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fe21 	bl	8003eb8 <RCCEx_PLL3_Config>
 8003276:	4603      	mov	r3, r0
 8003278:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800327a:	e003      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	75fb      	strb	r3, [r7, #23]
      break;
 8003280:	e000      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d110      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	f023 0207 	bic.w	r2, r3, #7
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003298:	4902      	ldr	r1, [pc, #8]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800329a:	4313      	orrs	r3, r2
 800329c:	658b      	str	r3, [r1, #88]	; 0x58
 800329e:	e007      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80032a0:	58024800 	.word	0x58024800
 80032a4:	58024400 	.word	0x58024400
 80032a8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
 80032ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d04b      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c6:	d02e      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80032c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032cc:	d828      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d2:	d02a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d8:	d822      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80032da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032de:	d026      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80032e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032e4:	d81c      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80032e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ea:	d010      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80032ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f0:	d816      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01d      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80032f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032fa:	d111      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3304      	adds	r3, #4
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fd26 	bl	8003d54 <RCCEx_PLL2_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800330c:	e012      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3324      	adds	r3, #36	; 0x24
 8003312:	2102      	movs	r1, #2
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fdcf 	bl	8003eb8 <RCCEx_PLL3_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800331e:	e009      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
      break;
 8003324:	e006      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003326:	bf00      	nop
 8003328:	e004      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800332a:	bf00      	nop
 800332c:	e002      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800332e:	bf00      	nop
 8003330:	e000      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800333a:	4bb3      	ldr	r3, [pc, #716]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003348:	49af      	ldr	r1, [pc, #700]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800334a:	4313      	orrs	r3, r2
 800334c:	654b      	str	r3, [r1, #84]	; 0x54
 800334e:	e001      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d04b      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003366:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800336a:	d02e      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800336c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003370:	d828      	bhi.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003376:	d02a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337c:	d822      	bhi.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800337e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003382:	d026      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003388:	d81c      	bhi.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800338a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338e:	d010      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003394:	d816      	bhi.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01d      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339e:	d111      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fcd4 	bl	8003d54 <RCCEx_PLL2_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80033b0:	e012      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3324      	adds	r3, #36	; 0x24
 80033b6:	2102      	movs	r1, #2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fd7d 	bl	8003eb8 <RCCEx_PLL3_Config>
 80033be:	4603      	mov	r3, r0
 80033c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80033c2:	e009      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	75fb      	strb	r3, [r7, #23]
      break;
 80033c8:	e006      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80033ca:	bf00      	nop
 80033cc:	e004      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80033ce:	bf00      	nop
 80033d0:	e002      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80033d2:	bf00      	nop
 80033d4:	e000      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80033d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033de:	4b8a      	ldr	r3, [pc, #552]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033ec:	4986      	ldr	r1, [pc, #536]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	658b      	str	r3, [r1, #88]	; 0x58
 80033f2:	e001      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
 80033f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003400:	2b00      	cmp	r3, #0
 8003402:	d04b      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800340a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800340e:	d02e      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003410:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003414:	d828      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341a:	d02a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800341c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003420:	d822      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003422:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003426:	d026      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003428:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800342c:	d81c      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800342e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003432:	d010      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003438:	d816      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d01d      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800343e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003442:	d111      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fc82 	bl	8003d54 <RCCEx_PLL2_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003454:	e012      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3324      	adds	r3, #36	; 0x24
 800345a:	2102      	movs	r1, #2
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fd2b 	bl	8003eb8 <RCCEx_PLL3_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003466:	e009      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
      break;
 800346c:	e006      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800346e:	bf00      	nop
 8003470:	e004      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003472:	bf00      	nop
 8003474:	e002      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003476:	bf00      	nop
 8003478:	e000      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800347a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003482:	4b61      	ldr	r3, [pc, #388]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003490:	495d      	ldr	r1, [pc, #372]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003492:	4313      	orrs	r3, r2
 8003494:	658b      	str	r3, [r1, #88]	; 0x58
 8003496:	e001      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b2:	d10a      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3324      	adds	r3, #36	; 0x24
 80034b8:	2102      	movs	r1, #2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fcfc 	bl	8003eb8 <RCCEx_PLL3_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80034ca:	4b4f      	ldr	r3, [pc, #316]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	494b      	ldr	r1, [pc, #300]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d01a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f4:	d10a      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3324      	adds	r3, #36	; 0x24
 80034fa:	2102      	movs	r1, #2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fcdb 	bl	8003eb8 <RCCEx_PLL3_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800350c:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800351a:	493b      	ldr	r1, [pc, #236]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800351c:	4313      	orrs	r3, r2
 800351e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d034      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003536:	d01d      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800353c:	d817      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003546:	d009      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003548:	e011      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fbff 	bl	8003d54 <RCCEx_PLL2_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800355a:	e00c      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3324      	adds	r3, #36	; 0x24
 8003560:	2102      	movs	r1, #2
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fca8 	bl	8003eb8 <RCCEx_PLL3_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800356c:	e003      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	75fb      	strb	r3, [r7, #23]
      break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800357c:	4b22      	ldr	r3, [pc, #136]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800358a:	491f      	ldr	r1, [pc, #124]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800358c:	4313      	orrs	r3, r2
 800358e:	658b      	str	r3, [r1, #88]	; 0x58
 8003590:	e001      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	7dfb      	ldrb	r3, [r7, #23]
 8003594:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d036      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035ac:	d01c      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80035ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035b2:	d816      	bhi.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80035b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035b8:	d003      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80035ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035be:	d007      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80035c0:	e00f      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	4a10      	ldr	r2, [pc, #64]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80035c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80035ce:	e00c      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3324      	adds	r3, #36	; 0x24
 80035d4:	2101      	movs	r1, #1
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fc6e 	bl	8003eb8 <RCCEx_PLL3_Config>
 80035dc:	4603      	mov	r3, r0
 80035de:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80035e0:	e003      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	75fb      	strb	r3, [r7, #23]
      break;
 80035e6:	e000      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80035e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10d      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035fe:	4902      	ldr	r1, [pc, #8]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003600:	4313      	orrs	r3, r2
 8003602:	654b      	str	r3, [r1, #84]	; 0x54
 8003604:	e004      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8003606:	bf00      	nop
 8003608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d029      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003628:	d007      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800362a:	e00f      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362c:	4b69      	ldr	r3, [pc, #420]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	4a68      	ldr	r2, [pc, #416]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003636:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003638:	e00b      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	2102      	movs	r1, #2
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fb87 	bl	8003d54 <RCCEx_PLL2_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800364a:	e002      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]
      break;
 8003650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003658:	4b5e      	ldr	r3, [pc, #376]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800365a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003664:	495b      	ldr	r1, [pc, #364]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003666:	4313      	orrs	r3, r2
 8003668:	64cb      	str	r3, [r1, #76]	; 0x4c
 800366a:	e001      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3324      	adds	r3, #36	; 0x24
 8003680:	2102      	movs	r1, #2
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fc18 	bl	8003eb8 <RCCEx_PLL3_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d032      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a8:	d017      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 80036aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ae:	d811      	bhi.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80036b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b4:	d013      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 80036b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ba:	d80b      	bhi.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d010      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 80036c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c4:	d106      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c6:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	4a42      	ldr	r2, [pc, #264]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80036d2:	e007      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	75fb      	strb	r3, [r7, #23]
      break;
 80036d8:	e004      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80036da:	bf00      	nop
 80036dc:	e002      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80036de:	bf00      	nop
 80036e0:	e000      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80036e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10a      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036ea:	4b3a      	ldr	r3, [pc, #232]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f8:	4936      	ldr	r1, [pc, #216]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	654b      	str	r3, [r1, #84]	; 0x54
 80036fe:	e001      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003710:	4b30      	ldr	r3, [pc, #192]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800371c:	492d      	ldr	r1, [pc, #180]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800371e:	4313      	orrs	r3, r2
 8003720:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800372e:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003732:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800373a:	4926      	ldr	r1, [pc, #152]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800373c:	4313      	orrs	r3, r2
 800373e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	491e      	ldr	r1, [pc, #120]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800375a:	4313      	orrs	r3, r2
 800375c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00d      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	4a19      	ldr	r2, [pc, #100]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003770:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003774:	6113      	str	r3, [r2, #16]
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003780:	4914      	ldr	r1, [pc, #80]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003782:	4313      	orrs	r3, r2
 8003784:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	da08      	bge.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003792:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379a:	490e      	ldr	r1, [pc, #56]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800379c:	4313      	orrs	r3, r2
 800379e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d009      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80037ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	4906      	ldr	r1, [pc, #24]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80037c0:	7dbb      	ldrb	r3, [r7, #22]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	58024400 	.word	0x58024400

080037d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80037dc:	f7ff f894 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 80037e0:	4602      	mov	r2, r0
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	4904      	ldr	r1, [pc, #16]	; (8003800 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80037ee:	5ccb      	ldrb	r3, [r1, r3]
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	58024400 	.word	0x58024400
 8003800:	08010248 	.word	0x08010248

08003804 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800380c:	4ba1      	ldr	r3, [pc, #644]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003816:	4b9f      	ldr	r3, [pc, #636]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	0b1b      	lsrs	r3, r3, #12
 800381c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003820:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003822:	4b9c      	ldr	r3, [pc, #624]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800382e:	4b99      	ldr	r3, [pc, #612]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	08db      	lsrs	r3, r3, #3
 8003834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003846:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8111 	beq.w	8003a74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	2b02      	cmp	r3, #2
 8003856:	f000 8083 	beq.w	8003960 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b02      	cmp	r3, #2
 800385e:	f200 80a1 	bhi.w	80039a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d056      	beq.n	800391c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800386e:	e099      	b.n	80039a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003870:	4b88      	ldr	r3, [pc, #544]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d02d      	beq.n	80038d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800387c:	4b85      	ldr	r3, [pc, #532]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	08db      	lsrs	r3, r3, #3
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	4a84      	ldr	r2, [pc, #528]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
 800388c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	ee07 3a90 	vmov	s15, r3
 8003894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a6:	4b7b      	ldr	r3, [pc, #492]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80038d6:	e087      	b.n	80039e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80038e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ea:	4b6a      	ldr	r3, [pc, #424]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80038fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800390e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003916:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800391a:	e065      	b.n	80039e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003926:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800392a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800392e:	4b59      	ldr	r3, [pc, #356]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800393e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003942:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800394a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800394e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800395e:	e043      	b.n	80039e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800396e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003972:	4b48      	ldr	r3, [pc, #288]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003982:	ed97 6a03 	vldr	s12, [r7, #12]
 8003986:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800398a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039a2:	e021      	b.n	80039e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	ee07 3a90 	vmov	s15, r3
 80039aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b6:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80039e8:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	0a5b      	lsrs	r3, r3, #9
 80039ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a0e:	ee17 2a90 	vmov	r2, s15
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003a16:	4b1f      	ldr	r3, [pc, #124]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	0c1b      	lsrs	r3, r3, #16
 8003a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a20:	ee07 3a90 	vmov	s15, r3
 8003a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a3c:	ee17 2a90 	vmov	r2, s15
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003a44:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	0e1b      	lsrs	r3, r3, #24
 8003a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a6a:	ee17 2a90 	vmov	r2, s15
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a72:	e008      	b.n	8003a86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
}
 8003a86:	bf00      	nop
 8003a88:	3724      	adds	r7, #36	; 0x24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	58024400 	.word	0x58024400
 8003a98:	03d09000 	.word	0x03d09000
 8003a9c:	46000000 	.word	0x46000000
 8003aa0:	4c742400 	.word	0x4c742400
 8003aa4:	4a742400 	.word	0x4a742400
 8003aa8:	4af42400 	.word	0x4af42400

08003aac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b089      	sub	sp, #36	; 0x24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ab4:	4ba1      	ldr	r3, [pc, #644]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003abe:	4b9f      	ldr	r3, [pc, #636]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	0d1b      	lsrs	r3, r3, #20
 8003ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ac8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003aca:	4b9c      	ldr	r3, [pc, #624]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003ad6:	4b99      	ldr	r3, [pc, #612]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	08db      	lsrs	r3, r3, #3
 8003adc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8111 	beq.w	8003d1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	f000 8083 	beq.w	8003c08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	f200 80a1 	bhi.w	8003c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d056      	beq.n	8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003b16:	e099      	b.n	8003c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b18:	4b88      	ldr	r3, [pc, #544]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d02d      	beq.n	8003b80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b24:	4b85      	ldr	r3, [pc, #532]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	08db      	lsrs	r3, r3, #3
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	4a84      	ldr	r2, [pc, #528]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
 8003b34:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	ee07 3a90 	vmov	s15, r3
 8003b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4e:	4b7b      	ldr	r3, [pc, #492]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b7e:	e087      	b.n	8003c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b92:	4b6a      	ldr	r3, [pc, #424]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ba6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bc2:	e065      	b.n	8003c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd6:	4b59      	ldr	r3, [pc, #356]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c06:	e043      	b.n	8003c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	ee07 3a90 	vmov	s15, r3
 8003c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c1a:	4b48      	ldr	r3, [pc, #288]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c4a:	e021      	b.n	8003c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c5e:	4b37      	ldr	r3, [pc, #220]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003c90:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	0a5b      	lsrs	r3, r3, #9
 8003c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cb6:	ee17 2a90 	vmov	r2, s15
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003cbe:	4b1f      	ldr	r3, [pc, #124]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	0c1b      	lsrs	r3, r3, #16
 8003cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cc8:	ee07 3a90 	vmov	s15, r3
 8003ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce4:	ee17 2a90 	vmov	r2, s15
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003cec:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	0e1b      	lsrs	r3, r3, #24
 8003cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d12:	ee17 2a90 	vmov	r2, s15
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d1a:	e008      	b.n	8003d2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	609a      	str	r2, [r3, #8]
}
 8003d2e:	bf00      	nop
 8003d30:	3724      	adds	r7, #36	; 0x24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	03d09000 	.word	0x03d09000
 8003d44:	46000000 	.word	0x46000000
 8003d48:	4c742400 	.word	0x4c742400
 8003d4c:	4a742400 	.word	0x4a742400
 8003d50:	4af42400 	.word	0x4af42400

08003d54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d62:	4b53      	ldr	r3, [pc, #332]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d101      	bne.n	8003d72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e099      	b.n	8003ea6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d72:	4b4f      	ldr	r3, [pc, #316]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a4e      	ldr	r2, [pc, #312]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003d78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7e:	f7fd fa87 	bl	8001290 <HAL_GetTick>
 8003d82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d84:	e008      	b.n	8003d98 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d86:	f7fd fa83 	bl	8001290 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e086      	b.n	8003ea6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d98:	4b45      	ldr	r3, [pc, #276]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f0      	bne.n	8003d86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003da4:	4b42      	ldr	r3, [pc, #264]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	031b      	lsls	r3, r3, #12
 8003db2:	493f      	ldr	r1, [pc, #252]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	628b      	str	r3, [r1, #40]	; 0x28
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	025b      	lsls	r3, r3, #9
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	061b      	lsls	r3, r3, #24
 8003de4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003de8:	4931      	ldr	r1, [pc, #196]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003dee:	4b30      	ldr	r3, [pc, #192]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	492d      	ldr	r1, [pc, #180]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e00:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	f023 0220 	bic.w	r2, r3, #32
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	4928      	ldr	r1, [pc, #160]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e12:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	4a26      	ldr	r2, [pc, #152]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e18:	f023 0310 	bic.w	r3, r3, #16
 8003e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e1e:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e22:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <RCCEx_PLL2_Config+0x160>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	69d2      	ldr	r2, [r2, #28]
 8003e2a:	00d2      	lsls	r2, r2, #3
 8003e2c:	4920      	ldr	r1, [pc, #128]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e32:	4b1f      	ldr	r3, [pc, #124]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	4a1e      	ldr	r2, [pc, #120]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e38:	f043 0310 	orr.w	r3, r3, #16
 8003e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e44:	4b1a      	ldr	r3, [pc, #104]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	4a19      	ldr	r2, [pc, #100]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e50:	e00f      	b.n	8003e72 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d106      	bne.n	8003e66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e58:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	4a14      	ldr	r2, [pc, #80]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e64:	e005      	b.n	8003e72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e66:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	4a11      	ldr	r2, [pc, #68]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e72:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a0e      	ldr	r2, [pc, #56]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7e:	f7fd fa07 	bl	8001290 <HAL_GetTick>
 8003e82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e84:	e008      	b.n	8003e98 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e86:	f7fd fa03 	bl	8001290 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e006      	b.n	8003ea6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	58024400 	.word	0x58024400
 8003eb4:	ffff0007 	.word	0xffff0007

08003eb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ec6:	4b53      	ldr	r3, [pc, #332]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d101      	bne.n	8003ed6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e099      	b.n	800400a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003ed6:	4b4f      	ldr	r3, [pc, #316]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a4e      	ldr	r2, [pc, #312]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee2:	f7fd f9d5 	bl	8001290 <HAL_GetTick>
 8003ee6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ee8:	e008      	b.n	8003efc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003eea:	f7fd f9d1 	bl	8001290 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e086      	b.n	800400a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003efc:	4b45      	ldr	r3, [pc, #276]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1f0      	bne.n	8003eea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f08:	4b42      	ldr	r3, [pc, #264]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	051b      	lsls	r3, r3, #20
 8003f16:	493f      	ldr	r1, [pc, #252]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	628b      	str	r3, [r1, #40]	; 0x28
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	025b      	lsls	r3, r3, #9
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	041b      	lsls	r3, r3, #16
 8003f3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	061b      	lsls	r3, r3, #24
 8003f48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f4c:	4931      	ldr	r1, [pc, #196]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f52:	4b30      	ldr	r3, [pc, #192]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	492d      	ldr	r1, [pc, #180]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f64:	4b2b      	ldr	r3, [pc, #172]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	4928      	ldr	r1, [pc, #160]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f76:	4b27      	ldr	r3, [pc, #156]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	4a26      	ldr	r2, [pc, #152]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f86:	4b24      	ldr	r3, [pc, #144]	; (8004018 <RCCEx_PLL3_Config+0x160>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	69d2      	ldr	r2, [r2, #28]
 8003f8e:	00d2      	lsls	r2, r2, #3
 8003f90:	4920      	ldr	r1, [pc, #128]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f96:	4b1f      	ldr	r3, [pc, #124]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	4a1e      	ldr	r2, [pc, #120]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	4a19      	ldr	r2, [pc, #100]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003fae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fb4:	e00f      	b.n	8003fd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d106      	bne.n	8003fca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003fbc:	4b15      	ldr	r3, [pc, #84]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	4a14      	ldr	r2, [pc, #80]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003fc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fc8:	e005      	b.n	8003fd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003fca:	4b12      	ldr	r3, [pc, #72]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	4a11      	ldr	r2, [pc, #68]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a0e      	ldr	r2, [pc, #56]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe2:	f7fd f955 	bl	8001290 <HAL_GetTick>
 8003fe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fe8:	e008      	b.n	8003ffc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003fea:	f7fd f951 	bl	8001290 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e006      	b.n	800400a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004008:	7bfb      	ldrb	r3, [r7, #15]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	58024400 	.word	0x58024400
 8004018:	ffff0007 	.word	0xffff0007

0800401c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e042      	b.n	80040b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fc ff37 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2224      	movs	r2, #36	; 0x24
 800404a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8c2 	bl	80041e8 <UART_SetConfig>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e022      	b.n	80040b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 ff14 	bl	8004ea4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800408a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800409a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 ff9b 	bl	8004fe8 <UART_CheckIdleState>
 80040b2:	4603      	mov	r3, r0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08a      	sub	sp, #40	; 0x28
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	f040 8083 	bne.w	80041de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_UART_Transmit+0x28>
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e07b      	b.n	80041e0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Transmit+0x3a>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e074      	b.n	80041e0 <HAL_UART_Transmit+0x124>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2221      	movs	r2, #33	; 0x21
 800410a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800410e:	f7fd f8bf 	bl	8001290 <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	88fa      	ldrh	r2, [r7, #6]
 8004120:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412c:	d108      	bne.n	8004140 <HAL_UART_Transmit+0x84>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d104      	bne.n	8004140 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	e003      	b.n	8004148 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004144:	2300      	movs	r3, #0
 8004146:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004150:	e02c      	b.n	80041ac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2200      	movs	r2, #0
 800415a:	2180      	movs	r1, #128	; 0x80
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 ff8e 	bl	800507e <UART_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e039      	b.n	80041e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10b      	bne.n	800418a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004180:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	3302      	adds	r3, #2
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	e007      	b.n	800419a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	3301      	adds	r3, #1
 8004198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1cc      	bne.n	8004152 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2200      	movs	r2, #0
 80041c0:	2140      	movs	r1, #64	; 0x40
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 ff5b 	bl	800507e <UART_WaitOnFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e006      	b.n	80041e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e000      	b.n	80041e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80041de:	2302      	movs	r3, #2
  }
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e8:	b5b0      	push	{r4, r5, r7, lr}
 80041ea:	b08e      	sub	sp, #56	; 0x38
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4313      	orrs	r3, r2
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4bbf      	ldr	r3, [pc, #764]	; (8004514 <UART_SetConfig+0x32c>)
 8004216:	4013      	ands	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800421e:	430b      	orrs	r3, r1
 8004220:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4ab5      	ldr	r2, [pc, #724]	; (8004518 <UART_SetConfig+0x330>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d004      	beq.n	8004252 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800424e:	4313      	orrs	r3, r2
 8004250:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	4bb0      	ldr	r3, [pc, #704]	; (800451c <UART_SetConfig+0x334>)
 800425a:	4013      	ands	r3, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004262:	430b      	orrs	r3, r1
 8004264:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	f023 010f 	bic.w	r1, r3, #15
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4aa7      	ldr	r2, [pc, #668]	; (8004520 <UART_SetConfig+0x338>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d176      	bne.n	8004374 <UART_SetConfig+0x18c>
 8004286:	4ba7      	ldr	r3, [pc, #668]	; (8004524 <UART_SetConfig+0x33c>)
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800428e:	2b28      	cmp	r3, #40	; 0x28
 8004290:	d86c      	bhi.n	800436c <UART_SetConfig+0x184>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <UART_SetConfig+0xb0>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	0800433d 	.word	0x0800433d
 800429c:	0800436d 	.word	0x0800436d
 80042a0:	0800436d 	.word	0x0800436d
 80042a4:	0800436d 	.word	0x0800436d
 80042a8:	0800436d 	.word	0x0800436d
 80042ac:	0800436d 	.word	0x0800436d
 80042b0:	0800436d 	.word	0x0800436d
 80042b4:	0800436d 	.word	0x0800436d
 80042b8:	08004345 	.word	0x08004345
 80042bc:	0800436d 	.word	0x0800436d
 80042c0:	0800436d 	.word	0x0800436d
 80042c4:	0800436d 	.word	0x0800436d
 80042c8:	0800436d 	.word	0x0800436d
 80042cc:	0800436d 	.word	0x0800436d
 80042d0:	0800436d 	.word	0x0800436d
 80042d4:	0800436d 	.word	0x0800436d
 80042d8:	0800434d 	.word	0x0800434d
 80042dc:	0800436d 	.word	0x0800436d
 80042e0:	0800436d 	.word	0x0800436d
 80042e4:	0800436d 	.word	0x0800436d
 80042e8:	0800436d 	.word	0x0800436d
 80042ec:	0800436d 	.word	0x0800436d
 80042f0:	0800436d 	.word	0x0800436d
 80042f4:	0800436d 	.word	0x0800436d
 80042f8:	08004355 	.word	0x08004355
 80042fc:	0800436d 	.word	0x0800436d
 8004300:	0800436d 	.word	0x0800436d
 8004304:	0800436d 	.word	0x0800436d
 8004308:	0800436d 	.word	0x0800436d
 800430c:	0800436d 	.word	0x0800436d
 8004310:	0800436d 	.word	0x0800436d
 8004314:	0800436d 	.word	0x0800436d
 8004318:	0800435d 	.word	0x0800435d
 800431c:	0800436d 	.word	0x0800436d
 8004320:	0800436d 	.word	0x0800436d
 8004324:	0800436d 	.word	0x0800436d
 8004328:	0800436d 	.word	0x0800436d
 800432c:	0800436d 	.word	0x0800436d
 8004330:	0800436d 	.word	0x0800436d
 8004334:	0800436d 	.word	0x0800436d
 8004338:	08004365 	.word	0x08004365
 800433c:	2301      	movs	r3, #1
 800433e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004342:	e326      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004344:	2304      	movs	r3, #4
 8004346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800434a:	e322      	b.n	8004992 <UART_SetConfig+0x7aa>
 800434c:	2308      	movs	r3, #8
 800434e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004352:	e31e      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004354:	2310      	movs	r3, #16
 8004356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800435a:	e31a      	b.n	8004992 <UART_SetConfig+0x7aa>
 800435c:	2320      	movs	r3, #32
 800435e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004362:	e316      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004364:	2340      	movs	r3, #64	; 0x40
 8004366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800436a:	e312      	b.n	8004992 <UART_SetConfig+0x7aa>
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004372:	e30e      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a6b      	ldr	r2, [pc, #428]	; (8004528 <UART_SetConfig+0x340>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d130      	bne.n	80043e0 <UART_SetConfig+0x1f8>
 800437e:	4b69      	ldr	r3, [pc, #420]	; (8004524 <UART_SetConfig+0x33c>)
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	2b05      	cmp	r3, #5
 8004388:	d826      	bhi.n	80043d8 <UART_SetConfig+0x1f0>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <UART_SetConfig+0x1a8>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043a9 	.word	0x080043a9
 8004394:	080043b1 	.word	0x080043b1
 8004398:	080043b9 	.word	0x080043b9
 800439c:	080043c1 	.word	0x080043c1
 80043a0:	080043c9 	.word	0x080043c9
 80043a4:	080043d1 	.word	0x080043d1
 80043a8:	2300      	movs	r3, #0
 80043aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ae:	e2f0      	b.n	8004992 <UART_SetConfig+0x7aa>
 80043b0:	2304      	movs	r3, #4
 80043b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043b6:	e2ec      	b.n	8004992 <UART_SetConfig+0x7aa>
 80043b8:	2308      	movs	r3, #8
 80043ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043be:	e2e8      	b.n	8004992 <UART_SetConfig+0x7aa>
 80043c0:	2310      	movs	r3, #16
 80043c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043c6:	e2e4      	b.n	8004992 <UART_SetConfig+0x7aa>
 80043c8:	2320      	movs	r3, #32
 80043ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ce:	e2e0      	b.n	8004992 <UART_SetConfig+0x7aa>
 80043d0:	2340      	movs	r3, #64	; 0x40
 80043d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043d6:	e2dc      	b.n	8004992 <UART_SetConfig+0x7aa>
 80043d8:	2380      	movs	r3, #128	; 0x80
 80043da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043de:	e2d8      	b.n	8004992 <UART_SetConfig+0x7aa>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a51      	ldr	r2, [pc, #324]	; (800452c <UART_SetConfig+0x344>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d130      	bne.n	800444c <UART_SetConfig+0x264>
 80043ea:	4b4e      	ldr	r3, [pc, #312]	; (8004524 <UART_SetConfig+0x33c>)
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	d826      	bhi.n	8004444 <UART_SetConfig+0x25c>
 80043f6:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <UART_SetConfig+0x214>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	08004415 	.word	0x08004415
 8004400:	0800441d 	.word	0x0800441d
 8004404:	08004425 	.word	0x08004425
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004435 	.word	0x08004435
 8004410:	0800443d 	.word	0x0800443d
 8004414:	2300      	movs	r3, #0
 8004416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800441a:	e2ba      	b.n	8004992 <UART_SetConfig+0x7aa>
 800441c:	2304      	movs	r3, #4
 800441e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004422:	e2b6      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004424:	2308      	movs	r3, #8
 8004426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800442a:	e2b2      	b.n	8004992 <UART_SetConfig+0x7aa>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004432:	e2ae      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004434:	2320      	movs	r3, #32
 8004436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800443a:	e2aa      	b.n	8004992 <UART_SetConfig+0x7aa>
 800443c:	2340      	movs	r3, #64	; 0x40
 800443e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004442:	e2a6      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800444a:	e2a2      	b.n	8004992 <UART_SetConfig+0x7aa>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a37      	ldr	r2, [pc, #220]	; (8004530 <UART_SetConfig+0x348>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d130      	bne.n	80044b8 <UART_SetConfig+0x2d0>
 8004456:	4b33      	ldr	r3, [pc, #204]	; (8004524 <UART_SetConfig+0x33c>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b05      	cmp	r3, #5
 8004460:	d826      	bhi.n	80044b0 <UART_SetConfig+0x2c8>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <UART_SetConfig+0x280>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	08004481 	.word	0x08004481
 800446c:	08004489 	.word	0x08004489
 8004470:	08004491 	.word	0x08004491
 8004474:	08004499 	.word	0x08004499
 8004478:	080044a1 	.word	0x080044a1
 800447c:	080044a9 	.word	0x080044a9
 8004480:	2300      	movs	r3, #0
 8004482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004486:	e284      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004488:	2304      	movs	r3, #4
 800448a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800448e:	e280      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004490:	2308      	movs	r3, #8
 8004492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004496:	e27c      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004498:	2310      	movs	r3, #16
 800449a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800449e:	e278      	b.n	8004992 <UART_SetConfig+0x7aa>
 80044a0:	2320      	movs	r3, #32
 80044a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044a6:	e274      	b.n	8004992 <UART_SetConfig+0x7aa>
 80044a8:	2340      	movs	r3, #64	; 0x40
 80044aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044ae:	e270      	b.n	8004992 <UART_SetConfig+0x7aa>
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044b6:	e26c      	b.n	8004992 <UART_SetConfig+0x7aa>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1d      	ldr	r2, [pc, #116]	; (8004534 <UART_SetConfig+0x34c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d142      	bne.n	8004548 <UART_SetConfig+0x360>
 80044c2:	4b18      	ldr	r3, [pc, #96]	; (8004524 <UART_SetConfig+0x33c>)
 80044c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	2b05      	cmp	r3, #5
 80044cc:	d838      	bhi.n	8004540 <UART_SetConfig+0x358>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <UART_SetConfig+0x2ec>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	080044ed 	.word	0x080044ed
 80044d8:	080044f5 	.word	0x080044f5
 80044dc:	080044fd 	.word	0x080044fd
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004539 	.word	0x08004539
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044f2:	e24e      	b.n	8004992 <UART_SetConfig+0x7aa>
 80044f4:	2304      	movs	r3, #4
 80044f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044fa:	e24a      	b.n	8004992 <UART_SetConfig+0x7aa>
 80044fc:	2308      	movs	r3, #8
 80044fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004502:	e246      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004504:	2310      	movs	r3, #16
 8004506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800450a:	e242      	b.n	8004992 <UART_SetConfig+0x7aa>
 800450c:	2320      	movs	r3, #32
 800450e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004512:	e23e      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004514:	cfff69f3 	.word	0xcfff69f3
 8004518:	58000c00 	.word	0x58000c00
 800451c:	11fff4ff 	.word	0x11fff4ff
 8004520:	40011000 	.word	0x40011000
 8004524:	58024400 	.word	0x58024400
 8004528:	40004400 	.word	0x40004400
 800452c:	40004800 	.word	0x40004800
 8004530:	40004c00 	.word	0x40004c00
 8004534:	40005000 	.word	0x40005000
 8004538:	2340      	movs	r3, #64	; 0x40
 800453a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800453e:	e228      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004546:	e224      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4ab1      	ldr	r2, [pc, #708]	; (8004814 <UART_SetConfig+0x62c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d176      	bne.n	8004640 <UART_SetConfig+0x458>
 8004552:	4bb1      	ldr	r3, [pc, #708]	; (8004818 <UART_SetConfig+0x630>)
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800455a:	2b28      	cmp	r3, #40	; 0x28
 800455c:	d86c      	bhi.n	8004638 <UART_SetConfig+0x450>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0x37c>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004609 	.word	0x08004609
 8004568:	08004639 	.word	0x08004639
 800456c:	08004639 	.word	0x08004639
 8004570:	08004639 	.word	0x08004639
 8004574:	08004639 	.word	0x08004639
 8004578:	08004639 	.word	0x08004639
 800457c:	08004639 	.word	0x08004639
 8004580:	08004639 	.word	0x08004639
 8004584:	08004611 	.word	0x08004611
 8004588:	08004639 	.word	0x08004639
 800458c:	08004639 	.word	0x08004639
 8004590:	08004639 	.word	0x08004639
 8004594:	08004639 	.word	0x08004639
 8004598:	08004639 	.word	0x08004639
 800459c:	08004639 	.word	0x08004639
 80045a0:	08004639 	.word	0x08004639
 80045a4:	08004619 	.word	0x08004619
 80045a8:	08004639 	.word	0x08004639
 80045ac:	08004639 	.word	0x08004639
 80045b0:	08004639 	.word	0x08004639
 80045b4:	08004639 	.word	0x08004639
 80045b8:	08004639 	.word	0x08004639
 80045bc:	08004639 	.word	0x08004639
 80045c0:	08004639 	.word	0x08004639
 80045c4:	08004621 	.word	0x08004621
 80045c8:	08004639 	.word	0x08004639
 80045cc:	08004639 	.word	0x08004639
 80045d0:	08004639 	.word	0x08004639
 80045d4:	08004639 	.word	0x08004639
 80045d8:	08004639 	.word	0x08004639
 80045dc:	08004639 	.word	0x08004639
 80045e0:	08004639 	.word	0x08004639
 80045e4:	08004629 	.word	0x08004629
 80045e8:	08004639 	.word	0x08004639
 80045ec:	08004639 	.word	0x08004639
 80045f0:	08004639 	.word	0x08004639
 80045f4:	08004639 	.word	0x08004639
 80045f8:	08004639 	.word	0x08004639
 80045fc:	08004639 	.word	0x08004639
 8004600:	08004639 	.word	0x08004639
 8004604:	08004631 	.word	0x08004631
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800460e:	e1c0      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004610:	2304      	movs	r3, #4
 8004612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004616:	e1bc      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004618:	2308      	movs	r3, #8
 800461a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800461e:	e1b8      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004620:	2310      	movs	r3, #16
 8004622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004626:	e1b4      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004628:	2320      	movs	r3, #32
 800462a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800462e:	e1b0      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004630:	2340      	movs	r3, #64	; 0x40
 8004632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004636:	e1ac      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004638:	2380      	movs	r3, #128	; 0x80
 800463a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800463e:	e1a8      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a75      	ldr	r2, [pc, #468]	; (800481c <UART_SetConfig+0x634>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d130      	bne.n	80046ac <UART_SetConfig+0x4c4>
 800464a:	4b73      	ldr	r3, [pc, #460]	; (8004818 <UART_SetConfig+0x630>)
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	2b05      	cmp	r3, #5
 8004654:	d826      	bhi.n	80046a4 <UART_SetConfig+0x4bc>
 8004656:	a201      	add	r2, pc, #4	; (adr r2, 800465c <UART_SetConfig+0x474>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	08004675 	.word	0x08004675
 8004660:	0800467d 	.word	0x0800467d
 8004664:	08004685 	.word	0x08004685
 8004668:	0800468d 	.word	0x0800468d
 800466c:	08004695 	.word	0x08004695
 8004670:	0800469d 	.word	0x0800469d
 8004674:	2300      	movs	r3, #0
 8004676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800467a:	e18a      	b.n	8004992 <UART_SetConfig+0x7aa>
 800467c:	2304      	movs	r3, #4
 800467e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004682:	e186      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004684:	2308      	movs	r3, #8
 8004686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800468a:	e182      	b.n	8004992 <UART_SetConfig+0x7aa>
 800468c:	2310      	movs	r3, #16
 800468e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004692:	e17e      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004694:	2320      	movs	r3, #32
 8004696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800469a:	e17a      	b.n	8004992 <UART_SetConfig+0x7aa>
 800469c:	2340      	movs	r3, #64	; 0x40
 800469e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046a2:	e176      	b.n	8004992 <UART_SetConfig+0x7aa>
 80046a4:	2380      	movs	r3, #128	; 0x80
 80046a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046aa:	e172      	b.n	8004992 <UART_SetConfig+0x7aa>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a5b      	ldr	r2, [pc, #364]	; (8004820 <UART_SetConfig+0x638>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d130      	bne.n	8004718 <UART_SetConfig+0x530>
 80046b6:	4b58      	ldr	r3, [pc, #352]	; (8004818 <UART_SetConfig+0x630>)
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d826      	bhi.n	8004710 <UART_SetConfig+0x528>
 80046c2:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <UART_SetConfig+0x4e0>)
 80046c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c8:	080046e1 	.word	0x080046e1
 80046cc:	080046e9 	.word	0x080046e9
 80046d0:	080046f1 	.word	0x080046f1
 80046d4:	080046f9 	.word	0x080046f9
 80046d8:	08004701 	.word	0x08004701
 80046dc:	08004709 	.word	0x08004709
 80046e0:	2300      	movs	r3, #0
 80046e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046e6:	e154      	b.n	8004992 <UART_SetConfig+0x7aa>
 80046e8:	2304      	movs	r3, #4
 80046ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ee:	e150      	b.n	8004992 <UART_SetConfig+0x7aa>
 80046f0:	2308      	movs	r3, #8
 80046f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046f6:	e14c      	b.n	8004992 <UART_SetConfig+0x7aa>
 80046f8:	2310      	movs	r3, #16
 80046fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046fe:	e148      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004700:	2320      	movs	r3, #32
 8004702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004706:	e144      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004708:	2340      	movs	r3, #64	; 0x40
 800470a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800470e:	e140      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004716:	e13c      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a41      	ldr	r2, [pc, #260]	; (8004824 <UART_SetConfig+0x63c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	f040 8082 	bne.w	8004828 <UART_SetConfig+0x640>
 8004724:	4b3c      	ldr	r3, [pc, #240]	; (8004818 <UART_SetConfig+0x630>)
 8004726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004728:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800472c:	2b28      	cmp	r3, #40	; 0x28
 800472e:	d86d      	bhi.n	800480c <UART_SetConfig+0x624>
 8004730:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <UART_SetConfig+0x550>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	080047dd 	.word	0x080047dd
 800473c:	0800480d 	.word	0x0800480d
 8004740:	0800480d 	.word	0x0800480d
 8004744:	0800480d 	.word	0x0800480d
 8004748:	0800480d 	.word	0x0800480d
 800474c:	0800480d 	.word	0x0800480d
 8004750:	0800480d 	.word	0x0800480d
 8004754:	0800480d 	.word	0x0800480d
 8004758:	080047e5 	.word	0x080047e5
 800475c:	0800480d 	.word	0x0800480d
 8004760:	0800480d 	.word	0x0800480d
 8004764:	0800480d 	.word	0x0800480d
 8004768:	0800480d 	.word	0x0800480d
 800476c:	0800480d 	.word	0x0800480d
 8004770:	0800480d 	.word	0x0800480d
 8004774:	0800480d 	.word	0x0800480d
 8004778:	080047ed 	.word	0x080047ed
 800477c:	0800480d 	.word	0x0800480d
 8004780:	0800480d 	.word	0x0800480d
 8004784:	0800480d 	.word	0x0800480d
 8004788:	0800480d 	.word	0x0800480d
 800478c:	0800480d 	.word	0x0800480d
 8004790:	0800480d 	.word	0x0800480d
 8004794:	0800480d 	.word	0x0800480d
 8004798:	080047f5 	.word	0x080047f5
 800479c:	0800480d 	.word	0x0800480d
 80047a0:	0800480d 	.word	0x0800480d
 80047a4:	0800480d 	.word	0x0800480d
 80047a8:	0800480d 	.word	0x0800480d
 80047ac:	0800480d 	.word	0x0800480d
 80047b0:	0800480d 	.word	0x0800480d
 80047b4:	0800480d 	.word	0x0800480d
 80047b8:	080047fd 	.word	0x080047fd
 80047bc:	0800480d 	.word	0x0800480d
 80047c0:	0800480d 	.word	0x0800480d
 80047c4:	0800480d 	.word	0x0800480d
 80047c8:	0800480d 	.word	0x0800480d
 80047cc:	0800480d 	.word	0x0800480d
 80047d0:	0800480d 	.word	0x0800480d
 80047d4:	0800480d 	.word	0x0800480d
 80047d8:	08004805 	.word	0x08004805
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047e2:	e0d6      	b.n	8004992 <UART_SetConfig+0x7aa>
 80047e4:	2304      	movs	r3, #4
 80047e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ea:	e0d2      	b.n	8004992 <UART_SetConfig+0x7aa>
 80047ec:	2308      	movs	r3, #8
 80047ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047f2:	e0ce      	b.n	8004992 <UART_SetConfig+0x7aa>
 80047f4:	2310      	movs	r3, #16
 80047f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047fa:	e0ca      	b.n	8004992 <UART_SetConfig+0x7aa>
 80047fc:	2320      	movs	r3, #32
 80047fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004802:	e0c6      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004804:	2340      	movs	r3, #64	; 0x40
 8004806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800480a:	e0c2      	b.n	8004992 <UART_SetConfig+0x7aa>
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004812:	e0be      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004814:	40011400 	.word	0x40011400
 8004818:	58024400 	.word	0x58024400
 800481c:	40007800 	.word	0x40007800
 8004820:	40007c00 	.word	0x40007c00
 8004824:	40011800 	.word	0x40011800
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4aad      	ldr	r2, [pc, #692]	; (8004ae4 <UART_SetConfig+0x8fc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d176      	bne.n	8004920 <UART_SetConfig+0x738>
 8004832:	4bad      	ldr	r3, [pc, #692]	; (8004ae8 <UART_SetConfig+0x900>)
 8004834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800483a:	2b28      	cmp	r3, #40	; 0x28
 800483c:	d86c      	bhi.n	8004918 <UART_SetConfig+0x730>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <UART_SetConfig+0x65c>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	080048e9 	.word	0x080048e9
 8004848:	08004919 	.word	0x08004919
 800484c:	08004919 	.word	0x08004919
 8004850:	08004919 	.word	0x08004919
 8004854:	08004919 	.word	0x08004919
 8004858:	08004919 	.word	0x08004919
 800485c:	08004919 	.word	0x08004919
 8004860:	08004919 	.word	0x08004919
 8004864:	080048f1 	.word	0x080048f1
 8004868:	08004919 	.word	0x08004919
 800486c:	08004919 	.word	0x08004919
 8004870:	08004919 	.word	0x08004919
 8004874:	08004919 	.word	0x08004919
 8004878:	08004919 	.word	0x08004919
 800487c:	08004919 	.word	0x08004919
 8004880:	08004919 	.word	0x08004919
 8004884:	080048f9 	.word	0x080048f9
 8004888:	08004919 	.word	0x08004919
 800488c:	08004919 	.word	0x08004919
 8004890:	08004919 	.word	0x08004919
 8004894:	08004919 	.word	0x08004919
 8004898:	08004919 	.word	0x08004919
 800489c:	08004919 	.word	0x08004919
 80048a0:	08004919 	.word	0x08004919
 80048a4:	08004901 	.word	0x08004901
 80048a8:	08004919 	.word	0x08004919
 80048ac:	08004919 	.word	0x08004919
 80048b0:	08004919 	.word	0x08004919
 80048b4:	08004919 	.word	0x08004919
 80048b8:	08004919 	.word	0x08004919
 80048bc:	08004919 	.word	0x08004919
 80048c0:	08004919 	.word	0x08004919
 80048c4:	08004909 	.word	0x08004909
 80048c8:	08004919 	.word	0x08004919
 80048cc:	08004919 	.word	0x08004919
 80048d0:	08004919 	.word	0x08004919
 80048d4:	08004919 	.word	0x08004919
 80048d8:	08004919 	.word	0x08004919
 80048dc:	08004919 	.word	0x08004919
 80048e0:	08004919 	.word	0x08004919
 80048e4:	08004911 	.word	0x08004911
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ee:	e050      	b.n	8004992 <UART_SetConfig+0x7aa>
 80048f0:	2304      	movs	r3, #4
 80048f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048f6:	e04c      	b.n	8004992 <UART_SetConfig+0x7aa>
 80048f8:	2308      	movs	r3, #8
 80048fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048fe:	e048      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004900:	2310      	movs	r3, #16
 8004902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004906:	e044      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004908:	2320      	movs	r3, #32
 800490a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800490e:	e040      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004910:	2340      	movs	r3, #64	; 0x40
 8004912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004916:	e03c      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004918:	2380      	movs	r3, #128	; 0x80
 800491a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800491e:	e038      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a71      	ldr	r2, [pc, #452]	; (8004aec <UART_SetConfig+0x904>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d130      	bne.n	800498c <UART_SetConfig+0x7a4>
 800492a:	4b6f      	ldr	r3, [pc, #444]	; (8004ae8 <UART_SetConfig+0x900>)
 800492c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	2b05      	cmp	r3, #5
 8004934:	d826      	bhi.n	8004984 <UART_SetConfig+0x79c>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <UART_SetConfig+0x754>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004955 	.word	0x08004955
 8004940:	0800495d 	.word	0x0800495d
 8004944:	08004965 	.word	0x08004965
 8004948:	0800496d 	.word	0x0800496d
 800494c:	08004975 	.word	0x08004975
 8004950:	0800497d 	.word	0x0800497d
 8004954:	2302      	movs	r3, #2
 8004956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800495a:	e01a      	b.n	8004992 <UART_SetConfig+0x7aa>
 800495c:	2304      	movs	r3, #4
 800495e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004962:	e016      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004964:	2308      	movs	r3, #8
 8004966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800496a:	e012      	b.n	8004992 <UART_SetConfig+0x7aa>
 800496c:	2310      	movs	r3, #16
 800496e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004972:	e00e      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004974:	2320      	movs	r3, #32
 8004976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800497a:	e00a      	b.n	8004992 <UART_SetConfig+0x7aa>
 800497c:	2340      	movs	r3, #64	; 0x40
 800497e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004982:	e006      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800498a:	e002      	b.n	8004992 <UART_SetConfig+0x7aa>
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a55      	ldr	r2, [pc, #340]	; (8004aec <UART_SetConfig+0x904>)
 8004998:	4293      	cmp	r3, r2
 800499a:	f040 80f0 	bne.w	8004b7e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800499e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	dc46      	bgt.n	8004a34 <UART_SetConfig+0x84c>
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	db75      	blt.n	8004a96 <UART_SetConfig+0x8ae>
 80049aa:	3b02      	subs	r3, #2
 80049ac:	2b1e      	cmp	r3, #30
 80049ae:	d872      	bhi.n	8004a96 <UART_SetConfig+0x8ae>
 80049b0:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <UART_SetConfig+0x7d0>)
 80049b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b6:	bf00      	nop
 80049b8:	08004a3b 	.word	0x08004a3b
 80049bc:	08004a97 	.word	0x08004a97
 80049c0:	08004a43 	.word	0x08004a43
 80049c4:	08004a97 	.word	0x08004a97
 80049c8:	08004a97 	.word	0x08004a97
 80049cc:	08004a97 	.word	0x08004a97
 80049d0:	08004a53 	.word	0x08004a53
 80049d4:	08004a97 	.word	0x08004a97
 80049d8:	08004a97 	.word	0x08004a97
 80049dc:	08004a97 	.word	0x08004a97
 80049e0:	08004a97 	.word	0x08004a97
 80049e4:	08004a97 	.word	0x08004a97
 80049e8:	08004a97 	.word	0x08004a97
 80049ec:	08004a97 	.word	0x08004a97
 80049f0:	08004a63 	.word	0x08004a63
 80049f4:	08004a97 	.word	0x08004a97
 80049f8:	08004a97 	.word	0x08004a97
 80049fc:	08004a97 	.word	0x08004a97
 8004a00:	08004a97 	.word	0x08004a97
 8004a04:	08004a97 	.word	0x08004a97
 8004a08:	08004a97 	.word	0x08004a97
 8004a0c:	08004a97 	.word	0x08004a97
 8004a10:	08004a97 	.word	0x08004a97
 8004a14:	08004a97 	.word	0x08004a97
 8004a18:	08004a97 	.word	0x08004a97
 8004a1c:	08004a97 	.word	0x08004a97
 8004a20:	08004a97 	.word	0x08004a97
 8004a24:	08004a97 	.word	0x08004a97
 8004a28:	08004a97 	.word	0x08004a97
 8004a2c:	08004a97 	.word	0x08004a97
 8004a30:	08004a89 	.word	0x08004a89
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d02a      	beq.n	8004a8e <UART_SetConfig+0x8a6>
 8004a38:	e02d      	b.n	8004a96 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004a3a:	f7fe fecd 	bl	80037d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004a3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004a40:	e02f      	b.n	8004aa2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a42:	f107 0314 	add.w	r3, r7, #20
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe fedc 	bl	8003804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a50:	e027      	b.n	8004aa2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a52:	f107 0308 	add.w	r3, r7, #8
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff f828 	bl	8003aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a60:	e01f      	b.n	8004aa2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a62:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <UART_SetConfig+0x900>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <UART_SetConfig+0x900>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	08db      	lsrs	r3, r3, #3
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <UART_SetConfig+0x908>)
 8004a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a80:	e00f      	b.n	8004aa2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004a82:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <UART_SetConfig+0x908>)
 8004a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a86:	e00c      	b.n	8004aa2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a88:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <UART_SetConfig+0x90c>)
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a8c:	e009      	b.n	8004aa2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a94:	e005      	b.n	8004aa2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004aa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 81e6 	beq.w	8004e76 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <UART_SetConfig+0x910>)
 8004ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004abc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	4413      	add	r3, r2
 8004ac8:	6a3a      	ldr	r2, [r7, #32]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d305      	bcc.n	8004ada <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ad4:	6a3a      	ldr	r2, [r7, #32]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d910      	bls.n	8004afc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004ae0:	e1c9      	b.n	8004e76 <UART_SetConfig+0xc8e>
 8004ae2:	bf00      	nop
 8004ae4:	40011c00 	.word	0x40011c00
 8004ae8:	58024400 	.word	0x58024400
 8004aec:	58000c00 	.word	0x58000c00
 8004af0:	03d09000 	.word	0x03d09000
 8004af4:	003d0900 	.word	0x003d0900
 8004af8:	08010258 	.word	0x08010258
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	4618      	mov	r0, r3
 8004b00:	f04f 0100 	mov.w	r1, #0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	4ac1      	ldr	r2, [pc, #772]	; (8004e10 <UART_SetConfig+0xc28>)
 8004b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	f7fb fc44 	bl	80003a0 <__aeabi_uldivmod>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	020b      	lsls	r3, r1, #8
 8004b2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b2e:	0202      	lsls	r2, r0, #8
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	6849      	ldr	r1, [r1, #4]
 8004b34:	0849      	lsrs	r1, r1, #1
 8004b36:	4608      	mov	r0, r1
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	1814      	adds	r4, r2, r0
 8004b3e:	eb43 0501 	adc.w	r5, r3, r1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	4629      	mov	r1, r5
 8004b50:	f7fb fc26 	bl	80003a0 <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4613      	mov	r3, r2
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b62:	d308      	bcc.n	8004b76 <UART_SetConfig+0x98e>
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b6a:	d204      	bcs.n	8004b76 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b72:	60da      	str	r2, [r3, #12]
 8004b74:	e17f      	b.n	8004e76 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004b7c:	e17b      	b.n	8004e76 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b86:	f040 80bd 	bne.w	8004d04 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8004b8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	dc48      	bgt.n	8004c24 <UART_SetConfig+0xa3c>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	db7b      	blt.n	8004c8e <UART_SetConfig+0xaa6>
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d879      	bhi.n	8004c8e <UART_SetConfig+0xaa6>
 8004b9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <UART_SetConfig+0x9b8>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004c2b 	.word	0x08004c2b
 8004ba4:	08004c33 	.word	0x08004c33
 8004ba8:	08004c8f 	.word	0x08004c8f
 8004bac:	08004c8f 	.word	0x08004c8f
 8004bb0:	08004c3b 	.word	0x08004c3b
 8004bb4:	08004c8f 	.word	0x08004c8f
 8004bb8:	08004c8f 	.word	0x08004c8f
 8004bbc:	08004c8f 	.word	0x08004c8f
 8004bc0:	08004c4b 	.word	0x08004c4b
 8004bc4:	08004c8f 	.word	0x08004c8f
 8004bc8:	08004c8f 	.word	0x08004c8f
 8004bcc:	08004c8f 	.word	0x08004c8f
 8004bd0:	08004c8f 	.word	0x08004c8f
 8004bd4:	08004c8f 	.word	0x08004c8f
 8004bd8:	08004c8f 	.word	0x08004c8f
 8004bdc:	08004c8f 	.word	0x08004c8f
 8004be0:	08004c5b 	.word	0x08004c5b
 8004be4:	08004c8f 	.word	0x08004c8f
 8004be8:	08004c8f 	.word	0x08004c8f
 8004bec:	08004c8f 	.word	0x08004c8f
 8004bf0:	08004c8f 	.word	0x08004c8f
 8004bf4:	08004c8f 	.word	0x08004c8f
 8004bf8:	08004c8f 	.word	0x08004c8f
 8004bfc:	08004c8f 	.word	0x08004c8f
 8004c00:	08004c8f 	.word	0x08004c8f
 8004c04:	08004c8f 	.word	0x08004c8f
 8004c08:	08004c8f 	.word	0x08004c8f
 8004c0c:	08004c8f 	.word	0x08004c8f
 8004c10:	08004c8f 	.word	0x08004c8f
 8004c14:	08004c8f 	.word	0x08004c8f
 8004c18:	08004c8f 	.word	0x08004c8f
 8004c1c:	08004c8f 	.word	0x08004c8f
 8004c20:	08004c81 	.word	0x08004c81
 8004c24:	2b40      	cmp	r3, #64	; 0x40
 8004c26:	d02e      	beq.n	8004c86 <UART_SetConfig+0xa9e>
 8004c28:	e031      	b.n	8004c8e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c2a:	f7fd fe9d 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8004c2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004c30:	e033      	b.n	8004c9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c32:	f7fd feaf 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8004c36:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004c38:	e02f      	b.n	8004c9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c3a:	f107 0314 	add.w	r3, r7, #20
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fde0 	bl	8003804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c48:	e027      	b.n	8004c9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c4a:	f107 0308 	add.w	r3, r7, #8
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe ff2c 	bl	8003aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c58:	e01f      	b.n	8004c9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c5a:	4b6e      	ldr	r3, [pc, #440]	; (8004e14 <UART_SetConfig+0xc2c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c66:	4b6b      	ldr	r3, [pc, #428]	; (8004e14 <UART_SetConfig+0xc2c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	08db      	lsrs	r3, r3, #3
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	4a69      	ldr	r2, [pc, #420]	; (8004e18 <UART_SetConfig+0xc30>)
 8004c72:	fa22 f303 	lsr.w	r3, r2, r3
 8004c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c78:	e00f      	b.n	8004c9a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8004c7a:	4b67      	ldr	r3, [pc, #412]	; (8004e18 <UART_SetConfig+0xc30>)
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c7e:	e00c      	b.n	8004c9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c80:	4b66      	ldr	r3, [pc, #408]	; (8004e1c <UART_SetConfig+0xc34>)
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c84:	e009      	b.n	8004c9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c8c:	e005      	b.n	8004c9a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004c98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80ea 	beq.w	8004e76 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	4a5a      	ldr	r2, [pc, #360]	; (8004e10 <UART_SetConfig+0xc28>)
 8004ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cac:	461a      	mov	r2, r3
 8004cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cb4:	005a      	lsls	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	441a      	add	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	2b0f      	cmp	r3, #15
 8004ccc:	d916      	bls.n	8004cfc <UART_SetConfig+0xb14>
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd4:	d212      	bcs.n	8004cfc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f023 030f 	bic.w	r3, r3, #15
 8004cde:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004cf8:	60da      	str	r2, [r3, #12]
 8004cfa:	e0bc      	b.n	8004e76 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004d02:	e0b8      	b.n	8004e76 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	dc4b      	bgt.n	8004da4 <UART_SetConfig+0xbbc>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f2c0 8087 	blt.w	8004e20 <UART_SetConfig+0xc38>
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	f200 8084 	bhi.w	8004e20 <UART_SetConfig+0xc38>
 8004d18:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <UART_SetConfig+0xb38>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004dab 	.word	0x08004dab
 8004d24:	08004db3 	.word	0x08004db3
 8004d28:	08004e21 	.word	0x08004e21
 8004d2c:	08004e21 	.word	0x08004e21
 8004d30:	08004dbb 	.word	0x08004dbb
 8004d34:	08004e21 	.word	0x08004e21
 8004d38:	08004e21 	.word	0x08004e21
 8004d3c:	08004e21 	.word	0x08004e21
 8004d40:	08004dcb 	.word	0x08004dcb
 8004d44:	08004e21 	.word	0x08004e21
 8004d48:	08004e21 	.word	0x08004e21
 8004d4c:	08004e21 	.word	0x08004e21
 8004d50:	08004e21 	.word	0x08004e21
 8004d54:	08004e21 	.word	0x08004e21
 8004d58:	08004e21 	.word	0x08004e21
 8004d5c:	08004e21 	.word	0x08004e21
 8004d60:	08004ddb 	.word	0x08004ddb
 8004d64:	08004e21 	.word	0x08004e21
 8004d68:	08004e21 	.word	0x08004e21
 8004d6c:	08004e21 	.word	0x08004e21
 8004d70:	08004e21 	.word	0x08004e21
 8004d74:	08004e21 	.word	0x08004e21
 8004d78:	08004e21 	.word	0x08004e21
 8004d7c:	08004e21 	.word	0x08004e21
 8004d80:	08004e21 	.word	0x08004e21
 8004d84:	08004e21 	.word	0x08004e21
 8004d88:	08004e21 	.word	0x08004e21
 8004d8c:	08004e21 	.word	0x08004e21
 8004d90:	08004e21 	.word	0x08004e21
 8004d94:	08004e21 	.word	0x08004e21
 8004d98:	08004e21 	.word	0x08004e21
 8004d9c:	08004e21 	.word	0x08004e21
 8004da0:	08004e01 	.word	0x08004e01
 8004da4:	2b40      	cmp	r3, #64	; 0x40
 8004da6:	d02e      	beq.n	8004e06 <UART_SetConfig+0xc1e>
 8004da8:	e03a      	b.n	8004e20 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004daa:	f7fd fddd 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8004dae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004db0:	e03c      	b.n	8004e2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db2:	f7fd fdef 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8004db6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004db8:	e038      	b.n	8004e2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dba:	f107 0314 	add.w	r3, r7, #20
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fe fd20 	bl	8003804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dc8:	e030      	b.n	8004e2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dca:	f107 0308 	add.w	r3, r7, #8
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fe6c 	bl	8003aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dd8:	e028      	b.n	8004e2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dda:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <UART_SetConfig+0xc2c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004de6:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <UART_SetConfig+0xc2c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	08db      	lsrs	r3, r3, #3
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	4a09      	ldr	r2, [pc, #36]	; (8004e18 <UART_SetConfig+0xc30>)
 8004df2:	fa22 f303 	lsr.w	r3, r2, r3
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004df8:	e018      	b.n	8004e2c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <UART_SetConfig+0xc30>)
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dfe:	e015      	b.n	8004e2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e00:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <UART_SetConfig+0xc34>)
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e04:	e012      	b.n	8004e2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e0c:	e00e      	b.n	8004e2c <UART_SetConfig+0xc44>
 8004e0e:	bf00      	nop
 8004e10:	08010258 	.word	0x08010258
 8004e14:	58024400 	.word	0x58024400
 8004e18:	03d09000 	.word	0x03d09000
 8004e1c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004e2a:	bf00      	nop
    }

    if (pclk != 0U)
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d021      	beq.n	8004e76 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	4a1a      	ldr	r2, [pc, #104]	; (8004ea0 <UART_SetConfig+0xcb8>)
 8004e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	441a      	add	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	2b0f      	cmp	r3, #15
 8004e5a:	d909      	bls.n	8004e70 <UART_SetConfig+0xc88>
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e62:	d205      	bcs.n	8004e70 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	e002      	b.n	8004e76 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004e92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3738      	adds	r7, #56	; 0x38
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	08010258 	.word	0x08010258

08004ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01a      	beq.n	8004fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa2:	d10a      	bne.n	8004fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]
  }
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ff8:	f7fc f94a 	bl	8001290 <HAL_GetTick>
 8004ffc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b08      	cmp	r3, #8
 800500a:	d10e      	bne.n	800502a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800500c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f82f 	bl	800507e <UART_WaitOnFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e025      	b.n	8005076 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b04      	cmp	r3, #4
 8005036:	d10e      	bne.n	8005056 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f819 	bl	800507e <UART_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e00f      	b.n	8005076 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b09c      	sub	sp, #112	; 0x70
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	4613      	mov	r3, r2
 800508c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508e:	e0a9      	b.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	f000 80a5 	beq.w	80051e4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509a:	f7fc f8f9 	bl	8001290 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d302      	bcc.n	80050b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80050aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d140      	bne.n	8005132 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b8:	e853 3f00 	ldrex	r3, [r3]
 80050bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050c4:	667b      	str	r3, [r7, #100]	; 0x64
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e6      	bne.n	80050b0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3308      	adds	r3, #8
 80050e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	663b      	str	r3, [r7, #96]	; 0x60
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3308      	adds	r3, #8
 8005100:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005102:	64ba      	str	r2, [r7, #72]	; 0x48
 8005104:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e5      	bne.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2220      	movs	r2, #32
 8005122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e069      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d051      	beq.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800514a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514e:	d149      	bne.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005158:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800516e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
 800517a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800517e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e6      	bne.n	800515a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3308      	adds	r3, #8
 8005192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	613b      	str	r3, [r7, #16]
   return(result);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3308      	adds	r3, #8
 80051aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051ac:	623a      	str	r2, [r7, #32]
 80051ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	69f9      	ldr	r1, [r7, #28]
 80051b2:	6a3a      	ldr	r2, [r7, #32]
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e5      	bne.n	800518c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e010      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4013      	ands	r3, r2
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	429a      	cmp	r2, r3
 8005200:	f43f af46 	beq.w	8005090 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3770      	adds	r7, #112	; 0x70
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800520e:	b480      	push	{r7}
 8005210:	b085      	sub	sp, #20
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_UARTEx_DisableFifoMode+0x16>
 8005220:	2302      	movs	r3, #2
 8005222:	e027      	b.n	8005274 <HAL_UARTEx_DisableFifoMode+0x66>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2224      	movs	r2, #36	; 0x24
 8005230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005252:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005294:	2302      	movs	r3, #2
 8005296:	e02d      	b.n	80052f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2224      	movs	r2, #36	; 0x24
 80052a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0201 	bic.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f84f 	bl	8005378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005310:	2302      	movs	r3, #2
 8005312:	e02d      	b.n	8005370 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2224      	movs	r2, #36	; 0x24
 8005320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0201 	bic.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f811 	bl	8005378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2220      	movs	r2, #32
 8005362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005384:	2b00      	cmp	r3, #0
 8005386:	d108      	bne.n	800539a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005398:	e031      	b.n	80053fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800539a:	2310      	movs	r3, #16
 800539c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800539e:	2310      	movs	r3, #16
 80053a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	0e5b      	lsrs	r3, r3, #25
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	0f5b      	lsrs	r3, r3, #29
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053c2:	7bbb      	ldrb	r3, [r7, #14]
 80053c4:	7b3a      	ldrb	r2, [r7, #12]
 80053c6:	4911      	ldr	r1, [pc, #68]	; (800540c <UARTEx_SetNbDataToProcess+0x94>)
 80053c8:	5c8a      	ldrb	r2, [r1, r2]
 80053ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053ce:	7b3a      	ldrb	r2, [r7, #12]
 80053d0:	490f      	ldr	r1, [pc, #60]	; (8005410 <UARTEx_SetNbDataToProcess+0x98>)
 80053d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80053d8:	b29a      	uxth	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	7b7a      	ldrb	r2, [r7, #13]
 80053e4:	4909      	ldr	r1, [pc, #36]	; (800540c <UARTEx_SetNbDataToProcess+0x94>)
 80053e6:	5c8a      	ldrb	r2, [r1, r2]
 80053e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053ec:	7b7a      	ldrb	r2, [r7, #13]
 80053ee:	4908      	ldr	r1, [pc, #32]	; (8005410 <UARTEx_SetNbDataToProcess+0x98>)
 80053f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80053fe:	bf00      	nop
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	08010270 	.word	0x08010270
 8005410:	08010278 	.word	0x08010278

08005414 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	2101      	movs	r1, #1
 8005422:	489a      	ldr	r0, [pc, #616]	; (800568c <network_configure_activations+0x278>)
 8005424:	f000 fe46 	bl	80060b4 <ai_platform_get_activations_map>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 81c2 	beq.w	80057b4 <network_configure_activations+0x3a0>
    /* Updating activations (byte) offsets */
    
    serving_default_input0_output_array.data = AI_PTR(g_network_activations_map[0] + 24836);
 8005430:	4b96      	ldr	r3, [pc, #600]	; (800568c <network_configure_activations+0x278>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	f246 1304 	movw	r3, #24836	; 0x6104
 8005438:	4413      	add	r3, r2
 800543a:	4a95      	ldr	r2, [pc, #596]	; (8005690 <network_configure_activations+0x27c>)
 800543c:	6093      	str	r3, [r2, #8]
    serving_default_input0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 24836);
 800543e:	4b93      	ldr	r3, [pc, #588]	; (800568c <network_configure_activations+0x278>)
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	f246 1304 	movw	r3, #24836	; 0x6104
 8005446:	4413      	add	r3, r2
 8005448:	4a91      	ldr	r2, [pc, #580]	; (8005690 <network_configure_activations+0x27c>)
 800544a:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 23800);
 800544c:	4b8f      	ldr	r3, [pc, #572]	; (800568c <network_configure_activations+0x278>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	f645 43f8 	movw	r3, #23800	; 0x5cf8
 8005454:	4413      	add	r3, r2
 8005456:	4a8f      	ldr	r2, [pc, #572]	; (8005694 <network_configure_activations+0x280>)
 8005458:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 23800);
 800545a:	4b8c      	ldr	r3, [pc, #560]	; (800568c <network_configure_activations+0x278>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	f645 43f8 	movw	r3, #23800	; 0x5cf8
 8005462:	4413      	add	r3, r2
 8005464:	4a8b      	ldr	r2, [pc, #556]	; (8005694 <network_configure_activations+0x280>)
 8005466:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_output_array.data = AI_PTR(g_network_activations_map[0] + 7416);
 8005468:	4b88      	ldr	r3, [pc, #544]	; (800568c <network_configure_activations+0x278>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	f641 43f8 	movw	r3, #7416	; 0x1cf8
 8005470:	4413      	add	r3, r2
 8005472:	4a89      	ldr	r2, [pc, #548]	; (8005698 <network_configure_activations+0x284>)
 8005474:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 7416);
 8005476:	4b85      	ldr	r3, [pc, #532]	; (800568c <network_configure_activations+0x278>)
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	f641 43f8 	movw	r3, #7416	; 0x1cf8
 800547e:	4413      	add	r3, r2
 8005480:	4a85      	ldr	r2, [pc, #532]	; (8005698 <network_configure_activations+0x284>)
 8005482:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 23800);
 8005484:	4b81      	ldr	r3, [pc, #516]	; (800568c <network_configure_activations+0x278>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	f645 43f8 	movw	r3, #23800	; 0x5cf8
 800548c:	4413      	add	r3, r2
 800548e:	4a83      	ldr	r2, [pc, #524]	; (800569c <network_configure_activations+0x288>)
 8005490:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 23800);
 8005492:	4b7e      	ldr	r3, [pc, #504]	; (800568c <network_configure_activations+0x278>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	f645 43f8 	movw	r3, #23800	; 0x5cf8
 800549a:	4413      	add	r3, r2
 800549c:	4a7f      	ldr	r2, [pc, #508]	; (800569c <network_configure_activations+0x288>)
 800549e:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 2000);
 80054a0:	4b7a      	ldr	r3, [pc, #488]	; (800568c <network_configure_activations+0x278>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80054a8:	4a7d      	ldr	r2, [pc, #500]	; (80056a0 <network_configure_activations+0x28c>)
 80054aa:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2000);
 80054ac:	4b77      	ldr	r3, [pc, #476]	; (800568c <network_configure_activations+0x278>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80054b4:	4a7a      	ldr	r2, [pc, #488]	; (80056a0 <network_configure_activations+0x28c>)
 80054b6:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 22480);
 80054b8:	4b74      	ldr	r3, [pc, #464]	; (800568c <network_configure_activations+0x278>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	f245 73d0 	movw	r3, #22480	; 0x57d0
 80054c0:	4413      	add	r3, r2
 80054c2:	4a78      	ldr	r2, [pc, #480]	; (80056a4 <network_configure_activations+0x290>)
 80054c4:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 22480);
 80054c6:	4b71      	ldr	r3, [pc, #452]	; (800568c <network_configure_activations+0x278>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	f245 73d0 	movw	r3, #22480	; 0x57d0
 80054ce:	4413      	add	r3, r2
 80054d0:	4a74      	ldr	r2, [pc, #464]	; (80056a4 <network_configure_activations+0x290>)
 80054d2:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 680);
 80054d4:	4b6d      	ldr	r3, [pc, #436]	; (800568c <network_configure_activations+0x278>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054dc:	4a72      	ldr	r2, [pc, #456]	; (80056a8 <network_configure_activations+0x294>)
 80054de:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 680);
 80054e0:	4b6a      	ldr	r3, [pc, #424]	; (800568c <network_configure_activations+0x278>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054e8:	4a6f      	ldr	r2, [pc, #444]	; (80056a8 <network_configure_activations+0x294>)
 80054ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 21160);
 80054ec:	4b67      	ldr	r3, [pc, #412]	; (800568c <network_configure_activations+0x278>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	f245 23a8 	movw	r3, #21160	; 0x52a8
 80054f4:	4413      	add	r3, r2
 80054f6:	4a6d      	ldr	r2, [pc, #436]	; (80056ac <network_configure_activations+0x298>)
 80054f8:	6093      	str	r3, [r2, #8]
    conv2d_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 21160);
 80054fa:	4b64      	ldr	r3, [pc, #400]	; (800568c <network_configure_activations+0x278>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	f245 23a8 	movw	r3, #21160	; 0x52a8
 8005502:	4413      	add	r3, r2
 8005504:	4a69      	ldr	r2, [pc, #420]	; (80056ac <network_configure_activations+0x298>)
 8005506:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 27080);
 8005508:	4b60      	ldr	r3, [pc, #384]	; (800568c <network_configure_activations+0x278>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	f646 13c8 	movw	r3, #27080	; 0x69c8
 8005510:	4413      	add	r3, r2
 8005512:	4a67      	ldr	r2, [pc, #412]	; (80056b0 <network_configure_activations+0x29c>)
 8005514:	6093      	str	r3, [r2, #8]
    conv2d_3_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 27080);
 8005516:	4b5d      	ldr	r3, [pc, #372]	; (800568c <network_configure_activations+0x278>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	f646 13c8 	movw	r3, #27080	; 0x69c8
 800551e:	4413      	add	r3, r2
 8005520:	4a63      	ldr	r2, [pc, #396]	; (80056b0 <network_configure_activations+0x29c>)
 8005522:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005524:	4b59      	ldr	r3, [pc, #356]	; (800568c <network_configure_activations+0x278>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a62      	ldr	r2, [pc, #392]	; (80056b4 <network_configure_activations+0x2a0>)
 800552a:	6093      	str	r3, [r2, #8]
    conv2d_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800552c:	4b57      	ldr	r3, [pc, #348]	; (800568c <network_configure_activations+0x278>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a60      	ldr	r2, [pc, #384]	; (80056b4 <network_configure_activations+0x2a0>)
 8005532:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 5120);
 8005534:	4b55      	ldr	r3, [pc, #340]	; (800568c <network_configure_activations+0x278>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800553c:	4a5e      	ldr	r2, [pc, #376]	; (80056b8 <network_configure_activations+0x2a4>)
 800553e:	6093      	str	r3, [r2, #8]
    conv2d_5_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 5120);
 8005540:	4b52      	ldr	r3, [pc, #328]	; (800568c <network_configure_activations+0x278>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8005548:	4a5b      	ldr	r2, [pc, #364]	; (80056b8 <network_configure_activations+0x2a4>)
 800554a:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_output_array.data = AI_PTR(g_network_activations_map[0] + 11040);
 800554c:	4b4f      	ldr	r3, [pc, #316]	; (800568c <network_configure_activations+0x278>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	f642 3320 	movw	r3, #11040	; 0x2b20
 8005554:	4413      	add	r3, r2
 8005556:	4a59      	ldr	r2, [pc, #356]	; (80056bc <network_configure_activations+0x2a8>)
 8005558:	6093      	str	r3, [r2, #8]
    conv2d_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 11040);
 800555a:	4b4c      	ldr	r3, [pc, #304]	; (800568c <network_configure_activations+0x278>)
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	f642 3320 	movw	r3, #11040	; 0x2b20
 8005562:	4413      	add	r3, r2
 8005564:	4a55      	ldr	r2, [pc, #340]	; (80056bc <network_configure_activations+0x2a8>)
 8005566:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005568:	4b48      	ldr	r3, [pc, #288]	; (800568c <network_configure_activations+0x278>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a54      	ldr	r2, [pc, #336]	; (80056c0 <network_configure_activations+0x2ac>)
 800556e:	6093      	str	r3, [r2, #8]
    conv2d_6_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005570:	4b46      	ldr	r3, [pc, #280]	; (800568c <network_configure_activations+0x278>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a52      	ldr	r2, [pc, #328]	; (80056c0 <network_configure_activations+0x2ac>)
 8005576:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_output_array.data = AI_PTR(g_network_activations_map[0] + 5920);
 8005578:	4b44      	ldr	r3, [pc, #272]	; (800568c <network_configure_activations+0x278>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f503 53b9 	add.w	r3, r3, #5920	; 0x1720
 8005580:	4a50      	ldr	r2, [pc, #320]	; (80056c4 <network_configure_activations+0x2b0>)
 8005582:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 5920);
 8005584:	4b41      	ldr	r3, [pc, #260]	; (800568c <network_configure_activations+0x278>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f503 53b9 	add.w	r3, r3, #5920	; 0x1720
 800558c:	4a4d      	ldr	r2, [pc, #308]	; (80056c4 <network_configure_activations+0x2b0>)
 800558e:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 11040);
 8005590:	4b3e      	ldr	r3, [pc, #248]	; (800568c <network_configure_activations+0x278>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	f642 3320 	movw	r3, #11040	; 0x2b20
 8005598:	4413      	add	r3, r2
 800559a:	4a4b      	ldr	r2, [pc, #300]	; (80056c8 <network_configure_activations+0x2b4>)
 800559c:	6093      	str	r3, [r2, #8]
    conv2d_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 11040);
 800559e:	4b3b      	ldr	r3, [pc, #236]	; (800568c <network_configure_activations+0x278>)
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	f642 3320 	movw	r3, #11040	; 0x2b20
 80055a6:	4413      	add	r3, r2
 80055a8:	4a47      	ldr	r2, [pc, #284]	; (80056c8 <network_configure_activations+0x2b4>)
 80055aa:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80055ac:	4b37      	ldr	r3, [pc, #220]	; (800568c <network_configure_activations+0x278>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a46      	ldr	r2, [pc, #280]	; (80056cc <network_configure_activations+0x2b8>)
 80055b2:	6093      	str	r3, [r2, #8]
    conv2d_7_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80055b4:	4b35      	ldr	r3, [pc, #212]	; (800568c <network_configure_activations+0x278>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a44      	ldr	r2, [pc, #272]	; (80056cc <network_configure_activations+0x2b8>)
 80055ba:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[0] + 1408);
 80055bc:	4b33      	ldr	r3, [pc, #204]	; (800568c <network_configure_activations+0x278>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80055c4:	4a42      	ldr	r2, [pc, #264]	; (80056d0 <network_configure_activations+0x2bc>)
 80055c6:	6093      	str	r3, [r2, #8]
    conv2d_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1408);
 80055c8:	4b30      	ldr	r3, [pc, #192]	; (800568c <network_configure_activations+0x278>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80055d0:	4a3f      	ldr	r2, [pc, #252]	; (80056d0 <network_configure_activations+0x2bc>)
 80055d2:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 4224);
 80055d4:	4b2d      	ldr	r3, [pc, #180]	; (800568c <network_configure_activations+0x278>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80055dc:	4a3d      	ldr	r2, [pc, #244]	; (80056d4 <network_configure_activations+0x2c0>)
 80055de:	6093      	str	r3, [r2, #8]
    conv2d_9_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 4224);
 80055e0:	4b2a      	ldr	r3, [pc, #168]	; (800568c <network_configure_activations+0x278>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80055e8:	4a3a      	ldr	r2, [pc, #232]	; (80056d4 <network_configure_activations+0x2c0>)
 80055ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_output_array.data = AI_PTR(g_network_activations_map[0] + 11120);
 80055ec:	4b27      	ldr	r3, [pc, #156]	; (800568c <network_configure_activations+0x278>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	f642 3370 	movw	r3, #11120	; 0x2b70
 80055f4:	4413      	add	r3, r2
 80055f6:	4a38      	ldr	r2, [pc, #224]	; (80056d8 <network_configure_activations+0x2c4>)
 80055f8:	6093      	str	r3, [r2, #8]
    conv2d_9_output_array.data_start = AI_PTR(g_network_activations_map[0] + 11120);
 80055fa:	4b24      	ldr	r3, [pc, #144]	; (800568c <network_configure_activations+0x278>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	f642 3370 	movw	r3, #11120	; 0x2b70
 8005602:	4413      	add	r3, r2
 8005604:	4a34      	ldr	r2, [pc, #208]	; (80056d8 <network_configure_activations+0x2c4>)
 8005606:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005608:	4b20      	ldr	r3, [pc, #128]	; (800568c <network_configure_activations+0x278>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a33      	ldr	r2, [pc, #204]	; (80056dc <network_configure_activations+0x2c8>)
 800560e:	6093      	str	r3, [r2, #8]
    conv2d_10_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005610:	4b1e      	ldr	r3, [pc, #120]	; (800568c <network_configure_activations+0x278>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a31      	ldr	r2, [pc, #196]	; (80056dc <network_configure_activations+0x2c8>)
 8005616:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 7040);
 8005618:	4b1c      	ldr	r3, [pc, #112]	; (800568c <network_configure_activations+0x278>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8005620:	4a2f      	ldr	r2, [pc, #188]	; (80056e0 <network_configure_activations+0x2cc>)
 8005622:	6093      	str	r3, [r2, #8]
    conv2d_10_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 7040);
 8005624:	4b19      	ldr	r3, [pc, #100]	; (800568c <network_configure_activations+0x278>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800562c:	4a2c      	ldr	r2, [pc, #176]	; (80056e0 <network_configure_activations+0x2cc>)
 800562e:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_output_array.data = AI_PTR(g_network_activations_map[0] + 7808);
 8005630:	4b16      	ldr	r3, [pc, #88]	; (800568c <network_configure_activations+0x278>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8005638:	4a2a      	ldr	r2, [pc, #168]	; (80056e4 <network_configure_activations+0x2d0>)
 800563a:	6093      	str	r3, [r2, #8]
    conv2d_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 7808);
 800563c:	4b13      	ldr	r3, [pc, #76]	; (800568c <network_configure_activations+0x278>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8005644:	4a27      	ldr	r2, [pc, #156]	; (80056e4 <network_configure_activations+0x2d0>)
 8005646:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005648:	4b10      	ldr	r3, [pc, #64]	; (800568c <network_configure_activations+0x278>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a26      	ldr	r2, [pc, #152]	; (80056e8 <network_configure_activations+0x2d4>)
 800564e:	6093      	str	r3, [r2, #8]
    conv2d_12_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005650:	4b0e      	ldr	r3, [pc, #56]	; (800568c <network_configure_activations+0x278>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a24      	ldr	r2, [pc, #144]	; (80056e8 <network_configure_activations+0x2d4>)
 8005656:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 8576);
 8005658:	4b0c      	ldr	r3, [pc, #48]	; (800568c <network_configure_activations+0x278>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8005660:	4a22      	ldr	r2, [pc, #136]	; (80056ec <network_configure_activations+0x2d8>)
 8005662:	6093      	str	r3, [r2, #8]
    conv2d_12_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 8576);
 8005664:	4b09      	ldr	r3, [pc, #36]	; (800568c <network_configure_activations+0x278>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800566c:	4a1f      	ldr	r2, [pc, #124]	; (80056ec <network_configure_activations+0x2d8>)
 800566e:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_output_array.data = AI_PTR(g_network_activations_map[0] + 7232);
 8005670:	4b06      	ldr	r3, [pc, #24]	; (800568c <network_configure_activations+0x278>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8005678:	4a1d      	ldr	r2, [pc, #116]	; (80056f0 <network_configure_activations+0x2dc>)
 800567a:	6093      	str	r3, [r2, #8]
    conv2d_12_output_array.data_start = AI_PTR(g_network_activations_map[0] + 7232);
 800567c:	4b03      	ldr	r3, [pc, #12]	; (800568c <network_configure_activations+0x278>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8005684:	4a1a      	ldr	r2, [pc, #104]	; (80056f0 <network_configure_activations+0x2dc>)
 8005686:	60d3      	str	r3, [r2, #12]
 8005688:	e034      	b.n	80056f4 <network_configure_activations+0x2e0>
 800568a:	bf00      	nop
 800568c:	2400c400 	.word	0x2400c400
 8005690:	240001f0 	.word	0x240001f0
 8005694:	24000030 	.word	0x24000030
 8005698:	24000200 	.word	0x24000200
 800569c:	24000040 	.word	0x24000040
 80056a0:	24000220 	.word	0x24000220
 80056a4:	24000050 	.word	0x24000050
 80056a8:	24000240 	.word	0x24000240
 80056ac:	24000070 	.word	0x24000070
 80056b0:	24000090 	.word	0x24000090
 80056b4:	24000260 	.word	0x24000260
 80056b8:	240000b0 	.word	0x240000b0
 80056bc:	24000280 	.word	0x24000280
 80056c0:	240000d0 	.word	0x240000d0
 80056c4:	240002a0 	.word	0x240002a0
 80056c8:	24000100 	.word	0x24000100
 80056cc:	24000120 	.word	0x24000120
 80056d0:	240002c0 	.word	0x240002c0
 80056d4:	24000140 	.word	0x24000140
 80056d8:	240002e0 	.word	0x240002e0
 80056dc:	24000170 	.word	0x24000170
 80056e0:	24000190 	.word	0x24000190
 80056e4:	24000300 	.word	0x24000300
 80056e8:	240001b0 	.word	0x240001b0
 80056ec:	240001d0 	.word	0x240001d0
 80056f0:	24000320 	.word	0x24000320
    
    conv2d_14_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80056f4:	4b34      	ldr	r3, [pc, #208]	; (80057c8 <network_configure_activations+0x3b4>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a34      	ldr	r2, [pc, #208]	; (80057cc <network_configure_activations+0x3b8>)
 80056fa:	6093      	str	r3, [r2, #8]
    conv2d_14_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80056fc:	4b32      	ldr	r3, [pc, #200]	; (80057c8 <network_configure_activations+0x3b4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a32      	ldr	r2, [pc, #200]	; (80057cc <network_configure_activations+0x3b8>)
 8005702:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_output_array.data = AI_PTR(g_network_activations_map[0] + 384);
 8005704:	4b30      	ldr	r3, [pc, #192]	; (80057c8 <network_configure_activations+0x3b4>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800570c:	4a30      	ldr	r2, [pc, #192]	; (80057d0 <network_configure_activations+0x3bc>)
 800570e:	6093      	str	r3, [r2, #8]
    conv2d_14_output_array.data_start = AI_PTR(g_network_activations_map[0] + 384);
 8005710:	4b2d      	ldr	r3, [pc, #180]	; (80057c8 <network_configure_activations+0x3b4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005718:	4a2d      	ldr	r2, [pc, #180]	; (80057d0 <network_configure_activations+0x3bc>)
 800571a:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 2432);
 800571c:	4b2a      	ldr	r3, [pc, #168]	; (80057c8 <network_configure_activations+0x3b4>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 8005724:	4a2b      	ldr	r2, [pc, #172]	; (80057d4 <network_configure_activations+0x3c0>)
 8005726:	6093      	str	r3, [r2, #8]
    conv2d_15_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 2432);
 8005728:	4b27      	ldr	r3, [pc, #156]	; (80057c8 <network_configure_activations+0x3b4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 8005730:	4a28      	ldr	r2, [pc, #160]	; (80057d4 <network_configure_activations+0x3c0>)
 8005732:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_output_array.data = AI_PTR(g_network_activations_map[0] + 4480);
 8005734:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <network_configure_activations+0x3b4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 800573c:	4a26      	ldr	r2, [pc, #152]	; (80057d8 <network_configure_activations+0x3c4>)
 800573e:	6093      	str	r3, [r2, #8]
    conv2d_15_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4480);
 8005740:	4b21      	ldr	r3, [pc, #132]	; (80057c8 <network_configure_activations+0x3b4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8005748:	4a23      	ldr	r2, [pc, #140]	; (80057d8 <network_configure_activations+0x3c4>)
 800574a:	60d3      	str	r3, [r2, #12]
    
    pool_16_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800574c:	4b1e      	ldr	r3, [pc, #120]	; (80057c8 <network_configure_activations+0x3b4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a22      	ldr	r2, [pc, #136]	; (80057dc <network_configure_activations+0x3c8>)
 8005752:	6093      	str	r3, [r2, #8]
    pool_16_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005754:	4b1c      	ldr	r3, [pc, #112]	; (80057c8 <network_configure_activations+0x3b4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a20      	ldr	r2, [pc, #128]	; (80057dc <network_configure_activations+0x3c8>)
 800575a:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 128);
 800575c:	4b1a      	ldr	r3, [pc, #104]	; (80057c8 <network_configure_activations+0x3b4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3380      	adds	r3, #128	; 0x80
 8005762:	4a1f      	ldr	r2, [pc, #124]	; (80057e0 <network_configure_activations+0x3cc>)
 8005764:	6093      	str	r3, [r2, #8]
    conv2d_17_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 128);
 8005766:	4b18      	ldr	r3, [pc, #96]	; (80057c8 <network_configure_activations+0x3b4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3380      	adds	r3, #128	; 0x80
 800576c:	4a1c      	ldr	r2, [pc, #112]	; (80057e0 <network_configure_activations+0x3cc>)
 800576e:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_output_array.data = AI_PTR(g_network_activations_map[0] + 10368);
 8005770:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <network_configure_activations+0x3b4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005778:	4a1a      	ldr	r2, [pc, #104]	; (80057e4 <network_configure_activations+0x3d0>)
 800577a:	6093      	str	r3, [r2, #8]
    conv2d_17_output_array.data_start = AI_PTR(g_network_activations_map[0] + 10368);
 800577c:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <network_configure_activations+0x3b4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005784:	4a17      	ldr	r2, [pc, #92]	; (80057e4 <network_configure_activations+0x3d0>)
 8005786:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005788:	4b0f      	ldr	r3, [pc, #60]	; (80057c8 <network_configure_activations+0x3b4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a16      	ldr	r2, [pc, #88]	; (80057e8 <network_configure_activations+0x3d4>)
 800578e:	6093      	str	r3, [r2, #8]
    conv2d_18_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005790:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <network_configure_activations+0x3b4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <network_configure_activations+0x3d4>)
 8005796:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <network_configure_activations+0x3b4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80057a0:	4a12      	ldr	r2, [pc, #72]	; (80057ec <network_configure_activations+0x3d8>)
 80057a2:	6093      	str	r3, [r2, #8]
    conv2d_18_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 80057a4:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <network_configure_activations+0x3b4>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80057ac:	4a0f      	ldr	r2, [pc, #60]	; (80057ec <network_configure_activations+0x3d8>)
 80057ae:	60d3      	str	r3, [r2, #12]
    
    return true;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e005      	b.n	80057c0 <network_configure_activations+0x3ac>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80057b4:	2213      	movs	r2, #19
 80057b6:	2130      	movs	r1, #48	; 0x30
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fdf9 	bl	80063b0 <ai_platform_network_set_error>
  return false;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	2400c400 	.word	0x2400c400
 80057cc:	24000230 	.word	0x24000230
 80057d0:	24000330 	.word	0x24000330
 80057d4:	24000270 	.word	0x24000270
 80057d8:	24000350 	.word	0x24000350
 80057dc:	24000360 	.word	0x24000360
 80057e0:	240002b0 	.word	0x240002b0
 80057e4:	24000380 	.word	0x24000380
 80057e8:	240002f0 	.word	0x240002f0
 80057ec:	24000390 	.word	0x24000390

080057f0 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	2101      	movs	r1, #1
 80057fe:	489d      	ldr	r0, [pc, #628]	; (8005a74 <network_configure_weights+0x284>)
 8005800:	f000 fc00 	bl	8006004 <ai_platform_get_weights_map>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 8236 	beq.w	8005c78 <network_configure_weights+0x488>
    /* Updating weights (byte) offsets */
    
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 800580c:	4b9a      	ldr	r3, [pc, #616]	; (8005a78 <network_configure_weights+0x288>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005814:	4a98      	ldr	r2, [pc, #608]	; (8005a78 <network_configure_weights+0x288>)
 8005816:	6013      	str	r3, [r2, #0]
    conv2d_18_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8005818:	4b96      	ldr	r3, [pc, #600]	; (8005a74 <network_configure_weights+0x284>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a96      	ldr	r2, [pc, #600]	; (8005a78 <network_configure_weights+0x288>)
 800581e:	6093      	str	r3, [r2, #8]
    conv2d_18_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8005820:	4b94      	ldr	r3, [pc, #592]	; (8005a74 <network_configure_weights+0x284>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a94      	ldr	r2, [pc, #592]	; (8005a78 <network_configure_weights+0x288>)
 8005826:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8005828:	4b94      	ldr	r3, [pc, #592]	; (8005a7c <network_configure_weights+0x28c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005830:	4a92      	ldr	r2, [pc, #584]	; (8005a7c <network_configure_weights+0x28c>)
 8005832:	6013      	str	r3, [r2, #0]
    conv2d_18_bias_array.data = AI_PTR(g_network_weights_map[0] + 12800);
 8005834:	4b8f      	ldr	r3, [pc, #572]	; (8005a74 <network_configure_weights+0x284>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 800583c:	4a8f      	ldr	r2, [pc, #572]	; (8005a7c <network_configure_weights+0x28c>)
 800583e:	6093      	str	r3, [r2, #8]
    conv2d_18_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 12800);
 8005840:	4b8c      	ldr	r3, [pc, #560]	; (8005a74 <network_configure_weights+0x284>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8005848:	4a8c      	ldr	r2, [pc, #560]	; (8005a7c <network_configure_weights+0x28c>)
 800584a:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800584c:	4b8c      	ldr	r3, [pc, #560]	; (8005a80 <network_configure_weights+0x290>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005854:	4a8a      	ldr	r2, [pc, #552]	; (8005a80 <network_configure_weights+0x290>)
 8005856:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 13200);
 8005858:	4b86      	ldr	r3, [pc, #536]	; (8005a74 <network_configure_weights+0x284>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	f243 3390 	movw	r3, #13200	; 0x3390
 8005860:	4413      	add	r3, r2
 8005862:	4a87      	ldr	r2, [pc, #540]	; (8005a80 <network_configure_weights+0x290>)
 8005864:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 13200);
 8005866:	4b83      	ldr	r3, [pc, #524]	; (8005a74 <network_configure_weights+0x284>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	f243 3390 	movw	r3, #13200	; 0x3390
 800586e:	4413      	add	r3, r2
 8005870:	4a83      	ldr	r2, [pc, #524]	; (8005a80 <network_configure_weights+0x290>)
 8005872:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005874:	4b83      	ldr	r3, [pc, #524]	; (8005a84 <network_configure_weights+0x294>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800587c:	4a81      	ldr	r2, [pc, #516]	; (8005a84 <network_configure_weights+0x294>)
 800587e:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 13632);
 8005880:	4b7c      	ldr	r3, [pc, #496]	; (8005a74 <network_configure_weights+0x284>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 8005888:	4a7e      	ldr	r2, [pc, #504]	; (8005a84 <network_configure_weights+0x294>)
 800588a:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 13632);
 800588c:	4b79      	ldr	r3, [pc, #484]	; (8005a74 <network_configure_weights+0x284>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 8005894:	4a7b      	ldr	r2, [pc, #492]	; (8005a84 <network_configure_weights+0x294>)
 8005896:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005898:	4b7b      	ldr	r3, [pc, #492]	; (8005a88 <network_configure_weights+0x298>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a0:	4a79      	ldr	r2, [pc, #484]	; (8005a88 <network_configure_weights+0x298>)
 80058a2:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 13696);
 80058a4:	4b73      	ldr	r3, [pc, #460]	; (8005a74 <network_configure_weights+0x284>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f503 5356 	add.w	r3, r3, #13696	; 0x3580
 80058ac:	4a76      	ldr	r2, [pc, #472]	; (8005a88 <network_configure_weights+0x298>)
 80058ae:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 13696);
 80058b0:	4b70      	ldr	r3, [pc, #448]	; (8005a74 <network_configure_weights+0x284>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f503 5356 	add.w	r3, r3, #13696	; 0x3580
 80058b8:	4a73      	ldr	r2, [pc, #460]	; (8005a88 <network_configure_weights+0x298>)
 80058ba:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80058bc:	4b73      	ldr	r3, [pc, #460]	; (8005a8c <network_configure_weights+0x29c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058c4:	4a71      	ldr	r2, [pc, #452]	; (8005a8c <network_configure_weights+0x29c>)
 80058c6:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 16576);
 80058c8:	4b6a      	ldr	r3, [pc, #424]	; (8005a74 <network_configure_weights+0x284>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	f244 03c0 	movw	r3, #16576	; 0x40c0
 80058d0:	4413      	add	r3, r2
 80058d2:	4a6e      	ldr	r2, [pc, #440]	; (8005a8c <network_configure_weights+0x29c>)
 80058d4:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 16576);
 80058d6:	4b67      	ldr	r3, [pc, #412]	; (8005a74 <network_configure_weights+0x284>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	f244 03c0 	movw	r3, #16576	; 0x40c0
 80058de:	4413      	add	r3, r2
 80058e0:	4a6a      	ldr	r2, [pc, #424]	; (8005a8c <network_configure_weights+0x29c>)
 80058e2:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80058e4:	4b6a      	ldr	r3, [pc, #424]	; (8005a90 <network_configure_weights+0x2a0>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058ec:	4a68      	ldr	r2, [pc, #416]	; (8005a90 <network_configure_weights+0x2a0>)
 80058ee:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 16656);
 80058f0:	4b60      	ldr	r3, [pc, #384]	; (8005a74 <network_configure_weights+0x284>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	f244 1310 	movw	r3, #16656	; 0x4110
 80058f8:	4413      	add	r3, r2
 80058fa:	4a65      	ldr	r2, [pc, #404]	; (8005a90 <network_configure_weights+0x2a0>)
 80058fc:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 16656);
 80058fe:	4b5d      	ldr	r3, [pc, #372]	; (8005a74 <network_configure_weights+0x284>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	f244 1310 	movw	r3, #16656	; 0x4110
 8005906:	4413      	add	r3, r2
 8005908:	4a61      	ldr	r2, [pc, #388]	; (8005a90 <network_configure_weights+0x2a0>)
 800590a:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800590c:	4b61      	ldr	r3, [pc, #388]	; (8005a94 <network_configure_weights+0x2a4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005914:	4a5f      	ldr	r2, [pc, #380]	; (8005a94 <network_configure_weights+0x2a4>)
 8005916:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 20256);
 8005918:	4b56      	ldr	r3, [pc, #344]	; (8005a74 <network_configure_weights+0x284>)
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	f644 7320 	movw	r3, #20256	; 0x4f20
 8005920:	4413      	add	r3, r2
 8005922:	4a5c      	ldr	r2, [pc, #368]	; (8005a94 <network_configure_weights+0x2a4>)
 8005924:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 20256);
 8005926:	4b53      	ldr	r3, [pc, #332]	; (8005a74 <network_configure_weights+0x284>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	f644 7320 	movw	r3, #20256	; 0x4f20
 800592e:	4413      	add	r3, r2
 8005930:	4a58      	ldr	r2, [pc, #352]	; (8005a94 <network_configure_weights+0x2a4>)
 8005932:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005934:	4b58      	ldr	r3, [pc, #352]	; (8005a98 <network_configure_weights+0x2a8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800593c:	4a56      	ldr	r2, [pc, #344]	; (8005a98 <network_configure_weights+0x2a8>)
 800593e:	6013      	str	r3, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 20336);
 8005940:	4b4c      	ldr	r3, [pc, #304]	; (8005a74 <network_configure_weights+0x284>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	f644 7370 	movw	r3, #20336	; 0x4f70
 8005948:	4413      	add	r3, r2
 800594a:	4a53      	ldr	r2, [pc, #332]	; (8005a98 <network_configure_weights+0x2a8>)
 800594c:	6093      	str	r3, [r2, #8]
    conv2d_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 20336);
 800594e:	4b49      	ldr	r3, [pc, #292]	; (8005a74 <network_configure_weights+0x284>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	f644 7370 	movw	r3, #20336	; 0x4f70
 8005956:	4413      	add	r3, r2
 8005958:	4a4f      	ldr	r2, [pc, #316]	; (8005a98 <network_configure_weights+0x2a8>)
 800595a:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800595c:	4b4f      	ldr	r3, [pc, #316]	; (8005a9c <network_configure_weights+0x2ac>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005964:	4a4d      	ldr	r2, [pc, #308]	; (8005a9c <network_configure_weights+0x2ac>)
 8005966:	6013      	str	r3, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 23936);
 8005968:	4b42      	ldr	r3, [pc, #264]	; (8005a74 <network_configure_weights+0x284>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8005970:	4a4a      	ldr	r2, [pc, #296]	; (8005a9c <network_configure_weights+0x2ac>)
 8005972:	6093      	str	r3, [r2, #8]
    conv2d_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 23936);
 8005974:	4b3f      	ldr	r3, [pc, #252]	; (8005a74 <network_configure_weights+0x284>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800597c:	4a47      	ldr	r2, [pc, #284]	; (8005a9c <network_configure_weights+0x2ac>)
 800597e:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005980:	4b47      	ldr	r3, [pc, #284]	; (8005aa0 <network_configure_weights+0x2b0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005988:	4a45      	ldr	r2, [pc, #276]	; (8005aa0 <network_configure_weights+0x2b0>)
 800598a:	6013      	str	r3, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 24016);
 800598c:	4b39      	ldr	r3, [pc, #228]	; (8005a74 <network_configure_weights+0x284>)
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	f645 53d0 	movw	r3, #24016	; 0x5dd0
 8005994:	4413      	add	r3, r2
 8005996:	4a42      	ldr	r2, [pc, #264]	; (8005aa0 <network_configure_weights+0x2b0>)
 8005998:	6093      	str	r3, [r2, #8]
    conv2d_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 24016);
 800599a:	4b36      	ldr	r3, [pc, #216]	; (8005a74 <network_configure_weights+0x284>)
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	f645 53d0 	movw	r3, #24016	; 0x5dd0
 80059a2:	4413      	add	r3, r2
 80059a4:	4a3e      	ldr	r2, [pc, #248]	; (8005aa0 <network_configure_weights+0x2b0>)
 80059a6:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 80059a8:	4b3e      	ldr	r3, [pc, #248]	; (8005aa4 <network_configure_weights+0x2b4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059b0:	4a3c      	ldr	r2, [pc, #240]	; (8005aa4 <network_configure_weights+0x2b4>)
 80059b2:	6013      	str	r3, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 27616);
 80059b4:	4b2f      	ldr	r3, [pc, #188]	; (8005a74 <network_configure_weights+0x284>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	f646 33e0 	movw	r3, #27616	; 0x6be0
 80059bc:	4413      	add	r3, r2
 80059be:	4a39      	ldr	r2, [pc, #228]	; (8005aa4 <network_configure_weights+0x2b4>)
 80059c0:	6093      	str	r3, [r2, #8]
    conv2d_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 27616);
 80059c2:	4b2c      	ldr	r3, [pc, #176]	; (8005a74 <network_configure_weights+0x284>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	f646 33e0 	movw	r3, #27616	; 0x6be0
 80059ca:	4413      	add	r3, r2
 80059cc:	4a35      	ldr	r2, [pc, #212]	; (8005aa4 <network_configure_weights+0x2b4>)
 80059ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 80059d0:	4b35      	ldr	r3, [pc, #212]	; (8005aa8 <network_configure_weights+0x2b8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059d8:	4a33      	ldr	r2, [pc, #204]	; (8005aa8 <network_configure_weights+0x2b8>)
 80059da:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_network_weights_map[0] + 27696);
 80059dc:	4b25      	ldr	r3, [pc, #148]	; (8005a74 <network_configure_weights+0x284>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	f646 4330 	movw	r3, #27696	; 0x6c30
 80059e4:	4413      	add	r3, r2
 80059e6:	4a30      	ldr	r2, [pc, #192]	; (8005aa8 <network_configure_weights+0x2b8>)
 80059e8:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 27696);
 80059ea:	4b22      	ldr	r3, [pc, #136]	; (8005a74 <network_configure_weights+0x284>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	f646 4330 	movw	r3, #27696	; 0x6c30
 80059f2:	4413      	add	r3, r2
 80059f4:	4a2c      	ldr	r2, [pc, #176]	; (8005aa8 <network_configure_weights+0x2b8>)
 80059f6:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 80059f8:	4b2c      	ldr	r3, [pc, #176]	; (8005aac <network_configure_weights+0x2bc>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a00:	4a2a      	ldr	r2, [pc, #168]	; (8005aac <network_configure_weights+0x2bc>)
 8005a02:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_network_weights_map[0] + 31296);
 8005a04:	4b1b      	ldr	r3, [pc, #108]	; (8005a74 <network_configure_weights+0x284>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	f647 2340 	movw	r3, #31296	; 0x7a40
 8005a0c:	4413      	add	r3, r2
 8005a0e:	4a27      	ldr	r2, [pc, #156]	; (8005aac <network_configure_weights+0x2bc>)
 8005a10:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 31296);
 8005a12:	4b18      	ldr	r3, [pc, #96]	; (8005a74 <network_configure_weights+0x284>)
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	f647 2340 	movw	r3, #31296	; 0x7a40
 8005a1a:	4413      	add	r3, r2
 8005a1c:	4a23      	ldr	r2, [pc, #140]	; (8005aac <network_configure_weights+0x2bc>)
 8005a1e:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a20:	4b23      	ldr	r3, [pc, #140]	; (8005ab0 <network_configure_weights+0x2c0>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a28:	4a21      	ldr	r2, [pc, #132]	; (8005ab0 <network_configure_weights+0x2c0>)
 8005a2a:	6013      	str	r3, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 31376);
 8005a2c:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <network_configure_weights+0x284>)
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	f647 2390 	movw	r3, #31376	; 0x7a90
 8005a34:	4413      	add	r3, r2
 8005a36:	4a1e      	ldr	r2, [pc, #120]	; (8005ab0 <network_configure_weights+0x2c0>)
 8005a38:	6093      	str	r3, [r2, #8]
    conv2d_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 31376);
 8005a3a:	4b0e      	ldr	r3, [pc, #56]	; (8005a74 <network_configure_weights+0x284>)
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	f647 2390 	movw	r3, #31376	; 0x7a90
 8005a42:	4413      	add	r3, r2
 8005a44:	4a1a      	ldr	r2, [pc, #104]	; (8005ab0 <network_configure_weights+0x2c0>)
 8005a46:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a48:	4b1a      	ldr	r3, [pc, #104]	; (8005ab4 <network_configure_weights+0x2c4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a50:	4a18      	ldr	r2, [pc, #96]	; (8005ab4 <network_configure_weights+0x2c4>)
 8005a52:	6013      	str	r3, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 39296);
 8005a54:	4b07      	ldr	r3, [pc, #28]	; (8005a74 <network_configure_weights+0x284>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	f649 1380 	movw	r3, #39296	; 0x9980
 8005a5c:	4413      	add	r3, r2
 8005a5e:	4a15      	ldr	r2, [pc, #84]	; (8005ab4 <network_configure_weights+0x2c4>)
 8005a60:	6093      	str	r3, [r2, #8]
    conv2d_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 39296);
 8005a62:	4b04      	ldr	r3, [pc, #16]	; (8005a74 <network_configure_weights+0x284>)
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	f649 1380 	movw	r3, #39296	; 0x9980
 8005a6a:	4413      	add	r3, r2
 8005a6c:	4a11      	ldr	r2, [pc, #68]	; (8005ab4 <network_configure_weights+0x2c4>)
 8005a6e:	60d3      	str	r3, [r2, #12]
 8005a70:	e022      	b.n	8005ab8 <network_configure_weights+0x2c8>
 8005a72:	bf00      	nop
 8005a74:	2400c404 	.word	0x2400c404
 8005a78:	24000010 	.word	0x24000010
 8005a7c:	24000020 	.word	0x24000020
 8005a80:	24000060 	.word	0x24000060
 8005a84:	24000080 	.word	0x24000080
 8005a88:	240000a0 	.word	0x240000a0
 8005a8c:	240000c0 	.word	0x240000c0
 8005a90:	240000e0 	.word	0x240000e0
 8005a94:	240000f0 	.word	0x240000f0
 8005a98:	24000110 	.word	0x24000110
 8005a9c:	24000130 	.word	0x24000130
 8005aa0:	24000150 	.word	0x24000150
 8005aa4:	24000160 	.word	0x24000160
 8005aa8:	24000180 	.word	0x24000180
 8005aac:	240001a0 	.word	0x240001a0
 8005ab0:	240001c0 	.word	0x240001c0
 8005ab4:	240001e0 	.word	0x240001e0
    
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ab8:	4b74      	ldr	r3, [pc, #464]	; (8005c8c <network_configure_weights+0x49c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ac0:	4a72      	ldr	r2, [pc, #456]	; (8005c8c <network_configure_weights+0x49c>)
 8005ac2:	6013      	str	r3, [r2, #0]
    conv2d_9_weights_array.data = AI_PTR(g_network_weights_map[0] + 39472);
 8005ac4:	4b72      	ldr	r3, [pc, #456]	; (8005c90 <network_configure_weights+0x4a0>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	f649 2330 	movw	r3, #39472	; 0x9a30
 8005acc:	4413      	add	r3, r2
 8005ace:	4a6f      	ldr	r2, [pc, #444]	; (8005c8c <network_configure_weights+0x49c>)
 8005ad0:	6093      	str	r3, [r2, #8]
    conv2d_9_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 39472);
 8005ad2:	4b6f      	ldr	r3, [pc, #444]	; (8005c90 <network_configure_weights+0x4a0>)
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	f649 2330 	movw	r3, #39472	; 0x9a30
 8005ada:	4413      	add	r3, r2
 8005adc:	4a6b      	ldr	r2, [pc, #428]	; (8005c8c <network_configure_weights+0x49c>)
 8005ade:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ae0:	4b6c      	ldr	r3, [pc, #432]	; (8005c94 <network_configure_weights+0x4a4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ae8:	4a6a      	ldr	r2, [pc, #424]	; (8005c94 <network_configure_weights+0x4a4>)
 8005aea:	6013      	str	r3, [r2, #0]
    conv2d_9_bias_array.data = AI_PTR(g_network_weights_map[0] + 58480);
 8005aec:	4b68      	ldr	r3, [pc, #416]	; (8005c90 <network_configure_weights+0x4a0>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	f24e 4370 	movw	r3, #58480	; 0xe470
 8005af4:	4413      	add	r3, r2
 8005af6:	4a67      	ldr	r2, [pc, #412]	; (8005c94 <network_configure_weights+0x4a4>)
 8005af8:	6093      	str	r3, [r2, #8]
    conv2d_9_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 58480);
 8005afa:	4b65      	ldr	r3, [pc, #404]	; (8005c90 <network_configure_weights+0x4a0>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	f24e 4370 	movw	r3, #58480	; 0xe470
 8005b02:	4413      	add	r3, r2
 8005b04:	4a63      	ldr	r2, [pc, #396]	; (8005c94 <network_configure_weights+0x4a4>)
 8005b06:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b08:	4b63      	ldr	r3, [pc, #396]	; (8005c98 <network_configure_weights+0x4a8>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b10:	4a61      	ldr	r2, [pc, #388]	; (8005c98 <network_configure_weights+0x4a8>)
 8005b12:	6013      	str	r3, [r2, #0]
    conv2d_10_weights_array.data = AI_PTR(g_network_weights_map[0] + 58672);
 8005b14:	4b5e      	ldr	r3, [pc, #376]	; (8005c90 <network_configure_weights+0x4a0>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	f24e 5330 	movw	r3, #58672	; 0xe530
 8005b1c:	4413      	add	r3, r2
 8005b1e:	4a5e      	ldr	r2, [pc, #376]	; (8005c98 <network_configure_weights+0x4a8>)
 8005b20:	6093      	str	r3, [r2, #8]
    conv2d_10_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 58672);
 8005b22:	4b5b      	ldr	r3, [pc, #364]	; (8005c90 <network_configure_weights+0x4a0>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	f24e 5330 	movw	r3, #58672	; 0xe530
 8005b2a:	4413      	add	r3, r2
 8005b2c:	4a5a      	ldr	r2, [pc, #360]	; (8005c98 <network_configure_weights+0x4a8>)
 8005b2e:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b30:	4b5a      	ldr	r3, [pc, #360]	; (8005c9c <network_configure_weights+0x4ac>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b38:	4a58      	ldr	r2, [pc, #352]	; (8005c9c <network_configure_weights+0x4ac>)
 8005b3a:	6013      	str	r3, [r2, #0]
    conv2d_10_bias_array.data = AI_PTR(g_network_weights_map[0] + 79408);
 8005b3c:	4b54      	ldr	r3, [pc, #336]	; (8005c90 <network_configure_weights+0x4a0>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	4b57      	ldr	r3, [pc, #348]	; (8005ca0 <network_configure_weights+0x4b0>)
 8005b42:	4413      	add	r3, r2
 8005b44:	4a55      	ldr	r2, [pc, #340]	; (8005c9c <network_configure_weights+0x4ac>)
 8005b46:	6093      	str	r3, [r2, #8]
    conv2d_10_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 79408);
 8005b48:	4b51      	ldr	r3, [pc, #324]	; (8005c90 <network_configure_weights+0x4a0>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	4b54      	ldr	r3, [pc, #336]	; (8005ca0 <network_configure_weights+0x4b0>)
 8005b4e:	4413      	add	r3, r2
 8005b50:	4a52      	ldr	r2, [pc, #328]	; (8005c9c <network_configure_weights+0x4ac>)
 8005b52:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b54:	4b53      	ldr	r3, [pc, #332]	; (8005ca4 <network_configure_weights+0x4b4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b5c:	4a51      	ldr	r2, [pc, #324]	; (8005ca4 <network_configure_weights+0x4b4>)
 8005b5e:	6013      	str	r3, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_network_weights_map[0] + 79600);
 8005b60:	4b4b      	ldr	r3, [pc, #300]	; (8005c90 <network_configure_weights+0x4a0>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	4b50      	ldr	r3, [pc, #320]	; (8005ca8 <network_configure_weights+0x4b8>)
 8005b66:	4413      	add	r3, r2
 8005b68:	4a4e      	ldr	r2, [pc, #312]	; (8005ca4 <network_configure_weights+0x4b4>)
 8005b6a:	6093      	str	r3, [r2, #8]
    conv2d_12_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 79600);
 8005b6c:	4b48      	ldr	r3, [pc, #288]	; (8005c90 <network_configure_weights+0x4a0>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	4b4d      	ldr	r3, [pc, #308]	; (8005ca8 <network_configure_weights+0x4b8>)
 8005b72:	4413      	add	r3, r2
 8005b74:	4a4b      	ldr	r2, [pc, #300]	; (8005ca4 <network_configure_weights+0x4b4>)
 8005b76:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b78:	4b4c      	ldr	r3, [pc, #304]	; (8005cac <network_configure_weights+0x4bc>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b80:	4a4a      	ldr	r2, [pc, #296]	; (8005cac <network_configure_weights+0x4bc>)
 8005b82:	6013      	str	r3, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_network_weights_map[0] + 121072);
 8005b84:	4b42      	ldr	r3, [pc, #264]	; (8005c90 <network_configure_weights+0x4a0>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	4b49      	ldr	r3, [pc, #292]	; (8005cb0 <network_configure_weights+0x4c0>)
 8005b8a:	4413      	add	r3, r2
 8005b8c:	4a47      	ldr	r2, [pc, #284]	; (8005cac <network_configure_weights+0x4bc>)
 8005b8e:	6093      	str	r3, [r2, #8]
    conv2d_12_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 121072);
 8005b90:	4b3f      	ldr	r3, [pc, #252]	; (8005c90 <network_configure_weights+0x4a0>)
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	4b46      	ldr	r3, [pc, #280]	; (8005cb0 <network_configure_weights+0x4c0>)
 8005b96:	4413      	add	r3, r2
 8005b98:	4a44      	ldr	r2, [pc, #272]	; (8005cac <network_configure_weights+0x4bc>)
 8005b9a:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b9c:	4b45      	ldr	r3, [pc, #276]	; (8005cb4 <network_configure_weights+0x4c4>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ba4:	4a43      	ldr	r2, [pc, #268]	; (8005cb4 <network_configure_weights+0x4c4>)
 8005ba6:	6013      	str	r3, [r2, #0]
    conv2d_14_weights_array.data = AI_PTR(g_network_weights_map[0] + 121456);
 8005ba8:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <network_configure_weights+0x4a0>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4b42      	ldr	r3, [pc, #264]	; (8005cb8 <network_configure_weights+0x4c8>)
 8005bae:	4413      	add	r3, r2
 8005bb0:	4a40      	ldr	r2, [pc, #256]	; (8005cb4 <network_configure_weights+0x4c4>)
 8005bb2:	6093      	str	r3, [r2, #8]
    conv2d_14_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 121456);
 8005bb4:	4b36      	ldr	r3, [pc, #216]	; (8005c90 <network_configure_weights+0x4a0>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4b3f      	ldr	r3, [pc, #252]	; (8005cb8 <network_configure_weights+0x4c8>)
 8005bba:	4413      	add	r3, r2
 8005bbc:	4a3d      	ldr	r2, [pc, #244]	; (8005cb4 <network_configure_weights+0x4c4>)
 8005bbe:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bc0:	4b3e      	ldr	r3, [pc, #248]	; (8005cbc <network_configure_weights+0x4cc>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bc8:	4a3c      	ldr	r2, [pc, #240]	; (8005cbc <network_configure_weights+0x4cc>)
 8005bca:	6013      	str	r3, [r2, #0]
    conv2d_14_bias_array.data = AI_PTR(g_network_weights_map[0] + 170608);
 8005bcc:	4b30      	ldr	r3, [pc, #192]	; (8005c90 <network_configure_weights+0x4a0>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	4b3b      	ldr	r3, [pc, #236]	; (8005cc0 <network_configure_weights+0x4d0>)
 8005bd2:	4413      	add	r3, r2
 8005bd4:	4a39      	ldr	r2, [pc, #228]	; (8005cbc <network_configure_weights+0x4cc>)
 8005bd6:	6093      	str	r3, [r2, #8]
    conv2d_14_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 170608);
 8005bd8:	4b2d      	ldr	r3, [pc, #180]	; (8005c90 <network_configure_weights+0x4a0>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	4b38      	ldr	r3, [pc, #224]	; (8005cc0 <network_configure_weights+0x4d0>)
 8005bde:	4413      	add	r3, r2
 8005be0:	4a36      	ldr	r2, [pc, #216]	; (8005cbc <network_configure_weights+0x4cc>)
 8005be2:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 8005be4:	4b37      	ldr	r3, [pc, #220]	; (8005cc4 <network_configure_weights+0x4d4>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bec:	4a35      	ldr	r2, [pc, #212]	; (8005cc4 <network_configure_weights+0x4d4>)
 8005bee:	6013      	str	r3, [r2, #0]
    conv2d_15_weights_array.data = AI_PTR(g_network_weights_map[0] + 172656);
 8005bf0:	4b27      	ldr	r3, [pc, #156]	; (8005c90 <network_configure_weights+0x4a0>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	4b34      	ldr	r3, [pc, #208]	; (8005cc8 <network_configure_weights+0x4d8>)
 8005bf6:	4413      	add	r3, r2
 8005bf8:	4a32      	ldr	r2, [pc, #200]	; (8005cc4 <network_configure_weights+0x4d4>)
 8005bfa:	6093      	str	r3, [r2, #8]
    conv2d_15_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 172656);
 8005bfc:	4b24      	ldr	r3, [pc, #144]	; (8005c90 <network_configure_weights+0x4a0>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	4b31      	ldr	r3, [pc, #196]	; (8005cc8 <network_configure_weights+0x4d8>)
 8005c02:	4413      	add	r3, r2
 8005c04:	4a2f      	ldr	r2, [pc, #188]	; (8005cc4 <network_configure_weights+0x4d4>)
 8005c06:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c08:	4b30      	ldr	r3, [pc, #192]	; (8005ccc <network_configure_weights+0x4dc>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c10:	4a2e      	ldr	r2, [pc, #184]	; (8005ccc <network_configure_weights+0x4dc>)
 8005c12:	6013      	str	r3, [r2, #0]
    conv2d_15_bias_array.data = AI_PTR(g_network_weights_map[0] + 238192);
 8005c14:	4b1e      	ldr	r3, [pc, #120]	; (8005c90 <network_configure_weights+0x4a0>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	4b2d      	ldr	r3, [pc, #180]	; (8005cd0 <network_configure_weights+0x4e0>)
 8005c1a:	4413      	add	r3, r2
 8005c1c:	4a2b      	ldr	r2, [pc, #172]	; (8005ccc <network_configure_weights+0x4dc>)
 8005c1e:	6093      	str	r3, [r2, #8]
    conv2d_15_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 238192);
 8005c20:	4b1b      	ldr	r3, [pc, #108]	; (8005c90 <network_configure_weights+0x4a0>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4b2a      	ldr	r3, [pc, #168]	; (8005cd0 <network_configure_weights+0x4e0>)
 8005c26:	4413      	add	r3, r2
 8005c28:	4a28      	ldr	r2, [pc, #160]	; (8005ccc <network_configure_weights+0x4dc>)
 8005c2a:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c2c:	4b29      	ldr	r3, [pc, #164]	; (8005cd4 <network_configure_weights+0x4e4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c34:	4a27      	ldr	r2, [pc, #156]	; (8005cd4 <network_configure_weights+0x4e4>)
 8005c36:	6013      	str	r3, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(g_network_weights_map[0] + 238704);
 8005c38:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <network_configure_weights+0x4a0>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	4b26      	ldr	r3, [pc, #152]	; (8005cd8 <network_configure_weights+0x4e8>)
 8005c3e:	4413      	add	r3, r2
 8005c40:	4a24      	ldr	r2, [pc, #144]	; (8005cd4 <network_configure_weights+0x4e4>)
 8005c42:	6093      	str	r3, [r2, #8]
    conv2d_17_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 238704);
 8005c44:	4b12      	ldr	r3, [pc, #72]	; (8005c90 <network_configure_weights+0x4a0>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	4b23      	ldr	r3, [pc, #140]	; (8005cd8 <network_configure_weights+0x4e8>)
 8005c4a:	4413      	add	r3, r2
 8005c4c:	4a21      	ldr	r2, [pc, #132]	; (8005cd4 <network_configure_weights+0x4e4>)
 8005c4e:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c50:	4b22      	ldr	r3, [pc, #136]	; (8005cdc <network_configure_weights+0x4ec>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c58:	4a20      	ldr	r2, [pc, #128]	; (8005cdc <network_configure_weights+0x4ec>)
 8005c5a:	6013      	str	r3, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_network_weights_map[0] + 386160);
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <network_configure_weights+0x4a0>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	4b1f      	ldr	r3, [pc, #124]	; (8005ce0 <network_configure_weights+0x4f0>)
 8005c62:	4413      	add	r3, r2
 8005c64:	4a1d      	ldr	r2, [pc, #116]	; (8005cdc <network_configure_weights+0x4ec>)
 8005c66:	6093      	str	r3, [r2, #8]
    conv2d_17_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 386160);
 8005c68:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <network_configure_weights+0x4a0>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	4b1c      	ldr	r3, [pc, #112]	; (8005ce0 <network_configure_weights+0x4f0>)
 8005c6e:	4413      	add	r3, r2
 8005c70:	4a1a      	ldr	r2, [pc, #104]	; (8005cdc <network_configure_weights+0x4ec>)
 8005c72:	60d3      	str	r3, [r2, #12]
    
    return true;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e005      	b.n	8005c84 <network_configure_weights+0x494>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8005c78:	2212      	movs	r2, #18
 8005c7a:	2130      	movs	r1, #48	; 0x30
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fb97 	bl	80063b0 <ai_platform_network_set_error>
  return false;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	24000210 	.word	0x24000210
 8005c90:	2400c404 	.word	0x2400c404
 8005c94:	24000250 	.word	0x24000250
 8005c98:	24000290 	.word	0x24000290
 8005c9c:	240002d0 	.word	0x240002d0
 8005ca0:	00013630 	.word	0x00013630
 8005ca4:	24000310 	.word	0x24000310
 8005ca8:	000136f0 	.word	0x000136f0
 8005cac:	24000340 	.word	0x24000340
 8005cb0:	0001d8f0 	.word	0x0001d8f0
 8005cb4:	24000370 	.word	0x24000370
 8005cb8:	0001da70 	.word	0x0001da70
 8005cbc:	240003a0 	.word	0x240003a0
 8005cc0:	00029a70 	.word	0x00029a70
 8005cc4:	240003b0 	.word	0x240003b0
 8005cc8:	0002a270 	.word	0x0002a270
 8005ccc:	240003c0 	.word	0x240003c0
 8005cd0:	0003a270 	.word	0x0003a270
 8005cd4:	240003d0 	.word	0x240003d0
 8005cd8:	0003a470 	.word	0x0003a470
 8005cdc:	240003e0 	.word	0x240003e0
 8005ce0:	0005e470 	.word	0x0005e470

08005ce4 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fa53 	bl	8006198 <ai_platform_network_get_error>
 8005cf2:	4603      	mov	r3, r0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8005d06:	2300      	movs	r3, #0
 8005d08:	9301      	str	r3, [sp, #4]
 8005d0a:	2305      	movs	r3, #5
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4a04      	ldr	r2, [pc, #16]	; (8005d24 <ai_network_create+0x28>)
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fe65 	bl	80069e4 <ai_platform_network_create>
 8005d1a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	24001c18 	.word	0x24001c18

08005d28 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b096      	sub	sp, #88	; 0x58
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8005d34:	2100      	movs	r1, #0
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f7ff ffe0 	bl	8005cfc <ai_network_create>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8005d40:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <ai_network_create_and_init+0x24>
        return err;
 8005d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d4a:	e05d      	b.n	8005e08 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8005d4c:	f107 0314 	add.w	r3, r7, #20
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 f8dd 	bl	8005f10 <ai_network_data_params_get>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f083 0301 	eor.w	r3, r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d008      	beq.n	8005d74 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff ffbc 	bl	8005ce4 <ai_network_get_error>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8005d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d72:	e049      	b.n	8005e08 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d016      	beq.n	8005da8 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	657b      	str	r3, [r7, #84]	; 0x54
 8005d7e:	e00e      	b.n	8005d9e <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005d80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	4413      	add	r3, r2
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	f107 0314 	add.w	r3, r7, #20
 8005d90:	330c      	adds	r3, #12
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 f922 	bl	8005fdc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	657b      	str	r3, [r7, #84]	; 0x54
 8005d9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005da0:	461a      	mov	r2, r3
 8005da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da4:	4293      	cmp	r3, r2
 8005da6:	dbeb      	blt.n	8005d80 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d016      	beq.n	8005ddc <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005dae:	2300      	movs	r3, #0
 8005db0:	653b      	str	r3, [r7, #80]	; 0x50
 8005db2:	e00e      	b.n	8005dd2 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8005db4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	f107 0314 	add.w	r3, r7, #20
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 f908 	bl	8005fdc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dce:	3301      	adds	r3, #1
 8005dd0:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd2:	8b7b      	ldrh	r3, [r7, #26]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	dbeb      	blt.n	8005db4 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f107 0214 	add.w	r2, r7, #20
 8005de4:	4611      	mov	r1, r2
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 f846 	bl	8005e78 <ai_network_init>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f083 0301 	eor.w	r3, r3, #1
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d006      	beq.n	8005e06 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff ff71 	bl	8005ce4 <ai_network_get_error>
 8005e02:	4603      	mov	r3, r0
 8005e04:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8005e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3758      	adds	r7, #88	; 0x58
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d104      	bne.n	8005e2a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005e20:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <ai_network_inputs_get+0x2c>)
 8005e22:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a06      	ldr	r2, [pc, #24]	; (8005e40 <ai_network_inputs_get+0x30>)
 8005e28:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fac5 	bl	80063bc <ai_platform_inputs_get>
 8005e32:	4603      	mov	r3, r0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	24001c18 	.word	0x24001c18
 8005e40:	a1c00100 	.word	0xa1c00100

08005e44 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d104      	bne.n	8005e5e <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <ai_network_outputs_get+0x2c>)
 8005e56:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a06      	ldr	r2, [pc, #24]	; (8005e74 <ai_network_outputs_get+0x30>)
 8005e5c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fc37 	bl	80066d4 <ai_platform_outputs_get>
 8005e66:	4603      	mov	r3, r0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	24001c18 	.word	0x24001c18
 8005e74:	a1c00100 	.word	0xa1c00100

08005e78 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 ff87 	bl	8006d98 <ai_platform_network_init>
 8005e8a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <ai_network_init+0x1e>
 8005e92:	2300      	movs	r3, #0
 8005e94:	e028      	b.n	8005ee8 <ai_network_init+0x70>

  ai_bool ok = true;
 8005e96:	2301      	movs	r3, #1
 8005e98:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f7ff fca7 	bl	80057f0 <network_configure_weights>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	7afb      	ldrb	r3, [r7, #11]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	bf14      	ite	ne
 8005eae:	2301      	movne	r3, #1
 8005eb0:	2300      	moveq	r3, #0
 8005eb2:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f7ff faac 	bl	8005414 <network_configure_activations>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	7afb      	ldrb	r3, [r7, #11]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	bf14      	ite	ne
 8005ec8:	2301      	movne	r3, #1
 8005eca:	2300      	moveq	r3, #0
 8005ecc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f001 f8fe 	bl	80070d0 <ai_platform_network_post_init>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	7afb      	ldrb	r3, [r7, #11]
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	bf14      	ite	ne
 8005ee0:	2301      	movne	r3, #1
 8005ee2:	2300      	moveq	r3, #0
 8005ee4:	72fb      	strb	r3, [r7, #11]

  return ok;
 8005ee6:	7afb      	ldrb	r3, [r7, #11]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	68b9      	ldr	r1, [r7, #8]
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f001 fa0f 	bl	8007324 <ai_platform_network_process>
 8005f06:	4603      	mov	r3, r0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <ai_network_data_params_get+0x12>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	e016      	b.n	8005f50 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8005f22:	4a0d      	ldr	r2, [pc, #52]	; (8005f58 <ai_network_data_params_get+0x48>)
 8005f24:	f107 0310 	add.w	r3, r7, #16
 8005f28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f2c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005f30:	4a0a      	ldr	r2, [pc, #40]	; (8005f5c <ai_network_data_params_get+0x4c>)
 8005f32:	f107 0308 	add.w	r3, r7, #8
 8005f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f3a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005f3e:	f107 0210 	add.w	r2, r7, #16
 8005f42:	f107 0308 	add.w	r3, r7, #8
 8005f46:	4619      	mov	r1, r3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f90b 	bl	8006164 <ai_platform_bind_network_params>
 8005f4e:	4603      	mov	r3, r0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	08010238 	.word	0x08010238
 8005f5c:	08010240 	.word	0x08010240

08005f60 <ai_buffer_get_size>:
 8005f60:	b368      	cbz	r0, 8005fbe <ai_buffer_get_size+0x5e>
 8005f62:	4b17      	ldr	r3, [pc, #92]	; (8005fc0 <ai_buffer_get_size+0x60>)
 8005f64:	4a17      	ldr	r2, [pc, #92]	; (8005fc4 <ai_buffer_get_size+0x64>)
 8005f66:	b410      	push	{r4}
 8005f68:	6804      	ldr	r4, [r0, #0]
 8005f6a:	4023      	ands	r3, r4
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d123      	bne.n	8005fb8 <ai_buffer_get_size+0x58>
 8005f70:	b311      	cbz	r1, 8005fb8 <ai_buffer_get_size+0x58>
 8005f72:	6984      	ldr	r4, [r0, #24]
 8005f74:	6862      	ldr	r2, [r4, #4]
 8005f76:	321f      	adds	r2, #31
 8005f78:	f022 021f 	bic.w	r2, r2, #31
 8005f7c:	7d03      	ldrb	r3, [r0, #20]
 8005f7e:	6941      	ldr	r1, [r0, #20]
 8005f80:	f1a3 0301 	sub.w	r3, r3, #1
 8005f84:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8005f88:	fab3 f383 	clz	r3, r3
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005f92:	da0c      	bge.n	8005fae <ai_buffer_get_size+0x4e>
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d103      	bne.n	8005fa0 <ai_buffer_get_size+0x40>
 8005f98:	2802      	cmp	r0, #2
 8005f9a:	f04f 0302 	mov.w	r3, #2
 8005f9e:	d006      	beq.n	8005fae <ai_buffer_get_size+0x4e>
 8005fa0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	4298      	cmp	r0, r3
 8005fa8:	fb01 f202 	mul.w	r2, r1, r2
 8005fac:	d1f2      	bne.n	8005f94 <ai_buffer_get_size+0x34>
 8005fae:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8005fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	6984      	ldr	r4, [r0, #24]
 8005fba:	6862      	ldr	r2, [r4, #4]
 8005fbc:	e7de      	b.n	8005f7c <ai_buffer_get_size+0x1c>
 8005fbe:	4770      	bx	lr
 8005fc0:	017fffff 	.word	0x017fffff
 8005fc4:	000400c0 	.word	0x000400c0

08005fc8 <ai_buffer_array_sane>:
 8005fc8:	b138      	cbz	r0, 8005fda <ai_buffer_array_sane+0x12>
 8005fca:	6843      	ldr	r3, [r0, #4]
 8005fcc:	b123      	cbz	r3, 8005fd8 <ai_buffer_array_sane+0x10>
 8005fce:	8840      	ldrh	r0, [r0, #2]
 8005fd0:	3800      	subs	r0, #0
 8005fd2:	bf18      	it	ne
 8005fd4:	2001      	movne	r0, #1
 8005fd6:	4770      	bx	lr
 8005fd8:	4618      	mov	r0, r3
 8005fda:	4770      	bx	lr

08005fdc <ai_buffer_array_item_set_address>:
 8005fdc:	b150      	cbz	r0, 8005ff4 <ai_buffer_array_item_set_address+0x18>
 8005fde:	6843      	ldr	r3, [r0, #4]
 8005fe0:	b14b      	cbz	r3, 8005ff6 <ai_buffer_array_item_set_address+0x1a>
 8005fe2:	8840      	ldrh	r0, [r0, #2]
 8005fe4:	b900      	cbnz	r0, 8005fe8 <ai_buffer_array_item_set_address+0xc>
 8005fe6:	4770      	bx	lr
 8005fe8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005fec:	2001      	movs	r0, #1
 8005fee:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005ff2:	604a      	str	r2, [r1, #4]
 8005ff4:	4770      	bx	lr
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop

08005ffc <_ai_platform_acquire_crc>:
 8005ffc:	2001      	movs	r0, #1
 8005ffe:	4770      	bx	lr

08006000 <_ai_platform_release_crc>:
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop

08006004 <ai_platform_get_weights_map>:
 8006004:	2900      	cmp	r1, #0
 8006006:	bf18      	it	ne
 8006008:	2800      	cmpne	r0, #0
 800600a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600c:	bf0c      	ite	eq
 800600e:	2401      	moveq	r4, #1
 8006010:	2400      	movne	r4, #0
 8006012:	2a00      	cmp	r2, #0
 8006014:	bf08      	it	eq
 8006016:	f044 0401 	orreq.w	r4, r4, #1
 800601a:	b114      	cbz	r4, 8006022 <ai_platform_get_weights_map+0x1e>
 800601c:	2400      	movs	r4, #0
 800601e:	4620      	mov	r0, r4
 8006020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006022:	4616      	mov	r6, r2
 8006024:	4b22      	ldr	r3, [pc, #136]	; (80060b0 <ai_platform_get_weights_map+0xac>)
 8006026:	6812      	ldr	r2, [r2, #0]
 8006028:	4605      	mov	r5, r0
 800602a:	460f      	mov	r7, r1
 800602c:	429a      	cmp	r2, r3
 800602e:	d022      	beq.n	8006076 <ai_platform_get_weights_map+0x72>
 8006030:	6870      	ldr	r0, [r6, #4]
 8006032:	2800      	cmp	r0, #0
 8006034:	d0f2      	beq.n	800601c <ai_platform_get_weights_map+0x18>
 8006036:	6806      	ldr	r6, [r0, #0]
 8006038:	429e      	cmp	r6, r3
 800603a:	d006      	beq.n	800604a <ai_platform_get_weights_map+0x46>
 800603c:	f1a1 0401 	sub.w	r4, r1, #1
 8006040:	6028      	str	r0, [r5, #0]
 8006042:	fab4 f484 	clz	r4, r4
 8006046:	0964      	lsrs	r4, r4, #5
 8006048:	e7e9      	b.n	800601e <ai_platform_get_weights_map+0x1a>
 800604a:	3d04      	subs	r5, #4
 800604c:	4602      	mov	r2, r0
 800604e:	4621      	mov	r1, r4
 8006050:	e000      	b.n	8006054 <ai_platform_get_weights_map+0x50>
 8006052:	4619      	mov	r1, r3
 8006054:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006058:	42b3      	cmp	r3, r6
 800605a:	d025      	beq.n	80060a8 <ai_platform_get_weights_map+0xa4>
 800605c:	f845 3f04 	str.w	r3, [r5, #4]!
 8006060:	1c4b      	adds	r3, r1, #1
 8006062:	429f      	cmp	r7, r3
 8006064:	d8f5      	bhi.n	8006052 <ai_platform_get_weights_map+0x4e>
 8006066:	d1da      	bne.n	800601e <ai_platform_get_weights_map+0x1a>
 8006068:	3102      	adds	r1, #2
 800606a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800606e:	42b3      	cmp	r3, r6
 8006070:	d1d5      	bne.n	800601e <ai_platform_get_weights_map+0x1a>
 8006072:	2401      	movs	r4, #1
 8006074:	e7d3      	b.n	800601e <ai_platform_get_weights_map+0x1a>
 8006076:	1d30      	adds	r0, r6, #4
 8006078:	f7ff ffa6 	bl	8005fc8 <ai_buffer_array_sane>
 800607c:	2800      	cmp	r0, #0
 800607e:	d0cd      	beq.n	800601c <ai_platform_get_weights_map+0x18>
 8006080:	88f3      	ldrh	r3, [r6, #6]
 8006082:	429f      	cmp	r7, r3
 8006084:	d1ca      	bne.n	800601c <ai_platform_get_weights_map+0x18>
 8006086:	3d04      	subs	r5, #4
 8006088:	4622      	mov	r2, r4
 800608a:	68b3      	ldr	r3, [r6, #8]
 800608c:	4423      	add	r3, r4
 800608e:	341c      	adds	r4, #28
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	b123      	cbz	r3, 800609e <ai_platform_get_weights_map+0x9a>
 8006094:	3201      	adds	r2, #1
 8006096:	f845 3f04 	str.w	r3, [r5, #4]!
 800609a:	4297      	cmp	r7, r2
 800609c:	d8f5      	bhi.n	800608a <ai_platform_get_weights_map+0x86>
 800609e:	1abc      	subs	r4, r7, r2
 80060a0:	fab4 f484 	clz	r4, r4
 80060a4:	0964      	lsrs	r4, r4, #5
 80060a6:	e7ba      	b.n	800601e <ai_platform_get_weights_map+0x1a>
 80060a8:	428f      	cmp	r7, r1
 80060aa:	d1b8      	bne.n	800601e <ai_platform_get_weights_map+0x1a>
 80060ac:	e7e1      	b.n	8006072 <ai_platform_get_weights_map+0x6e>
 80060ae:	bf00      	nop
 80060b0:	a1facade 	.word	0xa1facade

080060b4 <ai_platform_get_activations_map>:
 80060b4:	2900      	cmp	r1, #0
 80060b6:	bf18      	it	ne
 80060b8:	2800      	cmpne	r0, #0
 80060ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060bc:	bf0c      	ite	eq
 80060be:	2401      	moveq	r4, #1
 80060c0:	2400      	movne	r4, #0
 80060c2:	2a00      	cmp	r2, #0
 80060c4:	bf08      	it	eq
 80060c6:	f044 0401 	orreq.w	r4, r4, #1
 80060ca:	b114      	cbz	r4, 80060d2 <ai_platform_get_activations_map+0x1e>
 80060cc:	2400      	movs	r4, #0
 80060ce:	4620      	mov	r0, r4
 80060d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060d2:	4616      	mov	r6, r2
 80060d4:	4b22      	ldr	r3, [pc, #136]	; (8006160 <ai_platform_get_activations_map+0xac>)
 80060d6:	6812      	ldr	r2, [r2, #0]
 80060d8:	4605      	mov	r5, r0
 80060da:	460f      	mov	r7, r1
 80060dc:	429a      	cmp	r2, r3
 80060de:	d022      	beq.n	8006126 <ai_platform_get_activations_map+0x72>
 80060e0:	6a30      	ldr	r0, [r6, #32]
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d0f2      	beq.n	80060cc <ai_platform_get_activations_map+0x18>
 80060e6:	6806      	ldr	r6, [r0, #0]
 80060e8:	429e      	cmp	r6, r3
 80060ea:	d006      	beq.n	80060fa <ai_platform_get_activations_map+0x46>
 80060ec:	f1a1 0401 	sub.w	r4, r1, #1
 80060f0:	6028      	str	r0, [r5, #0]
 80060f2:	fab4 f484 	clz	r4, r4
 80060f6:	0964      	lsrs	r4, r4, #5
 80060f8:	e7e9      	b.n	80060ce <ai_platform_get_activations_map+0x1a>
 80060fa:	3d04      	subs	r5, #4
 80060fc:	4602      	mov	r2, r0
 80060fe:	4621      	mov	r1, r4
 8006100:	e000      	b.n	8006104 <ai_platform_get_activations_map+0x50>
 8006102:	4619      	mov	r1, r3
 8006104:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006108:	42b3      	cmp	r3, r6
 800610a:	d026      	beq.n	800615a <ai_platform_get_activations_map+0xa6>
 800610c:	f845 3f04 	str.w	r3, [r5, #4]!
 8006110:	1c4b      	adds	r3, r1, #1
 8006112:	429f      	cmp	r7, r3
 8006114:	d8f5      	bhi.n	8006102 <ai_platform_get_activations_map+0x4e>
 8006116:	d1da      	bne.n	80060ce <ai_platform_get_activations_map+0x1a>
 8006118:	3102      	adds	r1, #2
 800611a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800611e:	42b3      	cmp	r3, r6
 8006120:	d1d5      	bne.n	80060ce <ai_platform_get_activations_map+0x1a>
 8006122:	2401      	movs	r4, #1
 8006124:	e7d3      	b.n	80060ce <ai_platform_get_activations_map+0x1a>
 8006126:	f106 000c 	add.w	r0, r6, #12
 800612a:	f7ff ff4d 	bl	8005fc8 <ai_buffer_array_sane>
 800612e:	2800      	cmp	r0, #0
 8006130:	d0cc      	beq.n	80060cc <ai_platform_get_activations_map+0x18>
 8006132:	89f3      	ldrh	r3, [r6, #14]
 8006134:	429f      	cmp	r7, r3
 8006136:	d1c9      	bne.n	80060cc <ai_platform_get_activations_map+0x18>
 8006138:	3d04      	subs	r5, #4
 800613a:	4622      	mov	r2, r4
 800613c:	6933      	ldr	r3, [r6, #16]
 800613e:	4423      	add	r3, r4
 8006140:	341c      	adds	r4, #28
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	b123      	cbz	r3, 8006150 <ai_platform_get_activations_map+0x9c>
 8006146:	3201      	adds	r2, #1
 8006148:	f845 3f04 	str.w	r3, [r5, #4]!
 800614c:	4297      	cmp	r7, r2
 800614e:	d8f5      	bhi.n	800613c <ai_platform_get_activations_map+0x88>
 8006150:	1abc      	subs	r4, r7, r2
 8006152:	fab4 f484 	clz	r4, r4
 8006156:	0964      	lsrs	r4, r4, #5
 8006158:	e7b9      	b.n	80060ce <ai_platform_get_activations_map+0x1a>
 800615a:	428f      	cmp	r7, r1
 800615c:	d1b7      	bne.n	80060ce <ai_platform_get_activations_map+0x1a>
 800615e:	e7e0      	b.n	8006122 <ai_platform_get_activations_map+0x6e>
 8006160:	a1facade 	.word	0xa1facade

08006164 <ai_platform_bind_network_params>:
 8006164:	2a00      	cmp	r2, #0
 8006166:	bf18      	it	ne
 8006168:	2900      	cmpne	r1, #0
 800616a:	d010      	beq.n	800618e <ai_platform_bind_network_params+0x2a>
 800616c:	b178      	cbz	r0, 800618e <ai_platform_bind_network_params+0x2a>
 800616e:	4603      	mov	r3, r0
 8006170:	4808      	ldr	r0, [pc, #32]	; (8006194 <ai_platform_bind_network_params+0x30>)
 8006172:	f103 0c0c 	add.w	ip, r3, #12
 8006176:	f843 0b04 	str.w	r0, [r3], #4
 800617a:	c903      	ldmia	r1, {r0, r1}
 800617c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006180:	2301      	movs	r3, #1
 8006182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006186:	e88c 0003 	stmia.w	ip, {r0, r1}
 800618a:	4618      	mov	r0, r3
 800618c:	4770      	bx	lr
 800618e:	2300      	movs	r3, #0
 8006190:	4618      	mov	r0, r3
 8006192:	4770      	bx	lr
 8006194:	a1facade 	.word	0xa1facade

08006198 <ai_platform_network_get_error>:
 8006198:	b510      	push	{r4, lr}
 800619a:	2800      	cmp	r0, #0
 800619c:	d03f      	beq.n	800621e <ai_platform_network_get_error+0x86>
 800619e:	4b7d      	ldr	r3, [pc, #500]	; (8006394 <ai_platform_network_get_error+0x1fc>)
 80061a0:	4604      	mov	r4, r0
 80061a2:	6802      	ldr	r2, [r0, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d13a      	bne.n	800621e <ai_platform_network_get_error+0x86>
 80061a8:	f7ff ff28 	bl	8005ffc <_ai_platform_acquire_crc>
 80061ac:	4b7a      	ldr	r3, [pc, #488]	; (8006398 <ai_platform_network_get_error+0x200>)
 80061ae:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061b8:	189a      	adds	r2, r3, r2
 80061ba:	2a01      	cmp	r2, #1
 80061bc:	f240 8086 	bls.w	80062cc <ai_platform_network_get_error+0x134>
 80061c0:	f240 4249 	movw	r2, #1097	; 0x449
 80061c4:	4293      	cmp	r3, r2
 80061c6:	f000 8081 	beq.w	80062cc <ai_platform_network_get_error+0x134>
 80061ca:	4a74      	ldr	r2, [pc, #464]	; (800639c <ai_platform_network_get_error+0x204>)
 80061cc:	6813      	ldr	r3, [r2, #0]
 80061ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061d2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80061d6:	f000 8087 	beq.w	80062e8 <ai_platform_network_get_error+0x150>
 80061da:	6813      	ldr	r3, [r2, #0]
 80061dc:	f240 4183 	movw	r1, #1155	; 0x483
 80061e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061e4:	428b      	cmp	r3, r1
 80061e6:	f000 80a9 	beq.w	800633c <ai_platform_network_get_error+0x1a4>
 80061ea:	6813      	ldr	r3, [r2, #0]
 80061ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061f0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80061f4:	f000 80c0 	beq.w	8006378 <ai_platform_network_get_error+0x1e0>
 80061f8:	6813      	ldr	r3, [r2, #0]
 80061fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f040 8082 	bne.w	8006308 <ai_platform_network_get_error+0x170>
 8006204:	4a66      	ldr	r2, [pc, #408]	; (80063a0 <ai_platform_network_get_error+0x208>)
 8006206:	2301      	movs	r3, #1
 8006208:	6093      	str	r3, [r2, #8]
 800620a:	6893      	ldr	r3, [r2, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1fc      	bne.n	800620a <ai_platform_network_get_error+0x72>
 8006210:	4964      	ldr	r1, [pc, #400]	; (80063a4 <ai_platform_network_get_error+0x20c>)
 8006212:	4b65      	ldr	r3, [pc, #404]	; (80063a8 <ai_platform_network_get_error+0x210>)
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	6812      	ldr	r2, [r2, #0]
 8006218:	429a      	cmp	r2, r3
 800621a:	d075      	beq.n	8006308 <ai_platform_network_get_error+0x170>
 800621c:	e7fe      	b.n	800621c <ai_platform_network_get_error+0x84>
 800621e:	f7ff feed 	bl	8005ffc <_ai_platform_acquire_crc>
 8006222:	4b5d      	ldr	r3, [pc, #372]	; (8006398 <ai_platform_network_get_error+0x200>)
 8006224:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800622e:	185a      	adds	r2, r3, r1
 8006230:	2a01      	cmp	r2, #1
 8006232:	d929      	bls.n	8006288 <ai_platform_network_get_error+0xf0>
 8006234:	f240 4249 	movw	r2, #1097	; 0x449
 8006238:	4293      	cmp	r3, r2
 800623a:	d025      	beq.n	8006288 <ai_platform_network_get_error+0xf0>
 800623c:	4a57      	ldr	r2, [pc, #348]	; (800639c <ai_platform_network_get_error+0x204>)
 800623e:	6813      	ldr	r3, [r2, #0]
 8006240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006244:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006248:	d02b      	beq.n	80062a2 <ai_platform_network_get_error+0x10a>
 800624a:	6813      	ldr	r3, [r2, #0]
 800624c:	f240 4183 	movw	r1, #1155	; 0x483
 8006250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006254:	428b      	cmp	r3, r1
 8006256:	d060      	beq.n	800631a <ai_platform_network_get_error+0x182>
 8006258:	6813      	ldr	r3, [r2, #0]
 800625a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800625e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006262:	d07c      	beq.n	800635e <ai_platform_network_get_error+0x1c6>
 8006264:	6813      	ldr	r3, [r2, #0]
 8006266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800626a:	2b00      	cmp	r3, #0
 800626c:	d129      	bne.n	80062c2 <ai_platform_network_get_error+0x12a>
 800626e:	4a4c      	ldr	r2, [pc, #304]	; (80063a0 <ai_platform_network_get_error+0x208>)
 8006270:	2301      	movs	r3, #1
 8006272:	6093      	str	r3, [r2, #8]
 8006274:	6893      	ldr	r3, [r2, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1fc      	bne.n	8006274 <ai_platform_network_get_error+0xdc>
 800627a:	494a      	ldr	r1, [pc, #296]	; (80063a4 <ai_platform_network_get_error+0x20c>)
 800627c:	4b4a      	ldr	r3, [pc, #296]	; (80063a8 <ai_platform_network_get_error+0x210>)
 800627e:	6011      	str	r1, [r2, #0]
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	429a      	cmp	r2, r3
 8006284:	d01d      	beq.n	80062c2 <ai_platform_network_get_error+0x12a>
 8006286:	e7fe      	b.n	8006286 <ai_platform_network_get_error+0xee>
 8006288:	4a45      	ldr	r2, [pc, #276]	; (80063a0 <ai_platform_network_get_error+0x208>)
 800628a:	2301      	movs	r3, #1
 800628c:	6093      	str	r3, [r2, #8]
 800628e:	6893      	ldr	r3, [r2, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1fc      	bne.n	800628e <ai_platform_network_get_error+0xf6>
 8006294:	4943      	ldr	r1, [pc, #268]	; (80063a4 <ai_platform_network_get_error+0x20c>)
 8006296:	4b44      	ldr	r3, [pc, #272]	; (80063a8 <ai_platform_network_get_error+0x210>)
 8006298:	6011      	str	r1, [r2, #0]
 800629a:	6812      	ldr	r2, [r2, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d010      	beq.n	80062c2 <ai_platform_network_get_error+0x12a>
 80062a0:	e7fe      	b.n	80062a0 <ai_platform_network_get_error+0x108>
 80062a2:	4a42      	ldr	r2, [pc, #264]	; (80063ac <ai_platform_network_get_error+0x214>)
 80062a4:	2301      	movs	r3, #1
 80062a6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80062aa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1fb      	bne.n	80062aa <ai_platform_network_get_error+0x112>
 80062b2:	493c      	ldr	r1, [pc, #240]	; (80063a4 <ai_platform_network_get_error+0x20c>)
 80062b4:	4b3c      	ldr	r3, [pc, #240]	; (80063a8 <ai_platform_network_get_error+0x210>)
 80062b6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80062ba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80062be:	429a      	cmp	r2, r3
 80062c0:	d111      	bne.n	80062e6 <ai_platform_network_get_error+0x14e>
 80062c2:	f7ff fe9d 	bl	8006000 <_ai_platform_release_crc>
 80062c6:	f241 0010 	movw	r0, #4112	; 0x1010
 80062ca:	bd10      	pop	{r4, pc}
 80062cc:	4a34      	ldr	r2, [pc, #208]	; (80063a0 <ai_platform_network_get_error+0x208>)
 80062ce:	2301      	movs	r3, #1
 80062d0:	6093      	str	r3, [r2, #8]
 80062d2:	6893      	ldr	r3, [r2, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1fc      	bne.n	80062d2 <ai_platform_network_get_error+0x13a>
 80062d8:	4932      	ldr	r1, [pc, #200]	; (80063a4 <ai_platform_network_get_error+0x20c>)
 80062da:	4b33      	ldr	r3, [pc, #204]	; (80063a8 <ai_platform_network_get_error+0x210>)
 80062dc:	6011      	str	r1, [r2, #0]
 80062de:	6812      	ldr	r2, [r2, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d011      	beq.n	8006308 <ai_platform_network_get_error+0x170>
 80062e4:	e7fe      	b.n	80062e4 <ai_platform_network_get_error+0x14c>
 80062e6:	e7fe      	b.n	80062e6 <ai_platform_network_get_error+0x14e>
 80062e8:	4a30      	ldr	r2, [pc, #192]	; (80063ac <ai_platform_network_get_error+0x214>)
 80062ea:	2301      	movs	r3, #1
 80062ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80062f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1fb      	bne.n	80062f0 <ai_platform_network_get_error+0x158>
 80062f8:	492a      	ldr	r1, [pc, #168]	; (80063a4 <ai_platform_network_get_error+0x20c>)
 80062fa:	4b2b      	ldr	r3, [pc, #172]	; (80063a8 <ai_platform_network_get_error+0x210>)
 80062fc:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006300:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006304:	429a      	cmp	r2, r3
 8006306:	d107      	bne.n	8006318 <ai_platform_network_get_error+0x180>
 8006308:	f7ff fe7a 	bl	8006000 <_ai_platform_release_crc>
 800630c:	f104 0010 	add.w	r0, r4, #16
 8006310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006314:	f001 bae6 	b.w	80078e4 <core_get_error>
 8006318:	e7fe      	b.n	8006318 <ai_platform_network_get_error+0x180>
 800631a:	4a24      	ldr	r2, [pc, #144]	; (80063ac <ai_platform_network_get_error+0x214>)
 800631c:	2301      	movs	r3, #1
 800631e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006322:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1fb      	bne.n	8006322 <ai_platform_network_get_error+0x18a>
 800632a:	491e      	ldr	r1, [pc, #120]	; (80063a4 <ai_platform_network_get_error+0x20c>)
 800632c:	4b1e      	ldr	r3, [pc, #120]	; (80063a8 <ai_platform_network_get_error+0x210>)
 800632e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006332:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006336:	429a      	cmp	r2, r3
 8006338:	d0c3      	beq.n	80062c2 <ai_platform_network_get_error+0x12a>
 800633a:	e7fe      	b.n	800633a <ai_platform_network_get_error+0x1a2>
 800633c:	4a1b      	ldr	r2, [pc, #108]	; (80063ac <ai_platform_network_get_error+0x214>)
 800633e:	2301      	movs	r3, #1
 8006340:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006344:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1fb      	bne.n	8006344 <ai_platform_network_get_error+0x1ac>
 800634c:	4915      	ldr	r1, [pc, #84]	; (80063a4 <ai_platform_network_get_error+0x20c>)
 800634e:	4b16      	ldr	r3, [pc, #88]	; (80063a8 <ai_platform_network_get_error+0x210>)
 8006350:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006354:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006358:	429a      	cmp	r2, r3
 800635a:	d0d5      	beq.n	8006308 <ai_platform_network_get_error+0x170>
 800635c:	e7fe      	b.n	800635c <ai_platform_network_get_error+0x1c4>
 800635e:	4a10      	ldr	r2, [pc, #64]	; (80063a0 <ai_platform_network_get_error+0x208>)
 8006360:	2301      	movs	r3, #1
 8006362:	6093      	str	r3, [r2, #8]
 8006364:	6893      	ldr	r3, [r2, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1fc      	bne.n	8006364 <ai_platform_network_get_error+0x1cc>
 800636a:	490e      	ldr	r1, [pc, #56]	; (80063a4 <ai_platform_network_get_error+0x20c>)
 800636c:	4b0e      	ldr	r3, [pc, #56]	; (80063a8 <ai_platform_network_get_error+0x210>)
 800636e:	6011      	str	r1, [r2, #0]
 8006370:	6812      	ldr	r2, [r2, #0]
 8006372:	429a      	cmp	r2, r3
 8006374:	d0a5      	beq.n	80062c2 <ai_platform_network_get_error+0x12a>
 8006376:	e7fe      	b.n	8006376 <ai_platform_network_get_error+0x1de>
 8006378:	4a09      	ldr	r2, [pc, #36]	; (80063a0 <ai_platform_network_get_error+0x208>)
 800637a:	2301      	movs	r3, #1
 800637c:	6093      	str	r3, [r2, #8]
 800637e:	6893      	ldr	r3, [r2, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1fc      	bne.n	800637e <ai_platform_network_get_error+0x1e6>
 8006384:	4907      	ldr	r1, [pc, #28]	; (80063a4 <ai_platform_network_get_error+0x20c>)
 8006386:	4b08      	ldr	r3, [pc, #32]	; (80063a8 <ai_platform_network_get_error+0x210>)
 8006388:	6011      	str	r1, [r2, #0]
 800638a:	6812      	ldr	r2, [r2, #0]
 800638c:	429a      	cmp	r2, r3
 800638e:	d0bb      	beq.n	8006308 <ai_platform_network_get_error+0x170>
 8006390:	e7fe      	b.n	8006390 <ai_platform_network_get_error+0x1f8>
 8006392:	bf00      	nop
 8006394:	a1c00100 	.word	0xa1c00100
 8006398:	e0042000 	.word	0xe0042000
 800639c:	5c001000 	.word	0x5c001000
 80063a0:	40023000 	.word	0x40023000
 80063a4:	f407a5c2 	.word	0xf407a5c2
 80063a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80063ac:	58024000 	.word	0x58024000

080063b0 <ai_platform_network_set_error>:
 80063b0:	b110      	cbz	r0, 80063b8 <ai_platform_network_set_error+0x8>
 80063b2:	3010      	adds	r0, #16
 80063b4:	f001 ba9c 	b.w	80078f0 <core_set_error>
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop

080063bc <ai_platform_inputs_get>:
 80063bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c0:	b085      	sub	sp, #20
 80063c2:	9102      	str	r1, [sp, #8]
 80063c4:	2800      	cmp	r0, #0
 80063c6:	f000 8093 	beq.w	80064f0 <ai_platform_inputs_get+0x134>
 80063ca:	4baa      	ldr	r3, [pc, #680]	; (8006674 <ai_platform_inputs_get+0x2b8>)
 80063cc:	4681      	mov	r9, r0
 80063ce:	6802      	ldr	r2, [r0, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	f040 808d 	bne.w	80064f0 <ai_platform_inputs_get+0x134>
 80063d6:	f7ff fe11 	bl	8005ffc <_ai_platform_acquire_crc>
 80063da:	4ba7      	ldr	r3, [pc, #668]	; (8006678 <ai_platform_inputs_get+0x2bc>)
 80063dc:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063e6:	189a      	adds	r2, r3, r2
 80063e8:	2a01      	cmp	r2, #1
 80063ea:	f240 80da 	bls.w	80065a2 <ai_platform_inputs_get+0x1e6>
 80063ee:	f240 4249 	movw	r2, #1097	; 0x449
 80063f2:	4293      	cmp	r3, r2
 80063f4:	f000 80d5 	beq.w	80065a2 <ai_platform_inputs_get+0x1e6>
 80063f8:	4aa0      	ldr	r2, [pc, #640]	; (800667c <ai_platform_inputs_get+0x2c0>)
 80063fa:	6813      	ldr	r3, [r2, #0]
 80063fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006400:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006404:	f000 80dc 	beq.w	80065c0 <ai_platform_inputs_get+0x204>
 8006408:	6813      	ldr	r3, [r2, #0]
 800640a:	f240 4183 	movw	r1, #1155	; 0x483
 800640e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006412:	428b      	cmp	r3, r1
 8006414:	f000 810e 	beq.w	8006634 <ai_platform_inputs_get+0x278>
 8006418:	6813      	ldr	r3, [r2, #0]
 800641a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800641e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006422:	f000 8143 	beq.w	80066ac <ai_platform_inputs_get+0x2f0>
 8006426:	6813      	ldr	r3, [r2, #0]
 8006428:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 8113 	beq.w	8006658 <ai_platform_inputs_get+0x29c>
 8006432:	f7ff fde5 	bl	8006000 <_ai_platform_release_crc>
 8006436:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 80d2 	beq.w	80065e4 <ai_platform_inputs_get+0x228>
 8006440:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8006444:	f1ba 0f00 	cmp.w	sl, #0
 8006448:	f000 80cc 	beq.w	80065e4 <ai_platform_inputs_get+0x228>
 800644c:	2100      	movs	r1, #0
 800644e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006452:	460d      	mov	r5, r1
 8006454:	4689      	mov	r9, r1
 8006456:	e016      	b.n	8006486 <ai_platform_inputs_get+0xca>
 8006458:	9a01      	ldr	r2, [sp, #4]
 800645a:	2301      	movs	r3, #1
 800645c:	f848 3002 	str.w	r3, [r8, r2]
 8006460:	69b2      	ldr	r2, [r6, #24]
 8006462:	f04f 0301 	mov.w	r3, #1
 8006466:	6856      	ldr	r6, [r2, #4]
 8006468:	3501      	adds	r5, #1
 800646a:	f109 091c 	add.w	r9, r9, #28
 800646e:	7523      	strb	r3, [r4, #20]
 8006470:	2300      	movs	r3, #0
 8006472:	6962      	ldr	r2, [r4, #20]
 8006474:	60a7      	str	r7, [r4, #8]
 8006476:	f36b 221f 	bfi	r2, fp, #8, #24
 800647a:	6126      	str	r6, [r4, #16]
 800647c:	61a1      	str	r1, [r4, #24]
 800647e:	60e3      	str	r3, [r4, #12]
 8006480:	6162      	str	r2, [r4, #20]
 8006482:	e9c4 0c00 	strd	r0, ip, [r4]
 8006486:	f8ba 3000 	ldrh.w	r3, [sl]
 800648a:	b2ac      	uxth	r4, r5
 800648c:	42ab      	cmp	r3, r5
 800648e:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006492:	9301      	str	r3, [sp, #4]
 8006494:	f240 80b5 	bls.w	8006602 <ai_platform_inputs_get+0x246>
 8006498:	f8da 3004 	ldr.w	r3, [sl, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 80b0 	beq.w	8006602 <ai_platform_inputs_get+0x246>
 80064a2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	f000 80ab 	beq.w	8006602 <ai_platform_inputs_get+0x246>
 80064ac:	f8da 3008 	ldr.w	r3, [sl, #8]
 80064b0:	69b2      	ldr	r2, [r6, #24]
 80064b2:	68f1      	ldr	r1, [r6, #12]
 80064b4:	6810      	ldr	r0, [r2, #0]
 80064b6:	9100      	str	r1, [sp, #0]
 80064b8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 80064bc:	68b3      	ldr	r3, [r6, #8]
 80064be:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 80064c2:	444c      	add	r4, r9
 80064c4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80064c8:	f006 fe44 	bl	800d154 <ai_array_to_buffer_fmt>
 80064cc:	69b2      	ldr	r2, [r6, #24]
 80064ce:	9900      	ldr	r1, [sp, #0]
 80064d0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80064d4:	2f00      	cmp	r7, #0
 80064d6:	d0c4      	beq.n	8006462 <ai_platform_inputs_get+0xa6>
 80064d8:	2200      	movs	r2, #0
 80064da:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 80064de:	6832      	ldr	r2, [r6, #0]
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	b112      	cbz	r2, 80064ea <ai_platform_inputs_get+0x12e>
 80064e4:	8852      	ldrh	r2, [r2, #2]
 80064e6:	2a00      	cmp	r2, #0
 80064e8:	d1b6      	bne.n	8006458 <ai_platform_inputs_get+0x9c>
 80064ea:	69b2      	ldr	r2, [r6, #24]
 80064ec:	2700      	movs	r7, #0
 80064ee:	e7b8      	b.n	8006462 <ai_platform_inputs_get+0xa6>
 80064f0:	f7ff fd84 	bl	8005ffc <_ai_platform_acquire_crc>
 80064f4:	4b60      	ldr	r3, [pc, #384]	; (8006678 <ai_platform_inputs_get+0x2bc>)
 80064f6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006500:	185a      	adds	r2, r3, r1
 8006502:	2a01      	cmp	r2, #1
 8006504:	d92a      	bls.n	800655c <ai_platform_inputs_get+0x1a0>
 8006506:	f240 4249 	movw	r2, #1097	; 0x449
 800650a:	4293      	cmp	r3, r2
 800650c:	d026      	beq.n	800655c <ai_platform_inputs_get+0x1a0>
 800650e:	4a5b      	ldr	r2, [pc, #364]	; (800667c <ai_platform_inputs_get+0x2c0>)
 8006510:	6813      	ldr	r3, [r2, #0]
 8006512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006516:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800651a:	d02c      	beq.n	8006576 <ai_platform_inputs_get+0x1ba>
 800651c:	6813      	ldr	r3, [r2, #0]
 800651e:	f240 4183 	movw	r1, #1155	; 0x483
 8006522:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006526:	428b      	cmp	r3, r1
 8006528:	d073      	beq.n	8006612 <ai_platform_inputs_get+0x256>
 800652a:	6813      	ldr	r3, [r2, #0]
 800652c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006530:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006534:	f000 80ac 	beq.w	8006690 <ai_platform_inputs_get+0x2d4>
 8006538:	6813      	ldr	r3, [r2, #0]
 800653a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800653e:	2b00      	cmp	r3, #0
 8006540:	d129      	bne.n	8006596 <ai_platform_inputs_get+0x1da>
 8006542:	4a4f      	ldr	r2, [pc, #316]	; (8006680 <ai_platform_inputs_get+0x2c4>)
 8006544:	2301      	movs	r3, #1
 8006546:	6093      	str	r3, [r2, #8]
 8006548:	6893      	ldr	r3, [r2, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1fc      	bne.n	8006548 <ai_platform_inputs_get+0x18c>
 800654e:	494d      	ldr	r1, [pc, #308]	; (8006684 <ai_platform_inputs_get+0x2c8>)
 8006550:	4b4d      	ldr	r3, [pc, #308]	; (8006688 <ai_platform_inputs_get+0x2cc>)
 8006552:	6011      	str	r1, [r2, #0]
 8006554:	6812      	ldr	r2, [r2, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d01d      	beq.n	8006596 <ai_platform_inputs_get+0x1da>
 800655a:	e7fe      	b.n	800655a <ai_platform_inputs_get+0x19e>
 800655c:	4a48      	ldr	r2, [pc, #288]	; (8006680 <ai_platform_inputs_get+0x2c4>)
 800655e:	2301      	movs	r3, #1
 8006560:	6093      	str	r3, [r2, #8]
 8006562:	6893      	ldr	r3, [r2, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1fc      	bne.n	8006562 <ai_platform_inputs_get+0x1a6>
 8006568:	4946      	ldr	r1, [pc, #280]	; (8006684 <ai_platform_inputs_get+0x2c8>)
 800656a:	4b47      	ldr	r3, [pc, #284]	; (8006688 <ai_platform_inputs_get+0x2cc>)
 800656c:	6011      	str	r1, [r2, #0]
 800656e:	6812      	ldr	r2, [r2, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d010      	beq.n	8006596 <ai_platform_inputs_get+0x1da>
 8006574:	e7fe      	b.n	8006574 <ai_platform_inputs_get+0x1b8>
 8006576:	4a45      	ldr	r2, [pc, #276]	; (800668c <ai_platform_inputs_get+0x2d0>)
 8006578:	2301      	movs	r3, #1
 800657a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800657e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1fb      	bne.n	800657e <ai_platform_inputs_get+0x1c2>
 8006586:	493f      	ldr	r1, [pc, #252]	; (8006684 <ai_platform_inputs_get+0x2c8>)
 8006588:	4b3f      	ldr	r3, [pc, #252]	; (8006688 <ai_platform_inputs_get+0x2cc>)
 800658a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800658e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006592:	429a      	cmp	r2, r3
 8006594:	d113      	bne.n	80065be <ai_platform_inputs_get+0x202>
 8006596:	f7ff fd33 	bl	8006000 <_ai_platform_release_crc>
 800659a:	2000      	movs	r0, #0
 800659c:	b005      	add	sp, #20
 800659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a2:	4a37      	ldr	r2, [pc, #220]	; (8006680 <ai_platform_inputs_get+0x2c4>)
 80065a4:	2301      	movs	r3, #1
 80065a6:	6093      	str	r3, [r2, #8]
 80065a8:	6893      	ldr	r3, [r2, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1fc      	bne.n	80065a8 <ai_platform_inputs_get+0x1ec>
 80065ae:	4b35      	ldr	r3, [pc, #212]	; (8006684 <ai_platform_inputs_get+0x2c8>)
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	4b35      	ldr	r3, [pc, #212]	; (8006688 <ai_platform_inputs_get+0x2cc>)
 80065b4:	6812      	ldr	r2, [r2, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	f43f af3b 	beq.w	8006432 <ai_platform_inputs_get+0x76>
 80065bc:	e7fe      	b.n	80065bc <ai_platform_inputs_get+0x200>
 80065be:	e7fe      	b.n	80065be <ai_platform_inputs_get+0x202>
 80065c0:	4a32      	ldr	r2, [pc, #200]	; (800668c <ai_platform_inputs_get+0x2d0>)
 80065c2:	2301      	movs	r3, #1
 80065c4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80065c8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1fb      	bne.n	80065c8 <ai_platform_inputs_get+0x20c>
 80065d0:	4b2c      	ldr	r3, [pc, #176]	; (8006684 <ai_platform_inputs_get+0x2c8>)
 80065d2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80065d6:	4b2c      	ldr	r3, [pc, #176]	; (8006688 <ai_platform_inputs_get+0x2cc>)
 80065d8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80065dc:	429a      	cmp	r2, r3
 80065de:	f43f af28 	beq.w	8006432 <ai_platform_inputs_get+0x76>
 80065e2:	e7fe      	b.n	80065e2 <ai_platform_inputs_get+0x226>
 80065e4:	2400      	movs	r4, #0
 80065e6:	2218      	movs	r2, #24
 80065e8:	2111      	movs	r1, #17
 80065ea:	f109 0010 	add.w	r0, r9, #16
 80065ee:	f001 f97f 	bl	80078f0 <core_set_error>
 80065f2:	4620      	mov	r0, r4
 80065f4:	9b02      	ldr	r3, [sp, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0d0      	beq.n	800659c <ai_platform_inputs_get+0x1e0>
 80065fa:	801c      	strh	r4, [r3, #0]
 80065fc:	b005      	add	sp, #20
 80065fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006602:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006606:	2c00      	cmp	r4, #0
 8006608:	d0ec      	beq.n	80065e4 <ai_platform_inputs_get+0x228>
 800660a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800660e:	6858      	ldr	r0, [r3, #4]
 8006610:	e7f0      	b.n	80065f4 <ai_platform_inputs_get+0x238>
 8006612:	4a1e      	ldr	r2, [pc, #120]	; (800668c <ai_platform_inputs_get+0x2d0>)
 8006614:	2301      	movs	r3, #1
 8006616:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800661a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1fb      	bne.n	800661a <ai_platform_inputs_get+0x25e>
 8006622:	4918      	ldr	r1, [pc, #96]	; (8006684 <ai_platform_inputs_get+0x2c8>)
 8006624:	4b18      	ldr	r3, [pc, #96]	; (8006688 <ai_platform_inputs_get+0x2cc>)
 8006626:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800662a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800662e:	429a      	cmp	r2, r3
 8006630:	d0b1      	beq.n	8006596 <ai_platform_inputs_get+0x1da>
 8006632:	e7fe      	b.n	8006632 <ai_platform_inputs_get+0x276>
 8006634:	4a15      	ldr	r2, [pc, #84]	; (800668c <ai_platform_inputs_get+0x2d0>)
 8006636:	2301      	movs	r3, #1
 8006638:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800663c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1fb      	bne.n	800663c <ai_platform_inputs_get+0x280>
 8006644:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <ai_platform_inputs_get+0x2c8>)
 8006646:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800664a:	4b0f      	ldr	r3, [pc, #60]	; (8006688 <ai_platform_inputs_get+0x2cc>)
 800664c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006650:	429a      	cmp	r2, r3
 8006652:	f43f aeee 	beq.w	8006432 <ai_platform_inputs_get+0x76>
 8006656:	e7fe      	b.n	8006656 <ai_platform_inputs_get+0x29a>
 8006658:	4a09      	ldr	r2, [pc, #36]	; (8006680 <ai_platform_inputs_get+0x2c4>)
 800665a:	2301      	movs	r3, #1
 800665c:	6093      	str	r3, [r2, #8]
 800665e:	6893      	ldr	r3, [r2, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1fc      	bne.n	800665e <ai_platform_inputs_get+0x2a2>
 8006664:	4b07      	ldr	r3, [pc, #28]	; (8006684 <ai_platform_inputs_get+0x2c8>)
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	4b07      	ldr	r3, [pc, #28]	; (8006688 <ai_platform_inputs_get+0x2cc>)
 800666a:	6812      	ldr	r2, [r2, #0]
 800666c:	429a      	cmp	r2, r3
 800666e:	f43f aee0 	beq.w	8006432 <ai_platform_inputs_get+0x76>
 8006672:	e7fe      	b.n	8006672 <ai_platform_inputs_get+0x2b6>
 8006674:	a1c00100 	.word	0xa1c00100
 8006678:	e0042000 	.word	0xe0042000
 800667c:	5c001000 	.word	0x5c001000
 8006680:	40023000 	.word	0x40023000
 8006684:	f407a5c2 	.word	0xf407a5c2
 8006688:	b5e8b5cd 	.word	0xb5e8b5cd
 800668c:	58024000 	.word	0x58024000
 8006690:	4a0d      	ldr	r2, [pc, #52]	; (80066c8 <ai_platform_inputs_get+0x30c>)
 8006692:	2301      	movs	r3, #1
 8006694:	6093      	str	r3, [r2, #8]
 8006696:	6893      	ldr	r3, [r2, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1fc      	bne.n	8006696 <ai_platform_inputs_get+0x2da>
 800669c:	490b      	ldr	r1, [pc, #44]	; (80066cc <ai_platform_inputs_get+0x310>)
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <ai_platform_inputs_get+0x314>)
 80066a0:	6011      	str	r1, [r2, #0]
 80066a2:	6812      	ldr	r2, [r2, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	f43f af76 	beq.w	8006596 <ai_platform_inputs_get+0x1da>
 80066aa:	e7fe      	b.n	80066aa <ai_platform_inputs_get+0x2ee>
 80066ac:	4a06      	ldr	r2, [pc, #24]	; (80066c8 <ai_platform_inputs_get+0x30c>)
 80066ae:	2301      	movs	r3, #1
 80066b0:	6093      	str	r3, [r2, #8]
 80066b2:	6893      	ldr	r3, [r2, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1fc      	bne.n	80066b2 <ai_platform_inputs_get+0x2f6>
 80066b8:	4b04      	ldr	r3, [pc, #16]	; (80066cc <ai_platform_inputs_get+0x310>)
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	4b04      	ldr	r3, [pc, #16]	; (80066d0 <ai_platform_inputs_get+0x314>)
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	f43f aeb6 	beq.w	8006432 <ai_platform_inputs_get+0x76>
 80066c6:	e7fe      	b.n	80066c6 <ai_platform_inputs_get+0x30a>
 80066c8:	40023000 	.word	0x40023000
 80066cc:	f407a5c2 	.word	0xf407a5c2
 80066d0:	b5e8b5cd 	.word	0xb5e8b5cd

080066d4 <ai_platform_outputs_get>:
 80066d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d8:	b085      	sub	sp, #20
 80066da:	9102      	str	r1, [sp, #8]
 80066dc:	2800      	cmp	r0, #0
 80066de:	f000 808f 	beq.w	8006800 <ai_platform_outputs_get+0x12c>
 80066e2:	4ba8      	ldr	r3, [pc, #672]	; (8006984 <ai_platform_outputs_get+0x2b0>)
 80066e4:	4681      	mov	r9, r0
 80066e6:	6802      	ldr	r2, [r0, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	f040 8089 	bne.w	8006800 <ai_platform_outputs_get+0x12c>
 80066ee:	f7ff fc85 	bl	8005ffc <_ai_platform_acquire_crc>
 80066f2:	4ba5      	ldr	r3, [pc, #660]	; (8006988 <ai_platform_outputs_get+0x2b4>)
 80066f4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066fe:	189a      	adds	r2, r3, r2
 8006700:	2a01      	cmp	r2, #1
 8006702:	f240 80d6 	bls.w	80068b2 <ai_platform_outputs_get+0x1de>
 8006706:	f240 4249 	movw	r2, #1097	; 0x449
 800670a:	4293      	cmp	r3, r2
 800670c:	f000 80d1 	beq.w	80068b2 <ai_platform_outputs_get+0x1de>
 8006710:	4a9e      	ldr	r2, [pc, #632]	; (800698c <ai_platform_outputs_get+0x2b8>)
 8006712:	6813      	ldr	r3, [r2, #0]
 8006714:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006718:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800671c:	f000 80d8 	beq.w	80068d0 <ai_platform_outputs_get+0x1fc>
 8006720:	6813      	ldr	r3, [r2, #0]
 8006722:	f240 4183 	movw	r1, #1155	; 0x483
 8006726:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800672a:	428b      	cmp	r3, r1
 800672c:	f000 8109 	beq.w	8006942 <ai_platform_outputs_get+0x26e>
 8006730:	6813      	ldr	r3, [r2, #0]
 8006732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006736:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800673a:	f000 813f 	beq.w	80069bc <ai_platform_outputs_get+0x2e8>
 800673e:	6813      	ldr	r3, [r2, #0]
 8006740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 810e 	beq.w	8006966 <ai_platform_outputs_get+0x292>
 800674a:	f7ff fc59 	bl	8006000 <_ai_platform_release_crc>
 800674e:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8006752:	2b01      	cmp	r3, #1
 8006754:	f240 80db 	bls.w	800690e <ai_platform_outputs_get+0x23a>
 8006758:	2100      	movs	r1, #0
 800675a:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800675e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006762:	460d      	mov	r5, r1
 8006764:	4689      	mov	r9, r1
 8006766:	e016      	b.n	8006796 <ai_platform_outputs_get+0xc2>
 8006768:	9a01      	ldr	r2, [sp, #4]
 800676a:	2301      	movs	r3, #1
 800676c:	f848 3002 	str.w	r3, [r8, r2]
 8006770:	69b2      	ldr	r2, [r6, #24]
 8006772:	f04f 0301 	mov.w	r3, #1
 8006776:	6856      	ldr	r6, [r2, #4]
 8006778:	3501      	adds	r5, #1
 800677a:	f109 091c 	add.w	r9, r9, #28
 800677e:	7523      	strb	r3, [r4, #20]
 8006780:	2300      	movs	r3, #0
 8006782:	6962      	ldr	r2, [r4, #20]
 8006784:	60a7      	str	r7, [r4, #8]
 8006786:	f36b 221f 	bfi	r2, fp, #8, #24
 800678a:	6126      	str	r6, [r4, #16]
 800678c:	61a1      	str	r1, [r4, #24]
 800678e:	60e3      	str	r3, [r4, #12]
 8006790:	6162      	str	r2, [r4, #20]
 8006792:	e9c4 0c00 	strd	r0, ip, [r4]
 8006796:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800679a:	b2ac      	uxth	r4, r5
 800679c:	42ab      	cmp	r3, r5
 800679e:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	f240 80a6 	bls.w	80068f4 <ai_platform_outputs_get+0x220>
 80067a8:	f8da 3010 	ldr.w	r3, [sl, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 80a1 	beq.w	80068f4 <ai_platform_outputs_get+0x220>
 80067b2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80067b6:	2e00      	cmp	r6, #0
 80067b8:	f000 809c 	beq.w	80068f4 <ai_platform_outputs_get+0x220>
 80067bc:	f8da 3014 	ldr.w	r3, [sl, #20]
 80067c0:	69b2      	ldr	r2, [r6, #24]
 80067c2:	68f1      	ldr	r1, [r6, #12]
 80067c4:	6810      	ldr	r0, [r2, #0]
 80067c6:	9100      	str	r1, [sp, #0]
 80067c8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 80067cc:	68b3      	ldr	r3, [r6, #8]
 80067ce:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 80067d2:	444c      	add	r4, r9
 80067d4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80067d8:	f006 fcbc 	bl	800d154 <ai_array_to_buffer_fmt>
 80067dc:	69b2      	ldr	r2, [r6, #24]
 80067de:	9900      	ldr	r1, [sp, #0]
 80067e0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80067e4:	2f00      	cmp	r7, #0
 80067e6:	d0c4      	beq.n	8006772 <ai_platform_outputs_get+0x9e>
 80067e8:	2200      	movs	r2, #0
 80067ea:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 80067ee:	6832      	ldr	r2, [r6, #0]
 80067f0:	607a      	str	r2, [r7, #4]
 80067f2:	b112      	cbz	r2, 80067fa <ai_platform_outputs_get+0x126>
 80067f4:	8852      	ldrh	r2, [r2, #2]
 80067f6:	2a00      	cmp	r2, #0
 80067f8:	d1b6      	bne.n	8006768 <ai_platform_outputs_get+0x94>
 80067fa:	69b2      	ldr	r2, [r6, #24]
 80067fc:	2700      	movs	r7, #0
 80067fe:	e7b8      	b.n	8006772 <ai_platform_outputs_get+0x9e>
 8006800:	f7ff fbfc 	bl	8005ffc <_ai_platform_acquire_crc>
 8006804:	4b60      	ldr	r3, [pc, #384]	; (8006988 <ai_platform_outputs_get+0x2b4>)
 8006806:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006810:	185a      	adds	r2, r3, r1
 8006812:	2a01      	cmp	r2, #1
 8006814:	d92a      	bls.n	800686c <ai_platform_outputs_get+0x198>
 8006816:	f240 4249 	movw	r2, #1097	; 0x449
 800681a:	4293      	cmp	r3, r2
 800681c:	d026      	beq.n	800686c <ai_platform_outputs_get+0x198>
 800681e:	4a5b      	ldr	r2, [pc, #364]	; (800698c <ai_platform_outputs_get+0x2b8>)
 8006820:	6813      	ldr	r3, [r2, #0]
 8006822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006826:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800682a:	d02c      	beq.n	8006886 <ai_platform_outputs_get+0x1b2>
 800682c:	6813      	ldr	r3, [r2, #0]
 800682e:	f240 4183 	movw	r1, #1155	; 0x483
 8006832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006836:	428b      	cmp	r3, r1
 8006838:	d072      	beq.n	8006920 <ai_platform_outputs_get+0x24c>
 800683a:	6813      	ldr	r3, [r2, #0]
 800683c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006840:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006844:	f000 80ac 	beq.w	80069a0 <ai_platform_outputs_get+0x2cc>
 8006848:	6813      	ldr	r3, [r2, #0]
 800684a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800684e:	2b00      	cmp	r3, #0
 8006850:	d129      	bne.n	80068a6 <ai_platform_outputs_get+0x1d2>
 8006852:	4a4f      	ldr	r2, [pc, #316]	; (8006990 <ai_platform_outputs_get+0x2bc>)
 8006854:	2301      	movs	r3, #1
 8006856:	6093      	str	r3, [r2, #8]
 8006858:	6893      	ldr	r3, [r2, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1fc      	bne.n	8006858 <ai_platform_outputs_get+0x184>
 800685e:	494d      	ldr	r1, [pc, #308]	; (8006994 <ai_platform_outputs_get+0x2c0>)
 8006860:	4b4d      	ldr	r3, [pc, #308]	; (8006998 <ai_platform_outputs_get+0x2c4>)
 8006862:	6011      	str	r1, [r2, #0]
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d01d      	beq.n	80068a6 <ai_platform_outputs_get+0x1d2>
 800686a:	e7fe      	b.n	800686a <ai_platform_outputs_get+0x196>
 800686c:	4a48      	ldr	r2, [pc, #288]	; (8006990 <ai_platform_outputs_get+0x2bc>)
 800686e:	2301      	movs	r3, #1
 8006870:	6093      	str	r3, [r2, #8]
 8006872:	6893      	ldr	r3, [r2, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1fc      	bne.n	8006872 <ai_platform_outputs_get+0x19e>
 8006878:	4946      	ldr	r1, [pc, #280]	; (8006994 <ai_platform_outputs_get+0x2c0>)
 800687a:	4b47      	ldr	r3, [pc, #284]	; (8006998 <ai_platform_outputs_get+0x2c4>)
 800687c:	6011      	str	r1, [r2, #0]
 800687e:	6812      	ldr	r2, [r2, #0]
 8006880:	429a      	cmp	r2, r3
 8006882:	d010      	beq.n	80068a6 <ai_platform_outputs_get+0x1d2>
 8006884:	e7fe      	b.n	8006884 <ai_platform_outputs_get+0x1b0>
 8006886:	4a45      	ldr	r2, [pc, #276]	; (800699c <ai_platform_outputs_get+0x2c8>)
 8006888:	2301      	movs	r3, #1
 800688a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800688e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1fb      	bne.n	800688e <ai_platform_outputs_get+0x1ba>
 8006896:	493f      	ldr	r1, [pc, #252]	; (8006994 <ai_platform_outputs_get+0x2c0>)
 8006898:	4b3f      	ldr	r3, [pc, #252]	; (8006998 <ai_platform_outputs_get+0x2c4>)
 800689a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800689e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d113      	bne.n	80068ce <ai_platform_outputs_get+0x1fa>
 80068a6:	f7ff fbab 	bl	8006000 <_ai_platform_release_crc>
 80068aa:	2000      	movs	r0, #0
 80068ac:	b005      	add	sp, #20
 80068ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b2:	4a37      	ldr	r2, [pc, #220]	; (8006990 <ai_platform_outputs_get+0x2bc>)
 80068b4:	2301      	movs	r3, #1
 80068b6:	6093      	str	r3, [r2, #8]
 80068b8:	6893      	ldr	r3, [r2, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1fc      	bne.n	80068b8 <ai_platform_outputs_get+0x1e4>
 80068be:	4b35      	ldr	r3, [pc, #212]	; (8006994 <ai_platform_outputs_get+0x2c0>)
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	4b35      	ldr	r3, [pc, #212]	; (8006998 <ai_platform_outputs_get+0x2c4>)
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	f43f af3f 	beq.w	800674a <ai_platform_outputs_get+0x76>
 80068cc:	e7fe      	b.n	80068cc <ai_platform_outputs_get+0x1f8>
 80068ce:	e7fe      	b.n	80068ce <ai_platform_outputs_get+0x1fa>
 80068d0:	4a32      	ldr	r2, [pc, #200]	; (800699c <ai_platform_outputs_get+0x2c8>)
 80068d2:	2301      	movs	r3, #1
 80068d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80068d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1fb      	bne.n	80068d8 <ai_platform_outputs_get+0x204>
 80068e0:	4b2c      	ldr	r3, [pc, #176]	; (8006994 <ai_platform_outputs_get+0x2c0>)
 80068e2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80068e6:	4b2c      	ldr	r3, [pc, #176]	; (8006998 <ai_platform_outputs_get+0x2c4>)
 80068e8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80068ec:	429a      	cmp	r2, r3
 80068ee:	f43f af2c 	beq.w	800674a <ai_platform_outputs_get+0x76>
 80068f2:	e7fe      	b.n	80068f2 <ai_platform_outputs_get+0x21e>
 80068f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80068f8:	b14c      	cbz	r4, 800690e <ai_platform_outputs_get+0x23a>
 80068fa:	f8da 3014 	ldr.w	r3, [sl, #20]
 80068fe:	6858      	ldr	r0, [r3, #4]
 8006900:	9b02      	ldr	r3, [sp, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0d2      	beq.n	80068ac <ai_platform_outputs_get+0x1d8>
 8006906:	801c      	strh	r4, [r3, #0]
 8006908:	b005      	add	sp, #20
 800690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690e:	2400      	movs	r4, #0
 8006910:	2218      	movs	r2, #24
 8006912:	2111      	movs	r1, #17
 8006914:	f109 0010 	add.w	r0, r9, #16
 8006918:	f000 ffea 	bl	80078f0 <core_set_error>
 800691c:	4620      	mov	r0, r4
 800691e:	e7ef      	b.n	8006900 <ai_platform_outputs_get+0x22c>
 8006920:	4a1e      	ldr	r2, [pc, #120]	; (800699c <ai_platform_outputs_get+0x2c8>)
 8006922:	2301      	movs	r3, #1
 8006924:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006928:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1fb      	bne.n	8006928 <ai_platform_outputs_get+0x254>
 8006930:	4918      	ldr	r1, [pc, #96]	; (8006994 <ai_platform_outputs_get+0x2c0>)
 8006932:	4b19      	ldr	r3, [pc, #100]	; (8006998 <ai_platform_outputs_get+0x2c4>)
 8006934:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006938:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800693c:	429a      	cmp	r2, r3
 800693e:	d0b2      	beq.n	80068a6 <ai_platform_outputs_get+0x1d2>
 8006940:	e7fe      	b.n	8006940 <ai_platform_outputs_get+0x26c>
 8006942:	4a16      	ldr	r2, [pc, #88]	; (800699c <ai_platform_outputs_get+0x2c8>)
 8006944:	2301      	movs	r3, #1
 8006946:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800694a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1fb      	bne.n	800694a <ai_platform_outputs_get+0x276>
 8006952:	4b10      	ldr	r3, [pc, #64]	; (8006994 <ai_platform_outputs_get+0x2c0>)
 8006954:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006958:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <ai_platform_outputs_get+0x2c4>)
 800695a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800695e:	429a      	cmp	r2, r3
 8006960:	f43f aef3 	beq.w	800674a <ai_platform_outputs_get+0x76>
 8006964:	e7fe      	b.n	8006964 <ai_platform_outputs_get+0x290>
 8006966:	4a0a      	ldr	r2, [pc, #40]	; (8006990 <ai_platform_outputs_get+0x2bc>)
 8006968:	2301      	movs	r3, #1
 800696a:	6093      	str	r3, [r2, #8]
 800696c:	6893      	ldr	r3, [r2, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1fc      	bne.n	800696c <ai_platform_outputs_get+0x298>
 8006972:	4b08      	ldr	r3, [pc, #32]	; (8006994 <ai_platform_outputs_get+0x2c0>)
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	4b08      	ldr	r3, [pc, #32]	; (8006998 <ai_platform_outputs_get+0x2c4>)
 8006978:	6812      	ldr	r2, [r2, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	f43f aee5 	beq.w	800674a <ai_platform_outputs_get+0x76>
 8006980:	e7fe      	b.n	8006980 <ai_platform_outputs_get+0x2ac>
 8006982:	bf00      	nop
 8006984:	a1c00100 	.word	0xa1c00100
 8006988:	e0042000 	.word	0xe0042000
 800698c:	5c001000 	.word	0x5c001000
 8006990:	40023000 	.word	0x40023000
 8006994:	f407a5c2 	.word	0xf407a5c2
 8006998:	b5e8b5cd 	.word	0xb5e8b5cd
 800699c:	58024000 	.word	0x58024000
 80069a0:	4a0d      	ldr	r2, [pc, #52]	; (80069d8 <ai_platform_outputs_get+0x304>)
 80069a2:	2301      	movs	r3, #1
 80069a4:	6093      	str	r3, [r2, #8]
 80069a6:	6893      	ldr	r3, [r2, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1fc      	bne.n	80069a6 <ai_platform_outputs_get+0x2d2>
 80069ac:	490b      	ldr	r1, [pc, #44]	; (80069dc <ai_platform_outputs_get+0x308>)
 80069ae:	4b0c      	ldr	r3, [pc, #48]	; (80069e0 <ai_platform_outputs_get+0x30c>)
 80069b0:	6011      	str	r1, [r2, #0]
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	f43f af76 	beq.w	80068a6 <ai_platform_outputs_get+0x1d2>
 80069ba:	e7fe      	b.n	80069ba <ai_platform_outputs_get+0x2e6>
 80069bc:	4a06      	ldr	r2, [pc, #24]	; (80069d8 <ai_platform_outputs_get+0x304>)
 80069be:	2301      	movs	r3, #1
 80069c0:	6093      	str	r3, [r2, #8]
 80069c2:	6893      	ldr	r3, [r2, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1fc      	bne.n	80069c2 <ai_platform_outputs_get+0x2ee>
 80069c8:	4b04      	ldr	r3, [pc, #16]	; (80069dc <ai_platform_outputs_get+0x308>)
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <ai_platform_outputs_get+0x30c>)
 80069ce:	6812      	ldr	r2, [r2, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	f43f aeba 	beq.w	800674a <ai_platform_outputs_get+0x76>
 80069d6:	e7fe      	b.n	80069d6 <ai_platform_outputs_get+0x302>
 80069d8:	40023000 	.word	0x40023000
 80069dc:	f407a5c2 	.word	0xf407a5c2
 80069e0:	b5e8b5cd 	.word	0xb5e8b5cd

080069e4 <ai_platform_network_create>:
 80069e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069e8:	b083      	sub	sp, #12
 80069ea:	4604      	mov	r4, r0
 80069ec:	4615      	mov	r5, r2
 80069ee:	461e      	mov	r6, r3
 80069f0:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80069f4:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80069f8:	f7ff fb00 	bl	8005ffc <_ai_platform_acquire_crc>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	f000 80bd 	beq.w	8006b7c <ai_platform_network_create+0x198>
 8006a02:	4ba5      	ldr	r3, [pc, #660]	; (8006c98 <ai_platform_network_create+0x2b4>)
 8006a04:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8006a08:	4601      	mov	r1, r0
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a10:	eb03 020c 	add.w	r2, r3, ip
 8006a14:	2a01      	cmp	r2, #1
 8006a16:	f240 80a8 	bls.w	8006b6a <ai_platform_network_create+0x186>
 8006a1a:	f240 4249 	movw	r2, #1097	; 0x449
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	f000 80a3 	beq.w	8006b6a <ai_platform_network_create+0x186>
 8006a24:	4a9d      	ldr	r2, [pc, #628]	; (8006c9c <ai_platform_network_create+0x2b8>)
 8006a26:	6813      	ldr	r3, [r2, #0]
 8006a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a2c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006a30:	f000 80b9 	beq.w	8006ba6 <ai_platform_network_create+0x1c2>
 8006a34:	6813      	ldr	r3, [r2, #0]
 8006a36:	f240 4c83 	movw	ip, #1155	; 0x483
 8006a3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a3e:	4563      	cmp	r3, ip
 8006a40:	f000 80a1 	beq.w	8006b86 <ai_platform_network_create+0x1a2>
 8006a44:	6813      	ldr	r3, [r2, #0]
 8006a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a4a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006a4e:	f000 8153 	beq.w	8006cf8 <ai_platform_network_create+0x314>
 8006a52:	6813      	ldr	r3, [r2, #0]
 8006a54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f040 808d 	bne.w	8006b78 <ai_platform_network_create+0x194>
 8006a5e:	4a90      	ldr	r2, [pc, #576]	; (8006ca0 <ai_platform_network_create+0x2bc>)
 8006a60:	2318      	movs	r3, #24
 8006a62:	6093      	str	r3, [r2, #8]
 8006a64:	6893      	ldr	r3, [r2, #8]
 8006a66:	2b18      	cmp	r3, #24
 8006a68:	f040 8086 	bne.w	8006b78 <ai_platform_network_create+0x194>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	6093      	str	r3, [r2, #8]
 8006a70:	6893      	ldr	r3, [r2, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1fc      	bne.n	8006a70 <ai_platform_network_create+0x8c>
 8006a76:	4608      	mov	r0, r1
 8006a78:	f7ff fac2 	bl	8006000 <_ai_platform_release_crc>
 8006a7c:	f7ff fabe 	bl	8005ffc <_ai_platform_acquire_crc>
 8006a80:	4b85      	ldr	r3, [pc, #532]	; (8006c98 <ai_platform_network_create+0x2b4>)
 8006a82:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a8c:	189a      	adds	r2, r3, r2
 8006a8e:	2a01      	cmp	r2, #1
 8006a90:	f240 809f 	bls.w	8006bd2 <ai_platform_network_create+0x1ee>
 8006a94:	f240 4249 	movw	r2, #1097	; 0x449
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	f000 809a 	beq.w	8006bd2 <ai_platform_network_create+0x1ee>
 8006a9e:	4a7f      	ldr	r2, [pc, #508]	; (8006c9c <ai_platform_network_create+0x2b8>)
 8006aa0:	6813      	ldr	r3, [r2, #0]
 8006aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aa6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006aaa:	f000 80a0 	beq.w	8006bee <ai_platform_network_create+0x20a>
 8006aae:	6813      	ldr	r3, [r2, #0]
 8006ab0:	f240 4183 	movw	r1, #1155	; 0x483
 8006ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ab8:	428b      	cmp	r3, r1
 8006aba:	f000 80bf 	beq.w	8006c3c <ai_platform_network_create+0x258>
 8006abe:	6813      	ldr	r3, [r2, #0]
 8006ac0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ac4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006ac8:	f000 8123 	beq.w	8006d12 <ai_platform_network_create+0x32e>
 8006acc:	6813      	ldr	r3, [r2, #0]
 8006ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 80c4 	beq.w	8006c60 <ai_platform_network_create+0x27c>
 8006ad8:	f7ff fa92 	bl	8006000 <_ai_platform_release_crc>
 8006adc:	2c00      	cmp	r4, #0
 8006ade:	f000 80aa 	beq.w	8006c36 <ai_platform_network_create+0x252>
 8006ae2:	4b70      	ldr	r3, [pc, #448]	; (8006ca4 <ai_platform_network_create+0x2c0>)
 8006ae4:	602b      	str	r3, [r5, #0]
 8006ae6:	6025      	str	r5, [r4, #0]
 8006ae8:	f000 fefa 	bl	80078e0 <core_init>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	f000 8090 	beq.w	8006c12 <ai_platform_network_create+0x22e>
 8006af2:	f7ff fa83 	bl	8005ffc <_ai_platform_acquire_crc>
 8006af6:	4b68      	ldr	r3, [pc, #416]	; (8006c98 <ai_platform_network_create+0x2b4>)
 8006af8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b02:	185a      	adds	r2, r3, r1
 8006b04:	2a01      	cmp	r2, #1
 8006b06:	f240 80b9 	bls.w	8006c7c <ai_platform_network_create+0x298>
 8006b0a:	f240 4249 	movw	r2, #1097	; 0x449
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	f000 80b4 	beq.w	8006c7c <ai_platform_network_create+0x298>
 8006b14:	4a61      	ldr	r2, [pc, #388]	; (8006c9c <ai_platform_network_create+0x2b8>)
 8006b16:	6813      	ldr	r3, [r2, #0]
 8006b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b1c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006b20:	f000 80c8 	beq.w	8006cb4 <ai_platform_network_create+0x2d0>
 8006b24:	6813      	ldr	r3, [r2, #0]
 8006b26:	f240 4183 	movw	r1, #1155	; 0x483
 8006b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b2e:	428b      	cmp	r3, r1
 8006b30:	f000 8107 	beq.w	8006d42 <ai_platform_network_create+0x35e>
 8006b34:	6813      	ldr	r3, [r2, #0]
 8006b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b3a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006b3e:	f000 8111 	beq.w	8006d64 <ai_platform_network_create+0x380>
 8006b42:	6813      	ldr	r3, [r2, #0]
 8006b44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f040 80c3 	bne.w	8006cd4 <ai_platform_network_create+0x2f0>
 8006b4e:	4b54      	ldr	r3, [pc, #336]	; (8006ca0 <ai_platform_network_create+0x2bc>)
 8006b50:	2201      	movs	r2, #1
 8006b52:	609a      	str	r2, [r3, #8]
 8006b54:	689a      	ldr	r2, [r3, #8]
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	d1fc      	bne.n	8006b54 <ai_platform_network_create+0x170>
 8006b5a:	4a53      	ldr	r2, [pc, #332]	; (8006ca8 <ai_platform_network_create+0x2c4>)
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	4b52      	ldr	r3, [pc, #328]	; (8006cac <ai_platform_network_create+0x2c8>)
 8006b62:	429a      	cmp	r2, r3
 8006b64:	f000 80b6 	beq.w	8006cd4 <ai_platform_network_create+0x2f0>
 8006b68:	e7fe      	b.n	8006b68 <ai_platform_network_create+0x184>
 8006b6a:	4b4d      	ldr	r3, [pc, #308]	; (8006ca0 <ai_platform_network_create+0x2bc>)
 8006b6c:	2218      	movs	r2, #24
 8006b6e:	609a      	str	r2, [r3, #8]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	2a18      	cmp	r2, #24
 8006b74:	d027      	beq.n	8006bc6 <ai_platform_network_create+0x1e2>
 8006b76:	4608      	mov	r0, r1
 8006b78:	f7ff fa42 	bl	8006000 <_ai_platform_release_crc>
 8006b7c:	f244 1033 	movw	r0, #16691	; 0x4133
 8006b80:	b003      	add	sp, #12
 8006b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b86:	4a4a      	ldr	r2, [pc, #296]	; (8006cb0 <ai_platform_network_create+0x2cc>)
 8006b88:	2318      	movs	r3, #24
 8006b8a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006b8e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006b92:	2b18      	cmp	r3, #24
 8006b94:	d1f0      	bne.n	8006b78 <ai_platform_network_create+0x194>
 8006b96:	2301      	movs	r3, #1
 8006b98:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006b9c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1fb      	bne.n	8006b9c <ai_platform_network_create+0x1b8>
 8006ba4:	e767      	b.n	8006a76 <ai_platform_network_create+0x92>
 8006ba6:	4a42      	ldr	r2, [pc, #264]	; (8006cb0 <ai_platform_network_create+0x2cc>)
 8006ba8:	2318      	movs	r3, #24
 8006baa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006bae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006bb2:	2b18      	cmp	r3, #24
 8006bb4:	d1e0      	bne.n	8006b78 <ai_platform_network_create+0x194>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006bbc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1fb      	bne.n	8006bbc <ai_platform_network_create+0x1d8>
 8006bc4:	e757      	b.n	8006a76 <ai_platform_network_create+0x92>
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	609a      	str	r2, [r3, #8]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	2a00      	cmp	r2, #0
 8006bce:	d1fc      	bne.n	8006bca <ai_platform_network_create+0x1e6>
 8006bd0:	e751      	b.n	8006a76 <ai_platform_network_create+0x92>
 8006bd2:	4a33      	ldr	r2, [pc, #204]	; (8006ca0 <ai_platform_network_create+0x2bc>)
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	6093      	str	r3, [r2, #8]
 8006bd8:	6891      	ldr	r1, [r2, #8]
 8006bda:	2900      	cmp	r1, #0
 8006bdc:	d1fc      	bne.n	8006bd8 <ai_platform_network_create+0x1f4>
 8006bde:	4b32      	ldr	r3, [pc, #200]	; (8006ca8 <ai_platform_network_create+0x2c4>)
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	4b32      	ldr	r3, [pc, #200]	; (8006cac <ai_platform_network_create+0x2c8>)
 8006be4:	6812      	ldr	r2, [r2, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	f43f af76 	beq.w	8006ad8 <ai_platform_network_create+0xf4>
 8006bec:	e7fe      	b.n	8006bec <ai_platform_network_create+0x208>
 8006bee:	4a30      	ldr	r2, [pc, #192]	; (8006cb0 <ai_platform_network_create+0x2cc>)
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006bf6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1fb      	bne.n	8006bf6 <ai_platform_network_create+0x212>
 8006bfe:	4b2a      	ldr	r3, [pc, #168]	; (8006ca8 <ai_platform_network_create+0x2c4>)
 8006c00:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006c04:	4b29      	ldr	r3, [pc, #164]	; (8006cac <ai_platform_network_create+0x2c8>)
 8006c06:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	f43f af64 	beq.w	8006ad8 <ai_platform_network_create+0xf4>
 8006c10:	e7fe      	b.n	8006c10 <ai_platform_network_create+0x22c>
 8006c12:	f04f 0930 	mov.w	r9, #48	; 0x30
 8006c16:	2300      	movs	r3, #0
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	2410      	movs	r4, #16
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	4639      	mov	r1, r7
 8006c20:	4630      	mov	r0, r6
 8006c22:	f006 fa7b 	bl	800d11c <ai_version_get>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2000      	movs	r0, #0
 8006c2a:	64ab      	str	r3, [r5, #72]	; 0x48
 8006c2c:	f369 0007 	bfi	r0, r9, #0, #8
 8006c30:	f364 201f 	bfi	r0, r4, #8, #24
 8006c34:	e7a4      	b.n	8006b80 <ai_platform_network_create+0x19c>
 8006c36:	f241 0010 	movw	r0, #4112	; 0x1010
 8006c3a:	e7a1      	b.n	8006b80 <ai_platform_network_create+0x19c>
 8006c3c:	4a1c      	ldr	r2, [pc, #112]	; (8006cb0 <ai_platform_network_create+0x2cc>)
 8006c3e:	2301      	movs	r3, #1
 8006c40:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006c44:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1fb      	bne.n	8006c44 <ai_platform_network_create+0x260>
 8006c4c:	4b16      	ldr	r3, [pc, #88]	; (8006ca8 <ai_platform_network_create+0x2c4>)
 8006c4e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006c52:	4b16      	ldr	r3, [pc, #88]	; (8006cac <ai_platform_network_create+0x2c8>)
 8006c54:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	f43f af3d 	beq.w	8006ad8 <ai_platform_network_create+0xf4>
 8006c5e:	e7fe      	b.n	8006c5e <ai_platform_network_create+0x27a>
 8006c60:	4a0f      	ldr	r2, [pc, #60]	; (8006ca0 <ai_platform_network_create+0x2bc>)
 8006c62:	2301      	movs	r3, #1
 8006c64:	6093      	str	r3, [r2, #8]
 8006c66:	6893      	ldr	r3, [r2, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1fc      	bne.n	8006c66 <ai_platform_network_create+0x282>
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <ai_platform_network_create+0x2c4>)
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	4b0e      	ldr	r3, [pc, #56]	; (8006cac <ai_platform_network_create+0x2c8>)
 8006c72:	6812      	ldr	r2, [r2, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	f43f af2f 	beq.w	8006ad8 <ai_platform_network_create+0xf4>
 8006c7a:	e7fe      	b.n	8006c7a <ai_platform_network_create+0x296>
 8006c7c:	4a08      	ldr	r2, [pc, #32]	; (8006ca0 <ai_platform_network_create+0x2bc>)
 8006c7e:	2301      	movs	r3, #1
 8006c80:	6093      	str	r3, [r2, #8]
 8006c82:	6893      	ldr	r3, [r2, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1fc      	bne.n	8006c82 <ai_platform_network_create+0x29e>
 8006c88:	4b07      	ldr	r3, [pc, #28]	; (8006ca8 <ai_platform_network_create+0x2c4>)
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	4b07      	ldr	r3, [pc, #28]	; (8006cac <ai_platform_network_create+0x2c8>)
 8006c8e:	6812      	ldr	r2, [r2, #0]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d01f      	beq.n	8006cd4 <ai_platform_network_create+0x2f0>
 8006c94:	e7fe      	b.n	8006c94 <ai_platform_network_create+0x2b0>
 8006c96:	bf00      	nop
 8006c98:	e0042000 	.word	0xe0042000
 8006c9c:	5c001000 	.word	0x5c001000
 8006ca0:	40023000 	.word	0x40023000
 8006ca4:	a1c00100 	.word	0xa1c00100
 8006ca8:	f407a5c2 	.word	0xf407a5c2
 8006cac:	b5e8b5cd 	.word	0xb5e8b5cd
 8006cb0:	58024000 	.word	0x58024000
 8006cb4:	4a33      	ldr	r2, [pc, #204]	; (8006d84 <ai_platform_network_create+0x3a0>)
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006cbc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1fb      	bne.n	8006cbc <ai_platform_network_create+0x2d8>
 8006cc4:	4b30      	ldr	r3, [pc, #192]	; (8006d88 <ai_platform_network_create+0x3a4>)
 8006cc6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006cca:	4b30      	ldr	r3, [pc, #192]	; (8006d8c <ai_platform_network_create+0x3a8>)
 8006ccc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d12c      	bne.n	8006d2e <ai_platform_network_create+0x34a>
 8006cd4:	f7ff f994 	bl	8006000 <_ai_platform_release_crc>
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4639      	mov	r1, r7
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f006 fa1d 	bl	800d11c <ai_version_get>
 8006ce2:	4681      	mov	r9, r0
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2105      	movs	r1, #5
 8006ce8:	2001      	movs	r0, #1
 8006cea:	f006 fa17 	bl	800d11c <ai_version_get>
 8006cee:	4581      	cmp	r9, r0
 8006cf0:	d01e      	beq.n	8006d30 <ai_platform_network_create+0x34c>
 8006cf2:	f04f 0901 	mov.w	r9, #1
 8006cf6:	e78e      	b.n	8006c16 <ai_platform_network_create+0x232>
 8006cf8:	4b25      	ldr	r3, [pc, #148]	; (8006d90 <ai_platform_network_create+0x3ac>)
 8006cfa:	2218      	movs	r2, #24
 8006cfc:	609a      	str	r2, [r3, #8]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	2a18      	cmp	r2, #24
 8006d02:	f47f af39 	bne.w	8006b78 <ai_platform_network_create+0x194>
 8006d06:	2201      	movs	r2, #1
 8006d08:	609a      	str	r2, [r3, #8]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	2a00      	cmp	r2, #0
 8006d0e:	d1fc      	bne.n	8006d0a <ai_platform_network_create+0x326>
 8006d10:	e6b1      	b.n	8006a76 <ai_platform_network_create+0x92>
 8006d12:	4a1f      	ldr	r2, [pc, #124]	; (8006d90 <ai_platform_network_create+0x3ac>)
 8006d14:	2301      	movs	r3, #1
 8006d16:	6093      	str	r3, [r2, #8]
 8006d18:	6893      	ldr	r3, [r2, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1fc      	bne.n	8006d18 <ai_platform_network_create+0x334>
 8006d1e:	4b1a      	ldr	r3, [pc, #104]	; (8006d88 <ai_platform_network_create+0x3a4>)
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	4b1a      	ldr	r3, [pc, #104]	; (8006d8c <ai_platform_network_create+0x3a8>)
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	f43f aed6 	beq.w	8006ad8 <ai_platform_network_create+0xf4>
 8006d2c:	e7fe      	b.n	8006d2c <ai_platform_network_create+0x348>
 8006d2e:	e7fe      	b.n	8006d2e <ai_platform_network_create+0x34a>
 8006d30:	4b18      	ldr	r3, [pc, #96]	; (8006d94 <ai_platform_network_create+0x3b0>)
 8006d32:	a801      	add	r0, sp, #4
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	f001 fc19 	bl	800856c <ai_check_custom_types>
 8006d3a:	b300      	cbz	r0, 8006d7e <ai_platform_network_create+0x39a>
 8006d3c:	2400      	movs	r4, #0
 8006d3e:	46a1      	mov	r9, r4
 8006d40:	e76c      	b.n	8006c1c <ai_platform_network_create+0x238>
 8006d42:	4b10      	ldr	r3, [pc, #64]	; (8006d84 <ai_platform_network_create+0x3a0>)
 8006d44:	2201      	movs	r2, #1
 8006d46:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006d4a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006d4e:	2a00      	cmp	r2, #0
 8006d50:	d1fb      	bne.n	8006d4a <ai_platform_network_create+0x366>
 8006d52:	4a0d      	ldr	r2, [pc, #52]	; (8006d88 <ai_platform_network_create+0x3a4>)
 8006d54:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006d58:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006d5c:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <ai_platform_network_create+0x3a8>)
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d0b8      	beq.n	8006cd4 <ai_platform_network_create+0x2f0>
 8006d62:	e7fe      	b.n	8006d62 <ai_platform_network_create+0x37e>
 8006d64:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <ai_platform_network_create+0x3ac>)
 8006d66:	2201      	movs	r2, #1
 8006d68:	609a      	str	r2, [r3, #8]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	2a00      	cmp	r2, #0
 8006d6e:	d1fc      	bne.n	8006d6a <ai_platform_network_create+0x386>
 8006d70:	4a05      	ldr	r2, [pc, #20]	; (8006d88 <ai_platform_network_create+0x3a4>)
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <ai_platform_network_create+0x3a8>)
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d0ab      	beq.n	8006cd4 <ai_platform_network_create+0x2f0>
 8006d7c:	e7fe      	b.n	8006d7c <ai_platform_network_create+0x398>
 8006d7e:	f04f 0902 	mov.w	r9, #2
 8006d82:	e748      	b.n	8006c16 <ai_platform_network_create+0x232>
 8006d84:	58024000 	.word	0x58024000
 8006d88:	f407a5c2 	.word	0xf407a5c2
 8006d8c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006d90:	40023000 	.word	0x40023000
 8006d94:	84048403 	.word	0x84048403

08006d98 <ai_platform_network_init>:
 8006d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d052      	beq.n	8006e46 <ai_platform_network_init+0xae>
 8006da0:	4bab      	ldr	r3, [pc, #684]	; (8007050 <ai_platform_network_init+0x2b8>)
 8006da2:	4604      	mov	r4, r0
 8006da4:	6802      	ldr	r2, [r0, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d14d      	bne.n	8006e46 <ai_platform_network_init+0xae>
 8006daa:	460d      	mov	r5, r1
 8006dac:	f7ff f926 	bl	8005ffc <_ai_platform_acquire_crc>
 8006db0:	4ba8      	ldr	r3, [pc, #672]	; (8007054 <ai_platform_network_init+0x2bc>)
 8006db2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dbc:	189a      	adds	r2, r3, r2
 8006dbe:	2a01      	cmp	r2, #1
 8006dc0:	f240 809b 	bls.w	8006efa <ai_platform_network_init+0x162>
 8006dc4:	f240 4249 	movw	r2, #1097	; 0x449
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	f000 8096 	beq.w	8006efa <ai_platform_network_init+0x162>
 8006dce:	4aa2      	ldr	r2, [pc, #648]	; (8007058 <ai_platform_network_init+0x2c0>)
 8006dd0:	6813      	ldr	r3, [r2, #0]
 8006dd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dd6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006dda:	f000 809d 	beq.w	8006f18 <ai_platform_network_init+0x180>
 8006dde:	6813      	ldr	r3, [r2, #0]
 8006de0:	f240 4183 	movw	r1, #1155	; 0x483
 8006de4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006de8:	428b      	cmp	r3, r1
 8006dea:	f000 80e4 	beq.w	8006fb6 <ai_platform_network_init+0x21e>
 8006dee:	6813      	ldr	r3, [r2, #0]
 8006df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006df4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006df8:	f000 811b 	beq.w	8007032 <ai_platform_network_init+0x29a>
 8006dfc:	6813      	ldr	r3, [r2, #0]
 8006dfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 80f9 	beq.w	8006ffa <ai_platform_network_init+0x262>
 8006e08:	f7ff f8fa 	bl	8006000 <_ai_platform_release_crc>
 8006e0c:	2d00      	cmp	r5, #0
 8006e0e:	f000 8147 	beq.w	80070a0 <ai_platform_network_init+0x308>
 8006e12:	4b92      	ldr	r3, [pc, #584]	; (800705c <ai_platform_network_init+0x2c4>)
 8006e14:	682a      	ldr	r2, [r5, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	f040 8090 	bne.w	8006f3c <ai_platform_network_init+0x1a4>
 8006e1c:	692b      	ldr	r3, [r5, #16]
 8006e1e:	89ae      	ldrh	r6, [r5, #12]
 8006e20:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8006e24:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8006e28:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e2a:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8006e2e:	2303      	movs	r3, #3
 8006e30:	84a6      	strh	r6, [r4, #36]	; 0x24
 8006e32:	4626      	mov	r6, r4
 8006e34:	4620      	mov	r0, r4
 8006e36:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8006e3a:	60e3      	str	r3, [r4, #12]
 8006e3c:	f001 fbbe 	bl	80085bc <ai_layers_init_all>
 8006e40:	4630      	mov	r0, r6
 8006e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e46:	f7ff f8d9 	bl	8005ffc <_ai_platform_acquire_crc>
 8006e4a:	4b82      	ldr	r3, [pc, #520]	; (8007054 <ai_platform_network_init+0x2bc>)
 8006e4c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e56:	185a      	adds	r2, r3, r1
 8006e58:	2a01      	cmp	r2, #1
 8006e5a:	d92b      	bls.n	8006eb4 <ai_platform_network_init+0x11c>
 8006e5c:	f240 4249 	movw	r2, #1097	; 0x449
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d027      	beq.n	8006eb4 <ai_platform_network_init+0x11c>
 8006e64:	4a7c      	ldr	r2, [pc, #496]	; (8007058 <ai_platform_network_init+0x2c0>)
 8006e66:	6813      	ldr	r3, [r2, #0]
 8006e68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e6c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006e70:	d02d      	beq.n	8006ece <ai_platform_network_init+0x136>
 8006e72:	6813      	ldr	r3, [r2, #0]
 8006e74:	f240 4183 	movw	r1, #1155	; 0x483
 8006e78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e7c:	428b      	cmp	r3, r1
 8006e7e:	f000 8089 	beq.w	8006f94 <ai_platform_network_init+0x1fc>
 8006e82:	6813      	ldr	r3, [r2, #0]
 8006e84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e88:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006e8c:	f000 80c3 	beq.w	8007016 <ai_platform_network_init+0x27e>
 8006e90:	6813      	ldr	r3, [r2, #0]
 8006e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d129      	bne.n	8006eee <ai_platform_network_init+0x156>
 8006e9a:	4a71      	ldr	r2, [pc, #452]	; (8007060 <ai_platform_network_init+0x2c8>)
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	6093      	str	r3, [r2, #8]
 8006ea0:	6893      	ldr	r3, [r2, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1fc      	bne.n	8006ea0 <ai_platform_network_init+0x108>
 8006ea6:	496f      	ldr	r1, [pc, #444]	; (8007064 <ai_platform_network_init+0x2cc>)
 8006ea8:	4b6f      	ldr	r3, [pc, #444]	; (8007068 <ai_platform_network_init+0x2d0>)
 8006eaa:	6011      	str	r1, [r2, #0]
 8006eac:	6812      	ldr	r2, [r2, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d01d      	beq.n	8006eee <ai_platform_network_init+0x156>
 8006eb2:	e7fe      	b.n	8006eb2 <ai_platform_network_init+0x11a>
 8006eb4:	4a6a      	ldr	r2, [pc, #424]	; (8007060 <ai_platform_network_init+0x2c8>)
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	6093      	str	r3, [r2, #8]
 8006eba:	6893      	ldr	r3, [r2, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1fc      	bne.n	8006eba <ai_platform_network_init+0x122>
 8006ec0:	4968      	ldr	r1, [pc, #416]	; (8007064 <ai_platform_network_init+0x2cc>)
 8006ec2:	4b69      	ldr	r3, [pc, #420]	; (8007068 <ai_platform_network_init+0x2d0>)
 8006ec4:	6011      	str	r1, [r2, #0]
 8006ec6:	6812      	ldr	r2, [r2, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d010      	beq.n	8006eee <ai_platform_network_init+0x156>
 8006ecc:	e7fe      	b.n	8006ecc <ai_platform_network_init+0x134>
 8006ece:	4a67      	ldr	r2, [pc, #412]	; (800706c <ai_platform_network_init+0x2d4>)
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006ed6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1fb      	bne.n	8006ed6 <ai_platform_network_init+0x13e>
 8006ede:	4961      	ldr	r1, [pc, #388]	; (8007064 <ai_platform_network_init+0x2cc>)
 8006ee0:	4b61      	ldr	r3, [pc, #388]	; (8007068 <ai_platform_network_init+0x2d0>)
 8006ee2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006ee6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d113      	bne.n	8006f16 <ai_platform_network_init+0x17e>
 8006eee:	2600      	movs	r6, #0
 8006ef0:	f7ff f886 	bl	8006000 <_ai_platform_release_crc>
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006efa:	4a59      	ldr	r2, [pc, #356]	; (8007060 <ai_platform_network_init+0x2c8>)
 8006efc:	2301      	movs	r3, #1
 8006efe:	6093      	str	r3, [r2, #8]
 8006f00:	6893      	ldr	r3, [r2, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1fc      	bne.n	8006f00 <ai_platform_network_init+0x168>
 8006f06:	4b57      	ldr	r3, [pc, #348]	; (8007064 <ai_platform_network_init+0x2cc>)
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	4b57      	ldr	r3, [pc, #348]	; (8007068 <ai_platform_network_init+0x2d0>)
 8006f0c:	6812      	ldr	r2, [r2, #0]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	f43f af7a 	beq.w	8006e08 <ai_platform_network_init+0x70>
 8006f14:	e7fe      	b.n	8006f14 <ai_platform_network_init+0x17c>
 8006f16:	e7fe      	b.n	8006f16 <ai_platform_network_init+0x17e>
 8006f18:	4a54      	ldr	r2, [pc, #336]	; (800706c <ai_platform_network_init+0x2d4>)
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006f20:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1fb      	bne.n	8006f20 <ai_platform_network_init+0x188>
 8006f28:	4b4e      	ldr	r3, [pc, #312]	; (8007064 <ai_platform_network_init+0x2cc>)
 8006f2a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006f2e:	4b4e      	ldr	r3, [pc, #312]	; (8007068 <ai_platform_network_init+0x2d0>)
 8006f30:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006f34:	429a      	cmp	r2, r3
 8006f36:	f43f af67 	beq.w	8006e08 <ai_platform_network_init+0x70>
 8006f3a:	e7fe      	b.n	8006f3a <ai_platform_network_init+0x1a2>
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f105 081c 	add.w	r8, r5, #28
 8006f44:	686e      	ldr	r6, [r5, #4]
 8006f46:	f7ff f80b 	bl	8005f60 <ai_buffer_get_size>
 8006f4a:	4607      	mov	r7, r0
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	4640      	mov	r0, r8
 8006f50:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8006f54:	f7ff f804 	bl	8005f60 <ai_buffer_get_size>
 8006f58:	2f00      	cmp	r7, #0
 8006f5a:	d13e      	bne.n	8006fda <ai_platform_network_init+0x242>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	f000 808e 	beq.w	800707e <ai_platform_network_init+0x2e6>
 8006f62:	f1b9 0f00 	cmp.w	r9, #0
 8006f66:	f000 8094 	beq.w	8007092 <ai_platform_network_init+0x2fa>
 8006f6a:	f04f 0c01 	mov.w	ip, #1
 8006f6e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006f70:	2600      	movs	r6, #0
 8006f72:	83e7      	strh	r7, [r4, #30]
 8006f74:	4563      	cmp	r3, ip
 8006f76:	83a6      	strh	r6, [r4, #28]
 8006f78:	d37a      	bcc.n	8007070 <ai_platform_network_init+0x2d8>
 8006f7a:	f1bc 0f00 	cmp.w	ip, #0
 8006f7e:	f000 809c 	beq.w	80070ba <ai_platform_network_init+0x322>
 8006f82:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006f84:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8006f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f8a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8006f8e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006f92:	e74c      	b.n	8006e2e <ai_platform_network_init+0x96>
 8006f94:	4a35      	ldr	r2, [pc, #212]	; (800706c <ai_platform_network_init+0x2d4>)
 8006f96:	2301      	movs	r3, #1
 8006f98:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006f9c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1fb      	bne.n	8006f9c <ai_platform_network_init+0x204>
 8006fa4:	492f      	ldr	r1, [pc, #188]	; (8007064 <ai_platform_network_init+0x2cc>)
 8006fa6:	4b30      	ldr	r3, [pc, #192]	; (8007068 <ai_platform_network_init+0x2d0>)
 8006fa8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006fac:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d09c      	beq.n	8006eee <ai_platform_network_init+0x156>
 8006fb4:	e7fe      	b.n	8006fb4 <ai_platform_network_init+0x21c>
 8006fb6:	4a2d      	ldr	r2, [pc, #180]	; (800706c <ai_platform_network_init+0x2d4>)
 8006fb8:	2301      	movs	r3, #1
 8006fba:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006fbe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1fb      	bne.n	8006fbe <ai_platform_network_init+0x226>
 8006fc6:	4b27      	ldr	r3, [pc, #156]	; (8007064 <ai_platform_network_init+0x2cc>)
 8006fc8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006fcc:	4b26      	ldr	r3, [pc, #152]	; (8007068 <ai_platform_network_init+0x2d0>)
 8006fce:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	f43f af18 	beq.w	8006e08 <ai_platform_network_init+0x70>
 8006fd8:	e7fe      	b.n	8006fd8 <ai_platform_network_init+0x240>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d153      	bne.n	8007086 <ai_platform_network_init+0x2ee>
 8006fde:	4680      	mov	r8, r0
 8006fe0:	4684      	mov	ip, r0
 8006fe2:	2e00      	cmp	r6, #0
 8006fe4:	d063      	beq.n	80070ae <ai_platform_network_init+0x316>
 8006fe6:	8be6      	ldrh	r6, [r4, #30]
 8006fe8:	2e00      	cmp	r6, #0
 8006fea:	d168      	bne.n	80070be <ai_platform_network_init+0x326>
 8006fec:	2212      	movs	r2, #18
 8006fee:	2116      	movs	r1, #22
 8006ff0:	f104 0010 	add.w	r0, r4, #16
 8006ff4:	f000 fc7c 	bl	80078f0 <core_set_error>
 8006ff8:	e77c      	b.n	8006ef4 <ai_platform_network_init+0x15c>
 8006ffa:	4a19      	ldr	r2, [pc, #100]	; (8007060 <ai_platform_network_init+0x2c8>)
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	6093      	str	r3, [r2, #8]
 8007000:	6893      	ldr	r3, [r2, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1fc      	bne.n	8007000 <ai_platform_network_init+0x268>
 8007006:	4b17      	ldr	r3, [pc, #92]	; (8007064 <ai_platform_network_init+0x2cc>)
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	4b17      	ldr	r3, [pc, #92]	; (8007068 <ai_platform_network_init+0x2d0>)
 800700c:	6812      	ldr	r2, [r2, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	f43f aefa 	beq.w	8006e08 <ai_platform_network_init+0x70>
 8007014:	e7fe      	b.n	8007014 <ai_platform_network_init+0x27c>
 8007016:	4a12      	ldr	r2, [pc, #72]	; (8007060 <ai_platform_network_init+0x2c8>)
 8007018:	2301      	movs	r3, #1
 800701a:	6093      	str	r3, [r2, #8]
 800701c:	6893      	ldr	r3, [r2, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1fc      	bne.n	800701c <ai_platform_network_init+0x284>
 8007022:	4910      	ldr	r1, [pc, #64]	; (8007064 <ai_platform_network_init+0x2cc>)
 8007024:	4b10      	ldr	r3, [pc, #64]	; (8007068 <ai_platform_network_init+0x2d0>)
 8007026:	6011      	str	r1, [r2, #0]
 8007028:	6812      	ldr	r2, [r2, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	f43f af5f 	beq.w	8006eee <ai_platform_network_init+0x156>
 8007030:	e7fe      	b.n	8007030 <ai_platform_network_init+0x298>
 8007032:	4a0b      	ldr	r2, [pc, #44]	; (8007060 <ai_platform_network_init+0x2c8>)
 8007034:	2301      	movs	r3, #1
 8007036:	6093      	str	r3, [r2, #8]
 8007038:	6893      	ldr	r3, [r2, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1fc      	bne.n	8007038 <ai_platform_network_init+0x2a0>
 800703e:	4b09      	ldr	r3, [pc, #36]	; (8007064 <ai_platform_network_init+0x2cc>)
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	4b09      	ldr	r3, [pc, #36]	; (8007068 <ai_platform_network_init+0x2d0>)
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	f43f aede 	beq.w	8006e08 <ai_platform_network_init+0x70>
 800704c:	e7fe      	b.n	800704c <ai_platform_network_init+0x2b4>
 800704e:	bf00      	nop
 8007050:	a1c00100 	.word	0xa1c00100
 8007054:	e0042000 	.word	0xe0042000
 8007058:	5c001000 	.word	0x5c001000
 800705c:	a1facade 	.word	0xa1facade
 8007060:	40023000 	.word	0x40023000
 8007064:	f407a5c2 	.word	0xf407a5c2
 8007068:	b5e8b5cd 	.word	0xb5e8b5cd
 800706c:	58024000 	.word	0x58024000
 8007070:	2213      	movs	r2, #19
 8007072:	2116      	movs	r1, #22
 8007074:	f104 0010 	add.w	r0, r4, #16
 8007078:	f000 fc3a 	bl	80078f0 <core_set_error>
 800707c:	e73a      	b.n	8006ef4 <ai_platform_network_init+0x15c>
 800707e:	4607      	mov	r7, r0
 8007080:	4680      	mov	r8, r0
 8007082:	4684      	mov	ip, r0
 8007084:	e773      	b.n	8006f6e <ai_platform_network_init+0x1d6>
 8007086:	f1b9 0f00 	cmp.w	r9, #0
 800708a:	d002      	beq.n	8007092 <ai_platform_network_init+0x2fa>
 800708c:	f04f 0c01 	mov.w	ip, #1
 8007090:	e7a7      	b.n	8006fe2 <ai_platform_network_init+0x24a>
 8007092:	2110      	movs	r1, #16
 8007094:	2213      	movs	r2, #19
 8007096:	2600      	movs	r6, #0
 8007098:	1860      	adds	r0, r4, r1
 800709a:	f000 fc29 	bl	80078f0 <core_set_error>
 800709e:	e729      	b.n	8006ef4 <ai_platform_network_init+0x15c>
 80070a0:	2110      	movs	r1, #16
 80070a2:	2211      	movs	r2, #17
 80070a4:	462e      	mov	r6, r5
 80070a6:	1860      	adds	r0, r4, r1
 80070a8:	f000 fc22 	bl	80078f0 <core_set_error>
 80070ac:	e722      	b.n	8006ef4 <ai_platform_network_init+0x15c>
 80070ae:	2110      	movs	r1, #16
 80070b0:	2212      	movs	r2, #18
 80070b2:	1860      	adds	r0, r4, r1
 80070b4:	f000 fc1c 	bl	80078f0 <core_set_error>
 80070b8:	e71c      	b.n	8006ef4 <ai_platform_network_init+0x15c>
 80070ba:	4666      	mov	r6, ip
 80070bc:	e6b7      	b.n	8006e2e <ai_platform_network_init+0x96>
 80070be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070c0:	6a26      	ldr	r6, [r4, #32]
 80070c2:	2701      	movs	r7, #1
 80070c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80070c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80070ca:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80070ce:	e74e      	b.n	8006f6e <ai_platform_network_init+0x1d6>

080070d0 <ai_platform_network_post_init>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d04e      	beq.n	8007174 <ai_platform_network_post_init+0xa4>
 80070d6:	4b8c      	ldr	r3, [pc, #560]	; (8007308 <ai_platform_network_post_init+0x238>)
 80070d8:	4604      	mov	r4, r0
 80070da:	6802      	ldr	r2, [r0, #0]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d149      	bne.n	8007174 <ai_platform_network_post_init+0xa4>
 80070e0:	f7fe ff8c 	bl	8005ffc <_ai_platform_acquire_crc>
 80070e4:	4b89      	ldr	r3, [pc, #548]	; (800730c <ai_platform_network_post_init+0x23c>)
 80070e6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070f0:	189a      	adds	r2, r3, r2
 80070f2:	2a01      	cmp	r2, #1
 80070f4:	f240 8095 	bls.w	8007222 <ai_platform_network_post_init+0x152>
 80070f8:	f240 4249 	movw	r2, #1097	; 0x449
 80070fc:	4293      	cmp	r3, r2
 80070fe:	f000 8090 	beq.w	8007222 <ai_platform_network_post_init+0x152>
 8007102:	4a83      	ldr	r2, [pc, #524]	; (8007310 <ai_platform_network_post_init+0x240>)
 8007104:	6813      	ldr	r3, [r2, #0]
 8007106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800710a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800710e:	f000 8096 	beq.w	800723e <ai_platform_network_post_init+0x16e>
 8007112:	6813      	ldr	r3, [r2, #0]
 8007114:	f240 4183 	movw	r1, #1155	; 0x483
 8007118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800711c:	428b      	cmp	r3, r1
 800711e:	f000 80b8 	beq.w	8007292 <ai_platform_network_post_init+0x1c2>
 8007122:	6813      	ldr	r3, [r2, #0]
 8007124:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007128:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800712c:	f000 80de 	beq.w	80072ec <ai_platform_network_post_init+0x21c>
 8007130:	6813      	ldr	r3, [r2, #0]
 8007132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 80bd 	beq.w	80072b6 <ai_platform_network_post_init+0x1e6>
 800713c:	f7fe ff60 	bl	8006000 <_ai_platform_release_crc>
 8007140:	68e3      	ldr	r3, [r4, #12]
 8007142:	f013 0502 	ands.w	r5, r3, #2
 8007146:	f000 808c 	beq.w	8007262 <ai_platform_network_post_init+0x192>
 800714a:	4620      	mov	r0, r4
 800714c:	f001 fa44 	bl	80085d8 <ai_layers_post_init_all>
 8007150:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007152:	b16b      	cbz	r3, 8007170 <ai_platform_network_post_init+0xa0>
 8007154:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007156:	e007      	b.n	8007168 <ai_platform_network_post_init+0x98>
 8007158:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800715c:	4798      	blx	r3
 800715e:	692b      	ldr	r3, [r5, #16]
 8007160:	b133      	cbz	r3, 8007170 <ai_platform_network_post_init+0xa0>
 8007162:	42ab      	cmp	r3, r5
 8007164:	461d      	mov	r5, r3
 8007166:	d003      	beq.n	8007170 <ai_platform_network_post_init+0xa0>
 8007168:	4629      	mov	r1, r5
 800716a:	2000      	movs	r0, #0
 800716c:	2d00      	cmp	r5, #0
 800716e:	d1f3      	bne.n	8007158 <ai_platform_network_post_init+0x88>
 8007170:	2001      	movs	r0, #1
 8007172:	bd38      	pop	{r3, r4, r5, pc}
 8007174:	f7fe ff42 	bl	8005ffc <_ai_platform_acquire_crc>
 8007178:	4b64      	ldr	r3, [pc, #400]	; (800730c <ai_platform_network_post_init+0x23c>)
 800717a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007184:	185a      	adds	r2, r3, r1
 8007186:	2a01      	cmp	r2, #1
 8007188:	d92a      	bls.n	80071e0 <ai_platform_network_post_init+0x110>
 800718a:	f240 4249 	movw	r2, #1097	; 0x449
 800718e:	4293      	cmp	r3, r2
 8007190:	d026      	beq.n	80071e0 <ai_platform_network_post_init+0x110>
 8007192:	4a5f      	ldr	r2, [pc, #380]	; (8007310 <ai_platform_network_post_init+0x240>)
 8007194:	6813      	ldr	r3, [r2, #0]
 8007196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800719a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800719e:	d02c      	beq.n	80071fa <ai_platform_network_post_init+0x12a>
 80071a0:	6813      	ldr	r3, [r2, #0]
 80071a2:	f240 4183 	movw	r1, #1155	; 0x483
 80071a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071aa:	428b      	cmp	r3, r1
 80071ac:	d060      	beq.n	8007270 <ai_platform_network_post_init+0x1a0>
 80071ae:	6813      	ldr	r3, [r2, #0]
 80071b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071b4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80071b8:	f000 808b 	beq.w	80072d2 <ai_platform_network_post_init+0x202>
 80071bc:	6813      	ldr	r3, [r2, #0]
 80071be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d129      	bne.n	800721a <ai_platform_network_post_init+0x14a>
 80071c6:	4a53      	ldr	r2, [pc, #332]	; (8007314 <ai_platform_network_post_init+0x244>)
 80071c8:	2301      	movs	r3, #1
 80071ca:	6093      	str	r3, [r2, #8]
 80071cc:	6893      	ldr	r3, [r2, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1fc      	bne.n	80071cc <ai_platform_network_post_init+0xfc>
 80071d2:	4951      	ldr	r1, [pc, #324]	; (8007318 <ai_platform_network_post_init+0x248>)
 80071d4:	4b51      	ldr	r3, [pc, #324]	; (800731c <ai_platform_network_post_init+0x24c>)
 80071d6:	6011      	str	r1, [r2, #0]
 80071d8:	6812      	ldr	r2, [r2, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d01d      	beq.n	800721a <ai_platform_network_post_init+0x14a>
 80071de:	e7fe      	b.n	80071de <ai_platform_network_post_init+0x10e>
 80071e0:	4a4c      	ldr	r2, [pc, #304]	; (8007314 <ai_platform_network_post_init+0x244>)
 80071e2:	2301      	movs	r3, #1
 80071e4:	6093      	str	r3, [r2, #8]
 80071e6:	6893      	ldr	r3, [r2, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1fc      	bne.n	80071e6 <ai_platform_network_post_init+0x116>
 80071ec:	494a      	ldr	r1, [pc, #296]	; (8007318 <ai_platform_network_post_init+0x248>)
 80071ee:	4b4b      	ldr	r3, [pc, #300]	; (800731c <ai_platform_network_post_init+0x24c>)
 80071f0:	6011      	str	r1, [r2, #0]
 80071f2:	6812      	ldr	r2, [r2, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d010      	beq.n	800721a <ai_platform_network_post_init+0x14a>
 80071f8:	e7fe      	b.n	80071f8 <ai_platform_network_post_init+0x128>
 80071fa:	4a49      	ldr	r2, [pc, #292]	; (8007320 <ai_platform_network_post_init+0x250>)
 80071fc:	2301      	movs	r3, #1
 80071fe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007202:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1fb      	bne.n	8007202 <ai_platform_network_post_init+0x132>
 800720a:	4943      	ldr	r1, [pc, #268]	; (8007318 <ai_platform_network_post_init+0x248>)
 800720c:	4b43      	ldr	r3, [pc, #268]	; (800731c <ai_platform_network_post_init+0x24c>)
 800720e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007212:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007216:	429a      	cmp	r2, r3
 8007218:	d110      	bne.n	800723c <ai_platform_network_post_init+0x16c>
 800721a:	f7fe fef1 	bl	8006000 <_ai_platform_release_crc>
 800721e:	2000      	movs	r0, #0
 8007220:	bd38      	pop	{r3, r4, r5, pc}
 8007222:	4a3c      	ldr	r2, [pc, #240]	; (8007314 <ai_platform_network_post_init+0x244>)
 8007224:	2301      	movs	r3, #1
 8007226:	6093      	str	r3, [r2, #8]
 8007228:	6893      	ldr	r3, [r2, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1fc      	bne.n	8007228 <ai_platform_network_post_init+0x158>
 800722e:	493a      	ldr	r1, [pc, #232]	; (8007318 <ai_platform_network_post_init+0x248>)
 8007230:	4b3a      	ldr	r3, [pc, #232]	; (800731c <ai_platform_network_post_init+0x24c>)
 8007232:	6011      	str	r1, [r2, #0]
 8007234:	6812      	ldr	r2, [r2, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d080      	beq.n	800713c <ai_platform_network_post_init+0x6c>
 800723a:	e7fe      	b.n	800723a <ai_platform_network_post_init+0x16a>
 800723c:	e7fe      	b.n	800723c <ai_platform_network_post_init+0x16c>
 800723e:	4a38      	ldr	r2, [pc, #224]	; (8007320 <ai_platform_network_post_init+0x250>)
 8007240:	2301      	movs	r3, #1
 8007242:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007246:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1fb      	bne.n	8007246 <ai_platform_network_post_init+0x176>
 800724e:	4932      	ldr	r1, [pc, #200]	; (8007318 <ai_platform_network_post_init+0x248>)
 8007250:	4b32      	ldr	r3, [pc, #200]	; (800731c <ai_platform_network_post_init+0x24c>)
 8007252:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007256:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800725a:	429a      	cmp	r2, r3
 800725c:	f43f af6e 	beq.w	800713c <ai_platform_network_post_init+0x6c>
 8007260:	e7fe      	b.n	8007260 <ai_platform_network_post_init+0x190>
 8007262:	2210      	movs	r2, #16
 8007264:	2111      	movs	r1, #17
 8007266:	18a0      	adds	r0, r4, r2
 8007268:	f000 fb42 	bl	80078f0 <core_set_error>
 800726c:	4628      	mov	r0, r5
 800726e:	bd38      	pop	{r3, r4, r5, pc}
 8007270:	4a2b      	ldr	r2, [pc, #172]	; (8007320 <ai_platform_network_post_init+0x250>)
 8007272:	2301      	movs	r3, #1
 8007274:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007278:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1fb      	bne.n	8007278 <ai_platform_network_post_init+0x1a8>
 8007280:	4925      	ldr	r1, [pc, #148]	; (8007318 <ai_platform_network_post_init+0x248>)
 8007282:	4b26      	ldr	r3, [pc, #152]	; (800731c <ai_platform_network_post_init+0x24c>)
 8007284:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007288:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800728c:	429a      	cmp	r2, r3
 800728e:	d0c4      	beq.n	800721a <ai_platform_network_post_init+0x14a>
 8007290:	e7fe      	b.n	8007290 <ai_platform_network_post_init+0x1c0>
 8007292:	4a23      	ldr	r2, [pc, #140]	; (8007320 <ai_platform_network_post_init+0x250>)
 8007294:	2301      	movs	r3, #1
 8007296:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800729a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1fb      	bne.n	800729a <ai_platform_network_post_init+0x1ca>
 80072a2:	491d      	ldr	r1, [pc, #116]	; (8007318 <ai_platform_network_post_init+0x248>)
 80072a4:	4b1d      	ldr	r3, [pc, #116]	; (800731c <ai_platform_network_post_init+0x24c>)
 80072a6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80072aa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80072ae:	429a      	cmp	r2, r3
 80072b0:	f43f af44 	beq.w	800713c <ai_platform_network_post_init+0x6c>
 80072b4:	e7fe      	b.n	80072b4 <ai_platform_network_post_init+0x1e4>
 80072b6:	4a17      	ldr	r2, [pc, #92]	; (8007314 <ai_platform_network_post_init+0x244>)
 80072b8:	2301      	movs	r3, #1
 80072ba:	6093      	str	r3, [r2, #8]
 80072bc:	6893      	ldr	r3, [r2, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1fc      	bne.n	80072bc <ai_platform_network_post_init+0x1ec>
 80072c2:	4915      	ldr	r1, [pc, #84]	; (8007318 <ai_platform_network_post_init+0x248>)
 80072c4:	4b15      	ldr	r3, [pc, #84]	; (800731c <ai_platform_network_post_init+0x24c>)
 80072c6:	6011      	str	r1, [r2, #0]
 80072c8:	6812      	ldr	r2, [r2, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	f43f af36 	beq.w	800713c <ai_platform_network_post_init+0x6c>
 80072d0:	e7fe      	b.n	80072d0 <ai_platform_network_post_init+0x200>
 80072d2:	4a10      	ldr	r2, [pc, #64]	; (8007314 <ai_platform_network_post_init+0x244>)
 80072d4:	2301      	movs	r3, #1
 80072d6:	6093      	str	r3, [r2, #8]
 80072d8:	6893      	ldr	r3, [r2, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1fc      	bne.n	80072d8 <ai_platform_network_post_init+0x208>
 80072de:	490e      	ldr	r1, [pc, #56]	; (8007318 <ai_platform_network_post_init+0x248>)
 80072e0:	4b0e      	ldr	r3, [pc, #56]	; (800731c <ai_platform_network_post_init+0x24c>)
 80072e2:	6011      	str	r1, [r2, #0]
 80072e4:	6812      	ldr	r2, [r2, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d097      	beq.n	800721a <ai_platform_network_post_init+0x14a>
 80072ea:	e7fe      	b.n	80072ea <ai_platform_network_post_init+0x21a>
 80072ec:	4a09      	ldr	r2, [pc, #36]	; (8007314 <ai_platform_network_post_init+0x244>)
 80072ee:	2301      	movs	r3, #1
 80072f0:	6093      	str	r3, [r2, #8]
 80072f2:	6893      	ldr	r3, [r2, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1fc      	bne.n	80072f2 <ai_platform_network_post_init+0x222>
 80072f8:	4907      	ldr	r1, [pc, #28]	; (8007318 <ai_platform_network_post_init+0x248>)
 80072fa:	4b08      	ldr	r3, [pc, #32]	; (800731c <ai_platform_network_post_init+0x24c>)
 80072fc:	6011      	str	r1, [r2, #0]
 80072fe:	6812      	ldr	r2, [r2, #0]
 8007300:	429a      	cmp	r2, r3
 8007302:	f43f af1b 	beq.w	800713c <ai_platform_network_post_init+0x6c>
 8007306:	e7fe      	b.n	8007306 <ai_platform_network_post_init+0x236>
 8007308:	a1c00100 	.word	0xa1c00100
 800730c:	e0042000 	.word	0xe0042000
 8007310:	5c001000 	.word	0x5c001000
 8007314:	40023000 	.word	0x40023000
 8007318:	f407a5c2 	.word	0xf407a5c2
 800731c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007320:	58024000 	.word	0x58024000

08007324 <ai_platform_network_process>:
 8007324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	b085      	sub	sp, #20
 800732a:	460e      	mov	r6, r1
 800732c:	4605      	mov	r5, r0
 800732e:	9201      	str	r2, [sp, #4]
 8007330:	b120      	cbz	r0, 800733c <ai_platform_network_process+0x18>
 8007332:	4b24      	ldr	r3, [pc, #144]	; (80073c4 <ai_platform_network_process+0xa0>)
 8007334:	6802      	ldr	r2, [r0, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	bf18      	it	ne
 800733a:	2500      	movne	r5, #0
 800733c:	f7fe fe5e 	bl	8005ffc <_ai_platform_acquire_crc>
 8007340:	4b21      	ldr	r3, [pc, #132]	; (80073c8 <ai_platform_network_process+0xa4>)
 8007342:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800734c:	185a      	adds	r2, r3, r1
 800734e:	2a01      	cmp	r2, #1
 8007350:	d92b      	bls.n	80073aa <ai_platform_network_process+0x86>
 8007352:	f240 4249 	movw	r2, #1097	; 0x449
 8007356:	4293      	cmp	r3, r2
 8007358:	d027      	beq.n	80073aa <ai_platform_network_process+0x86>
 800735a:	4a1c      	ldr	r2, [pc, #112]	; (80073cc <ai_platform_network_process+0xa8>)
 800735c:	6813      	ldr	r3, [r2, #0]
 800735e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007362:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007366:	d039      	beq.n	80073dc <ai_platform_network_process+0xb8>
 8007368:	6813      	ldr	r3, [r2, #0]
 800736a:	f240 4183 	movw	r1, #1155	; 0x483
 800736e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007372:	428b      	cmp	r3, r1
 8007374:	f000 819c 	beq.w	80076b0 <ai_platform_network_process+0x38c>
 8007378:	6813      	ldr	r3, [r2, #0]
 800737a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800737e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007382:	f000 8179 	beq.w	8007678 <ai_platform_network_process+0x354>
 8007386:	6813      	ldr	r3, [r2, #0]
 8007388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800738c:	2b00      	cmp	r3, #0
 800738e:	d136      	bne.n	80073fe <ai_platform_network_process+0xda>
 8007390:	4a0f      	ldr	r2, [pc, #60]	; (80073d0 <ai_platform_network_process+0xac>)
 8007392:	2301      	movs	r3, #1
 8007394:	6093      	str	r3, [r2, #8]
 8007396:	6893      	ldr	r3, [r2, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1fc      	bne.n	8007396 <ai_platform_network_process+0x72>
 800739c:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <ai_platform_network_process+0xb0>)
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <ai_platform_network_process+0xb4>)
 80073a2:	6812      	ldr	r2, [r2, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d02a      	beq.n	80073fe <ai_platform_network_process+0xda>
 80073a8:	e7fe      	b.n	80073a8 <ai_platform_network_process+0x84>
 80073aa:	4a09      	ldr	r2, [pc, #36]	; (80073d0 <ai_platform_network_process+0xac>)
 80073ac:	2301      	movs	r3, #1
 80073ae:	6093      	str	r3, [r2, #8]
 80073b0:	6893      	ldr	r3, [r2, #8]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1fc      	bne.n	80073b0 <ai_platform_network_process+0x8c>
 80073b6:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <ai_platform_network_process+0xb0>)
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <ai_platform_network_process+0xb4>)
 80073bc:	6812      	ldr	r2, [r2, #0]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d01d      	beq.n	80073fe <ai_platform_network_process+0xda>
 80073c2:	e7fe      	b.n	80073c2 <ai_platform_network_process+0x9e>
 80073c4:	a1c00100 	.word	0xa1c00100
 80073c8:	e0042000 	.word	0xe0042000
 80073cc:	5c001000 	.word	0x5c001000
 80073d0:	40023000 	.word	0x40023000
 80073d4:	f407a5c2 	.word	0xf407a5c2
 80073d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80073dc:	4ab0      	ldr	r2, [pc, #704]	; (80076a0 <ai_platform_network_process+0x37c>)
 80073de:	2301      	movs	r3, #1
 80073e0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80073e4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1fb      	bne.n	80073e4 <ai_platform_network_process+0xc0>
 80073ec:	4bad      	ldr	r3, [pc, #692]	; (80076a4 <ai_platform_network_process+0x380>)
 80073ee:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80073f2:	4bad      	ldr	r3, [pc, #692]	; (80076a8 <ai_platform_network_process+0x384>)
 80073f4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80073f8:	429a      	cmp	r2, r3
 80073fa:	f040 812b 	bne.w	8007654 <ai_platform_network_process+0x330>
 80073fe:	f7fe fdff 	bl	8006000 <_ai_platform_release_crc>
 8007402:	2d00      	cmp	r5, #0
 8007404:	f000 8172 	beq.w	80076ec <ai_platform_network_process+0x3c8>
 8007408:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 8123 	beq.w	8007656 <ai_platform_network_process+0x332>
 8007410:	68eb      	ldr	r3, [r5, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	616a      	str	r2, [r5, #20]
 800741e:	2b03      	cmp	r3, #3
 8007420:	f040 811f 	bne.w	8007662 <ai_platform_network_process+0x33e>
 8007424:	2e00      	cmp	r6, #0
 8007426:	f000 8156 	beq.w	80076d6 <ai_platform_network_process+0x3b2>
 800742a:	fab8 f788 	clz	r7, r8
 800742e:	097f      	lsrs	r7, r7, #5
 8007430:	f1b8 0f00 	cmp.w	r8, #0
 8007434:	f000 814f 	beq.w	80076d6 <ai_platform_network_process+0x3b2>
 8007438:	f8b8 3000 	ldrh.w	r3, [r8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 814a 	beq.w	80076d6 <ai_platform_network_process+0x3b2>
 8007442:	69b3      	ldr	r3, [r6, #24]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800744a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d072      	beq.n	8007538 <ai_platform_network_process+0x214>
 8007452:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007456:	2c00      	cmp	r4, #0
 8007458:	d06e      	beq.n	8007538 <ai_platform_network_process+0x214>
 800745a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800745e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007462:	f8d3 a000 	ldr.w	sl, [r3]
 8007466:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800746a:	f000 8133 	beq.w	80076d4 <ai_platform_network_process+0x3b0>
 800746e:	69a3      	ldr	r3, [r4, #24]
 8007470:	2101      	movs	r1, #1
 8007472:	4630      	mov	r0, r6
 8007474:	685d      	ldr	r5, [r3, #4]
 8007476:	f7fe fd73 	bl	8005f60 <ai_buffer_get_size>
 800747a:	4285      	cmp	r5, r0
 800747c:	f0c0 8138 	bcc.w	80076f0 <ai_platform_network_process+0x3cc>
 8007480:	68e0      	ldr	r0, [r4, #12]
 8007482:	69b1      	ldr	r1, [r6, #24]
 8007484:	68c2      	ldr	r2, [r0, #12]
 8007486:	68cb      	ldr	r3, [r1, #12]
 8007488:	429a      	cmp	r2, r3
 800748a:	f040 8131 	bne.w	80076f0 <ai_platform_network_process+0x3cc>
 800748e:	6882      	ldr	r2, [r0, #8]
 8007490:	688b      	ldr	r3, [r1, #8]
 8007492:	429a      	cmp	r2, r3
 8007494:	f040 812c 	bne.w	80076f0 <ai_platform_network_process+0x3cc>
 8007498:	6842      	ldr	r2, [r0, #4]
 800749a:	684b      	ldr	r3, [r1, #4]
 800749c:	429a      	cmp	r2, r3
 800749e:	f040 8127 	bne.w	80076f0 <ai_platform_network_process+0x3cc>
 80074a2:	69a3      	ldr	r3, [r4, #24]
 80074a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074a8:	f005 fee8 	bl	800d27c <ai_array_get_data_byte_size>
 80074ac:	4605      	mov	r5, r0
 80074ae:	4620      	mov	r0, r4
 80074b0:	f005 fe3a 	bl	800d128 <get_tensor_byte_size>
 80074b4:	4285      	cmp	r5, r0
 80074b6:	f0c0 811b 	bcc.w	80076f0 <ai_platform_network_process+0x3cc>
 80074ba:	69a3      	ldr	r3, [r4, #24]
 80074bc:	6818      	ldr	r0, [r3, #0]
 80074be:	f005 fe49 	bl	800d154 <ai_array_to_buffer_fmt>
 80074c2:	6833      	ldr	r3, [r6, #0]
 80074c4:	4058      	eors	r0, r3
 80074c6:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80074ca:	f040 81ca 	bne.w	8007862 <ai_platform_network_process+0x53e>
 80074ce:	6873      	ldr	r3, [r6, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 81bd 	beq.w	8007850 <ai_platform_network_process+0x52c>
 80074d6:	69b3      	ldr	r3, [r6, #24]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 81ca 	beq.w	8007874 <ai_platform_network_process+0x550>
 80074e0:	9a02      	ldr	r2, [sp, #8]
 80074e2:	4620      	mov	r0, r4
 80074e4:	3701      	adds	r7, #1
 80074e6:	361c      	adds	r6, #28
 80074e8:	429a      	cmp	r2, r3
 80074ea:	bf38      	it	cc
 80074ec:	461a      	movcc	r2, r3
 80074ee:	9202      	str	r2, [sp, #8]
 80074f0:	f005 fe1a 	bl	800d128 <get_tensor_byte_size>
 80074f4:	f8c9 0008 	str.w	r0, [r9, #8]
 80074f8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	fb00 f303 	mul.w	r3, r0, r3
 8007502:	f8c9 300c 	str.w	r3, [r9, #12]
 8007506:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800750a:	440b      	add	r3, r1
 800750c:	f8c9 1004 	str.w	r1, [r9, #4]
 8007510:	f84a 300b 	str.w	r3, [sl, fp]
 8007514:	69a0      	ldr	r0, [r4, #24]
 8007516:	6803      	ldr	r3, [r0, #0]
 8007518:	009a      	lsls	r2, r3, #2
 800751a:	f100 80bb 	bmi.w	8007694 <ai_platform_network_process+0x370>
 800751e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007522:	1a9b      	subs	r3, r3, r2
 8007524:	4419      	add	r1, r3
 8007526:	6081      	str	r1, [r0, #8]
 8007528:	69a3      	ldr	r3, [r4, #24]
 800752a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800752e:	60da      	str	r2, [r3, #12]
 8007530:	f8b8 3000 	ldrh.w	r3, [r8]
 8007534:	42bb      	cmp	r3, r7
 8007536:	d888      	bhi.n	800744a <ai_platform_network_process+0x126>
 8007538:	9d03      	ldr	r5, [sp, #12]
 800753a:	9b01      	ldr	r3, [sp, #4]
 800753c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 81a1 	beq.w	8007886 <ai_platform_network_process+0x562>
 8007544:	2a01      	cmp	r2, #1
 8007546:	f240 817b 	bls.w	8007840 <ai_platform_network_process+0x51c>
 800754a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800754e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 8174 	beq.w	8007840 <ai_platform_network_process+0x51c>
 8007558:	9e01      	ldr	r6, [sp, #4]
 800755a:	2700      	movs	r7, #0
 800755c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 80d3 	beq.w	800770c <ai_platform_network_process+0x3e8>
 8007566:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800756a:	2c00      	cmp	r4, #0
 800756c:	f000 80ce 	beq.w	800770c <ai_platform_network_process+0x3e8>
 8007570:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007574:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007578:	f8d3 8000 	ldr.w	r8, [r3]
 800757c:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8007580:	f000 819f 	beq.w	80078c2 <ai_platform_network_process+0x59e>
 8007584:	69a3      	ldr	r3, [r4, #24]
 8007586:	2101      	movs	r1, #1
 8007588:	4630      	mov	r0, r6
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	f7fe fce7 	bl	8005f60 <ai_buffer_get_size>
 8007592:	9b01      	ldr	r3, [sp, #4]
 8007594:	4283      	cmp	r3, r0
 8007596:	f0c0 8153 	bcc.w	8007840 <ai_platform_network_process+0x51c>
 800759a:	68e0      	ldr	r0, [r4, #12]
 800759c:	69b1      	ldr	r1, [r6, #24]
 800759e:	68c2      	ldr	r2, [r0, #12]
 80075a0:	68cb      	ldr	r3, [r1, #12]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	f040 814c 	bne.w	8007840 <ai_platform_network_process+0x51c>
 80075a8:	6882      	ldr	r2, [r0, #8]
 80075aa:	688b      	ldr	r3, [r1, #8]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	f040 8147 	bne.w	8007840 <ai_platform_network_process+0x51c>
 80075b2:	6842      	ldr	r2, [r0, #4]
 80075b4:	684b      	ldr	r3, [r1, #4]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	f040 8142 	bne.w	8007840 <ai_platform_network_process+0x51c>
 80075bc:	69a3      	ldr	r3, [r4, #24]
 80075be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075c2:	f005 fe5b 	bl	800d27c <ai_array_get_data_byte_size>
 80075c6:	9001      	str	r0, [sp, #4]
 80075c8:	4620      	mov	r0, r4
 80075ca:	f005 fdad 	bl	800d128 <get_tensor_byte_size>
 80075ce:	9b01      	ldr	r3, [sp, #4]
 80075d0:	4283      	cmp	r3, r0
 80075d2:	f0c0 8135 	bcc.w	8007840 <ai_platform_network_process+0x51c>
 80075d6:	69a3      	ldr	r3, [r4, #24]
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	f005 fdbb 	bl	800d154 <ai_array_to_buffer_fmt>
 80075de:	6833      	ldr	r3, [r6, #0]
 80075e0:	4058      	eors	r0, r3
 80075e2:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80075e6:	f040 815c 	bne.w	80078a2 <ai_platform_network_process+0x57e>
 80075ea:	6873      	ldr	r3, [r6, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 8150 	beq.w	8007892 <ai_platform_network_process+0x56e>
 80075f2:	69b3      	ldr	r3, [r6, #24]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 815b 	beq.w	80078b2 <ai_platform_network_process+0x58e>
 80075fc:	9a02      	ldr	r2, [sp, #8]
 80075fe:	4620      	mov	r0, r4
 8007600:	3701      	adds	r7, #1
 8007602:	361c      	adds	r6, #28
 8007604:	429a      	cmp	r2, r3
 8007606:	bf38      	it	cc
 8007608:	461a      	movcc	r2, r3
 800760a:	9202      	str	r2, [sp, #8]
 800760c:	f005 fd8c 	bl	800d128 <get_tensor_byte_size>
 8007610:	f8ca 0008 	str.w	r0, [sl, #8]
 8007614:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	fb00 f303 	mul.w	r3, r0, r3
 800761e:	f8ca 300c 	str.w	r3, [sl, #12]
 8007622:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8007626:	440b      	add	r3, r1
 8007628:	f8ca 1004 	str.w	r1, [sl, #4]
 800762c:	f848 300b 	str.w	r3, [r8, fp]
 8007630:	69a0      	ldr	r0, [r4, #24]
 8007632:	6803      	ldr	r3, [r0, #0]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	d464      	bmi.n	8007702 <ai_platform_network_process+0x3de>
 8007638:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800763c:	1a9b      	subs	r3, r3, r2
 800763e:	4419      	add	r1, r3
 8007640:	6081      	str	r1, [r0, #8]
 8007642:	69a3      	ldr	r3, [r4, #24]
 8007644:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007648:	60da      	str	r2, [r3, #12]
 800764a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800764e:	429f      	cmp	r7, r3
 8007650:	d384      	bcc.n	800755c <ai_platform_network_process+0x238>
 8007652:	e05b      	b.n	800770c <ai_platform_network_process+0x3e8>
 8007654:	e7fe      	b.n	8007654 <ai_platform_network_process+0x330>
 8007656:	68ea      	ldr	r2, [r5, #12]
 8007658:	616b      	str	r3, [r5, #20]
 800765a:	f002 0203 	and.w	r2, r2, #3
 800765e:	2a03      	cmp	r2, #3
 8007660:	d039      	beq.n	80076d6 <ai_platform_network_process+0x3b2>
 8007662:	2230      	movs	r2, #48	; 0x30
 8007664:	2111      	movs	r1, #17
 8007666:	f105 0010 	add.w	r0, r5, #16
 800766a:	2400      	movs	r4, #0
 800766c:	f000 f940 	bl	80078f0 <core_set_error>
 8007670:	4620      	mov	r0, r4
 8007672:	b005      	add	sp, #20
 8007674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007678:	4a0c      	ldr	r2, [pc, #48]	; (80076ac <ai_platform_network_process+0x388>)
 800767a:	2301      	movs	r3, #1
 800767c:	6093      	str	r3, [r2, #8]
 800767e:	6893      	ldr	r3, [r2, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1fc      	bne.n	800767e <ai_platform_network_process+0x35a>
 8007684:	4b07      	ldr	r3, [pc, #28]	; (80076a4 <ai_platform_network_process+0x380>)
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <ai_platform_network_process+0x384>)
 800768a:	6812      	ldr	r2, [r2, #0]
 800768c:	429a      	cmp	r2, r3
 800768e:	f43f aeb6 	beq.w	80073fe <ai_platform_network_process+0xda>
 8007692:	e7fe      	b.n	8007692 <ai_platform_network_process+0x36e>
 8007694:	f8b8 3000 	ldrh.w	r3, [r8]
 8007698:	429f      	cmp	r7, r3
 800769a:	f4ff aed6 	bcc.w	800744a <ai_platform_network_process+0x126>
 800769e:	e74b      	b.n	8007538 <ai_platform_network_process+0x214>
 80076a0:	58024000 	.word	0x58024000
 80076a4:	f407a5c2 	.word	0xf407a5c2
 80076a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80076ac:	40023000 	.word	0x40023000
 80076b0:	4a88      	ldr	r2, [pc, #544]	; (80078d4 <ai_platform_network_process+0x5b0>)
 80076b2:	2301      	movs	r3, #1
 80076b4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80076b8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1fb      	bne.n	80076b8 <ai_platform_network_process+0x394>
 80076c0:	4b85      	ldr	r3, [pc, #532]	; (80078d8 <ai_platform_network_process+0x5b4>)
 80076c2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80076c6:	4b85      	ldr	r3, [pc, #532]	; (80078dc <ai_platform_network_process+0x5b8>)
 80076c8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80076cc:	429a      	cmp	r2, r3
 80076ce:	f43f ae96 	beq.w	80073fe <ai_platform_network_process+0xda>
 80076d2:	e7fe      	b.n	80076d2 <ai_platform_network_process+0x3ae>
 80076d4:	9d03      	ldr	r5, [sp, #12]
 80076d6:	2400      	movs	r4, #0
 80076d8:	2217      	movs	r2, #23
 80076da:	2112      	movs	r1, #18
 80076dc:	f105 0010 	add.w	r0, r5, #16
 80076e0:	f000 f906 	bl	80078f0 <core_set_error>
 80076e4:	4620      	mov	r0, r4
 80076e6:	b005      	add	sp, #20
 80076e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ec:	462c      	mov	r4, r5
 80076ee:	e7bf      	b.n	8007670 <ai_platform_network_process+0x34c>
 80076f0:	9d03      	ldr	r5, [sp, #12]
 80076f2:	2218      	movs	r2, #24
 80076f4:	2112      	movs	r1, #18
 80076f6:	2400      	movs	r4, #0
 80076f8:	f105 0010 	add.w	r0, r5, #16
 80076fc:	f000 f8f8 	bl	80078f0 <core_set_error>
 8007700:	e7b6      	b.n	8007670 <ai_platform_network_process+0x34c>
 8007702:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007706:	429f      	cmp	r7, r3
 8007708:	f4ff af28 	bcc.w	800755c <ai_platform_network_process+0x238>
 800770c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007710:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007712:	82ab      	strh	r3, [r5, #20]
 8007714:	2a00      	cmp	r2, #0
 8007716:	f040 808d 	bne.w	8007834 <ai_platform_network_process+0x510>
 800771a:	4616      	mov	r6, r2
 800771c:	4617      	mov	r7, r2
 800771e:	8aec      	ldrh	r4, [r5, #22]
 8007720:	429c      	cmp	r4, r3
 8007722:	d2a5      	bcs.n	8007670 <ai_platform_network_process+0x34c>
 8007724:	46ab      	mov	fp, r5
 8007726:	2e00      	cmp	r6, #0
 8007728:	d030      	beq.n	800778c <ai_platform_network_process+0x468>
 800772a:	f04f 0800 	mov.w	r8, #0
 800772e:	e014      	b.n	800775a <ai_platform_network_process+0x436>
 8007730:	6882      	ldr	r2, [r0, #8]
 8007732:	68c5      	ldr	r5, [r0, #12]
 8007734:	6863      	ldr	r3, [r4, #4]
 8007736:	1b52      	subs	r2, r2, r5
 8007738:	4413      	add	r3, r2
 800773a:	6083      	str	r3, [r0, #8]
 800773c:	698b      	ldr	r3, [r1, #24]
 800773e:	6862      	ldr	r2, [r4, #4]
 8007740:	60da      	str	r2, [r3, #12]
 8007742:	f859 200a 	ldr.w	r2, [r9, sl]
 8007746:	f108 0801 	add.w	r8, r8, #1
 800774a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800774e:	440b      	add	r3, r1
 8007750:	4293      	cmp	r3, r2
 8007752:	d301      	bcc.n	8007758 <ai_platform_network_process+0x434>
 8007754:	68e3      	ldr	r3, [r4, #12]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	6063      	str	r3, [r4, #4]
 800775a:	8833      	ldrh	r3, [r6, #0]
 800775c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007760:	4543      	cmp	r3, r8
 8007762:	d913      	bls.n	800778c <ai_platform_network_process+0x468>
 8007764:	6873      	ldr	r3, [r6, #4]
 8007766:	b18b      	cbz	r3, 800778c <ai_platform_network_process+0x468>
 8007768:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800776c:	b171      	cbz	r1, 800778c <ai_platform_network_process+0x468>
 800776e:	6988      	ldr	r0, [r1, #24]
 8007770:	68b2      	ldr	r2, [r6, #8]
 8007772:	6803      	ldr	r3, [r0, #0]
 8007774:	f8d2 9000 	ldr.w	r9, [r2]
 8007778:	009d      	lsls	r5, r3, #2
 800777a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800777e:	d5d7      	bpl.n	8007730 <ai_platform_network_process+0x40c>
 8007780:	6880      	ldr	r0, [r0, #8]
 8007782:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8007786:	f005 fdf3 	bl	800d370 <memcpy>
 800778a:	e7da      	b.n	8007742 <ai_platform_network_process+0x41e>
 800778c:	4658      	mov	r0, fp
 800778e:	f000 ff37 	bl	8008600 <ai_layers_forward_all>
 8007792:	2f00      	cmp	r7, #0
 8007794:	d03f      	beq.n	8007816 <ai_platform_network_process+0x4f2>
 8007796:	2400      	movs	r4, #0
 8007798:	e016      	b.n	80077c8 <ai_platform_network_process+0x4a4>
 800779a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800779e:	f859 100a 	ldr.w	r1, [r9, sl]
 80077a2:	4413      	add	r3, r2
 80077a4:	428b      	cmp	r3, r1
 80077a6:	d302      	bcc.n	80077ae <ai_platform_network_process+0x48a>
 80077a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077ac:	1acb      	subs	r3, r1, r3
 80077ae:	f8c8 3004 	str.w	r3, [r8, #4]
 80077b2:	6981      	ldr	r1, [r0, #24]
 80077b4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80077b8:	1b52      	subs	r2, r2, r5
 80077ba:	4413      	add	r3, r2
 80077bc:	608b      	str	r3, [r1, #8]
 80077be:	6983      	ldr	r3, [r0, #24]
 80077c0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80077c4:	60da      	str	r2, [r3, #12]
 80077c6:	3401      	adds	r4, #1
 80077c8:	883b      	ldrh	r3, [r7, #0]
 80077ca:	42a3      	cmp	r3, r4
 80077cc:	d923      	bls.n	8007816 <ai_platform_network_process+0x4f2>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	b30b      	cbz	r3, 8007816 <ai_platform_network_process+0x4f2>
 80077d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80077d6:	b1f0      	cbz	r0, 8007816 <ai_platform_network_process+0x4f2>
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80077de:	6983      	ldr	r3, [r0, #24]
 80077e0:	f8d2 9000 	ldr.w	r9, [r2]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80077ea:	0092      	lsls	r2, r2, #2
 80077ec:	d5d5      	bpl.n	800779a <ai_platform_network_process+0x476>
 80077ee:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80077f2:	6899      	ldr	r1, [r3, #8]
 80077f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80077f8:	f005 fdba 	bl	800d370 <memcpy>
 80077fc:	f859 200a 	ldr.w	r2, [r9, sl]
 8007800:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007804:	440b      	add	r3, r1
 8007806:	4293      	cmp	r3, r2
 8007808:	d302      	bcc.n	8007810 <ai_platform_network_process+0x4ec>
 800780a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	f8c8 3004 	str.w	r3, [r8, #4]
 8007814:	e7d7      	b.n	80077c6 <ai_platform_network_process+0x4a2>
 8007816:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800781a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800781e:	3401      	adds	r4, #1
 8007820:	b2a4      	uxth	r4, r4
 8007822:	42a3      	cmp	r3, r4
 8007824:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007828:	f63f af7d 	bhi.w	8007726 <ai_platform_network_process+0x402>
 800782c:	4620      	mov	r0, r4
 800782e:	b005      	add	sp, #20
 8007830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007834:	2a01      	cmp	r2, #1
 8007836:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8007838:	d029      	beq.n	800788e <ai_platform_network_process+0x56a>
 800783a:	f106 070c 	add.w	r7, r6, #12
 800783e:	e76e      	b.n	800771e <ai_platform_network_process+0x3fa>
 8007840:	2218      	movs	r2, #24
 8007842:	2113      	movs	r1, #19
 8007844:	f105 0010 	add.w	r0, r5, #16
 8007848:	2400      	movs	r4, #0
 800784a:	f000 f851 	bl	80078f0 <core_set_error>
 800784e:	e70f      	b.n	8007670 <ai_platform_network_process+0x34c>
 8007850:	9d03      	ldr	r5, [sp, #12]
 8007852:	4604      	mov	r4, r0
 8007854:	2217      	movs	r2, #23
 8007856:	2112      	movs	r1, #18
 8007858:	f105 0010 	add.w	r0, r5, #16
 800785c:	f000 f848 	bl	80078f0 <core_set_error>
 8007860:	e706      	b.n	8007670 <ai_platform_network_process+0x34c>
 8007862:	9d03      	ldr	r5, [sp, #12]
 8007864:	2219      	movs	r2, #25
 8007866:	2112      	movs	r1, #18
 8007868:	2400      	movs	r4, #0
 800786a:	f105 0010 	add.w	r0, r5, #16
 800786e:	f000 f83f 	bl	80078f0 <core_set_error>
 8007872:	e6fd      	b.n	8007670 <ai_platform_network_process+0x34c>
 8007874:	9d03      	ldr	r5, [sp, #12]
 8007876:	4604      	mov	r4, r0
 8007878:	2221      	movs	r2, #33	; 0x21
 800787a:	2112      	movs	r1, #18
 800787c:	f105 0010 	add.w	r0, r5, #16
 8007880:	f000 f836 	bl	80078f0 <core_set_error>
 8007884:	e6f4      	b.n	8007670 <ai_platform_network_process+0x34c>
 8007886:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800788a:	82ab      	strh	r3, [r5, #20]
 800788c:	e742      	b.n	8007714 <ai_platform_network_process+0x3f0>
 800788e:	2700      	movs	r7, #0
 8007890:	e745      	b.n	800771e <ai_platform_network_process+0x3fa>
 8007892:	4604      	mov	r4, r0
 8007894:	2217      	movs	r2, #23
 8007896:	2113      	movs	r1, #19
 8007898:	f105 0010 	add.w	r0, r5, #16
 800789c:	f000 f828 	bl	80078f0 <core_set_error>
 80078a0:	e6e6      	b.n	8007670 <ai_platform_network_process+0x34c>
 80078a2:	2219      	movs	r2, #25
 80078a4:	2113      	movs	r1, #19
 80078a6:	f105 0010 	add.w	r0, r5, #16
 80078aa:	2400      	movs	r4, #0
 80078ac:	f000 f820 	bl	80078f0 <core_set_error>
 80078b0:	e6de      	b.n	8007670 <ai_platform_network_process+0x34c>
 80078b2:	4604      	mov	r4, r0
 80078b4:	2221      	movs	r2, #33	; 0x21
 80078b6:	2113      	movs	r1, #19
 80078b8:	f105 0010 	add.w	r0, r5, #16
 80078bc:	f000 f818 	bl	80078f0 <core_set_error>
 80078c0:	e6d6      	b.n	8007670 <ai_platform_network_process+0x34c>
 80078c2:	2217      	movs	r2, #23
 80078c4:	2113      	movs	r1, #19
 80078c6:	f105 0010 	add.w	r0, r5, #16
 80078ca:	4654      	mov	r4, sl
 80078cc:	f000 f810 	bl	80078f0 <core_set_error>
 80078d0:	e6ce      	b.n	8007670 <ai_platform_network_process+0x34c>
 80078d2:	bf00      	nop
 80078d4:	58024000 	.word	0x58024000
 80078d8:	f407a5c2 	.word	0xf407a5c2
 80078dc:	b5e8b5cd 	.word	0xb5e8b5cd

080078e0 <core_init>:
 80078e0:	2001      	movs	r0, #1
 80078e2:	4770      	bx	lr

080078e4 <core_get_error>:
 80078e4:	4603      	mov	r3, r0
 80078e6:	2200      	movs	r2, #0
 80078e8:	6800      	ldr	r0, [r0, #0]
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop

080078f0 <core_set_error>:
 80078f0:	4603      	mov	r3, r0
 80078f2:	7800      	ldrb	r0, [r0, #0]
 80078f4:	b108      	cbz	r0, 80078fa <core_set_error+0xa>
 80078f6:	2000      	movs	r0, #0
 80078f8:	4770      	bx	lr
 80078fa:	7019      	strb	r1, [r3, #0]
 80078fc:	2001      	movs	r0, #1
 80078fe:	6819      	ldr	r1, [r3, #0]
 8007900:	f362 211f 	bfi	r1, r2, #8, #24
 8007904:	6019      	str	r1, [r3, #0]
 8007906:	4770      	bx	lr

08007908 <func_dummy>:
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop

0800790c <forward_conv2d_integer_SSSA>:
 800790c:	6983      	ldr	r3, [r0, #24]
 800790e:	881a      	ldrh	r2, [r3, #0]
 8007910:	2a00      	cmp	r2, #0
 8007912:	f000 812d 	beq.w	8007b70 <forward_conv2d_integer_SSSA+0x264>
 8007916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791a:	685d      	ldr	r5, [r3, #4]
 800791c:	b0ad      	sub	sp, #180	; 0xb4
 800791e:	686c      	ldr	r4, [r5, #4]
 8007920:	b104      	cbz	r4, 8007924 <forward_conv2d_integer_SSSA+0x18>
 8007922:	6824      	ldr	r4, [r4, #0]
 8007924:	2a01      	cmp	r2, #1
 8007926:	f000 82a2 	beq.w	8007e6e <forward_conv2d_integer_SSSA+0x562>
 800792a:	692b      	ldr	r3, [r5, #16]
 800792c:	9323      	str	r3, [sp, #140]	; 0x8c
 800792e:	b10b      	cbz	r3, 8007934 <forward_conv2d_integer_SSSA+0x28>
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	9323      	str	r3, [sp, #140]	; 0x8c
 8007934:	2a02      	cmp	r2, #2
 8007936:	f000 8118 	beq.w	8007b6a <forward_conv2d_integer_SSSA+0x25e>
 800793a:	69eb      	ldr	r3, [r5, #28]
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 8245 	beq.w	8007dcc <forward_conv2d_integer_SSSA+0x4c0>
 8007942:	8b2e      	ldrh	r6, [r5, #24]
 8007944:	6819      	ldr	r1, [r3, #0]
 8007946:	2e01      	cmp	r6, #1
 8007948:	f200 8114 	bhi.w	8007b74 <forward_conv2d_integer_SSSA+0x268>
 800794c:	2600      	movs	r6, #0
 800794e:	2a03      	cmp	r2, #3
 8007950:	f000 8290 	beq.w	8007e74 <forward_conv2d_integer_SSSA+0x568>
 8007954:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007956:	2a00      	cmp	r2, #0
 8007958:	f000 828f 	beq.w	8007e7a <forward_conv2d_integer_SSSA+0x56e>
 800795c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800795e:	6817      	ldr	r7, [r2, #0]
 8007960:	9527      	str	r5, [sp, #156]	; 0x9c
 8007962:	9722      	str	r7, [sp, #136]	; 0x88
 8007964:	2d00      	cmp	r5, #0
 8007966:	f000 8225 	beq.w	8007db4 <forward_conv2d_integer_SSSA+0x4a8>
 800796a:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800796e:	68e7      	ldr	r7, [r4, #12]
 8007970:	69b2      	ldr	r2, [r6, #24]
 8007972:	687d      	ldr	r5, [r7, #4]
 8007974:	6892      	ldr	r2, [r2, #8]
 8007976:	9520      	str	r5, [sp, #128]	; 0x80
 8007978:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800797a:	921b      	str	r2, [sp, #108]	; 0x6c
 800797c:	69ad      	ldr	r5, [r5, #24]
 800797e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8007982:	68ad      	ldr	r5, [r5, #8]
 8007984:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8007988:	951e      	str	r5, [sp, #120]	; 0x78
 800798a:	fa1f f58a 	uxth.w	r5, sl
 800798e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8007990:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8007994:	9518      	str	r5, [sp, #96]	; 0x60
 8007996:	68d5      	ldr	r5, [r2, #12]
 8007998:	6892      	ldr	r2, [r2, #8]
 800799a:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 800799e:	9221      	str	r2, [sp, #132]	; 0x84
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	951f      	str	r5, [sp, #124]	; 0x7c
 80079a4:	9224      	str	r2, [sp, #144]	; 0x90
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	9226      	str	r2, [sp, #152]	; 0x98
 80079aa:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 80079ac:	9213      	str	r2, [sp, #76]	; 0x4c
 80079ae:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80079b0:	9215      	str	r2, [sp, #84]	; 0x54
 80079b2:	8832      	ldrh	r2, [r6, #0]
 80079b4:	9216      	str	r2, [sp, #88]	; 0x58
 80079b6:	88b2      	ldrh	r2, [r6, #4]
 80079b8:	9214      	str	r2, [sp, #80]	; 0x50
 80079ba:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80079be:	69c6      	ldr	r6, [r0, #28]
 80079c0:	921d      	str	r2, [sp, #116]	; 0x74
 80079c2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80079c6:	9219      	str	r2, [sp, #100]	; 0x64
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 81df 	beq.w	8007d8c <forward_conv2d_integer_SSSA+0x480>
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 81db 	beq.w	8007d8c <forward_conv2d_integer_SSSA+0x480>
 80079d6:	699a      	ldr	r2, [r3, #24]
 80079d8:	2a00      	cmp	r2, #0
 80079da:	bf08      	it	eq
 80079dc:	4613      	moveq	r3, r2
 80079de:	9325      	str	r3, [sp, #148]	; 0x94
 80079e0:	6827      	ldr	r7, [r4, #0]
 80079e2:	f8d9 2000 	ldr.w	r2, [r9]
 80079e6:	680b      	ldr	r3, [r1, #0]
 80079e8:	2f00      	cmp	r7, #0
 80079ea:	f000 81c8 	beq.w	8007d7e <forward_conv2d_integer_SSSA+0x472>
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	2800      	cmp	r0, #0
 80079f2:	f000 81c4 	beq.w	8007d7e <forward_conv2d_integer_SSSA+0x472>
 80079f6:	887d      	ldrh	r5, [r7, #2]
 80079f8:	2d00      	cmp	r5, #0
 80079fa:	f000 81c0 	beq.w	8007d7e <forward_conv2d_integer_SSSA+0x472>
 80079fe:	6800      	ldr	r0, [r0, #0]
 8007a00:	edd0 7a00 	vldr	s15, [r0]
 8007a04:	2a00      	cmp	r2, #0
 8007a06:	f000 81ab 	beq.w	8007d60 <forward_conv2d_integer_SSSA+0x454>
 8007a0a:	6850      	ldr	r0, [r2, #4]
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	f000 81a7 	beq.w	8007d60 <forward_conv2d_integer_SSSA+0x454>
 8007a12:	8855      	ldrh	r5, [r2, #2]
 8007a14:	2d00      	cmp	r5, #0
 8007a16:	f000 81a3 	beq.w	8007d60 <forward_conv2d_integer_SSSA+0x454>
 8007a1a:	6800      	ldr	r0, [r0, #0]
 8007a1c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007a1e:	ed90 0a00 	vldr	s0, [r0]
 8007a22:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007a24:	42a8      	cmp	r0, r5
 8007a26:	f040 81a2 	bne.w	8007d6e <forward_conv2d_integer_SSSA+0x462>
 8007a2a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007a2c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007a2e:	42a8      	cmp	r0, r5
 8007a30:	f040 819d 	bne.w	8007d6e <forward_conv2d_integer_SSSA+0x462>
 8007a34:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007a36:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007a38:	42a8      	cmp	r0, r5
 8007a3a:	f040 8198 	bne.w	8007d6e <forward_conv2d_integer_SSSA+0x462>
 8007a3e:	9824      	ldr	r0, [sp, #144]	; 0x90
 8007a40:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8007a42:	42a8      	cmp	r0, r5
 8007a44:	f040 8193 	bne.w	8007d6e <forward_conv2d_integer_SSSA+0x462>
 8007a48:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007a4a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8007a4c:	42a8      	cmp	r0, r5
 8007a4e:	bf08      	it	eq
 8007a50:	f1bb 0f03 	cmpeq.w	fp, #3
 8007a54:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007a56:	bf0c      	ite	eq
 8007a58:	f04f 0c01 	moveq.w	ip, #1
 8007a5c:	f04f 0c00 	movne.w	ip, #0
 8007a60:	2801      	cmp	r0, #1
 8007a62:	f040 818a 	bne.w	8007d7a <forward_conv2d_integer_SSSA+0x46e>
 8007a66:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007a68:	2801      	cmp	r0, #1
 8007a6a:	f040 8186 	bne.w	8007d7a <forward_conv2d_integer_SSSA+0x46e>
 8007a6e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007a70:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007a72:	4328      	orrs	r0, r5
 8007a74:	f040 8181 	bne.w	8007d7a <forward_conv2d_integer_SSSA+0x46e>
 8007a78:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007a7a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007a7c:	2801      	cmp	r0, #1
 8007a7e:	bf08      	it	eq
 8007a80:	2d01      	cmpeq	r5, #1
 8007a82:	bf0c      	ite	eq
 8007a84:	2001      	moveq	r0, #1
 8007a86:	2000      	movne	r0, #0
 8007a88:	6989      	ldr	r1, [r1, #24]
 8007a8a:	69a4      	ldr	r4, [r4, #24]
 8007a8c:	6889      	ldr	r1, [r1, #8]
 8007a8e:	68a4      	ldr	r4, [r4, #8]
 8007a90:	911a      	str	r1, [sp, #104]	; 0x68
 8007a92:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8007a96:	688d      	ldr	r5, [r1, #8]
 8007a98:	2f00      	cmp	r7, #0
 8007a9a:	f000 8175 	beq.w	8007d88 <forward_conv2d_integer_SSSA+0x47c>
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	2900      	cmp	r1, #0
 8007aa2:	f000 8185 	beq.w	8007db0 <forward_conv2d_integer_SSSA+0x4a4>
 8007aa6:	887f      	ldrh	r7, [r7, #2]
 8007aa8:	2f00      	cmp	r7, #0
 8007aaa:	f000 816d 	beq.w	8007d88 <forward_conv2d_integer_SSSA+0x47c>
 8007aae:	6849      	ldr	r1, [r1, #4]
 8007ab0:	f991 1000 	ldrsb.w	r1, [r1]
 8007ab4:	9117      	str	r1, [sp, #92]	; 0x5c
 8007ab6:	2a00      	cmp	r2, #0
 8007ab8:	f000 8164 	beq.w	8007d84 <forward_conv2d_integer_SSSA+0x478>
 8007abc:	6851      	ldr	r1, [r2, #4]
 8007abe:	2900      	cmp	r1, #0
 8007ac0:	f000 8174 	beq.w	8007dac <forward_conv2d_integer_SSSA+0x4a0>
 8007ac4:	8852      	ldrh	r2, [r2, #2]
 8007ac6:	2a00      	cmp	r2, #0
 8007ac8:	f000 815c 	beq.w	8007d84 <forward_conv2d_integer_SSSA+0x478>
 8007acc:	684a      	ldr	r2, [r1, #4]
 8007ace:	f992 2000 	ldrsb.w	r2, [r2]
 8007ad2:	921c      	str	r2, [sp, #112]	; 0x70
 8007ad4:	b113      	cbz	r3, 8007adc <forward_conv2d_integer_SSSA+0x1d0>
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	b103      	cbz	r3, 8007adc <forward_conv2d_integer_SSSA+0x1d0>
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2e01      	cmp	r6, #1
 8007ade:	f000 815f 	beq.w	8007da0 <forward_conv2d_integer_SSSA+0x494>
 8007ae2:	f8bd 8080 	ldrh.w	r8, [sp, #128]	; 0x80
 8007ae6:	4546      	cmp	r6, r8
 8007ae8:	bf0c      	ite	eq
 8007aea:	f04f 0813 	moveq.w	r8, #19
 8007aee:	f04f 0800 	movne.w	r8, #0
 8007af2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007af4:	fa1f fa8a 	uxth.w	sl, sl
 8007af8:	9921      	ldr	r1, [sp, #132]	; 0x84
 8007afa:	fb01 f202 	mul.w	r2, r1, r2
 8007afe:	fb0a 5202 	mla	r2, sl, r2, r5
 8007b02:	4294      	cmp	r4, r2
 8007b04:	f080 814a 	bcs.w	8007d9c <forward_conv2d_integer_SSSA+0x490>
 8007b08:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b0a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007b0c:	fb01 f602 	mul.w	r6, r1, r2
 8007b10:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
 8007b14:	fb02 4606 	mla	r6, r2, r6, r4
 8007b18:	42b5      	cmp	r5, r6
 8007b1a:	bf2c      	ite	cs
 8007b1c:	2600      	movcs	r6, #0
 8007b1e:	2601      	movcc	r6, #1
 8007b20:	2200      	movs	r2, #0
 8007b22:	f10d 07a2 	add.w	r7, sp, #162	; 0xa2
 8007b26:	f1a8 0811 	sub.w	r8, r8, #17
 8007b2a:	f8ad 20a2 	strh.w	r2, [sp, #162]	; 0xa2
 8007b2e:	4638      	mov	r0, r7
 8007b30:	9229      	str	r2, [sp, #164]	; 0xa4
 8007b32:	ed93 7a00 	vldr	s14, [r3]
 8007b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b3a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007b3e:	f000 ff6b 	bl	8008a18 <align_factor>
 8007b42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	9029      	str	r0, [sp, #164]	; 0xa4
 8007b4a:	922a      	str	r2, [sp, #168]	; 0xa8
 8007b4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b50:	f005 fb6c 	bl	800d22c <ai_array_get_byte_size>
 8007b54:	902b      	str	r0, [sp, #172]	; 0xac
 8007b56:	f1b8 0f03 	cmp.w	r8, #3
 8007b5a:	f200 8192 	bhi.w	8007e82 <forward_conv2d_integer_SSSA+0x576>
 8007b5e:	e8df f018 	tbh	[pc, r8, lsl #1]
 8007b62:	00ce      	.short	0x00ce
 8007b64:	005f0096 	.word	0x005f0096
 8007b68:	000b      	.short	0x000b
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	deff      	udf	#255	; 0xff
 8007b70:	6853      	ldr	r3, [r2, #4]
 8007b72:	deff      	udf	#255	; 0xff
 8007b74:	685e      	ldr	r6, [r3, #4]
 8007b76:	e6ea      	b.n	800794e <forward_conv2d_integer_SSSA+0x42>
 8007b78:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8007b7c:	4658      	mov	r0, fp
 8007b7e:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8007b82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007b84:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b86:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007b88:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007b8c:	9303      	str	r3, [sp, #12]
 8007b8e:	4643      	mov	r3, r8
 8007b90:	9202      	str	r2, [sp, #8]
 8007b92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b94:	e9cd 6100 	strd	r6, r1, [sp]
 8007b98:	4651      	mov	r1, sl
 8007b9a:	f001 fd57 	bl	800964c <st_sssa8_convolve_rank1upd>
 8007b9e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007ba0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ba2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ba4:	9310      	str	r3, [sp, #64]	; 0x40
 8007ba6:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8007baa:	950d      	str	r5, [sp, #52]	; 0x34
 8007bac:	930e      	str	r3, [sp, #56]	; 0x38
 8007bae:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8007bb2:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007bb4:	9201      	str	r2, [sp, #4]
 8007bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bb8:	465b      	mov	r3, fp
 8007bba:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 8007bbe:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 8007bc2:	f8cd a000 	str.w	sl, [sp]
 8007bc6:	950c      	str	r5, [sp, #48]	; 0x30
 8007bc8:	f8cd 8008 	str.w	r8, [sp, #8]
 8007bcc:	e9cd 700a 	strd	r7, r0, [sp, #40]	; 0x28
 8007bd0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007bd2:	9008      	str	r0, [sp, #32]
 8007bd4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007bd6:	9007      	str	r0, [sp, #28]
 8007bd8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007bda:	9006      	str	r0, [sp, #24]
 8007bdc:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007bde:	9005      	str	r0, [sp, #20]
 8007be0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007be2:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8007be6:	4620      	mov	r0, r4
 8007be8:	ac29      	add	r4, sp, #164	; 0xa4
 8007bea:	9409      	str	r4, [sp, #36]	; 0x24
 8007bec:	f001 fdba 	bl	8009764 <st_sssa8_convolve>
 8007bf0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007bf4:	0a1b      	lsrs	r3, r3, #8
 8007bf6:	f000 8138 	beq.w	8007e6a <forward_conv2d_integer_SSSA+0x55e>
 8007bfa:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007c04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c08:	4298      	cmp	r0, r3
 8007c0a:	fb01 f202 	mul.w	r2, r1, r2
 8007c0e:	d1f9      	bne.n	8007c04 <forward_conv2d_integer_SSSA+0x2f8>
 8007c10:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007c12:	4649      	mov	r1, r9
 8007c14:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8007c16:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007c18:	47a0      	blx	r4
 8007c1a:	b02d      	add	sp, #180	; 0xb4
 8007c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c20:	f8bd 6064 	ldrh.w	r6, [sp, #100]	; 0x64
 8007c24:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 8007c28:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c2a:	4632      	mov	r2, r6
 8007c2c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007c30:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c32:	4650      	mov	r0, sl
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	4643      	mov	r3, r8
 8007c38:	f000 ff40 	bl	8008abc <st_sssa8_conv_dw_Wadapt>
 8007c3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007c3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c40:	4620      	mov	r0, r4
 8007c42:	920c      	str	r2, [sp, #48]	; 0x30
 8007c44:	ac29      	add	r4, sp, #164	; 0xa4
 8007c46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c48:	9310      	str	r3, [sp, #64]	; 0x40
 8007c4a:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8007c4e:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 8007c52:	930e      	str	r3, [sp, #56]	; 0x38
 8007c54:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8007c58:	f8cd a000 	str.w	sl, [sp]
 8007c5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c5e:	465b      	mov	r3, fp
 8007c60:	950d      	str	r5, [sp, #52]	; 0x34
 8007c62:	9602      	str	r6, [sp, #8]
 8007c64:	9409      	str	r4, [sp, #36]	; 0x24
 8007c66:	e9cd 720a 	strd	r7, r2, [sp, #40]	; 0x28
 8007c6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007c6c:	9208      	str	r2, [sp, #32]
 8007c6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c70:	9207      	str	r2, [sp, #28]
 8007c72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c74:	9206      	str	r2, [sp, #24]
 8007c76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007c78:	9205      	str	r2, [sp, #20]
 8007c7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c7c:	e9cd 8203 	strd	r8, r2, [sp, #12]
 8007c80:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007c82:	9201      	str	r2, [sp, #4]
 8007c84:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 8007c88:	f000 ffd4 	bl	8008c34 <st_sssa8_convolve_dw>
 8007c8c:	e7b0      	b.n	8007bf0 <forward_conv2d_integer_SSSA+0x2e4>
 8007c8e:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 8007c92:	465a      	mov	r2, fp
 8007c94:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c96:	981a      	ldr	r0, [sp, #104]	; 0x68
 8007c98:	4643      	mov	r3, r8
 8007c9a:	f002 fee5 	bl	800aa68 <st_sssa8_convolve_1x1_WeightsPrefetch>
 8007c9e:	2e00      	cmp	r6, #0
 8007ca0:	f040 8097 	bne.w	8007dd2 <forward_conv2d_integer_SSSA+0x4c6>
 8007ca4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8007cac:	ac29      	add	r4, sp, #164	; 0xa4
 8007cae:	930c      	str	r3, [sp, #48]	; 0x30
 8007cb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cb2:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 8007cb6:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 8007cba:	950d      	str	r5, [sp, #52]	; 0x34
 8007cbc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007cc0:	9603      	str	r6, [sp, #12]
 8007cc2:	9409      	str	r4, [sp, #36]	; 0x24
 8007cc4:	e9cd 730a 	strd	r7, r3, [sp, #40]	; 0x28
 8007cc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cca:	9308      	str	r3, [sp, #32]
 8007ccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cce:	9307      	str	r3, [sp, #28]
 8007cd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cd2:	9306      	str	r3, [sp, #24]
 8007cd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007cd6:	9305      	str	r3, [sp, #20]
 8007cd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cda:	9304      	str	r3, [sp, #16]
 8007cdc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8007ce8:	930e      	str	r3, [sp, #56]	; 0x38
 8007cea:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8007cee:	9302      	str	r3, [sp, #8]
 8007cf0:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8007cf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cf6:	465b      	mov	r3, fp
 8007cf8:	f002 fec4 	bl	800aa84 <st_sssa8_convolve_1x1>
 8007cfc:	e778      	b.n	8007bf0 <forward_conv2d_integer_SSSA+0x2e4>
 8007cfe:	f8bd 6064 	ldrh.w	r6, [sp, #100]	; 0x64
 8007d02:	4658      	mov	r0, fp
 8007d04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d08:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007d0a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8007d0e:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007d12:	9303      	str	r3, [sp, #12]
 8007d14:	4633      	mov	r3, r6
 8007d16:	9202      	str	r2, [sp, #8]
 8007d18:	4652      	mov	r2, sl
 8007d1a:	e9cd 6100 	strd	r6, r1, [sp]
 8007d1e:	4641      	mov	r1, r8
 8007d20:	f001 fc94 	bl	800964c <st_sssa8_convolve_rank1upd>
 8007d24:	981e      	ldr	r0, [sp, #120]	; 0x78
 8007d26:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8007d2a:	465a      	mov	r2, fp
 8007d2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d2e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007d30:	9509      	str	r5, [sp, #36]	; 0x24
 8007d32:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007d34:	930a      	str	r3, [sp, #40]	; 0x28
 8007d36:	4643      	mov	r3, r8
 8007d38:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 8007d3c:	9508      	str	r5, [sp, #32]
 8007d3e:	f8cd a000 	str.w	sl, [sp]
 8007d42:	e9cd 7006 	strd	r7, r0, [sp, #24]
 8007d46:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007d48:	9004      	str	r0, [sp, #16]
 8007d4a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007d4c:	9003      	str	r0, [sp, #12]
 8007d4e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007d50:	e9cd 6001 	strd	r6, r0, [sp, #4]
 8007d54:	4620      	mov	r0, r4
 8007d56:	ac29      	add	r4, sp, #164	; 0xa4
 8007d58:	9405      	str	r4, [sp, #20]
 8007d5a:	f002 fa97 	bl	800a28c <st_sssa8_convolve_rgb>
 8007d5e:	e747      	b.n	8007bf0 <forward_conv2d_integer_SSSA+0x2e4>
 8007d60:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007d62:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007d64:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8007e88 <forward_conv2d_integer_SSSA+0x57c>
 8007d68:	42a8      	cmp	r0, r5
 8007d6a:	f43f ae5e 	beq.w	8007a2a <forward_conv2d_integer_SSSA+0x11e>
 8007d6e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007d70:	f04f 0c00 	mov.w	ip, #0
 8007d74:	2801      	cmp	r0, #1
 8007d76:	f43f ae76 	beq.w	8007a66 <forward_conv2d_integer_SSSA+0x15a>
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e684      	b.n	8007a88 <forward_conv2d_integer_SSSA+0x17c>
 8007d7e:	eddf 7a42 	vldr	s15, [pc, #264]	; 8007e88 <forward_conv2d_integer_SSSA+0x57c>
 8007d82:	e63f      	b.n	8007a04 <forward_conv2d_integer_SSSA+0xf8>
 8007d84:	921c      	str	r2, [sp, #112]	; 0x70
 8007d86:	e6a5      	b.n	8007ad4 <forward_conv2d_integer_SSSA+0x1c8>
 8007d88:	9717      	str	r7, [sp, #92]	; 0x5c
 8007d8a:	e694      	b.n	8007ab6 <forward_conv2d_integer_SSSA+0x1aa>
 8007d8c:	6a03      	ldr	r3, [r0, #32]
 8007d8e:	9325      	str	r3, [sp, #148]	; 0x94
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f43f ae25 	beq.w	80079e0 <forward_conv2d_integer_SSSA+0xd4>
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	9325      	str	r3, [sp, #148]	; 0x94
 8007d9a:	e621      	b.n	80079e0 <forward_conv2d_integer_SSSA+0xd4>
 8007d9c:	2600      	movs	r6, #0
 8007d9e:	e6bf      	b.n	8007b20 <forward_conv2d_integer_SSSA+0x214>
 8007da0:	f1bc 0f00 	cmp.w	ip, #0
 8007da4:	d00b      	beq.n	8007dbe <forward_conv2d_integer_SSSA+0x4b2>
 8007da6:	f04f 0811 	mov.w	r8, #17
 8007daa:	e6a2      	b.n	8007af2 <forward_conv2d_integer_SSSA+0x1e6>
 8007dac:	911c      	str	r1, [sp, #112]	; 0x70
 8007dae:	e691      	b.n	8007ad4 <forward_conv2d_integer_SSSA+0x1c8>
 8007db0:	9117      	str	r1, [sp, #92]	; 0x5c
 8007db2:	e680      	b.n	8007ab6 <forward_conv2d_integer_SSSA+0x1aa>
 8007db4:	4a35      	ldr	r2, [pc, #212]	; (8007e8c <forward_conv2d_integer_SSSA+0x580>)
 8007db6:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007dba:	9227      	str	r2, [sp, #156]	; 0x9c
 8007dbc:	e5d7      	b.n	800796e <forward_conv2d_integer_SSSA+0x62>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	bf0c      	ite	eq
 8007dc2:	f04f 0814 	moveq.w	r8, #20
 8007dc6:	f04f 0812 	movne.w	r8, #18
 8007dca:	e692      	b.n	8007af2 <forward_conv2d_integer_SSSA+0x1e6>
 8007dcc:	4619      	mov	r1, r3
 8007dce:	461e      	mov	r6, r3
 8007dd0:	e5bd      	b.n	800794e <forward_conv2d_integer_SSSA+0x42>
 8007dd2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007dd4:	2a00      	cmp	r2, #0
 8007dd6:	f43f af0b 	beq.w	8007bf0 <forward_conv2d_integer_SSSA+0x2e4>
 8007dda:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8007dde:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8007de2:	9120      	str	r1, [sp, #128]	; 0x80
 8007de4:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 8007de8:	9821      	ldr	r0, [sp, #132]	; 0x84
 8007dea:	911f      	str	r1, [sp, #124]	; 0x7c
 8007dec:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007dee:	fb00 fa0a 	mul.w	sl, r0, sl
 8007df2:	9621      	str	r6, [sp, #132]	; 0x84
 8007df4:	b280      	uxth	r0, r0
 8007df6:	fb01 f303 	mul.w	r3, r1, r3
 8007dfa:	2600      	movs	r6, #0
 8007dfc:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8007e00:	b289      	uxth	r1, r1
 8007e02:	4699      	mov	r9, r3
 8007e04:	465b      	mov	r3, fp
 8007e06:	4693      	mov	fp, r2
 8007e08:	901e      	str	r0, [sp, #120]	; 0x78
 8007e0a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007e0c:	3601      	adds	r6, #1
 8007e0e:	4620      	mov	r0, r4
 8007e10:	950d      	str	r5, [sp, #52]	; 0x34
 8007e12:	920e      	str	r2, [sp, #56]	; 0x38
 8007e14:	4455      	add	r5, sl
 8007e16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007e18:	444c      	add	r4, r9
 8007e1a:	931d      	str	r3, [sp, #116]	; 0x74
 8007e1c:	920c      	str	r2, [sp, #48]	; 0x30
 8007e1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e20:	9119      	str	r1, [sp, #100]	; 0x64
 8007e22:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007e26:	e9cd 720a 	strd	r7, r2, [sp, #40]	; 0x28
 8007e2a:	aa29      	add	r2, sp, #164	; 0xa4
 8007e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e2e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007e30:	9208      	str	r2, [sp, #32]
 8007e32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e34:	9207      	str	r2, [sp, #28]
 8007e36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e38:	9206      	str	r2, [sp, #24]
 8007e3a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e3c:	9205      	str	r2, [sp, #20]
 8007e3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e40:	9204      	str	r2, [sp, #16]
 8007e42:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007e44:	9203      	str	r2, [sp, #12]
 8007e46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e48:	9202      	str	r2, [sp, #8]
 8007e4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e4c:	9201      	str	r2, [sp, #4]
 8007e4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007e50:	9200      	str	r2, [sp, #0]
 8007e52:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e54:	920f      	str	r2, [sp, #60]	; 0x3c
 8007e56:	2201      	movs	r2, #1
 8007e58:	f002 fe14 	bl	800aa84 <st_sssa8_convolve_1x1>
 8007e5c:	45b3      	cmp	fp, r6
 8007e5e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8007e60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e62:	d1d2      	bne.n	8007e0a <forward_conv2d_integer_SSSA+0x4fe>
 8007e64:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 8007e68:	e6c2      	b.n	8007bf0 <forward_conv2d_integer_SSSA+0x2e4>
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	e6d0      	b.n	8007c10 <forward_conv2d_integer_SSSA+0x304>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	deff      	udf	#255	; 0xff
 8007e74:	2300      	movs	r3, #0
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	deff      	udf	#255	; 0xff
 8007e7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007e7c:	b913      	cbnz	r3, 8007e84 <forward_conv2d_integer_SSSA+0x578>
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	deff      	udf	#255	; 0xff
 8007e82:	e7fe      	b.n	8007e82 <forward_conv2d_integer_SSSA+0x576>
 8007e84:	68d3      	ldr	r3, [r2, #12]
 8007e86:	deff      	udf	#255	; 0xff
 8007e88:	00000000 	.word	0x00000000
 8007e8c:	08007909 	.word	0x08007909

08007e90 <forward_conv2d_nl_pool_integer_SSSA>:
 8007e90:	6982      	ldr	r2, [r0, #24]
 8007e92:	8813      	ldrh	r3, [r2, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 8193 	beq.w	80081c0 <forward_conv2d_nl_pool_integer_SSSA+0x330>
 8007e9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9e:	ed2d 8b02 	vpush	{d8}
 8007ea2:	6851      	ldr	r1, [r2, #4]
 8007ea4:	b0d5      	sub	sp, #340	; 0x154
 8007ea6:	4680      	mov	r8, r0
 8007ea8:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8007eac:	f1b9 0f00 	cmp.w	r9, #0
 8007eb0:	d001      	beq.n	8007eb6 <forward_conv2d_nl_pool_integer_SSSA+0x26>
 8007eb2:	f8d9 9000 	ldr.w	r9, [r9]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	f000 834e 	beq.w	8008558 <forward_conv2d_nl_pool_integer_SSSA+0x6c8>
 8007ebc:	690a      	ldr	r2, [r1, #16]
 8007ebe:	9216      	str	r2, [sp, #88]	; 0x58
 8007ec0:	b10a      	cbz	r2, 8007ec6 <forward_conv2d_nl_pool_integer_SSSA+0x36>
 8007ec2:	6812      	ldr	r2, [r2, #0]
 8007ec4:	9216      	str	r2, [sp, #88]	; 0x58
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	f000 8177 	beq.w	80081ba <forward_conv2d_nl_pool_integer_SSSA+0x32a>
 8007ecc:	69ca      	ldr	r2, [r1, #28]
 8007ece:	2a00      	cmp	r2, #0
 8007ed0:	f000 8310 	beq.w	80084f4 <forward_conv2d_nl_pool_integer_SSSA+0x664>
 8007ed4:	8b08      	ldrh	r0, [r1, #24]
 8007ed6:	f8d2 b000 	ldr.w	fp, [r2]
 8007eda:	2801      	cmp	r0, #1
 8007edc:	f200 8172 	bhi.w	80081c4 <forward_conv2d_nl_pool_integer_SSSA+0x334>
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	901c      	str	r0, [sp, #112]	; 0x70
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	f000 833a 	beq.w	800855e <forward_conv2d_nl_pool_integer_SSSA+0x6ce>
 8007eea:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 8331 	beq.w	8008554 <forward_conv2d_nl_pool_integer_SSSA+0x6c4>
 8007ef2:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 8007ef6:	6818      	ldr	r0, [r3, #0]
 8007ef8:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8007efc:	9130      	str	r1, [sp, #192]	; 0xc0
 8007efe:	9019      	str	r0, [sp, #100]	; 0x64
 8007f00:	2900      	cmp	r1, #0
 8007f02:	f000 82f2 	beq.w	80084ea <forward_conv2d_nl_pool_integer_SSSA+0x65a>
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f0a:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007f0e:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	6845      	ldr	r5, [r0, #4]
 8007f16:	461e      	mov	r6, r3
 8007f18:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8007f1a:	9514      	str	r5, [sp, #80]	; 0x50
 8007f1c:	b2b6      	uxth	r6, r6
 8007f1e:	68e4      	ldr	r4, [r4, #12]
 8007f20:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 8007f24:	9624      	str	r6, [sp, #144]	; 0x90
 8007f26:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8007f2a:	f8d8 502c 	ldr.w	r5, [r8, #44]	; 0x2c
 8007f2e:	ee08 6a90 	vmov	s17, r6
 8007f32:	68e6      	ldr	r6, [r4, #12]
 8007f34:	68a4      	ldr	r4, [r4, #8]
 8007f36:	9321      	str	r3, [sp, #132]	; 0x84
 8007f38:	9435      	str	r4, [sp, #212]	; 0xd4
 8007f3a:	680b      	ldr	r3, [r1, #0]
 8007f3c:	f8db 700c 	ldr.w	r7, [fp, #12]
 8007f40:	f8d8 c054 	ldr.w	ip, [r8, #84]	; 0x54
 8007f44:	961d      	str	r6, [sp, #116]	; 0x74
 8007f46:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 8007f4a:	9039      	str	r0, [sp, #228]	; 0xe4
 8007f4c:	f8b8 0028 	ldrh.w	r0, [r8, #40]	; 0x28
 8007f50:	9033      	str	r0, [sp, #204]	; 0xcc
 8007f52:	b2a8      	uxth	r0, r5
 8007f54:	9034      	str	r0, [sp, #208]	; 0xd0
 8007f56:	b298      	uxth	r0, r3
 8007f58:	9015      	str	r0, [sp, #84]	; 0x54
 8007f5a:	8888      	ldrh	r0, [r1, #4]
 8007f5c:	6889      	ldr	r1, [r1, #8]
 8007f5e:	902c      	str	r0, [sp, #176]	; 0xb0
 8007f60:	68b8      	ldr	r0, [r7, #8]
 8007f62:	901f      	str	r0, [sp, #124]	; 0x7c
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	9027      	str	r0, [sp, #156]	; 0x9c
 8007f68:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8007f6c:	901a      	str	r0, [sp, #104]	; 0x68
 8007f6e:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
 8007f72:	9036      	str	r0, [sp, #216]	; 0xd8
 8007f74:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 8007f78:	9037      	str	r0, [sp, #220]	; 0xdc
 8007f7a:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 8007f7e:	9018      	str	r0, [sp, #96]	; 0x60
 8007f80:	f8dc 0000 	ldr.w	r0, [ip]
 8007f84:	902d      	str	r0, [sp, #180]	; 0xb4
 8007f86:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8007f8a:	9038      	str	r0, [sp, #224]	; 0xe0
 8007f8c:	2a00      	cmp	r2, #0
 8007f8e:	f000 8286 	beq.w	800849e <forward_conv2d_nl_pool_integer_SSSA+0x60e>
 8007f92:	6892      	ldr	r2, [r2, #8]
 8007f94:	2a00      	cmp	r2, #0
 8007f96:	f000 8282 	beq.w	800849e <forward_conv2d_nl_pool_integer_SSSA+0x60e>
 8007f9a:	6990      	ldr	r0, [r2, #24]
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	bf08      	it	eq
 8007fa0:	4602      	moveq	r2, r0
 8007fa2:	9228      	str	r2, [sp, #160]	; 0xa0
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007fa8:	b2aa      	uxth	r2, r5
 8007faa:	f8da 6018 	ldr.w	r6, [sl, #24]
 8007fae:	fa13 f581 	uxtah	r5, r3, r1
 8007fb2:	4423      	add	r3, r4
 8007fb4:	9222      	str	r2, [sp, #136]	; 0x88
 8007fb6:	f240 4101 	movw	r1, #1025	; 0x401
 8007fba:	4425      	add	r5, r4
 8007fbc:	9320      	str	r3, [sp, #128]	; 0x80
 8007fbe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007fc0:	f50d 7c82 	add.w	ip, sp, #260	; 0x104
 8007fc4:	6987      	ldr	r7, [r0, #24]
 8007fc6:	ac49      	add	r4, sp, #292	; 0x124
 8007fc8:	1aed      	subs	r5, r5, r3
 8007fca:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
 8007fce:	fbb5 f3f2 	udiv	r3, r5, r2
 8007fd2:	aa45      	add	r2, sp, #276	; 0x114
 8007fd4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8007fd6:	9313      	str	r3, [sp, #76]	; 0x4c
 8007fd8:	2300      	movs	r3, #0
 8007fda:	9252      	str	r2, [sp, #328]	; 0x148
 8007fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fe0:	69ad      	ldr	r5, [r5, #24]
 8007fe2:	934d      	str	r3, [sp, #308]	; 0x134
 8007fe4:	9341      	str	r3, [sp, #260]	; 0x104
 8007fe6:	9345      	str	r3, [sp, #276]	; 0x114
 8007fe8:	9344      	str	r3, [sp, #272]	; 0x110
 8007fea:	9348      	str	r3, [sp, #288]	; 0x120
 8007fec:	9353      	str	r3, [sp, #332]	; 0x14c
 8007fee:	952a      	str	r5, [sp, #168]	; 0xa8
 8007ff0:	e9cd 3342 	strd	r3, r3, [sp, #264]	; 0x108
 8007ff4:	e9cd 3346 	strd	r3, r3, [sp, #280]	; 0x118
 8007ff8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8007ffc:	e9cd 214e 	strd	r2, r1, [sp, #312]	; 0x138
 8008000:	f240 4102 	movw	r1, #1026	; 0x402
 8008004:	931e      	str	r3, [sp, #120]	; 0x78
 8008006:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800800a:	9151      	str	r1, [sp, #324]	; 0x144
 800800c:	4601      	mov	r1, r0
 800800e:	a84d      	add	r0, sp, #308	; 0x134
 8008010:	932e      	str	r3, [sp, #184]	; 0xb8
 8008012:	f005 f943 	bl	800d29c <core_tensor_clone>
 8008016:	4639      	mov	r1, r7
 8008018:	4620      	mov	r0, r4
 800801a:	f005 f971 	bl	800d300 <core_array_clone>
 800801e:	9453      	str	r4, [sp, #332]	; 0x14c
 8008020:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008024:	f8d9 1000 	ldr.w	r1, [r9]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f9bd 40b4 	ldrsh.w	r4, [sp, #180]	; 0xb4
 800802e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008030:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008032:	f8da 2000 	ldr.w	r2, [sl]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	9329      	str	r3, [sp, #164]	; 0xa4
 800803c:	f8db 3000 	ldr.w	r3, [fp]
 8008040:	2900      	cmp	r1, #0
 8008042:	f000 81b3 	beq.w	80083ac <forward_conv2d_nl_pool_integer_SSSA+0x51c>
 8008046:	6848      	ldr	r0, [r1, #4]
 8008048:	2800      	cmp	r0, #0
 800804a:	f000 81af 	beq.w	80083ac <forward_conv2d_nl_pool_integer_SSSA+0x51c>
 800804e:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8008052:	f1bc 0f00 	cmp.w	ip, #0
 8008056:	f000 81a9 	beq.w	80083ac <forward_conv2d_nl_pool_integer_SSSA+0x51c>
 800805a:	6800      	ldr	r0, [r0, #0]
 800805c:	edd0 7a00 	vldr	s15, [r0]
 8008060:	2a00      	cmp	r2, #0
 8008062:	f000 81a0 	beq.w	80083a6 <forward_conv2d_nl_pool_integer_SSSA+0x516>
 8008066:	6850      	ldr	r0, [r2, #4]
 8008068:	2800      	cmp	r0, #0
 800806a:	f000 819c 	beq.w	80083a6 <forward_conv2d_nl_pool_integer_SSSA+0x516>
 800806e:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8008072:	f1bc 0f00 	cmp.w	ip, #0
 8008076:	f000 8196 	beq.w	80083a6 <forward_conv2d_nl_pool_integer_SSSA+0x516>
 800807a:	6800      	ldr	r0, [r0, #0]
 800807c:	ed90 0a00 	vldr	s0, [r0]
 8008080:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8008082:	2801      	cmp	r0, #1
 8008084:	f040 818c 	bne.w	80083a0 <forward_conv2d_nl_pool_integer_SSSA+0x510>
 8008088:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800808a:	2801      	cmp	r0, #1
 800808c:	f040 8188 	bne.w	80083a0 <forward_conv2d_nl_pool_integer_SSSA+0x510>
 8008090:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008092:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8008094:	4328      	orrs	r0, r5
 8008096:	f040 8183 	bne.w	80083a0 <forward_conv2d_nl_pool_integer_SSSA+0x510>
 800809a:	e9dd 0533 	ldrd	r0, r5, [sp, #204]	; 0xcc
 800809e:	2801      	cmp	r0, #1
 80080a0:	bf08      	it	eq
 80080a2:	2d01      	cmpeq	r5, #1
 80080a4:	bf0c      	ite	eq
 80080a6:	2001      	moveq	r0, #1
 80080a8:	2000      	movne	r0, #0
 80080aa:	9023      	str	r0, [sp, #140]	; 0x8c
 80080ac:	981c      	ldr	r0, [sp, #112]	; 0x70
 80080ae:	f8d9 c018 	ldr.w	ip, [r9, #24]
 80080b2:	f8db e018 	ldr.w	lr, [fp, #24]
 80080b6:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80080ba:	6980      	ldr	r0, [r0, #24]
 80080bc:	951c      	str	r5, [sp, #112]	; 0x70
 80080be:	6880      	ldr	r0, [r0, #8]
 80080c0:	f8de 5008 	ldr.w	r5, [lr, #8]
 80080c4:	902f      	str	r0, [sp, #188]	; 0xbc
 80080c6:	952b      	str	r5, [sp, #172]	; 0xac
 80080c8:	2900      	cmp	r1, #0
 80080ca:	f000 81e2 	beq.w	8008492 <forward_conv2d_nl_pool_integer_SSSA+0x602>
 80080ce:	6848      	ldr	r0, [r1, #4]
 80080d0:	2800      	cmp	r0, #0
 80080d2:	f000 8208 	beq.w	80084e6 <forward_conv2d_nl_pool_integer_SSSA+0x656>
 80080d6:	8849      	ldrh	r1, [r1, #2]
 80080d8:	2900      	cmp	r1, #0
 80080da:	f000 81da 	beq.w	8008492 <forward_conv2d_nl_pool_integer_SSSA+0x602>
 80080de:	6841      	ldr	r1, [r0, #4]
 80080e0:	f991 1000 	ldrsb.w	r1, [r1]
 80080e4:	9131      	str	r1, [sp, #196]	; 0xc4
 80080e6:	2a00      	cmp	r2, #0
 80080e8:	f000 81d7 	beq.w	800849a <forward_conv2d_nl_pool_integer_SSSA+0x60a>
 80080ec:	6851      	ldr	r1, [r2, #4]
 80080ee:	2900      	cmp	r1, #0
 80080f0:	f000 81f7 	beq.w	80084e2 <forward_conv2d_nl_pool_integer_SSSA+0x652>
 80080f4:	8852      	ldrh	r2, [r2, #2]
 80080f6:	2a00      	cmp	r2, #0
 80080f8:	f000 81cf 	beq.w	800849a <forward_conv2d_nl_pool_integer_SSSA+0x60a>
 80080fc:	684a      	ldr	r2, [r1, #4]
 80080fe:	f992 2000 	ldrsb.w	r2, [r2]
 8008102:	9232      	str	r2, [sp, #200]	; 0xc8
 8008104:	b113      	cbz	r3, 800810c <forward_conv2d_nl_pool_integer_SSSA+0x27c>
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	b103      	cbz	r3, 800810c <forward_conv2d_nl_pool_integer_SSSA+0x27c>
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800810e:	2a01      	cmp	r2, #1
 8008110:	f000 81e0 	beq.w	80084d4 <forward_conv2d_nl_pool_integer_SSSA+0x644>
 8008114:	4611      	mov	r1, r2
 8008116:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800811a:	4291      	cmp	r1, r2
 800811c:	bf0c      	ite	eq
 800811e:	2213      	moveq	r2, #19
 8008120:	2200      	movne	r2, #0
 8008122:	9226      	str	r2, [sp, #152]	; 0x98
 8008124:	f04f 0900 	mov.w	r9, #0
 8008128:	f10d 00f6 	add.w	r0, sp, #246	; 0xf6
 800812c:	f8ad 90f6 	strh.w	r9, [sp, #246]	; 0xf6
 8008130:	f8cd 90f8 	str.w	r9, [sp, #248]	; 0xf8
 8008134:	ed93 7a00 	vldr	s14, [r3]
 8008138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800813c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008140:	f000 fc6a 	bl	8008a18 <align_factor>
 8008144:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008146:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	903e      	str	r0, [sp, #248]	; 0xf8
 800814c:	923f      	str	r2, [sp, #252]	; 0xfc
 800814e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008152:	f005 f86b 	bl	800d22c <ai_array_get_byte_size>
 8008156:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008158:	9040      	str	r0, [sp, #256]	; 0x100
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 80e8 	beq.w	8008330 <forward_conv2d_nl_pool_integer_SSSA+0x4a0>
 8008160:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008162:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8008166:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800816a:	fb01 f202 	mul.w	r2, r1, r2
 800816e:	9421      	str	r4, [sp, #132]	; 0x84
 8008170:	9225      	str	r2, [sp, #148]	; 0x94
 8008172:	b28a      	uxth	r2, r1
 8008174:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8008176:	9223      	str	r2, [sp, #140]	; 0x8c
 8008178:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800817a:	fb01 f202 	mul.w	r2, r1, r2
 800817e:	fb03 f202 	mul.w	r2, r3, r2
 8008182:	fb01 f303 	mul.w	r3, r1, r3
 8008186:	9239      	str	r2, [sp, #228]	; 0xe4
 8008188:	933a      	str	r3, [sp, #232]	; 0xe8
 800818a:	b28b      	uxth	r3, r1
 800818c:	ee08 3a10 	vmov	s16, r3
 8008190:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008192:	e9cd 3919 	strd	r3, r9, [sp, #100]	; 0x64
 8008196:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 800819a:	931b      	str	r3, [sp, #108]	; 0x6c
 800819c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800819e:	3301      	adds	r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f340 80d1 	ble.w	8008348 <forward_conv2d_nl_pool_integer_SSSA+0x4b8>
 80081a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081a8:	2b13      	cmp	r3, #19
 80081aa:	f000 813d 	beq.w	8008428 <forward_conv2d_nl_pool_integer_SSSA+0x598>
 80081ae:	2b14      	cmp	r3, #20
 80081b0:	f000 8103 	beq.w	80083ba <forward_conv2d_nl_pool_integer_SSSA+0x52a>
 80081b4:	2b12      	cmp	r3, #18
 80081b6:	d008      	beq.n	80081ca <forward_conv2d_nl_pool_integer_SSSA+0x33a>
 80081b8:	e7fe      	b.n	80081b8 <forward_conv2d_nl_pool_integer_SSSA+0x328>
 80081ba:	2300      	movs	r3, #0
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	deff      	udf	#255	; 0xff
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	deff      	udf	#255	; 0xff
 80081c4:	6850      	ldr	r0, [r2, #4]
 80081c6:	901c      	str	r0, [sp, #112]	; 0x70
 80081c8:	e68c      	b.n	8007ee4 <forward_conv2d_nl_pool_integer_SSSA+0x54>
 80081ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80081cc:	429c      	cmp	r4, r3
 80081ce:	ab3f      	add	r3, sp, #252	; 0xfc
 80081d0:	d103      	bne.n	80081da <forward_conv2d_nl_pool_integer_SSSA+0x34a>
 80081d2:	f1b9 0f00 	cmp.w	r9, #0
 80081d6:	f000 8190 	beq.w	80084fa <forward_conv2d_nl_pool_integer_SSSA+0x66a>
 80081da:	9310      	str	r3, [sp, #64]	; 0x40
 80081dc:	2301      	movs	r3, #1
 80081de:	aa3e      	add	r2, sp, #248	; 0xf8
 80081e0:	ee18 1a10 	vmov	r1, s16
 80081e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80081e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081e8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80081ea:	930e      	str	r3, [sp, #56]	; 0x38
 80081ec:	68b3      	ldr	r3, [r6, #8]
 80081ee:	9209      	str	r2, [sp, #36]	; 0x24
 80081f0:	930d      	str	r3, [sp, #52]	; 0x34
 80081f2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80081f4:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 80081f8:	930c      	str	r3, [sp, #48]	; 0x30
 80081fa:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80081fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80081fe:	f10d 03f6 	add.w	r3, sp, #246	; 0xf6
 8008202:	930a      	str	r3, [sp, #40]	; 0x28
 8008204:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8008206:	9308      	str	r3, [sp, #32]
 8008208:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800820a:	9307      	str	r3, [sp, #28]
 800820c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800820e:	9306      	str	r3, [sp, #24]
 8008210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008212:	9305      	str	r3, [sp, #20]
 8008214:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008216:	9304      	str	r3, [sp, #16]
 8008218:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800821a:	9301      	str	r3, [sp, #4]
 800821c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8008224:	9303      	str	r3, [sp, #12]
 8008226:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 800822a:	9302      	str	r3, [sp, #8]
 800822c:	ee18 3a90 	vmov	r3, s17
 8008230:	f002 fc28 	bl	800aa84 <st_sssa8_convolve_1x1>
 8008234:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008236:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008238:	4293      	cmp	r3, r2
 800823a:	f000 80ba 	beq.w	80083b2 <forward_conv2d_nl_pool_integer_SSSA+0x522>
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008242:	429a      	cmp	r2, r3
 8008244:	9320      	str	r3, [sp, #128]	; 0x80
 8008246:	bf28      	it	cs
 8008248:	461a      	movcs	r2, r3
 800824a:	9219      	str	r2, [sp, #100]	; 0x64
 800824c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800824e:	2b00      	cmp	r3, #0
 8008250:	f040 8097 	bne.w	8008382 <forward_conv2d_nl_pool_integer_SSSA+0x4f2>
 8008254:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008256:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8008258:	4413      	add	r3, r2
 800825a:	931c      	str	r3, [sp, #112]	; 0x70
 800825c:	3401      	adds	r4, #1
 800825e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008260:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008262:	4651      	mov	r1, sl
 8008264:	b224      	sxth	r4, r4
 8008266:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008268:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 800826a:	47a8      	blx	r5
 800826c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800826e:	429c      	cmp	r4, r3
 8008270:	db34      	blt.n	80082dc <forward_conv2d_nl_pool_integer_SSSA+0x44c>
 8008272:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008274:	2201      	movs	r2, #1
 8008276:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800827a:	a84d      	add	r0, sp, #308	; 0x134
 800827c:	9308      	str	r3, [sp, #32]
 800827e:	4491      	add	r9, r2
 8008280:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8008284:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008286:	1ae4      	subs	r4, r4, r3
 8008288:	9305      	str	r3, [sp, #20]
 800828a:	fa1f f38b 	uxth.w	r3, fp
 800828e:	9207      	str	r2, [sp, #28]
 8008290:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 8008294:	b224      	sxth	r4, r4
 8008296:	9303      	str	r3, [sp, #12]
 8008298:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	; 0xd4
 800829c:	9201      	str	r2, [sp, #4]
 800829e:	1a52      	subs	r2, r2, r1
 80082a0:	9306      	str	r3, [sp, #24]
 80082a2:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	; 0xdc
 80082a6:	b292      	uxth	r2, r2
 80082a8:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 80082aa:	9304      	str	r3, [sp, #16]
 80082ac:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
 80082b0:	9302      	str	r3, [sp, #8]
 80082b2:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	; 0xd8
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	e9dd 1323 	ldrd	r1, r3, [sp, #140]	; 0x8c
 80082bc:	47a8      	blx	r5
 80082be:	465a      	mov	r2, fp
 80082c0:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 80082c4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80082cc:	b21a      	sxth	r2, r3
 80082ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	9221      	str	r2, [sp, #132]	; 0x84
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	688b      	ldr	r3, [r1, #8]
 80082d8:	4413      	add	r3, r2
 80082da:	608b      	str	r3, [r1, #8]
 80082dc:	f8da 3014 	ldr.w	r3, [sl, #20]
 80082e0:	68b2      	ldr	r2, [r6, #8]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	eb02 0b03 	add.w	fp, r2, r3
 80082e8:	f8c6 b008 	str.w	fp, [r6, #8]
 80082ec:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80082f0:	b13b      	cbz	r3, 8008302 <forward_conv2d_nl_pool_integer_SSSA+0x472>
 80082f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	68da      	ldr	r2, [r3, #12]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4413      	add	r3, r2
 80082fc:	60bb      	str	r3, [r7, #8]
 80082fe:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8008302:	68f3      	ldr	r3, [r6, #12]
 8008304:	4650      	mov	r0, sl
 8008306:	9314      	str	r3, [sp, #80]	; 0x50
 8008308:	f004 ff0e 	bl	800d128 <get_tensor_byte_size>
 800830c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800830e:	4418      	add	r0, r3
 8008310:	4583      	cmp	fp, r0
 8008312:	d306      	bcc.n	8008322 <forward_conv2d_nl_pool_integer_SSSA+0x492>
 8008314:	68f3      	ldr	r3, [r6, #12]
 8008316:	60b3      	str	r3, [r6, #8]
 8008318:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800831c:	b10b      	cbz	r3, 8008322 <forward_conv2d_nl_pool_integer_SSSA+0x492>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	60bb      	str	r3, [r7, #8]
 8008322:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008324:	3b01      	subs	r3, #1
 8008326:	9313      	str	r3, [sp, #76]	; 0x4c
 8008328:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800832a:	4599      	cmp	r9, r3
 800832c:	f4ff af36 	bcc.w	800819c <forward_conv2d_nl_pool_integer_SSSA+0x30c>
 8008330:	68f3      	ldr	r3, [r6, #12]
 8008332:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8008334:	60b3      	str	r3, [r6, #8]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	60bb      	str	r3, [r7, #8]
 800833a:	68d3      	ldr	r3, [r2, #12]
 800833c:	6093      	str	r3, [r2, #8]
 800833e:	b055      	add	sp, #340	; 0x154
 8008340:	ecbd 8b02 	vpop	{d8}
 8008344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008348:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800834a:	2b00      	cmp	r3, #0
 800834c:	da8e      	bge.n	800826c <forward_conv2d_nl_pool_integer_SSSA+0x3dc>
 800834e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008350:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008354:	fb03 1314 	mls	r3, r3, r4, r1
 8008358:	429a      	cmp	r2, r3
 800835a:	d901      	bls.n	8008360 <forward_conv2d_nl_pool_integer_SSSA+0x4d0>
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	4403      	add	r3, r0
 8008360:	429a      	cmp	r2, r3
 8008362:	d203      	bcs.n	800836c <forward_conv2d_nl_pool_integer_SSSA+0x4dc>
 8008364:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008366:	42a0      	cmp	r0, r4
 8008368:	f040 80a2 	bne.w	80084b0 <forward_conv2d_nl_pool_integer_SSSA+0x620>
 800836c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800836e:	b2a4      	uxth	r4, r4
 8008370:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008372:	4413      	add	r3, r2
 8008374:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008376:	1b1b      	subs	r3, r3, r4
 8008378:	4414      	add	r4, r2
 800837a:	b21b      	sxth	r3, r3
 800837c:	b224      	sxth	r4, r4
 800837e:	931a      	str	r3, [sp, #104]	; 0x68
 8008380:	e774      	b.n	800826c <forward_conv2d_nl_pool_integer_SSSA+0x3dc>
 8008382:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008384:	461a      	mov	r2, r3
 8008386:	1a5b      	subs	r3, r3, r1
 8008388:	d505      	bpl.n	8008396 <forward_conv2d_nl_pool_integer_SSSA+0x506>
 800838a:	1a8a      	subs	r2, r1, r2
 800838c:	983a      	ldr	r0, [sp, #232]	; 0xe8
 800838e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008390:	fb00 1202 	mla	r2, r0, r2, r1
 8008394:	921c      	str	r2, [sp, #112]	; 0x70
 8008396:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800839a:	b29b      	uxth	r3, r3
 800839c:	9315      	str	r3, [sp, #84]	; 0x54
 800839e:	e75d      	b.n	800825c <forward_conv2d_nl_pool_integer_SSSA+0x3cc>
 80083a0:	2000      	movs	r0, #0
 80083a2:	9023      	str	r0, [sp, #140]	; 0x8c
 80083a4:	e682      	b.n	80080ac <forward_conv2d_nl_pool_integer_SSSA+0x21c>
 80083a6:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8008564 <forward_conv2d_nl_pool_integer_SSSA+0x6d4>
 80083aa:	e669      	b.n	8008080 <forward_conv2d_nl_pool_integer_SSSA+0x1f0>
 80083ac:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8008564 <forward_conv2d_nl_pool_integer_SSSA+0x6d4>
 80083b0:	e656      	b.n	8008060 <forward_conv2d_nl_pool_integer_SSSA+0x1d0>
 80083b2:	2300      	movs	r3, #0
 80083b4:	9319      	str	r3, [sp, #100]	; 0x64
 80083b6:	9320      	str	r3, [sp, #128]	; 0x80
 80083b8:	e748      	b.n	800824c <forward_conv2d_nl_pool_integer_SSSA+0x3bc>
 80083ba:	f1b9 0f00 	cmp.w	r9, #0
 80083be:	d103      	bne.n	80083c8 <forward_conv2d_nl_pool_integer_SSSA+0x538>
 80083c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80083c2:	429c      	cmp	r4, r3
 80083c4:	f000 80b1 	beq.w	800852a <forward_conv2d_nl_pool_integer_SSSA+0x69a>
 80083c8:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 80083cc:	f8bd b07c 	ldrh.w	fp, [sp, #124]	; 0x7c
 80083d0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80083d2:	a93e      	add	r1, sp, #248	; 0xf8
 80083d4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80083d6:	9210      	str	r2, [sp, #64]	; 0x40
 80083d8:	2201      	movs	r2, #1
 80083da:	920f      	str	r2, [sp, #60]	; 0x3c
 80083dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80083de:	920e      	str	r2, [sp, #56]	; 0x38
 80083e0:	68b2      	ldr	r2, [r6, #8]
 80083e2:	9302      	str	r3, [sp, #8]
 80083e4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80083e6:	9109      	str	r1, [sp, #36]	; 0x24
 80083e8:	ee18 1a10 	vmov	r1, s16
 80083ec:	930c      	str	r3, [sp, #48]	; 0x30
 80083ee:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80083f0:	920d      	str	r2, [sp, #52]	; 0x34
 80083f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80083f4:	f10d 03f6 	add.w	r3, sp, #246	; 0xf6
 80083f8:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 80083fc:	930a      	str	r3, [sp, #40]	; 0x28
 80083fe:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8008400:	f8cd b00c 	str.w	fp, [sp, #12]
 8008404:	9308      	str	r3, [sp, #32]
 8008406:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8008408:	9307      	str	r3, [sp, #28]
 800840a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800840c:	9306      	str	r3, [sp, #24]
 800840e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008410:	9305      	str	r3, [sp, #20]
 8008412:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	ee18 3a90 	vmov	r3, s17
 8008422:	f001 f99f 	bl	8009764 <st_sssa8_convolve>
 8008426:	e705      	b.n	8008234 <forward_conv2d_nl_pool_integer_SSSA+0x3a4>
 8008428:	f1b9 0f00 	cmp.w	r9, #0
 800842c:	d102      	bne.n	8008434 <forward_conv2d_nl_pool_integer_SSSA+0x5a4>
 800842e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008430:	429c      	cmp	r4, r3
 8008432:	d06b      	beq.n	800850c <forward_conv2d_nl_pool_integer_SSSA+0x67c>
 8008434:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
 8008438:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 800843c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800843e:	a83e      	add	r0, sp, #248	; 0xf8
 8008440:	9110      	str	r1, [sp, #64]	; 0x40
 8008442:	2101      	movs	r1, #1
 8008444:	910f      	str	r1, [sp, #60]	; 0x3c
 8008446:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8008448:	910e      	str	r1, [sp, #56]	; 0x38
 800844a:	68b1      	ldr	r1, [r6, #8]
 800844c:	9303      	str	r3, [sp, #12]
 800844e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8008450:	9009      	str	r0, [sp, #36]	; 0x24
 8008452:	930c      	str	r3, [sp, #48]	; 0x30
 8008454:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8008456:	9202      	str	r2, [sp, #8]
 8008458:	930b      	str	r3, [sp, #44]	; 0x2c
 800845a:	f10d 03f6 	add.w	r3, sp, #246	; 0xf6
 800845e:	910d      	str	r1, [sp, #52]	; 0x34
 8008460:	ee18 1a10 	vmov	r1, s16
 8008464:	930a      	str	r3, [sp, #40]	; 0x28
 8008466:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8008468:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 800846c:	9308      	str	r3, [sp, #32]
 800846e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8008470:	981c      	ldr	r0, [sp, #112]	; 0x70
 8008472:	9307      	str	r3, [sp, #28]
 8008474:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8008476:	9306      	str	r3, [sp, #24]
 8008478:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800847a:	9305      	str	r3, [sp, #20]
 800847c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800847e:	9304      	str	r3, [sp, #16]
 8008480:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008482:	9301      	str	r3, [sp, #4]
 8008484:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	ee18 3a90 	vmov	r3, s17
 800848c:	f000 fbd2 	bl	8008c34 <st_sssa8_convolve_dw>
 8008490:	e6d0      	b.n	8008234 <forward_conv2d_nl_pool_integer_SSSA+0x3a4>
 8008492:	9131      	str	r1, [sp, #196]	; 0xc4
 8008494:	2a00      	cmp	r2, #0
 8008496:	f47f ae29 	bne.w	80080ec <forward_conv2d_nl_pool_integer_SSSA+0x25c>
 800849a:	9232      	str	r2, [sp, #200]	; 0xc8
 800849c:	e632      	b.n	8008104 <forward_conv2d_nl_pool_integer_SSSA+0x274>
 800849e:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80084a2:	9228      	str	r2, [sp, #160]	; 0xa0
 80084a4:	2a00      	cmp	r2, #0
 80084a6:	f43f ad7d 	beq.w	8007fa4 <forward_conv2d_nl_pool_integer_SSSA+0x114>
 80084aa:	6892      	ldr	r2, [r2, #8]
 80084ac:	9228      	str	r2, [sp, #160]	; 0xa0
 80084ae:	e579      	b.n	8007fa4 <forward_conv2d_nl_pool_integer_SSSA+0x114>
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4402      	add	r2, r0
 80084b4:	4293      	cmp	r3, r2
 80084b6:	f4bf af59 	bcs.w	800836c <forward_conv2d_nl_pool_integer_SSSA+0x4dc>
 80084ba:	3901      	subs	r1, #1
 80084bc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80084be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084c2:	f801 2f01 	strb.w	r2, [r1, #1]!
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	4402      	add	r2, r0
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d3f6      	bcc.n	80084be <forward_conv2d_nl_pool_integer_SSSA+0x62e>
 80084d0:	9513      	str	r5, [sp, #76]	; 0x4c
 80084d2:	e74b      	b.n	800836c <forward_conv2d_nl_pool_integer_SSSA+0x4dc>
 80084d4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80084d6:	2a00      	cmp	r2, #0
 80084d8:	bf0c      	ite	eq
 80084da:	2214      	moveq	r2, #20
 80084dc:	2212      	movne	r2, #18
 80084de:	9226      	str	r2, [sp, #152]	; 0x98
 80084e0:	e620      	b.n	8008124 <forward_conv2d_nl_pool_integer_SSSA+0x294>
 80084e2:	9132      	str	r1, [sp, #200]	; 0xc8
 80084e4:	e60e      	b.n	8008104 <forward_conv2d_nl_pool_integer_SSSA+0x274>
 80084e6:	9031      	str	r0, [sp, #196]	; 0xc4
 80084e8:	e5fd      	b.n	80080e6 <forward_conv2d_nl_pool_integer_SSSA+0x256>
 80084ea:	4b1f      	ldr	r3, [pc, #124]	; (8008568 <forward_conv2d_nl_pool_integer_SSSA+0x6d8>)
 80084ec:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80084f0:	9330      	str	r3, [sp, #192]	; 0xc0
 80084f2:	e50a      	b.n	8007f0a <forward_conv2d_nl_pool_integer_SSSA+0x7a>
 80084f4:	4693      	mov	fp, r2
 80084f6:	921c      	str	r2, [sp, #112]	; 0x70
 80084f8:	e4f4      	b.n	8007ee4 <forward_conv2d_nl_pool_integer_SSSA+0x54>
 80084fa:	ee18 2a90 	vmov	r2, s17
 80084fe:	9924      	ldr	r1, [sp, #144]	; 0x90
 8008500:	982b      	ldr	r0, [sp, #172]	; 0xac
 8008502:	9314      	str	r3, [sp, #80]	; 0x50
 8008504:	f002 fab0 	bl	800aa68 <st_sssa8_convolve_1x1_WeightsPrefetch>
 8008508:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800850a:	e666      	b.n	80081da <forward_conv2d_nl_pool_integer_SSSA+0x34a>
 800850c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800850e:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8008518:	9924      	ldr	r1, [sp, #144]	; 0x90
 800851a:	982b      	ldr	r0, [sp, #172]	; 0xac
 800851c:	923b      	str	r2, [sp, #236]	; 0xec
 800851e:	9314      	str	r3, [sp, #80]	; 0x50
 8008520:	f000 facc 	bl	8008abc <st_sssa8_conv_dw_Wadapt>
 8008524:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8008526:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008528:	e788      	b.n	800843c <forward_conv2d_nl_pool_integer_SSSA+0x5ac>
 800852a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800852c:	ee18 0a90 	vmov	r0, s17
 8008530:	f8bd b07c 	ldrh.w	fp, [sp, #124]	; 0x7c
 8008534:	9303      	str	r3, [sp, #12]
 8008536:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8008538:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800853a:	9302      	str	r3, [sp, #8]
 800853c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800853e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8008540:	9301      	str	r3, [sp, #4]
 8008542:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 8008546:	f8cd b000 	str.w	fp, [sp]
 800854a:	9314      	str	r3, [sp, #80]	; 0x50
 800854c:	f001 f87e 	bl	800964c <st_sssa8_convolve_rank1upd>
 8008550:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008552:	e73d      	b.n	80083d0 <forward_conv2d_nl_pool_integer_SSSA+0x540>
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	deff      	udf	#255	; 0xff
 8008558:	2300      	movs	r3, #0
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	deff      	udf	#255	; 0xff
 800855e:	2300      	movs	r3, #0
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	deff      	udf	#255	; 0xff
 8008564:	00000000 	.word	0x00000000
 8008568:	08007909 	.word	0x08007909

0800856c <ai_check_custom_types>:
 800856c:	b082      	sub	sp, #8
 800856e:	4b12      	ldr	r3, [pc, #72]	; (80085b8 <ai_check_custom_types+0x4c>)
 8008570:	9301      	str	r3, [sp, #4]
 8008572:	b118      	cbz	r0, 800857c <ai_check_custom_types+0x10>
 8008574:	7803      	ldrb	r3, [r0, #0]
 8008576:	2b03      	cmp	r3, #3
 8008578:	d002      	beq.n	8008580 <ai_check_custom_types+0x14>
 800857a:	2000      	movs	r0, #0
 800857c:	b002      	add	sp, #8
 800857e:	4770      	bx	lr
 8008580:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008584:	4293      	cmp	r3, r2
 8008586:	d004      	beq.n	8008592 <ai_check_custom_types+0x26>
 8008588:	2001      	movs	r0, #1
 800858a:	f080 0001 	eor.w	r0, r0, #1
 800858e:	b002      	add	sp, #8
 8008590:	4770      	bx	lr
 8008592:	7842      	ldrb	r2, [r0, #1]
 8008594:	3001      	adds	r0, #1
 8008596:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800859a:	429a      	cmp	r2, r3
 800859c:	d1f4      	bne.n	8008588 <ai_check_custom_types+0x1c>
 800859e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80085a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d1ee      	bne.n	8008588 <ai_check_custom_types+0x1c>
 80085aa:	7842      	ldrb	r2, [r0, #1]
 80085ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d1e9      	bne.n	8008588 <ai_check_custom_types+0x1c>
 80085b4:	2000      	movs	r0, #0
 80085b6:	e7e8      	b.n	800858a <ai_check_custom_types+0x1e>
 80085b8:	84048403 	.word	0x84048403

080085bc <ai_layers_init_all>:
 80085bc:	2100      	movs	r1, #0
 80085be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80085c0:	b13b      	cbz	r3, 80085d2 <ai_layers_init_all+0x16>
 80085c2:	691a      	ldr	r2, [r3, #16]
 80085c4:	3101      	adds	r1, #1
 80085c6:	60d8      	str	r0, [r3, #12]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	4613      	mov	r3, r2
 80085cc:	d001      	beq.n	80085d2 <ai_layers_init_all+0x16>
 80085ce:	2a00      	cmp	r2, #0
 80085d0:	d1f6      	bne.n	80085c0 <ai_layers_init_all+0x4>
 80085d2:	4608      	mov	r0, r1
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop

080085d8 <ai_layers_post_init_all>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	2500      	movs	r5, #0
 80085dc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80085de:	b16c      	cbz	r4, 80085fc <ai_layers_post_init_all+0x24>
 80085e0:	6863      	ldr	r3, [r4, #4]
 80085e2:	07db      	lsls	r3, r3, #31
 80085e4:	d504      	bpl.n	80085f0 <ai_layers_post_init_all+0x18>
 80085e6:	6a23      	ldr	r3, [r4, #32]
 80085e8:	4620      	mov	r0, r4
 80085ea:	b10b      	cbz	r3, 80085f0 <ai_layers_post_init_all+0x18>
 80085ec:	3501      	adds	r5, #1
 80085ee:	4798      	blx	r3
 80085f0:	6923      	ldr	r3, [r4, #16]
 80085f2:	42a3      	cmp	r3, r4
 80085f4:	461c      	mov	r4, r3
 80085f6:	d001      	beq.n	80085fc <ai_layers_post_init_all+0x24>
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1f0      	bne.n	80085de <ai_layers_post_init_all+0x6>
 80085fc:	4628      	mov	r0, r5
 80085fe:	bd38      	pop	{r3, r4, r5, pc}

08008600 <ai_layers_forward_all>:
 8008600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008604:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8008608:	4604      	mov	r4, r0
 800860a:	f1b8 0f00 	cmp.w	r8, #0
 800860e:	d02a      	beq.n	8008666 <ai_layers_forward_all+0x66>
 8008610:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008612:	6381      	str	r1, [r0, #56]	; 0x38
 8008614:	b319      	cbz	r1, 800865e <ai_layers_forward_all+0x5e>
 8008616:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008618:	2001      	movs	r0, #1
 800861a:	47c0      	blx	r8
 800861c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800861e:	b1f6      	cbz	r6, 800865e <ai_layers_forward_all+0x5e>
 8008620:	2700      	movs	r7, #0
 8008622:	4631      	mov	r1, r6
 8008624:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008626:	2002      	movs	r0, #2
 8008628:	47c0      	blx	r8
 800862a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800862c:	4628      	mov	r0, r5
 800862e:	696b      	ldr	r3, [r5, #20]
 8008630:	4798      	blx	r3
 8008632:	692e      	ldr	r6, [r5, #16]
 8008634:	2003      	movs	r0, #3
 8008636:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008638:	42b5      	cmp	r5, r6
 800863a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800863c:	d007      	beq.n	800864e <ai_layers_forward_all+0x4e>
 800863e:	47c0      	blx	r8
 8008640:	3701      	adds	r7, #1
 8008642:	63a6      	str	r6, [r4, #56]	; 0x38
 8008644:	2e00      	cmp	r6, #0
 8008646:	d1ec      	bne.n	8008622 <ai_layers_forward_all+0x22>
 8008648:	4638      	mov	r0, r7
 800864a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800864e:	2003      	movs	r0, #3
 8008650:	3701      	adds	r7, #1
 8008652:	47c0      	blx	r8
 8008654:	2300      	movs	r3, #0
 8008656:	4638      	mov	r0, r7
 8008658:	63a3      	str	r3, [r4, #56]	; 0x38
 800865a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800865e:	2700      	movs	r7, #0
 8008660:	4638      	mov	r0, r7
 8008662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008666:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008668:	6385      	str	r5, [r0, #56]	; 0x38
 800866a:	2d00      	cmp	r5, #0
 800866c:	d0f7      	beq.n	800865e <ai_layers_forward_all+0x5e>
 800866e:	4647      	mov	r7, r8
 8008670:	696b      	ldr	r3, [r5, #20]
 8008672:	4628      	mov	r0, r5
 8008674:	4798      	blx	r3
 8008676:	462b      	mov	r3, r5
 8008678:	692d      	ldr	r5, [r5, #16]
 800867a:	429d      	cmp	r5, r3
 800867c:	d004      	beq.n	8008688 <ai_layers_forward_all+0x88>
 800867e:	3701      	adds	r7, #1
 8008680:	63a5      	str	r5, [r4, #56]	; 0x38
 8008682:	2d00      	cmp	r5, #0
 8008684:	d1f4      	bne.n	8008670 <ai_layers_forward_all+0x70>
 8008686:	e7df      	b.n	8008648 <ai_layers_forward_all+0x48>
 8008688:	2300      	movs	r3, #0
 800868a:	3701      	adds	r7, #1
 800868c:	63a3      	str	r3, [r4, #56]	; 0x38
 800868e:	e7db      	b.n	8008648 <ai_layers_forward_all+0x48>

08008690 <pool_func_mp_array_integer_INT8>:
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	b093      	sub	sp, #76	; 0x4c
 8008696:	468c      	mov	ip, r1
 8008698:	469a      	mov	sl, r3
 800869a:	6804      	ldr	r4, [r0, #0]
 800869c:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 80086a0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80086a4:	910e      	str	r1, [sp, #56]	; 0x38
 80086a6:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 80086aa:	930d      	str	r3, [sp, #52]	; 0x34
 80086ac:	910f      	str	r1, [sp, #60]	; 0x3c
 80086ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80086b0:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 80086b4:	6980      	ldr	r0, [r0, #24]
 80086b6:	9110      	str	r1, [sp, #64]	; 0x40
 80086b8:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 80086bc:	6999      	ldr	r1, [r3, #24]
 80086be:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
 80086c2:	f8bd e088 	ldrh.w	lr, [sp, #136]	; 0x88
 80086c6:	f8bd 808c 	ldrh.w	r8, [sp, #140]	; 0x8c
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2c00      	cmp	r4, #0
 80086ce:	d05c      	beq.n	800878a <pool_func_mp_array_integer_INT8+0xfa>
 80086d0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80086d4:	f1b9 0f00 	cmp.w	r9, #0
 80086d8:	d041      	beq.n	800875e <pool_func_mp_array_integer_INT8+0xce>
 80086da:	8865      	ldrh	r5, [r4, #2]
 80086dc:	2d00      	cmp	r5, #0
 80086de:	d06d      	beq.n	80087bc <pool_func_mp_array_integer_INT8+0x12c>
 80086e0:	f8d9 6000 	ldr.w	r6, [r9]
 80086e4:	ed96 0a00 	vldr	s0, [r6]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d06b      	beq.n	80087c4 <pool_func_mp_array_integer_INT8+0x134>
 80086ec:	685e      	ldr	r6, [r3, #4]
 80086ee:	2e00      	cmp	r6, #0
 80086f0:	d03c      	beq.n	800876c <pool_func_mp_array_integer_INT8+0xdc>
 80086f2:	885d      	ldrh	r5, [r3, #2]
 80086f4:	9511      	str	r5, [sp, #68]	; 0x44
 80086f6:	2d00      	cmp	r5, #0
 80086f8:	d050      	beq.n	800879c <pool_func_mp_array_integer_INT8+0x10c>
 80086fa:	6835      	ldr	r5, [r6, #0]
 80086fc:	6880      	ldr	r0, [r0, #8]
 80086fe:	6889      	ldr	r1, [r1, #8]
 8008700:	edd5 0a00 	vldr	s1, [r5]
 8008704:	f1b9 0f00 	cmp.w	r9, #0
 8008708:	d052      	beq.n	80087b0 <pool_func_mp_array_integer_INT8+0x120>
 800870a:	8864      	ldrh	r4, [r4, #2]
 800870c:	2c00      	cmp	r4, #0
 800870e:	d037      	beq.n	8008780 <pool_func_mp_array_integer_INT8+0xf0>
 8008710:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8008714:	f994 4000 	ldrsb.w	r4, [r4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d04d      	beq.n	80087b8 <pool_func_mp_array_integer_INT8+0x128>
 800871c:	2e00      	cmp	r6, #0
 800871e:	d032      	beq.n	8008786 <pool_func_mp_array_integer_INT8+0xf6>
 8008720:	885b      	ldrh	r3, [r3, #2]
 8008722:	9311      	str	r3, [sp, #68]	; 0x44
 8008724:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008726:	2b00      	cmp	r3, #0
 8008728:	d046      	beq.n	80087b8 <pool_func_mp_array_integer_INT8+0x128>
 800872a:	6873      	ldr	r3, [r6, #4]
 800872c:	f993 5000 	ldrsb.w	r5, [r3]
 8008730:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008732:	f8cd a000 	str.w	sl, [sp]
 8008736:	9304      	str	r3, [sp, #16]
 8008738:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800873a:	9303      	str	r3, [sp, #12]
 800873c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800873e:	9302      	str	r3, [sp, #8]
 8008740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008742:	9301      	str	r3, [sp, #4]
 8008744:	4613      	mov	r3, r2
 8008746:	4662      	mov	r2, ip
 8008748:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 800874c:	e9cd e807 	strd	lr, r8, [sp, #28]
 8008750:	e9cd b705 	strd	fp, r7, [sp, #20]
 8008754:	f004 f9a8 	bl	800caa8 <st_int8_maxpool>
 8008758:	b013      	add	sp, #76	; 0x4c
 800875a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800875e:	2b00      	cmp	r3, #0
 8008760:	d03c      	beq.n	80087dc <pool_func_mp_array_integer_INT8+0x14c>
 8008762:	685e      	ldr	r6, [r3, #4]
 8008764:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8008830 <pool_func_mp_array_integer_INT8+0x1a0>
 8008768:	2e00      	cmp	r6, #0
 800876a:	d1c2      	bne.n	80086f2 <pool_func_mp_array_integer_INT8+0x62>
 800876c:	6880      	ldr	r0, [r0, #8]
 800876e:	6889      	ldr	r1, [r1, #8]
 8008770:	f1b9 0f00 	cmp.w	r9, #0
 8008774:	d02d      	beq.n	80087d2 <pool_func_mp_array_integer_INT8+0x142>
 8008776:	8864      	ldrh	r4, [r4, #2]
 8008778:	2c00      	cmp	r4, #0
 800877a:	d151      	bne.n	8008820 <pool_func_mp_array_integer_INT8+0x190>
 800877c:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8008830 <pool_func_mp_array_integer_INT8+0x1a0>
 8008780:	2400      	movs	r4, #0
 8008782:	2e00      	cmp	r6, #0
 8008784:	d1cc      	bne.n	8008720 <pool_func_mp_array_integer_INT8+0x90>
 8008786:	2500      	movs	r5, #0
 8008788:	e7d2      	b.n	8008730 <pool_func_mp_array_integer_INT8+0xa0>
 800878a:	b33b      	cbz	r3, 80087dc <pool_func_mp_array_integer_INT8+0x14c>
 800878c:	685e      	ldr	r6, [r3, #4]
 800878e:	b376      	cbz	r6, 80087ee <pool_func_mp_array_integer_INT8+0x15e>
 8008790:	885d      	ldrh	r5, [r3, #2]
 8008792:	9511      	str	r5, [sp, #68]	; 0x44
 8008794:	2d00      	cmp	r5, #0
 8008796:	d133      	bne.n	8008800 <pool_func_mp_array_integer_INT8+0x170>
 8008798:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8008830 <pool_func_mp_array_integer_INT8+0x1a0>
 800879c:	6880      	ldr	r0, [r0, #8]
 800879e:	6889      	ldr	r1, [r1, #8]
 80087a0:	b1c4      	cbz	r4, 80087d4 <pool_func_mp_array_integer_INT8+0x144>
 80087a2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80087a6:	eddf 0a22 	vldr	s1, [pc, #136]	; 8008830 <pool_func_mp_array_integer_INT8+0x1a0>
 80087aa:	f1b9 0f00 	cmp.w	r9, #0
 80087ae:	d1ac      	bne.n	800870a <pool_func_mp_array_integer_INT8+0x7a>
 80087b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087b2:	464c      	mov	r4, r9
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1b8      	bne.n	800872a <pool_func_mp_array_integer_INT8+0x9a>
 80087b8:	461d      	mov	r5, r3
 80087ba:	e7b9      	b.n	8008730 <pool_func_mp_array_integer_INT8+0xa0>
 80087bc:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8008830 <pool_func_mp_array_integer_INT8+0x1a0>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d193      	bne.n	80086ec <pool_func_mp_array_integer_INT8+0x5c>
 80087c4:	6880      	ldr	r0, [r0, #8]
 80087c6:	6889      	ldr	r1, [r1, #8]
 80087c8:	bb15      	cbnz	r5, 8008810 <pool_func_mp_array_integer_INT8+0x180>
 80087ca:	462c      	mov	r4, r5
 80087cc:	eddf 0a18 	vldr	s1, [pc, #96]	; 8008830 <pool_func_mp_array_integer_INT8+0x1a0>
 80087d0:	e7ae      	b.n	8008730 <pool_func_mp_array_integer_INT8+0xa0>
 80087d2:	464c      	mov	r4, r9
 80087d4:	eddf 0a16 	vldr	s1, [pc, #88]	; 8008830 <pool_func_mp_array_integer_INT8+0x1a0>
 80087d8:	4625      	mov	r5, r4
 80087da:	e7a9      	b.n	8008730 <pool_func_mp_array_integer_INT8+0xa0>
 80087dc:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8008830 <pool_func_mp_array_integer_INT8+0x1a0>
 80087e0:	461c      	mov	r4, r3
 80087e2:	6880      	ldr	r0, [r0, #8]
 80087e4:	461d      	mov	r5, r3
 80087e6:	eef0 0a40 	vmov.f32	s1, s0
 80087ea:	6889      	ldr	r1, [r1, #8]
 80087ec:	e7a0      	b.n	8008730 <pool_func_mp_array_integer_INT8+0xa0>
 80087ee:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008830 <pool_func_mp_array_integer_INT8+0x1a0>
 80087f2:	4634      	mov	r4, r6
 80087f4:	6880      	ldr	r0, [r0, #8]
 80087f6:	4635      	mov	r5, r6
 80087f8:	eef0 0a40 	vmov.f32	s1, s0
 80087fc:	6889      	ldr	r1, [r1, #8]
 80087fe:	e797      	b.n	8008730 <pool_func_mp_array_integer_INT8+0xa0>
 8008800:	6833      	ldr	r3, [r6, #0]
 8008802:	6880      	ldr	r0, [r0, #8]
 8008804:	6889      	ldr	r1, [r1, #8]
 8008806:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8008830 <pool_func_mp_array_integer_INT8+0x1a0>
 800880a:	edd3 0a00 	vldr	s1, [r3]
 800880e:	e78c      	b.n	800872a <pool_func_mp_array_integer_INT8+0x9a>
 8008810:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8008814:	461d      	mov	r5, r3
 8008816:	eddf 0a06 	vldr	s1, [pc, #24]	; 8008830 <pool_func_mp_array_integer_INT8+0x1a0>
 800881a:	f994 4000 	ldrsb.w	r4, [r4]
 800881e:	e787      	b.n	8008730 <pool_func_mp_array_integer_INT8+0xa0>
 8008820:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008824:	eddf 0a02 	vldr	s1, [pc, #8]	; 8008830 <pool_func_mp_array_integer_INT8+0x1a0>
 8008828:	f993 4000 	ldrsb.w	r4, [r3]
 800882c:	e7ab      	b.n	8008786 <pool_func_mp_array_integer_INT8+0xf6>
 800882e:	bf00      	nop
 8008830:	00000000 	.word	0x00000000

08008834 <forward_mp_integer_INT8>:
 8008834:	6983      	ldr	r3, [r0, #24]
 8008836:	881a      	ldrh	r2, [r3, #0]
 8008838:	2a00      	cmp	r2, #0
 800883a:	d074      	beq.n	8008926 <forward_mp_integer_INT8+0xf2>
 800883c:	6859      	ldr	r1, [r3, #4]
 800883e:	684b      	ldr	r3, [r1, #4]
 8008840:	b103      	cbz	r3, 8008844 <forward_mp_integer_INT8+0x10>
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2a01      	cmp	r2, #1
 8008846:	f000 80e0 	beq.w	8008a0a <forward_mp_integer_INT8+0x1d6>
 800884a:	690a      	ldr	r2, [r1, #16]
 800884c:	2a00      	cmp	r2, #0
 800884e:	f000 80df 	beq.w	8008a10 <forward_mp_integer_INT8+0x1dc>
 8008852:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008856:	68de      	ldr	r6, [r3, #12]
 8008858:	b095      	sub	sp, #84	; 0x54
 800885a:	6811      	ldr	r1, [r2, #0]
 800885c:	681c      	ldr	r4, [r3, #0]
 800885e:	f8d3 b018 	ldr.w	fp, [r3, #24]
 8008862:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8008866:	8932      	ldrh	r2, [r6, #8]
 8008868:	89b3      	ldrh	r3, [r6, #12]
 800886a:	8b86      	ldrh	r6, [r0, #28]
 800886c:	6b07      	ldr	r7, [r0, #48]	; 0x30
 800886e:	960d      	str	r6, [sp, #52]	; 0x34
 8008870:	8c06      	ldrh	r6, [r0, #32]
 8008872:	68cd      	ldr	r5, [r1, #12]
 8008874:	960e      	str	r6, [sp, #56]	; 0x38
 8008876:	88be      	ldrh	r6, [r7, #4]
 8008878:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800887c:	960f      	str	r6, [sp, #60]	; 0x3c
 800887e:	883e      	ldrh	r6, [r7, #0]
 8008880:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 8008884:	9610      	str	r6, [sp, #64]	; 0x40
 8008886:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 8008888:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 800888a:	9611      	str	r6, [sp, #68]	; 0x44
 800888c:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8008890:	680e      	ldr	r6, [r1, #0]
 8008892:	9012      	str	r0, [sp, #72]	; 0x48
 8008894:	2c00      	cmp	r4, #0
 8008896:	d060      	beq.n	800895a <forward_mp_integer_INT8+0x126>
 8008898:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800889c:	f1b9 0f00 	cmp.w	r9, #0
 80088a0:	d043      	beq.n	800892a <forward_mp_integer_INT8+0xf6>
 80088a2:	8865      	ldrh	r5, [r4, #2]
 80088a4:	2d00      	cmp	r5, #0
 80088a6:	d06e      	beq.n	8008986 <forward_mp_integer_INT8+0x152>
 80088a8:	f8d9 1000 	ldr.w	r1, [r9]
 80088ac:	ed91 0a00 	vldr	s0, [r1]
 80088b0:	2e00      	cmp	r6, #0
 80088b2:	d06c      	beq.n	800898e <forward_mp_integer_INT8+0x15a>
 80088b4:	6877      	ldr	r7, [r6, #4]
 80088b6:	2f00      	cmp	r7, #0
 80088b8:	d03e      	beq.n	8008938 <forward_mp_integer_INT8+0x104>
 80088ba:	8871      	ldrh	r1, [r6, #2]
 80088bc:	9113      	str	r1, [sp, #76]	; 0x4c
 80088be:	2900      	cmp	r1, #0
 80088c0:	d053      	beq.n	800896a <forward_mp_integer_INT8+0x136>
 80088c2:	683d      	ldr	r5, [r7, #0]
 80088c4:	f8db 0008 	ldr.w	r0, [fp, #8]
 80088c8:	f8da 1008 	ldr.w	r1, [sl, #8]
 80088cc:	edd5 0a00 	vldr	s1, [r5]
 80088d0:	f1b9 0f00 	cmp.w	r9, #0
 80088d4:	d055      	beq.n	8008982 <forward_mp_integer_INT8+0x14e>
 80088d6:	8864      	ldrh	r4, [r4, #2]
 80088d8:	2c00      	cmp	r4, #0
 80088da:	d039      	beq.n	8008950 <forward_mp_integer_INT8+0x11c>
 80088dc:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80088e0:	f994 4000 	ldrsb.w	r4, [r4]
 80088e4:	2e00      	cmp	r6, #0
 80088e6:	d036      	beq.n	8008956 <forward_mp_integer_INT8+0x122>
 80088e8:	2f00      	cmp	r7, #0
 80088ea:	d034      	beq.n	8008956 <forward_mp_integer_INT8+0x122>
 80088ec:	8875      	ldrh	r5, [r6, #2]
 80088ee:	9513      	str	r5, [sp, #76]	; 0x4c
 80088f0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80088f2:	b115      	cbz	r5, 80088fa <forward_mp_integer_INT8+0xc6>
 80088f4:	687d      	ldr	r5, [r7, #4]
 80088f6:	f995 5000 	ldrsb.w	r5, [r5]
 80088fa:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 80088fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008900:	9406      	str	r4, [sp, #24]
 8008902:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008904:	9405      	str	r4, [sp, #20]
 8008906:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008908:	9404      	str	r4, [sp, #16]
 800890a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800890c:	9403      	str	r4, [sp, #12]
 800890e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008910:	9402      	str	r4, [sp, #8]
 8008912:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008914:	e9cd e807 	strd	lr, r8, [sp, #28]
 8008918:	e9cd c400 	strd	ip, r4, [sp]
 800891c:	f004 f8c4 	bl	800caa8 <st_int8_maxpool>
 8008920:	b015      	add	sp, #84	; 0x54
 8008922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008926:	6853      	ldr	r3, [r2, #4]
 8008928:	deff      	udf	#255	; 0xff
 800892a:	2e00      	cmp	r6, #0
 800892c:	d039      	beq.n	80089a2 <forward_mp_integer_INT8+0x16e>
 800892e:	6877      	ldr	r7, [r6, #4]
 8008930:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8008a14 <forward_mp_integer_INT8+0x1e0>
 8008934:	2f00      	cmp	r7, #0
 8008936:	d1c0      	bne.n	80088ba <forward_mp_integer_INT8+0x86>
 8008938:	f8db 0008 	ldr.w	r0, [fp, #8]
 800893c:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008940:	f1b9 0f00 	cmp.w	r9, #0
 8008944:	d05c      	beq.n	8008a00 <forward_mp_integer_INT8+0x1cc>
 8008946:	8864      	ldrh	r4, [r4, #2]
 8008948:	2c00      	cmp	r4, #0
 800894a:	d152      	bne.n	80089f2 <forward_mp_integer_INT8+0x1be>
 800894c:	eddf 0a31 	vldr	s1, [pc, #196]	; 8008a14 <forward_mp_integer_INT8+0x1e0>
 8008950:	2400      	movs	r4, #0
 8008952:	2f00      	cmp	r7, #0
 8008954:	d1ca      	bne.n	80088ec <forward_mp_integer_INT8+0xb8>
 8008956:	2500      	movs	r5, #0
 8008958:	e7cf      	b.n	80088fa <forward_mp_integer_INT8+0xc6>
 800895a:	b316      	cbz	r6, 80089a2 <forward_mp_integer_INT8+0x16e>
 800895c:	6877      	ldr	r7, [r6, #4]
 800895e:	b35f      	cbz	r7, 80089b8 <forward_mp_integer_INT8+0x184>
 8008960:	8871      	ldrh	r1, [r6, #2]
 8008962:	9113      	str	r1, [sp, #76]	; 0x4c
 8008964:	bb99      	cbnz	r1, 80089ce <forward_mp_integer_INT8+0x19a>
 8008966:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8008a14 <forward_mp_integer_INT8+0x1e0>
 800896a:	f8db 0008 	ldr.w	r0, [fp, #8]
 800896e:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008972:	b194      	cbz	r4, 800899a <forward_mp_integer_INT8+0x166>
 8008974:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008978:	eddf 0a26 	vldr	s1, [pc, #152]	; 8008a14 <forward_mp_integer_INT8+0x1e0>
 800897c:	f1b9 0f00 	cmp.w	r9, #0
 8008980:	d1a9      	bne.n	80088d6 <forward_mp_integer_INT8+0xa2>
 8008982:	464c      	mov	r4, r9
 8008984:	e7b4      	b.n	80088f0 <forward_mp_integer_INT8+0xbc>
 8008986:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8008a14 <forward_mp_integer_INT8+0x1e0>
 800898a:	2e00      	cmp	r6, #0
 800898c:	d192      	bne.n	80088b4 <forward_mp_integer_INT8+0x80>
 800898e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008992:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008996:	bb25      	cbnz	r5, 80089e2 <forward_mp_integer_INT8+0x1ae>
 8008998:	462c      	mov	r4, r5
 800899a:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8008a14 <forward_mp_integer_INT8+0x1e0>
 800899e:	4625      	mov	r5, r4
 80089a0:	e7ab      	b.n	80088fa <forward_mp_integer_INT8+0xc6>
 80089a2:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8008a14 <forward_mp_integer_INT8+0x1e0>
 80089a6:	4634      	mov	r4, r6
 80089a8:	f8db 0008 	ldr.w	r0, [fp, #8]
 80089ac:	4635      	mov	r5, r6
 80089ae:	eef0 0a40 	vmov.f32	s1, s0
 80089b2:	f8da 1008 	ldr.w	r1, [sl, #8]
 80089b6:	e7a0      	b.n	80088fa <forward_mp_integer_INT8+0xc6>
 80089b8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8008a14 <forward_mp_integer_INT8+0x1e0>
 80089bc:	463c      	mov	r4, r7
 80089be:	f8db 0008 	ldr.w	r0, [fp, #8]
 80089c2:	463d      	mov	r5, r7
 80089c4:	eef0 0a40 	vmov.f32	s1, s0
 80089c8:	f8da 1008 	ldr.w	r1, [sl, #8]
 80089cc:	e795      	b.n	80088fa <forward_mp_integer_INT8+0xc6>
 80089ce:	683d      	ldr	r5, [r7, #0]
 80089d0:	f8db 0008 	ldr.w	r0, [fp, #8]
 80089d4:	f8da 1008 	ldr.w	r1, [sl, #8]
 80089d8:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008a14 <forward_mp_integer_INT8+0x1e0>
 80089dc:	edd5 0a00 	vldr	s1, [r5]
 80089e0:	e788      	b.n	80088f4 <forward_mp_integer_INT8+0xc0>
 80089e2:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80089e6:	4635      	mov	r5, r6
 80089e8:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8008a14 <forward_mp_integer_INT8+0x1e0>
 80089ec:	f994 4000 	ldrsb.w	r4, [r4]
 80089f0:	e783      	b.n	80088fa <forward_mp_integer_INT8+0xc6>
 80089f2:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80089f6:	eddf 0a07 	vldr	s1, [pc, #28]	; 8008a14 <forward_mp_integer_INT8+0x1e0>
 80089fa:	f994 4000 	ldrsb.w	r4, [r4]
 80089fe:	e7aa      	b.n	8008956 <forward_mp_integer_INT8+0x122>
 8008a00:	464c      	mov	r4, r9
 8008a02:	eddf 0a04 	vldr	s1, [pc, #16]	; 8008a14 <forward_mp_integer_INT8+0x1e0>
 8008a06:	464d      	mov	r5, r9
 8008a08:	e777      	b.n	80088fa <forward_mp_integer_INT8+0xc6>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	deff      	udf	#255	; 0xff
 8008a10:	68d3      	ldr	r3, [r2, #12]
 8008a12:	deff      	udf	#255	; 0xff
 8008a14:	00000000 	.word	0x00000000

08008a18 <align_factor>:
 8008a18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	b508      	push	{r3, lr}
 8008a20:	eeb4 0a67 	vcmp.f32	s0, s15
 8008a24:	2300      	movs	r3, #0
 8008a26:	8003      	strh	r3, [r0, #0]
 8008a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2c:	d524      	bpl.n	8008a78 <align_factor+0x60>
 8008a2e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a36:	dd1f      	ble.n	8008a78 <align_factor+0x60>
 8008a38:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e005      	b.n	8008a4c <align_factor+0x34>
 8008a40:	8013      	strh	r3, [r2, #0]
 8008a42:	b28b      	uxth	r3, r1
 8008a44:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008a48:	2b21      	cmp	r3, #33	; 0x21
 8008a4a:	d02b      	beq.n	8008aa4 <align_factor+0x8c>
 8008a4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008a50:	1c59      	adds	r1, r3, #1
 8008a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a56:	d4f3      	bmi.n	8008a40 <align_factor+0x28>
 8008a58:	eddf 7a17 	vldr	s15, [pc, #92]	; 8008ab8 <align_factor+0xa0>
 8008a5c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008a60:	ee17 0a90 	vmov	r0, s15
 8008a64:	f7f7 fcb4 	bl	80003d0 <__aeabi_f2lz>
 8008a68:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8008a6c:	d003      	beq.n	8008a76 <align_factor+0x5e>
 8008a6e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008a72:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 8008a76:	bd08      	pop	{r3, pc}
 8008a78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008a84:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8008a88:	e005      	b.n	8008a96 <align_factor+0x7e>
 8008a8a:	8013      	strh	r3, [r2, #0]
 8008a8c:	b28b      	uxth	r3, r1
 8008a8e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008a92:	4283      	cmp	r3, r0
 8008a94:	d00a      	beq.n	8008aac <align_factor+0x94>
 8008a96:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008a9a:	1e59      	subs	r1, r3, #1
 8008a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa0:	dcf3      	bgt.n	8008a8a <align_factor+0x72>
 8008aa2:	e7d9      	b.n	8008a58 <align_factor+0x40>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	8013      	strh	r3, [r2, #0]
 8008aaa:	bd08      	pop	{r3, pc}
 8008aac:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 8008ab0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008ab4:	8013      	strh	r3, [r2, #0]
 8008ab6:	e7cf      	b.n	8008a58 <align_factor+0x40>
 8008ab8:	4f000000 	.word	0x4f000000

08008abc <st_sssa8_conv_dw_Wadapt>:
 8008abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac0:	088c      	lsrs	r4, r1, #2
 8008ac2:	b089      	sub	sp, #36	; 0x24
 8008ac4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8008ac6:	9007      	str	r0, [sp, #28]
 8008ac8:	9404      	str	r4, [sp, #16]
 8008aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ace:	d055      	beq.n	8008b7c <st_sssa8_conv_dw_Wadapt+0xc0>
 8008ad0:	fb03 f902 	mul.w	r9, r3, r2
 8008ad4:	461f      	mov	r7, r3
 8008ad6:	4616      	mov	r6, r2
 8008ad8:	1e62      	subs	r2, r4, #1
 8008ada:	f3c9 094f 	ubfx	r9, r9, #1, #16
 8008ade:	f100 0a04 	add.w	sl, r0, #4
 8008ae2:	b292      	uxth	r2, r2
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	fb16 fb07 	smulbb	fp, r6, r7
 8008aea:	f109 33ff 	add.w	r3, r9, #4294967295
 8008aee:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	f00b 0401 	and.w	r4, fp, #1
 8008af8:	004f      	lsls	r7, r1, #1
 8008afa:	011a      	lsls	r2, r3, #4
 8008afc:	9401      	str	r4, [sp, #4]
 8008afe:	3220      	adds	r2, #32
 8008b00:	9203      	str	r2, [sp, #12]
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	fb03 1301 	mla	r3, r3, r1, r1
 8008b08:	0112      	lsls	r2, r2, #4
 8008b0a:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 8008b0e:	9202      	str	r2, [sp, #8]
 8008b10:	4644      	mov	r4, r8
 8008b12:	f1b9 0f00 	cmp.w	r9, #0
 8008b16:	d06d      	beq.n	8008bf4 <st_sssa8_conv_dw_Wadapt+0x138>
 8008b18:	9b03      	ldr	r3, [sp, #12]
 8008b1a:	f105 0210 	add.w	r2, r5, #16
 8008b1e:	eb05 0e03 	add.w	lr, r5, r3
 8008b22:	3210      	adds	r2, #16
 8008b24:	5866      	ldr	r6, [r4, r1]
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	443c      	add	r4, r7
 8008b2a:	4572      	cmp	r2, lr
 8008b2c:	eac6 4023 	pkhtb	r0, r6, r3, asr #16
 8008b30:	eac3 4306 	pkhbt	r3, r3, r6, lsl #16
 8008b34:	ea4f 2630 	mov.w	r6, r0, ror #8
 8008b38:	ea4f 2c33 	mov.w	ip, r3, ror #8
 8008b3c:	fa2f f080 	sxtb16	r0, r0
 8008b40:	fa2f f383 	sxtb16	r3, r3
 8008b44:	fa2f f686 	sxtb16	r6, r6
 8008b48:	f842 3c20 	str.w	r3, [r2, #-32]
 8008b4c:	f842 0c18 	str.w	r0, [r2, #-24]
 8008b50:	fa2f f38c 	sxtb16	r3, ip
 8008b54:	f842 6c14 	str.w	r6, [r2, #-20]
 8008b58:	f842 3c1c 	str.w	r3, [r2, #-28]
 8008b5c:	d1e1      	bne.n	8008b22 <st_sssa8_conv_dw_Wadapt+0x66>
 8008b5e:	9b02      	ldr	r3, [sp, #8]
 8008b60:	eb0b 0408 	add.w	r4, fp, r8
 8008b64:	18ea      	adds	r2, r5, r3
 8008b66:	9b01      	ldr	r3, [sp, #4]
 8008b68:	bb6b      	cbnz	r3, 8008bc6 <st_sssa8_conv_dw_Wadapt+0x10a>
 8008b6a:	4615      	mov	r5, r2
 8008b6c:	f108 0804 	add.w	r8, r8, #4
 8008b70:	45d0      	cmp	r8, sl
 8008b72:	d1cd      	bne.n	8008b10 <st_sssa8_conv_dw_Wadapt+0x54>
 8008b74:	9b04      	ldr	r3, [sp, #16]
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	9304      	str	r3, [sp, #16]
 8008b7c:	f011 0303 	ands.w	r3, r1, #3
 8008b80:	d035      	beq.n	8008bee <st_sssa8_conv_dw_Wadapt+0x132>
 8008b82:	e9dd 2005 	ldrd	r2, r0, [sp, #20]
 8008b86:	fb12 f000 	smulbb	r0, r2, r0
 8008b8a:	b280      	uxth	r0, r0
 8008b8c:	b378      	cbz	r0, 8008bee <st_sssa8_conv_dw_Wadapt+0x132>
 8008b8e:	2901      	cmp	r1, #1
 8008b90:	d132      	bne.n	8008bf8 <st_sssa8_conv_dw_Wadapt+0x13c>
 8008b92:	0047      	lsls	r7, r0, #1
 8008b94:	f8dd c010 	ldr.w	ip, [sp, #16]
 8008b98:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8008b9c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8008ba0:	4664      	mov	r4, ip
 8008ba2:	4601      	mov	r1, r0
 8008ba4:	1e63      	subs	r3, r4, #1
 8008ba6:	1c62      	adds	r2, r4, #1
 8008ba8:	4626      	mov	r6, r4
 8008baa:	4473      	add	r3, lr
 8008bac:	b294      	uxth	r4, r2
 8008bae:	f913 2f01 	ldrsb.w	r2, [r3, #1]!
 8008bb2:	f825 2b02 	strh.w	r2, [r5], #2
 8008bb6:	428d      	cmp	r5, r1
 8008bb8:	d1f9      	bne.n	8008bae <st_sssa8_conv_dw_Wadapt+0xf2>
 8008bba:	4566      	cmp	r6, ip
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	4439      	add	r1, r7
 8008bc0:	d015      	beq.n	8008bee <st_sssa8_conv_dw_Wadapt+0x132>
 8008bc2:	4438      	add	r0, r7
 8008bc4:	e7ee      	b.n	8008ba4 <st_sssa8_conv_dw_Wadapt+0xe8>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	f102 0508 	add.w	r5, r2, #8
 8008bcc:	eac3 2003 	pkhbt	r0, r3, r3, lsl #8
 8008bd0:	eac3 6323 	pkhtb	r3, r3, r3, asr #24
 8008bd4:	fa2f f080 	sxtb16	r0, r0
 8008bd8:	ea4f 4333 	mov.w	r3, r3, ror #16
 8008bdc:	8010      	strh	r0, [r2, #0]
 8008bde:	fa2f f383 	sxtb16	r3, r3
 8008be2:	0c00      	lsrs	r0, r0, #16
 8008be4:	8093      	strh	r3, [r2, #4]
 8008be6:	0c1b      	lsrs	r3, r3, #16
 8008be8:	8050      	strh	r0, [r2, #2]
 8008bea:	80d3      	strh	r3, [r2, #6]
 8008bec:	e7be      	b.n	8008b6c <st_sssa8_conv_dw_Wadapt+0xb0>
 8008bee:	b009      	add	sp, #36	; 0x24
 8008bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf4:	462a      	mov	r2, r5
 8008bf6:	e7b6      	b.n	8008b66 <st_sssa8_conv_dw_Wadapt+0xaa>
 8008bf8:	9a04      	ldr	r2, [sp, #16]
 8008bfa:	eb05 0740 	add.w	r7, r5, r0, lsl #1
 8008bfe:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8008c02:	0040      	lsls	r0, r0, #1
 8008c04:	4413      	add	r3, r2
 8008c06:	463c      	mov	r4, r7
 8008c08:	4694      	mov	ip, r2
 8008c0a:	b29e      	uxth	r6, r3
 8008c0c:	462b      	mov	r3, r5
 8008c0e:	f10c 0501 	add.w	r5, ip, #1
 8008c12:	eb0e 020c 	add.w	r2, lr, ip
 8008c16:	fa1f fc85 	uxth.w	ip, r5
 8008c1a:	f992 5000 	ldrsb.w	r5, [r2]
 8008c1e:	440a      	add	r2, r1
 8008c20:	f823 5b02 	strh.w	r5, [r3], #2
 8008c24:	42a3      	cmp	r3, r4
 8008c26:	d1f8      	bne.n	8008c1a <st_sssa8_conv_dw_Wadapt+0x15e>
 8008c28:	45b4      	cmp	ip, r6
 8008c2a:	4404      	add	r4, r0
 8008c2c:	463b      	mov	r3, r7
 8008c2e:	d0de      	beq.n	8008bee <st_sssa8_conv_dw_Wadapt+0x132>
 8008c30:	4407      	add	r7, r0
 8008c32:	e7ec      	b.n	8008c0e <st_sssa8_conv_dw_Wadapt+0x152>

08008c34 <st_sssa8_convolve_dw>:
 8008c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	ed2d 8b02 	vpush	{d8}
 8008c3c:	b0db      	sub	sp, #364	; 0x16c
 8008c3e:	9315      	str	r3, [sp, #84]	; 0x54
 8008c40:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 8008c42:	912d      	str	r1, [sp, #180]	; 0xb4
 8008c44:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008c48:	9b6f      	ldr	r3, [sp, #444]	; 0x1bc
 8008c4a:	9211      	str	r2, [sp, #68]	; 0x44
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f8bd 21a0 	ldrh.w	r2, [sp, #416]	; 0x1a0
 8008c52:	9308      	str	r3, [sp, #32]
 8008c54:	1e4b      	subs	r3, r1, #1
 8008c56:	922b      	str	r2, [sp, #172]	; 0xac
 8008c58:	f8bd 21a4 	ldrh.w	r2, [sp, #420]	; 0x1a4
 8008c5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c5e:	9231      	str	r2, [sp, #196]	; 0xc4
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	f8bd 31a8 	ldrh.w	r3, [sp, #424]	; 0x1a8
 8008c66:	9017      	str	r0, [sp, #92]	; 0x5c
 8008c68:	2a14      	cmp	r2, #20
 8008c6a:	932c      	str	r3, [sp, #176]	; 0xb0
 8008c6c:	f8bd 31ac 	ldrh.w	r3, [sp, #428]	; 0x1ac
 8008c70:	f8bd 01d0 	ldrh.w	r0, [sp, #464]	; 0x1d0
 8008c74:	9332      	str	r3, [sp, #200]	; 0xc8
 8008c76:	f8bd 31b0 	ldrh.w	r3, [sp, #432]	; 0x1b0
 8008c7a:	9023      	str	r0, [sp, #140]	; 0x8c
 8008c7c:	931f      	str	r3, [sp, #124]	; 0x7c
 8008c7e:	f8bd 31b4 	ldrh.w	r3, [sp, #436]	; 0x1b4
 8008c82:	f8bd 01d4 	ldrh.w	r0, [sp, #468]	; 0x1d4
 8008c86:	9333      	str	r3, [sp, #204]	; 0xcc
 8008c88:	f99d 31c4 	ldrsb.w	r3, [sp, #452]	; 0x1c4
 8008c8c:	f8bd b19c 	ldrh.w	fp, [sp, #412]	; 0x19c
 8008c90:	9316      	str	r3, [sp, #88]	; 0x58
 8008c92:	9105      	str	r1, [sp, #20]
 8008c94:	f99d 31c8 	ldrsb.w	r3, [sp, #456]	; 0x1c8
 8008c98:	9034      	str	r0, [sp, #208]	; 0xd0
 8008c9a:	f200 84cb 	bhi.w	8009634 <st_sssa8_convolve_dw+0xa00>
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	408b      	lsls	r3, r1
 8008ca2:	408a      	lsls	r2, r1
 8008ca4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008ca8:	9306      	str	r3, [sp, #24]
 8008caa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008cac:	a950      	add	r1, sp, #320	; 0x140
 8008cae:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8008cb0:	a846      	add	r0, sp, #280	; 0x118
 8008cb2:	933c      	str	r3, [sp, #240]	; 0xf0
 8008cb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cb6:	9243      	str	r2, [sp, #268]	; 0x10c
 8008cb8:	933b      	str	r3, [sp, #236]	; 0xec
 8008cba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008cbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008cbe:	9252      	str	r2, [sp, #328]	; 0x148
 8008cc0:	9340      	str	r3, [sp, #256]	; 0x100
 8008cc2:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8008cc4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8008cc6:	9253      	str	r2, [sp, #332]	; 0x14c
 8008cc8:	933f      	str	r3, [sp, #252]	; 0xfc
 8008cca:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8008ccc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008cce:	9254      	str	r2, [sp, #336]	; 0x150
 8008cd0:	9344      	str	r3, [sp, #272]	; 0x110
 8008cd2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8008cd4:	fb03 f303 	mul.w	r3, r3, r3
 8008cd8:	9255      	str	r2, [sp, #340]	; 0x154
 8008cda:	fb0b f303 	mul.w	r3, fp, r3
 8008cde:	9a76      	ldr	r2, [sp, #472]	; 0x1d8
 8008ce0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8008ce4:	aa3a      	add	r2, sp, #232	; 0xe8
 8008ce6:	9314      	str	r3, [sp, #80]	; 0x50
 8008ce8:	ab42      	add	r3, sp, #264	; 0x108
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	ab3e      	add	r3, sp, #248	; 0xf8
 8008cee:	f001 ff1f 	bl	800ab30 <ai_padding_opt_init>
 8008cf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cf4:	fbbb f3f3 	udiv	r3, fp, r3
 8008cf8:	079a      	lsls	r2, r3, #30
 8008cfa:	9319      	str	r3, [sp, #100]	; 0x64
 8008cfc:	f040 8497 	bne.w	800962e <st_sssa8_convolve_dw+0x9fa>
 8008d00:	2204      	movs	r2, #4
 8008d02:	109b      	asrs	r3, r3, #2
 8008d04:	9219      	str	r2, [sp, #100]	; 0x64
 8008d06:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008d08:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8008d0a:	4252      	negs	r2, r2
 8008d0c:	eac2 4702 	pkhbt	r7, r2, r2, lsl #16
 8008d10:	2900      	cmp	r1, #0
 8008d12:	f000 81b1 	beq.w	8009078 <st_sssa8_convolve_dw+0x444>
 8008d16:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008d18:	ea4f 069b 	mov.w	r6, fp, lsr #2
 8008d1c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8008d1e:	46b8      	mov	r8, r7
 8008d20:	fb01 f003 	mul.w	r0, r1, r3
 8008d24:	9625      	str	r6, [sp, #148]	; 0x94
 8008d26:	902f      	str	r0, [sp, #188]	; 0xbc
 8008d28:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8008d2a:	fb15 f300 	smulbb	r3, r5, r0
 8008d2e:	fb00 f205 	mul.w	r2, r0, r5
 8008d32:	b29c      	uxth	r4, r3
 8008d34:	f3c2 004f 	ubfx	r0, r2, #1, #16
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	1e72      	subs	r2, r6, #1
 8008d3e:	1e61      	subs	r1, r4, #1
 8008d40:	900a      	str	r0, [sp, #40]	; 0x28
 8008d42:	9424      	str	r4, [sp, #144]	; 0x90
 8008d44:	b292      	uxth	r2, r2
 8008d46:	b289      	uxth	r1, r1
 8008d48:	9c05      	ldr	r4, [sp, #20]
 8008d4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d4c:	1e43      	subs	r3, r0, #1
 8008d4e:	1c48      	adds	r0, r1, #1
 8008d50:	1c51      	adds	r1, r2, #1
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	901b      	str	r0, [sp, #108]	; 0x6c
 8008d56:	1ea0      	subs	r0, r4, #2
 8008d58:	2401      	movs	r4, #1
 8008d5a:	4084      	lsls	r4, r0
 8008d5c:	9412      	str	r4, [sp, #72]	; 0x48
 8008d5e:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 8008d60:	4260      	negs	r0, r4
 8008d62:	b284      	uxth	r4, r0
 8008d64:	9430      	str	r4, [sp, #192]	; 0xc0
 8008d66:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8008d68:	f104 3cff 	add.w	ip, r4, #4294967295
 8008d6c:	08a0      	lsrs	r0, r4, #2
 8008d6e:	f024 0403 	bic.w	r4, r4, #3
 8008d72:	0080      	lsls	r0, r0, #2
 8008d74:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
 8008d78:	9422      	str	r4, [sp, #136]	; 0x88
 8008d7a:	9c6e      	ldr	r4, [sp, #440]	; 0x1b8
 8008d7c:	9027      	str	r0, [sp, #156]	; 0x9c
 8008d7e:	f104 0020 	add.w	r0, r4, #32
 8008d82:	011c      	lsls	r4, r3, #4
 8008d84:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8008d88:	9429      	str	r4, [sp, #164]	; 0xa4
 8008d8a:	2400      	movs	r4, #0
 8008d8c:	920c      	str	r2, [sp, #48]	; 0x30
 8008d8e:	1c5a      	adds	r2, r3, #1
 8008d90:	0112      	lsls	r2, r2, #4
 8008d92:	920e      	str	r2, [sp, #56]	; 0x38
 8008d94:	fb03 b20b 	mla	r2, r3, fp, fp
 8008d98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d9a:	fb03 f305 	mul.w	r3, r3, r5
 8008d9e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8008da0:	0052      	lsls	r2, r2, #1
 8008da2:	9337      	str	r3, [sp, #220]	; 0xdc
 8008da4:	f00b 0303 	and.w	r3, fp, #3
 8008da8:	920f      	str	r2, [sp, #60]	; 0x3c
 8008daa:	931e      	str	r3, [sp, #120]	; 0x78
 8008dac:	4663      	mov	r3, ip
 8008dae:	1b5b      	subs	r3, r3, r5
 8008db0:	4625      	mov	r5, r4
 8008db2:	9326      	str	r3, [sp, #152]	; 0x98
 8008db4:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8008db8:	9328      	str	r3, [sp, #160]	; 0xa0
 8008dba:	008b      	lsls	r3, r1, #2
 8008dbc:	932a      	str	r3, [sp, #168]	; 0xa8
 8008dbe:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 8008dc0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8008dc4:	9339      	str	r3, [sp, #228]	; 0xe4
 8008dc6:	00b3      	lsls	r3, r6, #2
 8008dc8:	465e      	mov	r6, fp
 8008dca:	9338      	str	r3, [sp, #224]	; 0xe0
 8008dcc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008dce:	0043      	lsls	r3, r0, #1
 8008dd0:	932e      	str	r3, [sp, #184]	; 0xb8
 8008dd2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008dd6:	ee08 3a10 	vmov	s16, r3
 8008dda:	a846      	add	r0, sp, #280	; 0x118
 8008ddc:	f001 ff02 	bl	800abe4 <ai_padding_opt_phase1>
 8008de0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 8429 	beq.w	800963a <st_sssa8_convolve_dw+0xa06>
 8008de8:	b2a3      	uxth	r3, r4
 8008dea:	9336      	str	r3, [sp, #216]	; 0xd8
 8008dec:	e9dd 3231 	ldrd	r3, r2, [sp, #196]	; 0xc4
 8008df0:	1a9b      	subs	r3, r3, r2
 8008df2:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8008df4:	fb02 3305 	mla	r3, r2, r5, r3
 8008df8:	f9bd 20c0 	ldrsh.w	r2, [sp, #192]	; 0xc0
 8008dfc:	9310      	str	r3, [sp, #64]	; 0x40
 8008dfe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008e00:	9220      	str	r2, [sp, #128]	; 0x80
 8008e02:	425b      	negs	r3, r3
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	9318      	str	r3, [sp, #96]	; 0x60
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	f000 81fd 	beq.w	800920e <st_sssa8_convolve_dw+0x5da>
 8008e14:	3a01      	subs	r2, #1
 8008e16:	9246      	str	r2, [sp, #280]	; 0x118
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f8ad 213e 	strh.w	r2, [sp, #318]	; 0x13e
 8008e1e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e20:	2a01      	cmp	r2, #1
 8008e22:	f000 8266 	beq.w	80092f2 <st_sssa8_convolve_dw+0x6be>
 8008e26:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e28:	2a04      	cmp	r2, #4
 8008e2a:	f000 8398 	beq.w	800955e <st_sssa8_convolve_dw+0x92a>
 8008e2e:	2a02      	cmp	r2, #2
 8008e30:	9820      	ldr	r0, [sp, #128]	; 0x80
 8008e32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e34:	f000 82aa 	beq.w	800938c <st_sssa8_convolve_dw+0x758>
 8008e38:	4282      	cmp	r2, r0
 8008e3a:	f340 83f3 	ble.w	8009624 <st_sssa8_convolve_dw+0x9f0>
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008e42:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008e44:	931c      	str	r3, [sp, #112]	; 0x70
 8008e46:	fb01 2100 	mla	r1, r1, r0, r2
 8008e4a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008e4c:	1acf      	subs	r7, r1, r3
 8008e4e:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 8008e52:	42bb      	cmp	r3, r7
 8008e54:	9309      	str	r3, [sp, #36]	; 0x24
 8008e56:	da39      	bge.n	8008ecc <st_sssa8_convolve_dw+0x298>
 8008e58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008e5a:	46b3      	mov	fp, r6
 8008e5c:	f8cd 80d4 	str.w	r8, [sp, #212]	; 0xd4
 8008e60:	ee18 aa10 	vmov	sl, s16
 8008e64:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8008e68:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 8008e6c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008e6e:	9702      	str	r7, [sp, #8]
 8008e70:	9304      	str	r3, [sp, #16]
 8008e72:	9a04      	ldr	r2, [sp, #16]
 8008e74:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008e76:	0fd2      	lsrs	r2, r2, #31
 8008e78:	4299      	cmp	r1, r3
 8008e7a:	bfd8      	it	le
 8008e7c:	f042 0201 	orrle.w	r2, r2, #1
 8008e80:	fb08 f303 	mul.w	r3, r8, r3
 8008e84:	9203      	str	r2, [sp, #12]
 8008e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e88:	9307      	str	r3, [sp, #28]
 8008e8a:	4614      	mov	r4, r2
 8008e8c:	0fe3      	lsrs	r3, r4, #31
 8008e8e:	4590      	cmp	r8, r2
 8008e90:	bfd8      	it	le
 8008e92:	f043 0301 	orrle.w	r3, r3, #1
 8008e96:	b91b      	cbnz	r3, 8008ea0 <st_sssa8_convolve_dw+0x26c>
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f000 8149 	beq.w	8009132 <st_sssa8_convolve_dw+0x4fe>
 8008ea0:	465a      	mov	r2, fp
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	4650      	mov	r0, sl
 8008ea6:	f001 feb7 	bl	800ac18 <st_uint8_fill>
 8008eaa:	3401      	adds	r4, #1
 8008eac:	9b02      	ldr	r3, [sp, #8]
 8008eae:	44d9      	add	r9, fp
 8008eb0:	b224      	sxth	r4, r4
 8008eb2:	429c      	cmp	r4, r3
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	dbe9      	blt.n	8008e8c <st_sssa8_convolve_dw+0x258>
 8008eb8:	9b04      	ldr	r3, [sp, #16]
 8008eba:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	b21b      	sxth	r3, r3
 8008ec0:	428b      	cmp	r3, r1
 8008ec2:	9304      	str	r3, [sp, #16]
 8008ec4:	dbd5      	blt.n	8008e72 <st_sssa8_convolve_dw+0x23e>
 8008ec6:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
 8008eca:	465e      	mov	r6, fp
 8008ecc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f000 81d7 	beq.w	8009282 <st_sssa8_convolve_dw+0x64e>
 8008ed4:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 8008ed6:	46b3      	mov	fp, r6
 8008ed8:	9d76      	ldr	r5, [sp, #472]	; 0x1d8
 8008eda:	f103 0e10 	add.w	lr, r3, #16
 8008ede:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 8008ee0:	462f      	mov	r7, r5
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	f8cd e010 	str.w	lr, [sp, #16]
 8008ee8:	f8dd e0a0 	ldr.w	lr, [sp, #160]	; 0xa0
 8008eec:	9303      	str	r3, [sp, #12]
 8008eee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ef0:	9302      	str	r3, [sp, #8]
 8008ef2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008ef4:	3320      	adds	r3, #32
 8008ef6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ef8:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 8008efc:	9309      	str	r3, [sp, #36]	; 0x24
 8008efe:	9b05      	ldr	r3, [sp, #20]
 8008f00:	f1c3 0301 	rsb	r3, r3, #1
 8008f04:	931a      	str	r3, [sp, #104]	; 0x68
 8008f06:	9b04      	ldr	r3, [sp, #16]
 8008f08:	9a02      	ldr	r2, [sp, #8]
 8008f0a:	e953 5404 	ldrd	r5, r4, [r3, #-16]
 8008f0e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f14:	b3ab      	cbz	r3, 8008f82 <st_sssa8_convolve_dw+0x34e>
 8008f16:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8008f18:	f107 0310 	add.w	r3, r7, #16
 8008f1c:	9707      	str	r7, [sp, #28]
 8008f1e:	eb07 0c06 	add.w	ip, r7, r6
 8008f22:	465e      	mov	r6, fp
 8008f24:	f8d2 b000 	ldr.w	fp, [r2]
 8008f28:	f852 9006 	ldr.w	r9, [r2, r6]
 8008f2c:	4472      	add	r2, lr
 8008f2e:	eacb 4a09 	pkhbt	sl, fp, r9, lsl #16
 8008f32:	f853 7c10 	ldr.w	r7, [r3, #-16]
 8008f36:	eac9 492b 	pkhtb	r9, r9, fp, asr #16
 8008f3a:	fa28 fb8a 	sxtab16	fp, r8, sl
 8008f3e:	fb27 550b 	smlad	r5, r7, fp, r5
 8008f42:	ea4f 2a3a 	mov.w	sl, sl, ror #8
 8008f46:	f853 7c0c 	ldr.w	r7, [r3, #-12]
 8008f4a:	fa28 fa8a 	sxtab16	sl, r8, sl
 8008f4e:	fb27 440a 	smlad	r4, r7, sl, r4
 8008f52:	f853 7c08 	ldr.w	r7, [r3, #-8]
 8008f56:	fa28 fa89 	sxtab16	sl, r8, r9
 8008f5a:	fb27 000a 	smlad	r0, r7, sl, r0
 8008f5e:	ea4f 2939 	mov.w	r9, r9, ror #8
 8008f62:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8008f66:	fa28 f989 	sxtab16	r9, r8, r9
 8008f6a:	fb27 1109 	smlad	r1, r7, r9, r1
 8008f6e:	3310      	adds	r3, #16
 8008f70:	459c      	cmp	ip, r3
 8008f72:	d1d7      	bne.n	8008f24 <st_sssa8_convolve_dw+0x2f0>
 8008f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f76:	46b3      	mov	fp, r6
 8008f78:	9f07      	ldr	r7, [sp, #28]
 8008f7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f7c:	441f      	add	r7, r3
 8008f7e:	9b02      	ldr	r3, [sp, #8]
 8008f80:	189a      	adds	r2, r3, r2
 8008f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f84:	b1e3      	cbz	r3, 8008fc0 <st_sssa8_convolve_dw+0x38c>
 8008f86:	6813      	ldr	r3, [r2, #0]
 8008f88:	3708      	adds	r7, #8
 8008f8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f8c:	b25a      	sxtb	r2, r3
 8008f8e:	f837 cc08 	ldrh.w	ip, [r7, #-8]
 8008f92:	f837 9c06 	ldrh.w	r9, [r7, #-6]
 8008f96:	1b92      	subs	r2, r2, r6
 8008f98:	f837 ac04 	ldrh.w	sl, [r7, #-4]
 8008f9c:	fb1c 5502 	smlabb	r5, ip, r2, r5
 8008fa0:	f343 2207 	sbfx	r2, r3, #8, #8
 8008fa4:	1b92      	subs	r2, r2, r6
 8008fa6:	fb19 4402 	smlabb	r4, r9, r2, r4
 8008faa:	f343 4207 	sbfx	r2, r3, #16, #8
 8008fae:	ebc6 6323 	rsb	r3, r6, r3, asr #24
 8008fb2:	1b92      	subs	r2, r2, r6
 8008fb4:	fb1a 0002 	smlabb	r0, sl, r2, r0
 8008fb8:	f837 2c02 	ldrh.w	r2, [r7, #-2]
 8008fbc:	fb12 1103 	smlabb	r1, r2, r3, r1
 8008fc0:	9b05      	ldr	r3, [sp, #20]
 8008fc2:	2b15      	cmp	r3, #21
 8008fc4:	dd5e      	ble.n	8009084 <st_sssa8_convolve_dw+0x450>
 8008fc6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8008fc8:	9b08      	ldr	r3, [sp, #32]
 8008fca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fcc:	fb55 2503 	smmla	r5, r5, r3, r2
 8008fd0:	fb54 2c03 	smmla	ip, r4, r3, r2
 8008fd4:	4135      	asrs	r5, r6
 8008fd6:	9c06      	ldr	r4, [sp, #24]
 8008fd8:	fb50 2003 	smmla	r0, r0, r3, r2
 8008fdc:	4425      	add	r5, r4
 8008fde:	fb51 2103 	smmla	r1, r1, r3, r2
 8008fe2:	f305 0507 	ssat	r5, #8, r5
 8008fe6:	9b03      	ldr	r3, [sp, #12]
 8008fe8:	fa4c f406 	asr.w	r4, ip, r6
 8008fec:	9a06      	ldr	r2, [sp, #24]
 8008fee:	f803 5c04 	strb.w	r5, [r3, #-4]
 8008ff2:	18a3      	adds	r3, r4, r2
 8008ff4:	f303 0307 	ssat	r3, #8, r3
 8008ff8:	9c03      	ldr	r4, [sp, #12]
 8008ffa:	4130      	asrs	r0, r6
 8008ffc:	f804 3c03 	strb.w	r3, [r4, #-3]
 8009000:	1883      	adds	r3, r0, r2
 8009002:	f303 0307 	ssat	r3, #8, r3
 8009006:	4131      	asrs	r1, r6
 8009008:	f804 3c02 	strb.w	r3, [r4, #-2]
 800900c:	188b      	adds	r3, r1, r2
 800900e:	f303 0307 	ssat	r3, #8, r3
 8009012:	4622      	mov	r2, r4
 8009014:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009018:	3204      	adds	r2, #4
 800901a:	9b04      	ldr	r3, [sp, #16]
 800901c:	9203      	str	r2, [sp, #12]
 800901e:	3310      	adds	r3, #16
 8009020:	9a02      	ldr	r2, [sp, #8]
 8009022:	9304      	str	r3, [sp, #16]
 8009024:	3204      	adds	r2, #4
 8009026:	9202      	str	r2, [sp, #8]
 8009028:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800902a:	429a      	cmp	r2, r3
 800902c:	f47f af6b 	bne.w	8008f06 <st_sssa8_convolve_dw+0x2d2>
 8009030:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 8009032:	463d      	mov	r5, r7
 8009034:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8009036:	465e      	mov	r6, fp
 8009038:	4413      	add	r3, r2
 800903a:	9373      	str	r3, [sp, #460]	; 0x1cc
 800903c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800903e:	2b00      	cmp	r3, #0
 8009040:	f040 8201 	bne.w	8009446 <st_sssa8_convolve_dw+0x812>
 8009044:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009046:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8009048:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800904a:	440a      	add	r2, r1
 800904c:	3301      	adds	r3, #1
 800904e:	b292      	uxth	r2, r2
 8009050:	b21b      	sxth	r3, r3
 8009052:	9218      	str	r2, [sp, #96]	; 0x60
 8009054:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009056:	4619      	mov	r1, r3
 8009058:	429a      	cmp	r2, r3
 800905a:	f73f aed7 	bgt.w	8008e0c <st_sssa8_convolve_dw+0x1d8>
 800905e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8009060:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8009062:	9c36      	ldr	r4, [sp, #216]	; 0xd8
 8009064:	4413      	add	r3, r2
 8009066:	3401      	adds	r4, #1
 8009068:	b29b      	uxth	r3, r3
 800906a:	b224      	sxth	r4, r4
 800906c:	9330      	str	r3, [sp, #192]	; 0xc0
 800906e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8009070:	4625      	mov	r5, r4
 8009072:	42a3      	cmp	r3, r4
 8009074:	f73f aeb1 	bgt.w	8008dda <st_sssa8_convolve_dw+0x1a6>
 8009078:	2000      	movs	r0, #0
 800907a:	b05b      	add	sp, #364	; 0x16c
 800907c:	ecbd 8b02 	vpop	{d8}
 8009080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009084:	2b00      	cmp	r3, #0
 8009086:	dd23      	ble.n	80090d0 <st_sssa8_convolve_dw+0x49c>
 8009088:	9a08      	ldr	r2, [sp, #32]
 800908a:	006d      	lsls	r5, r5, #1
 800908c:	9e06      	ldr	r6, [sp, #24]
 800908e:	0064      	lsls	r4, r4, #1
 8009090:	fb55 6502 	smmla	r5, r5, r2, r6
 8009094:	0040      	lsls	r0, r0, #1
 8009096:	411d      	asrs	r5, r3
 8009098:	0049      	lsls	r1, r1, #1
 800909a:	fb54 6402 	smmla	r4, r4, r2, r6
 800909e:	fb50 6002 	smmla	r0, r0, r2, r6
 80090a2:	fb51 6102 	smmla	r1, r1, r2, r6
 80090a6:	f305 0507 	ssat	r5, #8, r5
 80090aa:	9a03      	ldr	r2, [sp, #12]
 80090ac:	411c      	asrs	r4, r3
 80090ae:	f802 5c04 	strb.w	r5, [r2, #-4]
 80090b2:	f304 0407 	ssat	r4, #8, r4
 80090b6:	4118      	asrs	r0, r3
 80090b8:	f802 4c03 	strb.w	r4, [r2, #-3]
 80090bc:	f300 0007 	ssat	r0, #8, r0
 80090c0:	4119      	asrs	r1, r3
 80090c2:	f802 0c02 	strb.w	r0, [r2, #-2]
 80090c6:	f301 0107 	ssat	r1, #8, r1
 80090ca:	f802 1c01 	strb.w	r1, [r2, #-1]
 80090ce:	e7a3      	b.n	8009018 <st_sssa8_convolve_dw+0x3e4>
 80090d0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80090d2:	fa05 f302 	lsl.w	r3, r5, r2
 80090d6:	f303 031f 	ssat	r3, #32, r3
 80090da:	9e08      	ldr	r6, [sp, #32]
 80090dc:	fb53 f316 	smmulr	r3, r3, r6
 80090e0:	4615      	mov	r5, r2
 80090e2:	fa04 f202 	lsl.w	r2, r4, r2
 80090e6:	f302 021f 	ssat	r2, #32, r2
 80090ea:	fb52 f216 	smmulr	r2, r2, r6
 80090ee:	40a8      	lsls	r0, r5
 80090f0:	f300 001f 	ssat	r0, #32, r0
 80090f4:	fb50 f016 	smmulr	r0, r0, r6
 80090f8:	40a9      	lsls	r1, r5
 80090fa:	f301 011f 	ssat	r1, #32, r1
 80090fe:	fb51 f116 	smmulr	r1, r1, r6
 8009102:	9c06      	ldr	r4, [sp, #24]
 8009104:	4423      	add	r3, r4
 8009106:	f303 0307 	ssat	r3, #8, r3
 800910a:	9d03      	ldr	r5, [sp, #12]
 800910c:	f805 3c04 	strb.w	r3, [r5, #-4]
 8009110:	18a3      	adds	r3, r4, r2
 8009112:	f303 0307 	ssat	r3, #8, r3
 8009116:	f805 3c03 	strb.w	r3, [r5, #-3]
 800911a:	1823      	adds	r3, r4, r0
 800911c:	f303 0307 	ssat	r3, #8, r3
 8009120:	f805 3c02 	strb.w	r3, [r5, #-2]
 8009124:	1863      	adds	r3, r4, r1
 8009126:	f303 0307 	ssat	r3, #8, r3
 800912a:	462a      	mov	r2, r5
 800912c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8009130:	e772      	b.n	8009018 <st_sssa8_convolve_dw+0x3e4>
 8009132:	9b07      	ldr	r3, [sp, #28]
 8009134:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8009136:	441a      	add	r2, r3
 8009138:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800913a:	fb03 1502 	mla	r5, r3, r2, r1
 800913e:	2b00      	cmp	r3, #0
 8009140:	f43f aeb3 	beq.w	8008eaa <st_sssa8_convolve_dw+0x276>
 8009144:	2e00      	cmp	r6, #0
 8009146:	f43f aeb0 	beq.w	8008eaa <st_sssa8_convolve_dw+0x276>
 800914a:	4648      	mov	r0, r9
 800914c:	464a      	mov	r2, r9
 800914e:	ee07 aa90 	vmov	s15, sl
 8009152:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8009156:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 800915a:	eb05 0e03 	add.w	lr, r5, r3
 800915e:	46c3      	mov	fp, r8
 8009160:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 8009164:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 8009168:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800916c:	f8dd a09c 	ldr.w	sl, [sp, #156]	; 0x9c
 8009170:	941a      	str	r4, [sp, #104]	; 0x68
 8009172:	3501      	adds	r5, #1
 8009174:	4614      	mov	r4, r2
 8009176:	42aa      	cmp	r2, r5
 8009178:	f105 31ff 	add.w	r1, r5, #4294967295
 800917c:	4432      	add	r2, r6
 800917e:	bf34      	ite	cc
 8009180:	2300      	movcc	r3, #0
 8009182:	2301      	movcs	r3, #1
 8009184:	428a      	cmp	r2, r1
 8009186:	bf98      	it	ls
 8009188:	f043 0301 	orrls.w	r3, r3, #1
 800918c:	b393      	cbz	r3, 80091f4 <st_sssa8_convolve_dw+0x5c0>
 800918e:	f1b8 0f07 	cmp.w	r8, #7
 8009192:	d92f      	bls.n	80091f4 <st_sssa8_convolve_dw+0x5c0>
 8009194:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009198:	2100      	movs	r1, #0
 800919a:	eb00 070a 	add.w	r7, r0, sl
 800919e:	f363 0107 	bfi	r1, r3, #0, #8
 80091a2:	f363 210f 	bfi	r1, r3, #8, #8
 80091a6:	f363 4117 	bfi	r1, r3, #16, #8
 80091aa:	f363 611f 	bfi	r1, r3, #24, #8
 80091ae:	4603      	mov	r3, r0
 80091b0:	f843 1b04 	str.w	r1, [r3], #4
 80091b4:	429f      	cmp	r7, r3
 80091b6:	d1fb      	bne.n	80091b0 <st_sssa8_convolve_dw+0x57c>
 80091b8:	4566      	cmp	r6, ip
 80091ba:	eb04 030c 	add.w	r3, r4, ip
 80091be:	d00d      	beq.n	80091dc <st_sssa8_convolve_dw+0x5a8>
 80091c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80091c4:	f804 100c 	strb.w	r1, [r4, ip]
 80091c8:	f1b9 0f00 	cmp.w	r9, #0
 80091cc:	d006      	beq.n	80091dc <st_sssa8_convolve_dw+0x5a8>
 80091ce:	f1b9 0f01 	cmp.w	r9, #1
 80091d2:	7059      	strb	r1, [r3, #1]
 80091d4:	d002      	beq.n	80091dc <st_sssa8_convolve_dw+0x5a8>
 80091d6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80091da:	7099      	strb	r1, [r3, #2]
 80091dc:	45ae      	cmp	lr, r5
 80091de:	4430      	add	r0, r6
 80091e0:	d1c7      	bne.n	8009172 <st_sssa8_convolve_dw+0x53e>
 80091e2:	46d8      	mov	r8, fp
 80091e4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 80091e8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80091ea:	ee17 aa90 	vmov	sl, s15
 80091ee:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 80091f2:	e65a      	b.n	8008eaa <st_sssa8_convolve_dw+0x276>
 80091f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091f8:	f804 3b01 	strb.w	r3, [r4], #1
 80091fc:	4294      	cmp	r4, r2
 80091fe:	d0ed      	beq.n	80091dc <st_sssa8_convolve_dw+0x5a8>
 8009200:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009204:	f804 3b01 	strb.w	r3, [r4], #1
 8009208:	4294      	cmp	r4, r2
 800920a:	d1f3      	bne.n	80091f4 <st_sssa8_convolve_dw+0x5c0>
 800920c:	e7e6      	b.n	80091dc <st_sssa8_convolve_dw+0x5a8>
 800920e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8009210:	2a00      	cmp	r2, #0
 8009212:	d064      	beq.n	80092de <st_sssa8_convolve_dw+0x6aa>
 8009214:	3a01      	subs	r2, #1
 8009216:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009218:	9247      	str	r2, [sp, #284]	; 0x11c
 800921a:	2801      	cmp	r0, #1
 800921c:	f8bd 213c 	ldrh.w	r2, [sp, #316]	; 0x13c
 8009220:	f8ad 213e 	strh.w	r2, [sp, #318]	; 0x13e
 8009224:	f47f adff 	bne.w	8008e26 <st_sssa8_convolve_dw+0x1f2>
 8009228:	2a01      	cmp	r2, #1
 800922a:	d062      	beq.n	80092f2 <st_sssa8_convolve_dw+0x6be>
 800922c:	b29b      	uxth	r3, r3
 800922e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009230:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	; 0x60
 8009234:	931c      	str	r3, [sp, #112]	; 0x70
 8009236:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009238:	4293      	cmp	r3, r2
 800923a:	f77f ae47 	ble.w	8008ecc <st_sssa8_convolve_dw+0x298>
 800923e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009240:	4614      	mov	r4, r2
 8009242:	f8cd 8008 	str.w	r8, [sp, #8]
 8009246:	4610      	mov	r0, r2
 8009248:	46b8      	mov	r8, r7
 800924a:	9603      	str	r6, [sp, #12]
 800924c:	9f37      	ldr	r7, [sp, #220]	; 0xdc
 800924e:	4699      	mov	r9, r3
 8009250:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8009254:	f8dd b0b4 	ldr.w	fp, [sp, #180]	; 0xb4
 8009258:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800925a:	3401      	adds	r4, #1
 800925c:	fb00 500b 	mla	r0, r0, fp, r5
 8009260:	4641      	mov	r1, r8
 8009262:	463a      	mov	r2, r7
 8009264:	b224      	sxth	r4, r4
 8009266:	fb06 a000 	mla	r0, r6, r0, sl
 800926a:	f003 fed9 	bl	800d020 <arm_copy_q7>
 800926e:	44b8      	add	r8, r7
 8009270:	454c      	cmp	r4, r9
 8009272:	4620      	mov	r0, r4
 8009274:	dbf1      	blt.n	800925a <st_sssa8_convolve_dw+0x626>
 8009276:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009278:	e9dd 8602 	ldrd	r8, r6, [sp, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f47f ae29 	bne.w	8008ed4 <st_sssa8_convolve_dw+0x2a0>
 8009282:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009284:	2b00      	cmp	r3, #0
 8009286:	f43f aedd 	beq.w	8009044 <st_sssa8_convolve_dw+0x410>
 800928a:	2e01      	cmp	r6, #1
 800928c:	f040 81d8 	bne.w	8009640 <st_sssa8_convolve_dw+0xa0c>
 8009290:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 8009292:	f103 0c01 	add.w	ip, r3, #1
 8009296:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 8009298:	6819      	ldr	r1, [r3, #0]
 800929a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800929c:	b173      	cbz	r3, 80092bc <st_sssa8_convolve_dw+0x688>
 800929e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80092a2:	f9bd 7058 	ldrsh.w	r7, [sp, #88]	; 0x58
 80092a6:	18d5      	adds	r5, r2, r3
 80092a8:	9876      	ldr	r0, [sp, #472]	; 0x1d8
 80092aa:	f912 3b01 	ldrsb.w	r3, [r2], #1
 80092ae:	f830 4b02 	ldrh.w	r4, [r0], #2
 80092b2:	1bdb      	subs	r3, r3, r7
 80092b4:	4295      	cmp	r5, r2
 80092b6:	fb13 1104 	smlabb	r1, r3, r4, r1
 80092ba:	d1f6      	bne.n	80092aa <st_sssa8_convolve_dw+0x676>
 80092bc:	9b05      	ldr	r3, [sp, #20]
 80092be:	2b15      	cmp	r3, #21
 80092c0:	f340 8125 	ble.w	800950e <st_sssa8_convolve_dw+0x8da>
 80092c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80092c6:	9b08      	ldr	r3, [sp, #32]
 80092c8:	fb51 2303 	smmla	r3, r1, r3, r2
 80092cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80092ce:	4113      	asrs	r3, r2
 80092d0:	9a06      	ldr	r2, [sp, #24]
 80092d2:	4413      	add	r3, r2
 80092d4:	f303 0307 	ssat	r3, #8, r3
 80092d8:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80092dc:	e104      	b.n	80094e8 <st_sssa8_convolve_dw+0x8b4>
 80092de:	9a48      	ldr	r2, [sp, #288]	; 0x120
 80092e0:	3a01      	subs	r2, #1
 80092e2:	9248      	str	r2, [sp, #288]	; 0x120
 80092e4:	2201      	movs	r2, #1
 80092e6:	f8ad 213e 	strh.w	r2, [sp, #318]	; 0x13e
 80092ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80092ec:	2a01      	cmp	r2, #1
 80092ee:	f47f ad9a 	bne.w	8008e26 <st_sssa8_convolve_dw+0x1f2>
 80092f2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80092f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092f6:	4290      	cmp	r0, r2
 80092f8:	f340 8194 	ble.w	8009624 <st_sssa8_convolve_dw+0x9f0>
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	982b      	ldr	r0, [sp, #172]	; 0xac
 8009300:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8009302:	931c      	str	r3, [sp, #112]	; 0x70
 8009304:	fb01 0104 	mla	r1, r1, r4, r0
 8009308:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800930a:	1acd      	subs	r5, r1, r3
 800930c:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 8009310:	42ab      	cmp	r3, r5
 8009312:	9304      	str	r3, [sp, #16]
 8009314:	f6bf adda 	bge.w	8008ecc <st_sssa8_convolve_dw+0x298>
 8009318:	f8cd 801c 	str.w	r8, [sp, #28]
 800931c:	4693      	mov	fp, r2
 800931e:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8009322:	4613      	mov	r3, r2
 8009324:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8009326:	46b1      	mov	r9, r6
 8009328:	ee18 8a10 	vmov	r8, s16
 800932c:	ea4f 76db 	mov.w	r6, fp, lsr #31
 8009330:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009332:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009336:	429a      	cmp	r2, r3
 8009338:	bfd8      	it	le
 800933a:	f046 0601 	orrle.w	r6, r6, #1
 800933e:	fb07 f303 	mul.w	r3, r7, r3
 8009342:	4664      	mov	r4, ip
 8009344:	9303      	str	r3, [sp, #12]
 8009346:	9602      	str	r6, [sp, #8]
 8009348:	4567      	cmp	r7, ip
 800934a:	464a      	mov	r2, r9
 800934c:	4651      	mov	r1, sl
 800934e:	4640      	mov	r0, r8
 8009350:	bfcc      	ite	gt
 8009352:	2300      	movgt	r3, #0
 8009354:	2301      	movle	r3, #1
 8009356:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 800935a:	d103      	bne.n	8009364 <st_sssa8_convolve_dw+0x730>
 800935c:	9b02      	ldr	r3, [sp, #8]
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 80f3 	beq.w	800954a <st_sssa8_convolve_dw+0x916>
 8009364:	f001 fc58 	bl	800ac18 <st_uint8_fill>
 8009368:	3401      	adds	r4, #1
 800936a:	44ca      	add	sl, r9
 800936c:	b224      	sxth	r4, r4
 800936e:	42ac      	cmp	r4, r5
 8009370:	46a4      	mov	ip, r4
 8009372:	dbe9      	blt.n	8009348 <st_sssa8_convolve_dw+0x714>
 8009374:	f10b 0b01 	add.w	fp, fp, #1
 8009378:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800937a:	fa0f fb8b 	sxth.w	fp, fp
 800937e:	4593      	cmp	fp, r2
 8009380:	465b      	mov	r3, fp
 8009382:	dbd3      	blt.n	800932c <st_sssa8_convolve_dw+0x6f8>
 8009384:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8009388:	464e      	mov	r6, r9
 800938a:	e59f      	b.n	8008ecc <st_sssa8_convolve_dw+0x298>
 800938c:	4282      	cmp	r2, r0
 800938e:	f340 8149 	ble.w	8009624 <st_sssa8_convolve_dw+0x9f0>
 8009392:	b29b      	uxth	r3, r3
 8009394:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009396:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8009398:	931c      	str	r3, [sp, #112]	; 0x70
 800939a:	fb01 2100 	mla	r1, r1, r0, r2
 800939e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80093a0:	1acd      	subs	r5, r1, r3
 80093a2:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 80093a6:	42ab      	cmp	r3, r5
 80093a8:	9303      	str	r3, [sp, #12]
 80093aa:	f6bf ad8f 	bge.w	8008ecc <st_sssa8_convolve_dw+0x298>
 80093ae:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80093b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80093b6:	46b0      	mov	r8, r6
 80093b8:	46d1      	mov	r9, sl
 80093ba:	4653      	mov	r3, sl
 80093bc:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 80093c0:	ee18 aa10 	vmov	sl, s16
 80093c4:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 80093c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80093c8:	9903      	ldr	r1, [sp, #12]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	fb03 f307 	mul.w	r3, r3, r7
 80093d0:	460c      	mov	r4, r1
 80093d2:	bfcc      	ite	gt
 80093d4:	2600      	movgt	r6, #0
 80093d6:	2601      	movle	r6, #1
 80093d8:	9302      	str	r3, [sp, #8]
 80093da:	ea46 76d9 	orr.w	r6, r6, r9, lsr #31
 80093de:	0fe3      	lsrs	r3, r4, #31
 80093e0:	428f      	cmp	r7, r1
 80093e2:	bfd8      	it	le
 80093e4:	f043 0301 	orrle.w	r3, r3, #1
 80093e8:	b903      	cbnz	r3, 80093ec <st_sssa8_convolve_dw+0x7b8>
 80093ea:	b1b6      	cbz	r6, 800941a <st_sssa8_convolve_dw+0x7e6>
 80093ec:	4642      	mov	r2, r8
 80093ee:	4659      	mov	r1, fp
 80093f0:	4650      	mov	r0, sl
 80093f2:	f001 fc11 	bl	800ac18 <st_uint8_fill>
 80093f6:	3401      	adds	r4, #1
 80093f8:	44c3      	add	fp, r8
 80093fa:	b224      	sxth	r4, r4
 80093fc:	42ac      	cmp	r4, r5
 80093fe:	4621      	mov	r1, r4
 8009400:	dbed      	blt.n	80093de <st_sssa8_convolve_dw+0x7aa>
 8009402:	f109 0901 	add.w	r9, r9, #1
 8009406:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009408:	fa0f f989 	sxth.w	r9, r9
 800940c:	4591      	cmp	r9, r2
 800940e:	464b      	mov	r3, r9
 8009410:	dbd9      	blt.n	80093c6 <st_sssa8_convolve_dw+0x792>
 8009412:	4646      	mov	r6, r8
 8009414:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009418:	e558      	b.n	8008ecc <st_sssa8_convolve_dw+0x298>
 800941a:	9b02      	ldr	r3, [sp, #8]
 800941c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800941e:	440b      	add	r3, r1
 8009420:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8009422:	fb02 1303 	mla	r3, r2, r3, r1
 8009426:	2a00      	cmp	r2, #0
 8009428:	d0e5      	beq.n	80093f6 <st_sssa8_convolve_dw+0x7c2>
 800942a:	eb03 0c02 	add.w	ip, r3, r2
 800942e:	4658      	mov	r0, fp
 8009430:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009434:	4563      	cmp	r3, ip
 8009436:	ea4f 2201 	mov.w	r2, r1, lsl #8
 800943a:	fa32 f281 	uxtab16	r2, r2, r1
 800943e:	f820 2b02 	strh.w	r2, [r0], #2
 8009442:	d1f5      	bne.n	8009430 <st_sssa8_convolve_dw+0x7fc>
 8009444:	e7d7      	b.n	80093f6 <st_sssa8_convolve_dw+0x7c2>
 8009446:	e9dd 7e38 	ldrd	r7, lr, [sp, #224]	; 0xe0
 800944a:	eb03 0907 	add.w	r9, r3, r7
 800944e:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 8009450:	f8cd 8008 	str.w	r8, [sp, #8]
 8009454:	f103 0c01 	add.w	ip, r3, #1
 8009458:	9b05      	ldr	r3, [sp, #20]
 800945a:	fa1f f989 	uxth.w	r9, r9
 800945e:	f9bd b058 	ldrsh.w	fp, [sp, #88]	; 0x58
 8009462:	f1c3 0a01 	rsb	sl, r3, #1
 8009466:	4698      	mov	r8, r3
 8009468:	1c7b      	adds	r3, r7, #1
 800946a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800946c:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009470:	443a      	add	r2, r7
 8009472:	b29f      	uxth	r7, r3
 8009474:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009476:	2b00      	cmp	r3, #0
 8009478:	f000 80d7 	beq.w	800962a <st_sssa8_convolve_dw+0x9f6>
 800947c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800947e:	18ec      	adds	r4, r5, r3
 8009480:	f992 3000 	ldrsb.w	r3, [r2]
 8009484:	4432      	add	r2, r6
 8009486:	f835 0b02 	ldrh.w	r0, [r5], #2
 800948a:	eba3 030b 	sub.w	r3, r3, fp
 800948e:	42a5      	cmp	r5, r4
 8009490:	fb10 1103 	smlabb	r1, r0, r3, r1
 8009494:	d1f4      	bne.n	8009480 <st_sssa8_convolve_dw+0x84c>
 8009496:	f1b8 0f15 	cmp.w	r8, #21
 800949a:	dd11      	ble.n	80094c0 <st_sssa8_convolve_dw+0x88c>
 800949c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800949e:	9b08      	ldr	r3, [sp, #32]
 80094a0:	fb51 2303 	smmla	r3, r1, r3, r2
 80094a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80094a6:	4113      	asrs	r3, r2
 80094a8:	9a06      	ldr	r2, [sp, #24]
 80094aa:	4413      	add	r3, r2
 80094ac:	f303 0307 	ssat	r3, #8, r3
 80094b0:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80094b4:	454f      	cmp	r7, r9
 80094b6:	f10c 0c01 	add.w	ip, ip, #1
 80094ba:	d013      	beq.n	80094e4 <st_sssa8_convolve_dw+0x8b0>
 80094bc:	4625      	mov	r5, r4
 80094be:	e7d3      	b.n	8009468 <st_sssa8_convolve_dw+0x834>
 80094c0:	f1b8 0f00 	cmp.w	r8, #0
 80094c4:	dd15      	ble.n	80094f2 <st_sssa8_convolve_dw+0x8be>
 80094c6:	004b      	lsls	r3, r1, #1
 80094c8:	9a08      	ldr	r2, [sp, #32]
 80094ca:	9906      	ldr	r1, [sp, #24]
 80094cc:	fb53 1302 	smmla	r3, r3, r2, r1
 80094d0:	fa43 f308 	asr.w	r3, r3, r8
 80094d4:	f303 0307 	ssat	r3, #8, r3
 80094d8:	454f      	cmp	r7, r9
 80094da:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80094de:	f10c 0c01 	add.w	ip, ip, #1
 80094e2:	d1eb      	bne.n	80094bc <st_sssa8_convolve_dw+0x888>
 80094e4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80094e8:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 80094ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80094ec:	4413      	add	r3, r2
 80094ee:	9373      	str	r3, [sp, #460]	; 0x1cc
 80094f0:	e5a8      	b.n	8009044 <st_sssa8_convolve_dw+0x410>
 80094f2:	fa01 f30a 	lsl.w	r3, r1, sl
 80094f6:	f303 031f 	ssat	r3, #32, r3
 80094fa:	9a08      	ldr	r2, [sp, #32]
 80094fc:	fb53 f312 	smmulr	r3, r3, r2
 8009500:	9a06      	ldr	r2, [sp, #24]
 8009502:	4413      	add	r3, r2
 8009504:	f303 0307 	ssat	r3, #8, r3
 8009508:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800950c:	e7d2      	b.n	80094b4 <st_sssa8_convolve_dw+0x880>
 800950e:	2b00      	cmp	r3, #0
 8009510:	461a      	mov	r2, r3
 8009512:	dd0a      	ble.n	800952a <st_sssa8_convolve_dw+0x8f6>
 8009514:	004b      	lsls	r3, r1, #1
 8009516:	9806      	ldr	r0, [sp, #24]
 8009518:	9908      	ldr	r1, [sp, #32]
 800951a:	fb53 0301 	smmla	r3, r3, r1, r0
 800951e:	4113      	asrs	r3, r2
 8009520:	f303 0307 	ssat	r3, #8, r3
 8009524:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8009528:	e7de      	b.n	80094e8 <st_sssa8_convolve_dw+0x8b4>
 800952a:	f1c3 0301 	rsb	r3, r3, #1
 800952e:	fa01 f303 	lsl.w	r3, r1, r3
 8009532:	f303 031f 	ssat	r3, #32, r3
 8009536:	9a08      	ldr	r2, [sp, #32]
 8009538:	fb53 f312 	smmulr	r3, r3, r2
 800953c:	9a06      	ldr	r2, [sp, #24]
 800953e:	4413      	add	r3, r2
 8009540:	f303 0307 	ssat	r3, #8, r3
 8009544:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8009548:	e7ce      	b.n	80094e8 <st_sssa8_convolve_dw+0x8b4>
 800954a:	9b03      	ldr	r3, [sp, #12]
 800954c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800954e:	eb03 000c 	add.w	r0, r3, ip
 8009552:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009554:	fb02 3000 	mla	r0, r2, r0, r3
 8009558:	f003 fd62 	bl	800d020 <arm_copy_q7>
 800955c:	e704      	b.n	8009368 <st_sssa8_convolve_dw+0x734>
 800955e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009560:	9820      	ldr	r0, [sp, #128]	; 0x80
 8009562:	4282      	cmp	r2, r0
 8009564:	dd5e      	ble.n	8009624 <st_sssa8_convolve_dw+0x9f0>
 8009566:	b29b      	uxth	r3, r3
 8009568:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800956a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800956c:	931c      	str	r3, [sp, #112]	; 0x70
 800956e:	fb01 2100 	mla	r1, r1, r0, r2
 8009572:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8009574:	1acd      	subs	r5, r1, r3
 8009576:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 800957a:	42ab      	cmp	r3, r5
 800957c:	9303      	str	r3, [sp, #12]
 800957e:	f6bf aca5 	bge.w	8008ecc <st_sssa8_convolve_dw+0x298>
 8009582:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 8009586:	f8cd 8010 	str.w	r8, [sp, #16]
 800958a:	46b0      	mov	r8, r6
 800958c:	46cb      	mov	fp, r9
 800958e:	464b      	mov	r3, r9
 8009590:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8009594:	ee18 9a10 	vmov	r9, s16
 8009598:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 800959a:	ea4f 76db 	mov.w	r6, fp, lsr #31
 800959e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80095a0:	429a      	cmp	r2, r3
 80095a2:	bfd8      	it	le
 80095a4:	f046 0601 	orrle.w	r6, r6, #1
 80095a8:	fb03 f307 	mul.w	r3, r3, r7
 80095ac:	9302      	str	r3, [sp, #8]
 80095ae:	9b03      	ldr	r3, [sp, #12]
 80095b0:	461c      	mov	r4, r3
 80095b2:	429f      	cmp	r7, r3
 80095b4:	bfcc      	ite	gt
 80095b6:	2200      	movgt	r2, #0
 80095b8:	2201      	movle	r2, #1
 80095ba:	ea52 72d4 	orrs.w	r2, r2, r4, lsr #31
 80095be:	d100      	bne.n	80095c2 <st_sssa8_convolve_dw+0x98e>
 80095c0:	b1b6      	cbz	r6, 80095f0 <st_sssa8_convolve_dw+0x9bc>
 80095c2:	4642      	mov	r2, r8
 80095c4:	4651      	mov	r1, sl
 80095c6:	4648      	mov	r0, r9
 80095c8:	f001 fb26 	bl	800ac18 <st_uint8_fill>
 80095cc:	3401      	adds	r4, #1
 80095ce:	44c2      	add	sl, r8
 80095d0:	b224      	sxth	r4, r4
 80095d2:	42ac      	cmp	r4, r5
 80095d4:	4623      	mov	r3, r4
 80095d6:	dbec      	blt.n	80095b2 <st_sssa8_convolve_dw+0x97e>
 80095d8:	f10b 0b01 	add.w	fp, fp, #1
 80095dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80095de:	fa0f fb8b 	sxth.w	fp, fp
 80095e2:	4593      	cmp	fp, r2
 80095e4:	465b      	mov	r3, fp
 80095e6:	dbd8      	blt.n	800959a <st_sssa8_convolve_dw+0x966>
 80095e8:	4646      	mov	r6, r8
 80095ea:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80095ee:	e46d      	b.n	8008ecc <st_sssa8_convolve_dw+0x298>
 80095f0:	9a02      	ldr	r2, [sp, #8]
 80095f2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80095f4:	4413      	add	r3, r2
 80095f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095f8:	fb01 2203 	mla	r2, r1, r3, r2
 80095fc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d0e4      	beq.n	80095cc <st_sssa8_convolve_dw+0x998>
 8009602:	18d0      	adds	r0, r2, r3
 8009604:	4651      	mov	r1, sl
 8009606:	f812 3b01 	ldrb.w	r3, [r2], #1
 800960a:	4282      	cmp	r2, r0
 800960c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8009610:	eac3 4303 	pkhbt	r3, r3, r3, lsl #16
 8009614:	ea4f 2c33 	mov.w	ip, r3, ror #8
 8009618:	fa33 f38c 	uxtab16	r3, r3, ip
 800961c:	f841 3b04 	str.w	r3, [r1], #4
 8009620:	d1f1      	bne.n	8009606 <st_sssa8_convolve_dw+0x9d2>
 8009622:	e7d3      	b.n	80095cc <st_sssa8_convolve_dw+0x998>
 8009624:	b29b      	uxth	r3, r3
 8009626:	931c      	str	r3, [sp, #112]	; 0x70
 8009628:	e450      	b.n	8008ecc <st_sssa8_convolve_dw+0x298>
 800962a:	462c      	mov	r4, r5
 800962c:	e733      	b.n	8009496 <st_sssa8_convolve_dw+0x862>
 800962e:	2301      	movs	r3, #1
 8009630:	f7ff bb69 	b.w	8008d06 <st_sssa8_convolve_dw+0xd2>
 8009634:	9306      	str	r3, [sp, #24]
 8009636:	f7ff bb38 	b.w	8008caa <st_sssa8_convolve_dw+0x76>
 800963a:	b2a3      	uxth	r3, r4
 800963c:	9336      	str	r3, [sp, #216]	; 0xd8
 800963e:	e50e      	b.n	800905e <st_sssa8_convolve_dw+0x42a>
 8009640:	f8dd e1b8 	ldr.w	lr, [sp, #440]	; 0x1b8
 8009644:	9d76      	ldr	r5, [sp, #472]	; 0x1d8
 8009646:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009648:	e6ff      	b.n	800944a <st_sssa8_convolve_dw+0x816>
 800964a:	bf00      	nop

0800964c <st_sssa8_convolve_rank1upd>:
 800964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009650:	b085      	sub	sp, #20
 8009652:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8009656:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 800965a:	fb13 f304 	smulbb	r3, r3, r4
 800965e:	fb13 f500 	smulbb	r5, r3, r0
 8009662:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009664:	2a00      	cmp	r2, #0
 8009666:	d073      	beq.n	8009750 <st_sssa8_convolve_rank1upd+0x104>
 8009668:	b2ad      	uxth	r5, r5
 800966a:	460c      	mov	r4, r1
 800966c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8009670:	ea4f 0995 	mov.w	r9, r5, lsr #2
 8009674:	eb03 0a85 	add.w	sl, r3, r5, lsl #2
 8009678:	f005 0503 	and.w	r5, r5, #3
 800967c:	f1a9 0381 	sub.w	r3, r9, #129	; 0x81
 8009680:	eb08 0782 	add.w	r7, r8, r2, lsl #2
 8009684:	1e69      	subs	r1, r5, #1
 8009686:	f1a9 0280 	sub.w	r2, r9, #128	; 0x80
 800968a:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800968e:	b289      	uxth	r1, r1
 8009690:	9100      	str	r1, [sp, #0]
 8009692:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 8009696:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 800969a:	b292      	uxth	r2, r2
 800969c:	9202      	str	r2, [sp, #8]
 800969e:	025a      	lsls	r2, r3, #9
 80096a0:	3301      	adds	r3, #1
 80096a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096a6:	025b      	lsls	r3, r3, #9
 80096a8:	9203      	str	r2, [sp, #12]
 80096aa:	9301      	str	r3, [sp, #4]
 80096ac:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80096b0:	d953      	bls.n	800975a <st_sssa8_convolve_rank1upd+0x10e>
 80096b2:	9b03      	ldr	r3, [sp, #12]
 80096b4:	f504 7000 	add.w	r0, r4, #512	; 0x200
 80096b8:	2600      	movs	r6, #0
 80096ba:	eb04 0c03 	add.w	ip, r4, r3
 80096be:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 80096c2:	2200      	movs	r2, #0
 80096c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80096c8:	fa2f fe83 	sxtb16	lr, r3
 80096cc:	4281      	cmp	r1, r0
 80096ce:	ea4f 2333 	mov.w	r3, r3, ror #8
 80096d2:	fa92 f21e 	qadd16	r2, r2, lr
 80096d6:	fa2f f383 	sxtb16	r3, r3
 80096da:	fa92 f213 	qadd16	r2, r2, r3
 80096de:	d1f1      	bne.n	80096c4 <st_sssa8_convolve_rank1upd+0x78>
 80096e0:	f501 7000 	add.w	r0, r1, #512	; 0x200
 80096e4:	b213      	sxth	r3, r2
 80096e6:	4560      	cmp	r0, ip
 80096e8:	eb03 4222 	add.w	r2, r3, r2, asr #16
 80096ec:	4416      	add	r6, r2
 80096ee:	d1e6      	bne.n	80096be <st_sssa8_convolve_rank1upd+0x72>
 80096f0:	9b01      	ldr	r3, [sp, #4]
 80096f2:	18e1      	adds	r1, r4, r3
 80096f4:	9c02      	ldr	r4, [sp, #8]
 80096f6:	b374      	cbz	r4, 8009756 <st_sssa8_convolve_rank1upd+0x10a>
 80096f8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80096fc:	2200      	movs	r2, #0
 80096fe:	f851 3b04 	ldr.w	r3, [r1], #4
 8009702:	fa2f f083 	sxtb16	r0, r3
 8009706:	428c      	cmp	r4, r1
 8009708:	ea4f 2333 	mov.w	r3, r3, ror #8
 800970c:	fa92 f210 	qadd16	r2, r2, r0
 8009710:	fa2f f383 	sxtb16	r3, r3
 8009714:	fa92 f213 	qadd16	r2, r2, r3
 8009718:	d1f1      	bne.n	80096fe <st_sssa8_convolve_rank1upd+0xb2>
 800971a:	b213      	sxth	r3, r2
 800971c:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8009720:	441e      	add	r6, r3
 8009722:	b16d      	cbz	r5, 8009740 <st_sssa8_convolve_rank1upd+0xf4>
 8009724:	f994 3000 	ldrsb.w	r3, [r4]
 8009728:	441e      	add	r6, r3
 800972a:	9b00      	ldr	r3, [sp, #0]
 800972c:	b13b      	cbz	r3, 800973e <st_sssa8_convolve_rank1upd+0xf2>
 800972e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8009732:	2d02      	cmp	r5, #2
 8009734:	441e      	add	r6, r3
 8009736:	d002      	beq.n	800973e <st_sssa8_convolve_rank1upd+0xf2>
 8009738:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800973c:	441e      	add	r6, r3
 800973e:	442c      	add	r4, r5
 8009740:	f858 3b04 	ldr.w	r3, [r8], #4
 8009744:	fb0b 3616 	mls	r6, fp, r6, r3
 8009748:	45b8      	cmp	r8, r7
 800974a:	f84a 6b04 	str.w	r6, [sl], #4
 800974e:	d1ad      	bne.n	80096ac <st_sssa8_convolve_rank1upd+0x60>
 8009750:	b005      	add	sp, #20
 8009752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009756:	460c      	mov	r4, r1
 8009758:	e7e3      	b.n	8009722 <st_sssa8_convolve_rank1upd+0xd6>
 800975a:	4621      	mov	r1, r4
 800975c:	2600      	movs	r6, #0
 800975e:	464c      	mov	r4, r9
 8009760:	e7c9      	b.n	80096f6 <st_sssa8_convolve_rank1upd+0xaa>
 8009762:	bf00      	nop

08009764 <st_sssa8_convolve>:
 8009764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009768:	ed2d 8b06 	vpush	{d8-d10}
 800976c:	b0cb      	sub	sp, #300	; 0x12c
 800976e:	469a      	mov	sl, r3
 8009770:	4689      	mov	r9, r1
 8009772:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8009774:	900a      	str	r0, [sp, #40]	; 0x28
 8009776:	9207      	str	r2, [sp, #28]
 8009778:	f8bd 0174 	ldrh.w	r0, [sp, #372]	; 0x174
 800977c:	f8bd 2170 	ldrh.w	r2, [sp, #368]	; 0x170
 8009780:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009784:	fb12 f300 	smulbb	r3, r2, r0
 8009788:	901e      	str	r0, [sp, #120]	; 0x78
 800978a:	f8bd 41a0 	ldrh.w	r4, [sp, #416]	; 0x1a0
 800978e:	fb13 f30a 	smulbb	r3, r3, sl
 8009792:	9214      	str	r2, [sp, #80]	; 0x50
 8009794:	940f      	str	r4, [sp, #60]	; 0x3c
 8009796:	1e4a      	subs	r2, r1, #1
 8009798:	b298      	uxth	r0, r3
 800979a:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800979c:	f8bd 41a4 	ldrh.w	r4, [sp, #420]	; 0x1a4
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	921c      	str	r2, [sp, #112]	; 0x70
 80097a4:	b292      	uxth	r2, r2
 80097a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80097a8:	f8bd 316c 	ldrh.w	r3, [sp, #364]	; 0x16c
 80097ac:	2a14      	cmp	r2, #20
 80097ae:	941d      	str	r4, [sp, #116]	; 0x74
 80097b0:	ee09 3a10 	vmov	s18, r3
 80097b4:	f8bd 3178 	ldrh.w	r3, [sp, #376]	; 0x178
 80097b8:	9c6a      	ldr	r4, [sp, #424]	; 0x1a8
 80097ba:	9312      	str	r3, [sp, #72]	; 0x48
 80097bc:	f8bd 317c 	ldrh.w	r3, [sp, #380]	; 0x17c
 80097c0:	9015      	str	r0, [sp, #84]	; 0x54
 80097c2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80097c6:	931f      	str	r3, [sp, #124]	; 0x7c
 80097c8:	f8bd 3180 	ldrh.w	r3, [sp, #384]	; 0x180
 80097cc:	ee0a 0a10 	vmov	s20, r0
 80097d0:	f99d 8194 	ldrsb.w	r8, [sp, #404]	; 0x194
 80097d4:	930d      	str	r3, [sp, #52]	; 0x34
 80097d6:	f8bd 3184 	ldrh.w	r3, [sp, #388]	; 0x184
 80097da:	9118      	str	r1, [sp, #96]	; 0x60
 80097dc:	931b      	str	r3, [sp, #108]	; 0x6c
 80097de:	f99d 3198 	ldrsb.w	r3, [sp, #408]	; 0x198
 80097e2:	f200 8163 	bhi.w	8009aac <st_sssa8_convolve+0x348>
 80097e6:	2201      	movs	r2, #1
 80097e8:	408b      	lsls	r3, r1
 80097ea:	408a      	lsls	r2, r1
 80097ec:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80097f0:	9316      	str	r3, [sp, #88]	; 0x58
 80097f2:	9b07      	ldr	r3, [sp, #28]
 80097f4:	a940      	add	r1, sp, #256	; 0x100
 80097f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097f8:	a836      	add	r0, sp, #216	; 0xd8
 80097fa:	932b      	str	r3, [sp, #172]	; 0xac
 80097fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097fe:	fb0a f502 	mul.w	r5, sl, r2
 8009802:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009804:	9330      	str	r3, [sp, #192]	; 0xc0
 8009806:	ee08 5a90 	vmov	s17, r5
 800980a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800980c:	9234      	str	r2, [sp, #208]	; 0xd0
 800980e:	aa2a      	add	r2, sp, #168	; 0xa8
 8009810:	932f      	str	r3, [sp, #188]	; 0xbc
 8009812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009814:	f8cd 90b0 	str.w	r9, [sp, #176]	; 0xb0
 8009818:	9342      	str	r3, [sp, #264]	; 0x108
 800981a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800981c:	9433      	str	r4, [sp, #204]	; 0xcc
 800981e:	9343      	str	r3, [sp, #268]	; 0x10c
 8009820:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009822:	9344      	str	r3, [sp, #272]	; 0x110
 8009824:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009826:	9345      	str	r3, [sp, #276]	; 0x114
 8009828:	ab32      	add	r3, sp, #200	; 0xc8
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	ab2e      	add	r3, sp, #184	; 0xb8
 800982e:	f001 f97f 	bl	800ab30 <ai_padding_opt_init>
 8009832:	ee19 2a10 	vmov	r2, s18
 8009836:	996a      	ldr	r1, [sp, #424]	; 0x1a8
 8009838:	fb05 2304 	mla	r3, r5, r4, r2
 800983c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009840:	ee09 3a90 	vmov	s19, r3
 8009844:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009846:	fb02 f303 	mul.w	r3, r2, r3
 800984a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800984e:	f340 82e8 	ble.w	8009e22 <st_sssa8_convolve+0x6be>
 8009852:	2300      	movs	r3, #0
 8009854:	9325      	str	r3, [sp, #148]	; 0x94
 8009856:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009858:	ee19 1a10 	vmov	r1, s18
 800985c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800985e:	fb02 f303 	mul.w	r3, r2, r3
 8009862:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 8009864:	fb01 2303 	mla	r3, r1, r3, r2
 8009868:	990a      	ldr	r1, [sp, #40]	; 0x28
 800986a:	4299      	cmp	r1, r3
 800986c:	f080 8120 	bcs.w	8009ab0 <st_sssa8_convolve+0x34c>
 8009870:	9b07      	ldr	r3, [sp, #28]
 8009872:	fb03 f209 	mul.w	r2, r3, r9
 8009876:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8009878:	fb0a 1202 	mla	r2, sl, r2, r1
 800987c:	4293      	cmp	r3, r2
 800987e:	bf2c      	ite	cs
 8009880:	2200      	movcs	r2, #0
 8009882:	2201      	movcc	r2, #1
 8009884:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009886:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800988a:	fbb3 f3f1 	udiv	r3, r3, r1
 800988e:	ee19 1a10 	vmov	r1, s18
 8009892:	f023 0301 	bic.w	r3, r3, #1
 8009896:	428b      	cmp	r3, r1
 8009898:	bf28      	it	cs
 800989a:	460b      	movcs	r3, r1
 800989c:	2b01      	cmp	r3, #1
 800989e:	931a      	str	r3, [sp, #104]	; 0x68
 80098a0:	f240 8119 	bls.w	8009ad6 <st_sssa8_convolve+0x372>
 80098a4:	4618      	mov	r0, r3
 80098a6:	ee19 3a10 	vmov	r3, s18
 80098aa:	fbb1 f1f0 	udiv	r1, r1, r0
 80098ae:	fb00 3311 	mls	r3, r0, r1, r3
 80098b2:	b289      	uxth	r1, r1
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	9120      	str	r1, [sp, #128]	; 0x80
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f000 80fb 	beq.w	8009ab4 <st_sssa8_convolve+0x350>
 80098be:	2a00      	cmp	r2, #0
 80098c0:	f040 834e 	bne.w	8009f60 <st_sssa8_convolve+0x7fc>
 80098c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80098c6:	fa0f f888 	sxth.w	r8, r8
 80098ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80098cc:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 80098d0:	fb03 f30a 	mul.w	r3, r3, sl
 80098d4:	ee0a 8a90 	vmov	s21, r8
 80098d8:	ed8d 9a22 	vstr	s18, [sp, #136]	; 0x88
 80098dc:	46d0      	mov	r8, sl
 80098de:	fb02 f303 	mul.w	r3, r2, r3
 80098e2:	9a6a      	ldr	r2, [sp, #424]	; 0x1a8
 80098e4:	46da      	mov	sl, fp
 80098e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80098ea:	9311      	str	r3, [sp, #68]	; 0x44
 80098ec:	ee18 3a90 	vmov	r3, s17
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80098f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 80d0 	beq.w	8009a9c <st_sssa8_convolve+0x338>
 80098fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 80a9 	beq.w	8009a56 <st_sssa8_convolve+0x2f2>
 8009904:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009906:	2400      	movs	r4, #0
 8009908:	9f6a      	ldr	r7, [sp, #424]	; 0x1a8
 800990a:	425b      	negs	r3, r3
 800990c:	4625      	mov	r5, r4
 800990e:	46bb      	mov	fp, r7
 8009910:	ee1a 7a90 	vmov	r7, s21
 8009914:	b29b      	uxth	r3, r3
 8009916:	931c      	str	r3, [sp, #112]	; 0x70
 8009918:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800991a:	9319      	str	r3, [sp, #100]	; 0x64
 800991c:	a836      	add	r0, sp, #216	; 0xd8
 800991e:	f001 f961 	bl	800abe4 <ai_padding_opt_phase1>
 8009922:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 8303 	beq.w	8009f30 <st_sssa8_convolve+0x7cc>
 800992a:	b2a3      	uxth	r3, r4
 800992c:	2000      	movs	r0, #0
 800992e:	9321      	str	r3, [sp, #132]	; 0x84
 8009930:	4601      	mov	r1, r0
 8009932:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8009936:	1a9a      	subs	r2, r3, r2
 8009938:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800993a:	fb03 2305 	mla	r3, r3, r5, r2
 800993e:	9309      	str	r3, [sp, #36]	; 0x24
 8009940:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009942:	425a      	negs	r2, r3
 8009944:	b293      	uxth	r3, r2
 8009946:	930c      	str	r3, [sp, #48]	; 0x30
 8009948:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800994c:	9310      	str	r3, [sp, #64]	; 0x40
 800994e:	465b      	mov	r3, fp
 8009950:	46d3      	mov	fp, sl
 8009952:	469a      	mov	sl, r3
 8009954:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8009956:	2a00      	cmp	r2, #0
 8009958:	f000 8277 	beq.w	8009e4a <st_sssa8_convolve+0x6e6>
 800995c:	3a01      	subs	r2, #1
 800995e:	9236      	str	r2, [sp, #216]	; 0xd8
 8009960:	2201      	movs	r2, #1
 8009962:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 8009966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800996a:	4293      	cmp	r3, r2
 800996c:	f280 827b 	bge.w	8009e66 <st_sssa8_convolve+0x702>
 8009970:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009972:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009974:	fb01 3102 	mla	r1, r1, r2, r3
 8009978:	b283      	uxth	r3, r0
 800997a:	930e      	str	r3, [sp, #56]	; 0x38
 800997c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800997e:	1acd      	subs	r5, r1, r3
 8009980:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8009984:	930b      	str	r3, [sp, #44]	; 0x2c
 8009986:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009988:	461a      	mov	r2, r3
 800998a:	9306      	str	r3, [sp, #24]
 800998c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800998e:	42ab      	cmp	r3, r5
 8009990:	da21      	bge.n	80099d6 <st_sssa8_convolve+0x272>
 8009992:	9907      	ldr	r1, [sp, #28]
 8009994:	461c      	mov	r4, r3
 8009996:	469c      	mov	ip, r3
 8009998:	4291      	cmp	r1, r2
 800999a:	fb09 f202 	mul.w	r2, r9, r2
 800999e:	bfcc      	ite	gt
 80099a0:	2600      	movgt	r6, #0
 80099a2:	2601      	movle	r6, #1
 80099a4:	9208      	str	r2, [sp, #32]
 80099a6:	9a06      	ldr	r2, [sp, #24]
 80099a8:	ea46 76d2 	orr.w	r6, r6, r2, lsr #31
 80099ac:	45e1      	cmp	r9, ip
 80099ae:	4642      	mov	r2, r8
 80099b0:	4651      	mov	r1, sl
 80099b2:	4638      	mov	r0, r7
 80099b4:	bfcc      	ite	gt
 80099b6:	2300      	movgt	r3, #0
 80099b8:	2301      	movle	r3, #1
 80099ba:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 80099be:	d102      	bne.n	80099c6 <st_sssa8_convolve+0x262>
 80099c0:	2e00      	cmp	r6, #0
 80099c2:	f000 8239 	beq.w	8009e38 <st_sssa8_convolve+0x6d4>
 80099c6:	f003 fb7b 	bl	800d0c0 <arm_fill_q15>
 80099ca:	3401      	adds	r4, #1
 80099cc:	44da      	add	sl, fp
 80099ce:	b224      	sxth	r4, r4
 80099d0:	42ac      	cmp	r4, r5
 80099d2:	46a4      	mov	ip, r4
 80099d4:	dbea      	blt.n	80099ac <st_sssa8_convolve+0x248>
 80099d6:	9b06      	ldr	r3, [sp, #24]
 80099d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099da:	3301      	adds	r3, #1
 80099dc:	b21b      	sxth	r3, r3
 80099de:	428b      	cmp	r3, r1
 80099e0:	461a      	mov	r2, r3
 80099e2:	9306      	str	r3, [sp, #24]
 80099e4:	dbd2      	blt.n	800998c <st_sssa8_convolve+0x228>
 80099e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099e8:	4553      	cmp	r3, sl
 80099ea:	f000 8242 	beq.w	8009e72 <st_sssa8_convolve+0x70e>
 80099ee:	980e      	ldr	r0, [sp, #56]	; 0x38
 80099f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80099f4:	3001      	adds	r0, #1
 80099f6:	441a      	add	r2, r3
 80099f8:	b200      	sxth	r0, r0
 80099fa:	b293      	uxth	r3, r2
 80099fc:	4601      	mov	r1, r0
 80099fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009a00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a02:	4283      	cmp	r3, r0
 8009a04:	dca6      	bgt.n	8009954 <st_sssa8_convolve+0x1f0>
 8009a06:	4653      	mov	r3, sl
 8009a08:	46da      	mov	sl, fp
 8009a0a:	469b      	mov	fp, r3
 8009a0c:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8009a0e:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 8009a12:	3401      	adds	r4, #1
 8009a14:	441a      	add	r2, r3
 8009a16:	b224      	sxth	r4, r4
 8009a18:	b293      	uxth	r3, r2
 8009a1a:	4625      	mov	r5, r4
 8009a1c:	931c      	str	r3, [sp, #112]	; 0x70
 8009a1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a20:	42a3      	cmp	r3, r4
 8009a22:	f73f af7b 	bgt.w	800991c <st_sssa8_convolve+0x1b8>
 8009a26:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 8009a28:	455b      	cmp	r3, fp
 8009a2a:	d014      	beq.n	8009a56 <st_sssa8_convolve+0x2f2>
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a30:	ee1a 2a10 	vmov	r2, s20
 8009a34:	ee19 0a90 	vmov	r0, s19
 8009a38:	9305      	str	r3, [sp, #20]
 8009a3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009a3c:	9304      	str	r3, [sp, #16]
 8009a3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a40:	9303      	str	r3, [sp, #12]
 8009a42:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009a44:	9302      	str	r3, [sp, #8]
 8009a46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a48:	9301      	str	r3, [sp, #4]
 8009a4a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	ee19 3a10 	vmov	r3, s18
 8009a52:	f002 fe7b 	bl	800c74c <st_sssa8_nn_mat_mult_kernel_single_opt>
 8009a56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009a58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a5a:	1a9b      	subs	r3, r3, r2
 8009a5c:	b299      	uxth	r1, r3
 8009a5e:	4613      	mov	r3, r2
 8009a60:	428a      	cmp	r2, r1
 8009a62:	9122      	str	r1, [sp, #136]	; 0x88
 8009a64:	bf28      	it	cs
 8009a66:	460b      	movcs	r3, r1
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	b16b      	cbz	r3, 8009a88 <st_sssa8_convolve+0x324>
 8009a6c:	995a      	ldr	r1, [sp, #360]	; 0x168
 8009a6e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009a70:	fb00 1102 	mla	r1, r0, r2, r1
 8009a74:	915a      	str	r1, [sp, #360]	; 0x168
 8009a76:	ee1a 1a10 	vmov	r1, s20
 8009a7a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009a7e:	ee0a 1a10 	vmov	s20, r1
 8009a82:	9967      	ldr	r1, [sp, #412]	; 0x19c
 8009a84:	4411      	add	r1, r2
 8009a86:	9167      	str	r1, [sp, #412]	; 0x19c
 8009a88:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009a8a:	1e4a      	subs	r2, r1, #1
 8009a8c:	b292      	uxth	r2, r2
 8009a8e:	b1e1      	cbz	r1, 8009aca <st_sssa8_convolve+0x366>
 8009a90:	931a      	str	r3, [sp, #104]	; 0x68
 8009a92:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009a94:	9220      	str	r2, [sp, #128]	; 0x80
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f47f af30 	bne.w	80098fc <st_sssa8_convolve+0x198>
 8009a9c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009a9e:	ee19 1a90 	vmov	r1, s19
 8009aa2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009aa4:	985a      	ldr	r0, [sp, #360]	; 0x168
 8009aa6:	f001 f973 	bl	800ad90 <st_int8_to16_dual>
 8009aaa:	e727      	b.n	80098fc <st_sssa8_convolve+0x198>
 8009aac:	9316      	str	r3, [sp, #88]	; 0x58
 8009aae:	e6a0      	b.n	80097f2 <st_sssa8_convolve+0x8e>
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	e6e7      	b.n	8009884 <st_sssa8_convolve+0x120>
 8009ab4:	2a00      	cmp	r2, #0
 8009ab6:	f040 8257 	bne.w	8009f68 <st_sssa8_convolve+0x804>
 8009aba:	1e4b      	subs	r3, r1, #1
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	9320      	str	r3, [sp, #128]	; 0x80
 8009ac0:	ee19 3a10 	vmov	r3, s18
 8009ac4:	4283      	cmp	r3, r0
 8009ac6:	f4bf aefd 	bcs.w	80098c4 <st_sssa8_convolve+0x160>
 8009aca:	2000      	movs	r0, #0
 8009acc:	b04b      	add	sp, #300	; 0x12c
 8009ace:	ecbd 8b06 	vpop	{d8-d10}
 8009ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d0f6      	beq.n	8009aca <st_sssa8_convolve+0x366>
 8009adc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ade:	fa0f f888 	sxth.w	r8, r8
 8009ae2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ae4:	2400      	movs	r4, #0
 8009ae6:	fb03 f30a 	mul.w	r3, r3, sl
 8009aea:	4647      	mov	r7, r8
 8009aec:	4625      	mov	r5, r4
 8009aee:	46c8      	mov	r8, r9
 8009af0:	fb02 f303 	mul.w	r3, r2, r3
 8009af4:	9a6a      	ldr	r2, [sp, #424]	; 0x1a8
 8009af6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009afa:	4693      	mov	fp, r2
 8009afc:	9310      	str	r3, [sp, #64]	; 0x40
 8009afe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b00:	425b      	negs	r3, r3
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	9319      	str	r3, [sp, #100]	; 0x64
 8009b06:	ee18 3a90 	vmov	r3, s17
 8009b0a:	005b      	lsls	r3, r3, #1
 8009b0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009b0e:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8009b12:	4699      	mov	r9, r3
 8009b14:	a836      	add	r0, sp, #216	; 0xd8
 8009b16:	f001 f865 	bl	800abe4 <ai_padding_opt_phase1>
 8009b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 820e 	beq.w	8009f3e <st_sssa8_convolve+0x7da>
 8009b22:	b2a3      	uxth	r3, r4
 8009b24:	2000      	movs	r0, #0
 8009b26:	931a      	str	r3, [sp, #104]	; 0x68
 8009b28:	4601      	mov	r1, r0
 8009b2a:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8009b2e:	1a9a      	subs	r2, r3, r2
 8009b30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b32:	fb05 2303 	mla	r3, r5, r3, r2
 8009b36:	9309      	str	r3, [sp, #36]	; 0x24
 8009b38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b3a:	425a      	negs	r2, r3
 8009b3c:	b293      	uxth	r3, r2
 8009b3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b40:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8009b44:	9311      	str	r3, [sp, #68]	; 0x44
 8009b46:	465b      	mov	r3, fp
 8009b48:	46cb      	mov	fp, r9
 8009b4a:	4699      	mov	r9, r3
 8009b4c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8009b4e:	2a00      	cmp	r2, #0
 8009b50:	f000 80fb 	beq.w	8009d4a <st_sssa8_convolve+0x5e6>
 8009b54:	3a01      	subs	r2, #1
 8009b56:	9236      	str	r2, [sp, #216]	; 0xd8
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 8009b5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b62:	4293      	cmp	r3, r2
 8009b64:	f280 80ff 	bge.w	8009d66 <st_sssa8_convolve+0x602>
 8009b68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b6c:	fb01 3102 	mla	r1, r1, r2, r3
 8009b70:	b283      	uxth	r3, r0
 8009b72:	930e      	str	r3, [sp, #56]	; 0x38
 8009b74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b76:	1acd      	subs	r5, r1, r3
 8009b78:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8009b7c:	930c      	str	r3, [sp, #48]	; 0x30
 8009b7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b80:	461a      	mov	r2, r3
 8009b82:	9306      	str	r3, [sp, #24]
 8009b84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b86:	42ab      	cmp	r3, r5
 8009b88:	da20      	bge.n	8009bcc <st_sssa8_convolve+0x468>
 8009b8a:	9907      	ldr	r1, [sp, #28]
 8009b8c:	461c      	mov	r4, r3
 8009b8e:	469e      	mov	lr, r3
 8009b90:	4291      	cmp	r1, r2
 8009b92:	fb02 f208 	mul.w	r2, r2, r8
 8009b96:	bfcc      	ite	gt
 8009b98:	2600      	movgt	r6, #0
 8009b9a:	2601      	movle	r6, #1
 8009b9c:	9208      	str	r2, [sp, #32]
 8009b9e:	9a06      	ldr	r2, [sp, #24]
 8009ba0:	ea46 76d2 	orr.w	r6, r6, r2, lsr #31
 8009ba4:	0fe3      	lsrs	r3, r4, #31
 8009ba6:	4652      	mov	r2, sl
 8009ba8:	4649      	mov	r1, r9
 8009baa:	4638      	mov	r0, r7
 8009bac:	45f0      	cmp	r8, lr
 8009bae:	bfd8      	it	le
 8009bb0:	f043 0301 	orrle.w	r3, r3, #1
 8009bb4:	b913      	cbnz	r3, 8009bbc <st_sssa8_convolve+0x458>
 8009bb6:	2e00      	cmp	r6, #0
 8009bb8:	f000 80be 	beq.w	8009d38 <st_sssa8_convolve+0x5d4>
 8009bbc:	f003 fa80 	bl	800d0c0 <arm_fill_q15>
 8009bc0:	3401      	adds	r4, #1
 8009bc2:	44d9      	add	r9, fp
 8009bc4:	b224      	sxth	r4, r4
 8009bc6:	42ac      	cmp	r4, r5
 8009bc8:	46a6      	mov	lr, r4
 8009bca:	dbeb      	blt.n	8009ba4 <st_sssa8_convolve+0x440>
 8009bcc:	9b06      	ldr	r3, [sp, #24]
 8009bce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	b21b      	sxth	r3, r3
 8009bd4:	428b      	cmp	r3, r1
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	9306      	str	r3, [sp, #24]
 8009bda:	dbd3      	blt.n	8009b84 <st_sssa8_convolve+0x420>
 8009bdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bde:	454b      	cmp	r3, r9
 8009be0:	f000 80c7 	beq.w	8009d72 <st_sssa8_convolve+0x60e>
 8009be4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009be8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009bea:	441a      	add	r2, r3
 8009bec:	3001      	adds	r0, #1
 8009bee:	b293      	uxth	r3, r2
 8009bf0:	b200      	sxth	r0, r0
 8009bf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bf6:	4601      	mov	r1, r0
 8009bf8:	4283      	cmp	r3, r0
 8009bfa:	dca7      	bgt.n	8009b4c <st_sssa8_convolve+0x3e8>
 8009bfc:	464b      	mov	r3, r9
 8009bfe:	46d9      	mov	r9, fp
 8009c00:	469b      	mov	fp, r3
 8009c02:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c06:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009c08:	441a      	add	r2, r3
 8009c0a:	3401      	adds	r4, #1
 8009c0c:	b293      	uxth	r3, r2
 8009c0e:	b224      	sxth	r4, r4
 8009c10:	9319      	str	r3, [sp, #100]	; 0x64
 8009c12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c14:	4625      	mov	r5, r4
 8009c16:	42a3      	cmp	r3, r4
 8009c18:	f73f af7c 	bgt.w	8009b14 <st_sssa8_convolve+0x3b0>
 8009c1c:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 8009c1e:	455b      	cmp	r3, fp
 8009c20:	f43f af53 	beq.w	8009aca <st_sssa8_convolve+0x366>
 8009c24:	ee19 3a10 	vmov	r3, s18
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f43f af4e 	beq.w	8009aca <st_sssa8_convolve+0x366>
 8009c2e:	f103 0901 	add.w	r9, r3, #1
 8009c32:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8009c34:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009c36:	ee1a ea10 	vmov	lr, s20
 8009c3a:	4499      	add	r9, r3
 8009c3c:	1c5e      	adds	r6, r3, #1
 8009c3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c40:	f1a2 0a02 	sub.w	sl, r2, #2
 8009c44:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8009c48:	f003 0103 	and.w	r1, r3, #3
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	f101 3bff 	add.w	fp, r1, #4294967295
 8009c52:	fa03 fa0a 	lsl.w	sl, r3, sl
 8009c56:	f108 33ff 	add.w	r3, r8, #4294967295
 8009c5a:	fa1f fb8b 	uxth.w	fp, fp
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	3301      	adds	r3, #1
 8009c62:	0098      	lsls	r0, r3, #2
 8009c64:	9007      	str	r0, [sp, #28]
 8009c66:	986a      	ldr	r0, [sp, #424]	; 0x1a8
 8009c68:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8009c6c:	985a      	ldr	r0, [sp, #360]	; 0x168
 8009c6e:	9306      	str	r3, [sp, #24]
 8009c70:	f1c2 0301 	rsb	r3, r2, #1
 8009c74:	e9cd 3808 	strd	r3, r8, [sp, #32]
 8009c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c7a:	f85e 3b04 	ldr.w	r3, [lr], #4
 8009c7e:	2a00      	cmp	r2, #0
 8009c80:	d044      	beq.n	8009d0c <st_sssa8_convolve+0x5a8>
 8009c82:	9a07      	ldr	r2, [sp, #28]
 8009c84:	9c6a      	ldr	r4, [sp, #424]	; 0x1a8
 8009c86:	1885      	adds	r5, r0, r2
 8009c88:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c8c:	fa2f f792 	sxtb16	r7, r2, ror #8
 8009c90:	fa2f f282 	sxtb16	r2, r2
 8009c94:	f8d4 8000 	ldr.w	r8, [r4]
 8009c98:	eac7 4c22 	pkhtb	ip, r7, r2, asr #16
 8009c9c:	eac2 4207 	pkhbt	r2, r2, r7, lsl #16
 8009ca0:	fb22 3308 	smlad	r3, r2, r8, r3
 8009ca4:	6862      	ldr	r2, [r4, #4]
 8009ca6:	3408      	adds	r4, #8
 8009ca8:	fb2c 3302 	smlad	r3, ip, r2, r3
 8009cac:	42a8      	cmp	r0, r5
 8009cae:	d1eb      	bne.n	8009c88 <st_sssa8_convolve+0x524>
 8009cb0:	9a06      	ldr	r2, [sp, #24]
 8009cb2:	b379      	cbz	r1, 8009d14 <st_sssa8_convolve+0x5b0>
 8009cb4:	f995 0000 	ldrsb.w	r0, [r5]
 8009cb8:	8814      	ldrh	r4, [r2, #0]
 8009cba:	fb14 3300 	smlabb	r3, r4, r0, r3
 8009cbe:	f1bb 0f00 	cmp.w	fp, #0
 8009cc2:	d00b      	beq.n	8009cdc <st_sssa8_convolve+0x578>
 8009cc4:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8009cc8:	2902      	cmp	r1, #2
 8009cca:	8854      	ldrh	r4, [r2, #2]
 8009ccc:	fb14 3300 	smlabb	r3, r4, r0, r3
 8009cd0:	d004      	beq.n	8009cdc <st_sssa8_convolve+0x578>
 8009cd2:	8890      	ldrh	r0, [r2, #4]
 8009cd4:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8009cd8:	fb10 3302 	smlabb	r3, r0, r2, r3
 8009cdc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009cde:	1868      	adds	r0, r5, r1
 8009ce0:	2a15      	cmp	r2, #21
 8009ce2:	dd1b      	ble.n	8009d1c <st_sssa8_convolve+0x5b8>
 8009ce4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ce6:	fb53 a302 	smmla	r3, r3, r2, sl
 8009cea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009cec:	4113      	asrs	r3, r2
 8009cee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f303 0307 	ssat	r3, #8, r3
 8009cf6:	f806 3c01 	strb.w	r3, [r6, #-1]
 8009cfa:	3601      	adds	r6, #1
 8009cfc:	45b1      	cmp	r9, r6
 8009cfe:	f43f aee4 	beq.w	8009aca <st_sssa8_convolve+0x366>
 8009d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d04:	f85e 3b04 	ldr.w	r3, [lr], #4
 8009d08:	2a00      	cmp	r2, #0
 8009d0a:	d1ba      	bne.n	8009c82 <st_sssa8_convolve+0x51e>
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	9a6a      	ldr	r2, [sp, #424]	; 0x1a8
 8009d10:	2900      	cmp	r1, #0
 8009d12:	d1cf      	bne.n	8009cb4 <st_sssa8_convolve+0x550>
 8009d14:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009d16:	4628      	mov	r0, r5
 8009d18:	2a15      	cmp	r2, #21
 8009d1a:	dce3      	bgt.n	8009ce4 <st_sssa8_convolve+0x580>
 8009d1c:	2a00      	cmp	r2, #0
 8009d1e:	f340 8111 	ble.w	8009f44 <st_sssa8_convolve+0x7e0>
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	e9dd 5416 	ldrd	r5, r4, [sp, #88]	; 0x58
 8009d28:	fb53 5304 	smmla	r3, r3, r4, r5
 8009d2c:	4113      	asrs	r3, r2
 8009d2e:	f303 0307 	ssat	r3, #8, r3
 8009d32:	f806 3c01 	strb.w	r3, [r6, #-1]
 8009d36:	e7e0      	b.n	8009cfa <st_sssa8_convolve+0x596>
 8009d38:	9b08      	ldr	r3, [sp, #32]
 8009d3a:	eb03 000e 	add.w	r0, r3, lr
 8009d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d40:	fb0a 3000 	mla	r0, sl, r0, r3
 8009d44:	f000 ffc2 	bl	800accc <st_int8_to16_no_shift>
 8009d48:	e73a      	b.n	8009bc0 <st_sssa8_convolve+0x45c>
 8009d4a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8009d4c:	2a00      	cmp	r2, #0
 8009d4e:	d133      	bne.n	8009db8 <st_sssa8_convolve+0x654>
 8009d50:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8009d52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d54:	3a01      	subs	r2, #1
 8009d56:	9238      	str	r2, [sp, #224]	; 0xe0
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 8009d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d60:	4293      	cmp	r3, r2
 8009d62:	f6ff af01 	blt.w	8009b68 <st_sssa8_convolve+0x404>
 8009d66:	b283      	uxth	r3, r0
 8009d68:	930e      	str	r3, [sp, #56]	; 0x38
 8009d6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d6c:	454b      	cmp	r3, r9
 8009d6e:	f47f af39 	bne.w	8009be4 <st_sssa8_convolve+0x480>
 8009d72:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8009d74:	ee1a 2a10 	vmov	r2, s20
 8009d78:	996a      	ldr	r1, [sp, #424]	; 0x1a8
 8009d7a:	9304      	str	r3, [sp, #16]
 8009d7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009d7e:	985a      	ldr	r0, [sp, #360]	; 0x168
 8009d80:	9303      	str	r3, [sp, #12]
 8009d82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d84:	9302      	str	r3, [sp, #8]
 8009d86:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	ee19 3a10 	vmov	r3, s18
 8009d92:	f001 f8e7 	bl	800af64 <st_sssa8_nn_mat_mult_kernel>
 8009d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d98:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009d9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d9c:	440b      	add	r3, r1
 8009d9e:	9067      	str	r0, [sp, #412]	; 0x19c
 8009da0:	3201      	adds	r2, #1
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	b210      	sxth	r0, r2
 8009da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009da8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009daa:	4601      	mov	r1, r0
 8009dac:	4283      	cmp	r3, r0
 8009dae:	f340 80c2 	ble.w	8009f36 <st_sssa8_convolve+0x7d2>
 8009db2:	f8dd 91a8 	ldr.w	r9, [sp, #424]	; 0x1a8
 8009db6:	e6c9      	b.n	8009b4c <st_sssa8_convolve+0x3e8>
 8009db8:	3a01      	subs	r2, #1
 8009dba:	9237      	str	r2, [sp, #220]	; 0xdc
 8009dbc:	f8bd 20fc 	ldrh.w	r2, [sp, #252]	; 0xfc
 8009dc0:	2a01      	cmp	r2, #1
 8009dc2:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 8009dc6:	f43f aeca 	beq.w	8009b5e <st_sssa8_convolve+0x3fa>
 8009dca:	b283      	uxth	r3, r0
 8009dcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dce:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009dd0:	f9bd 402c 	ldrsh.w	r4, [sp, #44]	; 0x2c
 8009dd4:	4288      	cmp	r0, r1
 8009dd6:	930e      	str	r3, [sp, #56]	; 0x38
 8009dd8:	f6bf af00 	bge.w	8009bdc <st_sssa8_convolve+0x478>
 8009ddc:	ee08 7a10 	vmov	s16, r7
 8009de0:	f8cd b020 	str.w	fp, [sp, #32]
 8009de4:	464f      	mov	r7, r9
 8009de6:	46c3      	mov	fp, r8
 8009de8:	4605      	mov	r5, r0
 8009dea:	ee18 2a90 	vmov	r2, s17
 8009dee:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8009df0:	4688      	mov	r8, r1
 8009df2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8009df6:	3501      	adds	r5, #1
 8009df8:	fb00 400b 	mla	r0, r0, fp, r4
 8009dfc:	4639      	mov	r1, r7
 8009dfe:	9206      	str	r2, [sp, #24]
 8009e00:	b22d      	sxth	r5, r5
 8009e02:	fb0a 9000 	mla	r0, sl, r0, r9
 8009e06:	f000 ff61 	bl	800accc <st_int8_to16_no_shift>
 8009e0a:	4437      	add	r7, r6
 8009e0c:	4545      	cmp	r5, r8
 8009e0e:	4628      	mov	r0, r5
 8009e10:	9a06      	ldr	r2, [sp, #24]
 8009e12:	dbf0      	blt.n	8009df6 <st_sssa8_convolve+0x692>
 8009e14:	46b9      	mov	r9, r7
 8009e16:	46d8      	mov	r8, fp
 8009e18:	ee18 7a10 	vmov	r7, s16
 8009e1c:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009e20:	e6dc      	b.n	8009bdc <st_sssa8_convolve+0x478>
 8009e22:	ee19 3a10 	vmov	r3, s18
 8009e26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e28:	ee19 1a90 	vmov	r1, s19
 8009e2c:	985a      	ldr	r0, [sp, #360]	; 0x168
 8009e2e:	f000 ffaf 	bl	800ad90 <st_int8_to16_dual>
 8009e32:	2301      	movs	r3, #1
 8009e34:	9325      	str	r3, [sp, #148]	; 0x94
 8009e36:	e50e      	b.n	8009856 <st_sssa8_convolve+0xf2>
 8009e38:	9b08      	ldr	r3, [sp, #32]
 8009e3a:	eb03 000c 	add.w	r0, r3, ip
 8009e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e40:	fb08 3000 	mla	r0, r8, r0, r3
 8009e44:	f000 ff42 	bl	800accc <st_int8_to16_no_shift>
 8009e48:	e5bf      	b.n	80099ca <st_sssa8_convolve+0x266>
 8009e4a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8009e4c:	2a00      	cmp	r2, #0
 8009e4e:	d135      	bne.n	8009ebc <st_sssa8_convolve+0x758>
 8009e50:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8009e52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e54:	3a01      	subs	r2, #1
 8009e56:	9238      	str	r2, [sp, #224]	; 0xe0
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 8009e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e60:	4293      	cmp	r3, r2
 8009e62:	f6ff ad85 	blt.w	8009970 <st_sssa8_convolve+0x20c>
 8009e66:	b283      	uxth	r3, r0
 8009e68:	930e      	str	r3, [sp, #56]	; 0x38
 8009e6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e6c:	4553      	cmp	r3, sl
 8009e6e:	f47f adbe 	bne.w	80099ee <st_sssa8_convolve+0x28a>
 8009e72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e74:	ee1a 2a10 	vmov	r2, s20
 8009e78:	996a      	ldr	r1, [sp, #424]	; 0x1a8
 8009e7a:	ee19 0a90 	vmov	r0, s19
 8009e7e:	9305      	str	r3, [sp, #20]
 8009e80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009e82:	9304      	str	r3, [sp, #16]
 8009e84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e86:	9303      	str	r3, [sp, #12]
 8009e88:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009e8a:	9302      	str	r3, [sp, #8]
 8009e8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e8e:	9301      	str	r3, [sp, #4]
 8009e90:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	ee19 3a10 	vmov	r3, s18
 8009e98:	f002 f984 	bl	800c1a4 <st_sssa8_nn_mat_mult_kernel_opt>
 8009e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e9e:	9019      	str	r0, [sp, #100]	; 0x64
 8009ea0:	3201      	adds	r2, #1
 8009ea2:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 8009ea6:	b210      	sxth	r0, r2
 8009ea8:	440b      	add	r3, r1
 8009eaa:	4601      	mov	r1, r0
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	930c      	str	r3, [sp, #48]	; 0x30
 8009eb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eb2:	4283      	cmp	r3, r0
 8009eb4:	dd38      	ble.n	8009f28 <st_sssa8_convolve+0x7c4>
 8009eb6:	f8dd a1a8 	ldr.w	sl, [sp, #424]	; 0x1a8
 8009eba:	e54b      	b.n	8009954 <st_sssa8_convolve+0x1f0>
 8009ebc:	3a01      	subs	r2, #1
 8009ebe:	9237      	str	r2, [sp, #220]	; 0xdc
 8009ec0:	f8bd 20fc 	ldrh.w	r2, [sp, #252]	; 0xfc
 8009ec4:	2a01      	cmp	r2, #1
 8009ec6:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 8009eca:	f43f ad4c 	beq.w	8009966 <st_sssa8_convolve+0x202>
 8009ece:	b283      	uxth	r3, r0
 8009ed0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ed2:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	; 0x30
 8009ed6:	930e      	str	r3, [sp, #56]	; 0x38
 8009ed8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009eda:	428b      	cmp	r3, r1
 8009edc:	f6bf ad83 	bge.w	80099e6 <st_sssa8_convolve+0x282>
 8009ee0:	ee08 7a10 	vmov	s16, r7
 8009ee4:	f8cd b020 	str.w	fp, [sp, #32]
 8009ee8:	4657      	mov	r7, sl
 8009eea:	46cb      	mov	fp, r9
 8009eec:	461d      	mov	r5, r3
 8009eee:	4618      	mov	r0, r3
 8009ef0:	ee18 2a90 	vmov	r2, s17
 8009ef4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8009ef6:	4689      	mov	r9, r1
 8009ef8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009efc:	3501      	adds	r5, #1
 8009efe:	fb00 400b 	mla	r0, r0, fp, r4
 8009f02:	4639      	mov	r1, r7
 8009f04:	9206      	str	r2, [sp, #24]
 8009f06:	b22d      	sxth	r5, r5
 8009f08:	fb08 a000 	mla	r0, r8, r0, sl
 8009f0c:	f000 fede 	bl	800accc <st_int8_to16_no_shift>
 8009f10:	4437      	add	r7, r6
 8009f12:	454d      	cmp	r5, r9
 8009f14:	4628      	mov	r0, r5
 8009f16:	9a06      	ldr	r2, [sp, #24]
 8009f18:	dbf0      	blt.n	8009efc <st_sssa8_convolve+0x798>
 8009f1a:	46ba      	mov	sl, r7
 8009f1c:	46d9      	mov	r9, fp
 8009f1e:	ee18 7a10 	vmov	r7, s16
 8009f22:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009f26:	e55e      	b.n	80099e6 <st_sssa8_convolve+0x282>
 8009f28:	46da      	mov	sl, fp
 8009f2a:	f8dd b1a8 	ldr.w	fp, [sp, #424]	; 0x1a8
 8009f2e:	e56d      	b.n	8009a0c <st_sssa8_convolve+0x2a8>
 8009f30:	b2a3      	uxth	r3, r4
 8009f32:	9321      	str	r3, [sp, #132]	; 0x84
 8009f34:	e56a      	b.n	8009a0c <st_sssa8_convolve+0x2a8>
 8009f36:	46d9      	mov	r9, fp
 8009f38:	f8dd b1a8 	ldr.w	fp, [sp, #424]	; 0x1a8
 8009f3c:	e661      	b.n	8009c02 <st_sssa8_convolve+0x49e>
 8009f3e:	b2a3      	uxth	r3, r4
 8009f40:	931a      	str	r3, [sp, #104]	; 0x68
 8009f42:	e65e      	b.n	8009c02 <st_sssa8_convolve+0x49e>
 8009f44:	9a08      	ldr	r2, [sp, #32]
 8009f46:	4093      	lsls	r3, r2
 8009f48:	f303 031f 	ssat	r3, #32, r3
 8009f4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f4e:	fb53 f312 	smmulr	r3, r3, r2
 8009f52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f54:	4413      	add	r3, r2
 8009f56:	f303 0307 	ssat	r3, #8, r3
 8009f5a:	f806 3c01 	strb.w	r3, [r6, #-1]
 8009f5e:	e6cc      	b.n	8009cfa <st_sssa8_convolve+0x596>
 8009f60:	460b      	mov	r3, r1
 8009f62:	3301      	adds	r3, #1
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	9320      	str	r3, [sp, #128]	; 0x80
 8009f68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f43f adad 	beq.w	8009aca <st_sssa8_convolve+0x366>
 8009f70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009f72:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 8009f76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f78:	2400      	movs	r4, #0
 8009f7a:	fb03 f30a 	mul.w	r3, r3, sl
 8009f7e:	fa0f f888 	sxth.w	r8, r8
 8009f82:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 8009f86:	4625      	mov	r5, r4
 8009f88:	fb02 f303 	mul.w	r3, r2, r3
 8009f8c:	9a6a      	ldr	r2, [sp, #424]	; 0x1a8
 8009f8e:	46d3      	mov	fp, sl
 8009f90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f94:	9311      	str	r3, [sp, #68]	; 0x44
 8009f96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	9329      	str	r3, [sp, #164]	; 0xa4
 8009f9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009fa0:	425b      	negs	r3, r3
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	9326      	str	r3, [sp, #152]	; 0x98
 8009fa6:	ee18 3a90 	vmov	r3, s17
 8009faa:	005b      	lsls	r3, r3, #1
 8009fac:	9313      	str	r3, [sp, #76]	; 0x4c
 8009fae:	a836      	add	r0, sp, #216	; 0xd8
 8009fb0:	f000 fe18 	bl	800abe4 <ai_padding_opt_phase1>
 8009fb4:	ee19 3a10 	vmov	r3, s18
 8009fb8:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 8009fba:	fb05 f303 	mul.w	r3, r5, r3
 8009fbe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009fc0:	fb01 2303 	mla	r3, r1, r3, r2
 8009fc4:	9321      	str	r3, [sp, #132]	; 0x84
 8009fc6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f000 8150 	beq.w	800a26e <st_sssa8_convolve+0xb0a>
 8009fce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 8157 	beq.w	800a284 <st_sssa8_convolve+0xb20>
 8009fd6:	b2a3      	uxth	r3, r4
 8009fd8:	eef0 aa4a 	vmov.f32	s21, s20
 8009fdc:	46ca      	mov	sl, r9
 8009fde:	ee08 8a10 	vmov	s16, r8
 8009fe2:	9328      	str	r3, [sp, #160]	; 0xa0
 8009fe4:	ed8d 9a24 	vstr	s18, [sp, #144]	; 0x90
 8009fe8:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8009fec:	1a9b      	subs	r3, r3, r2
 8009fee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009ff0:	fb05 3302 	mla	r3, r5, r2, r3
 8009ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff6:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
 8009ffa:	9310      	str	r3, [sp, #64]	; 0x40
 8009ffc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009ffe:	9323      	str	r3, [sp, #140]	; 0x8c
 800a000:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a002:	9319      	str	r3, [sp, #100]	; 0x64
 800a004:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 800a006:	9327      	str	r3, [sp, #156]	; 0x9c
 800a008:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800a00a:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800a00c:	9337      	str	r3, [sp, #220]	; 0xdc
 800a00e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800a010:	9236      	str	r2, [sp, #216]	; 0xd8
 800a012:	9338      	str	r3, [sp, #224]	; 0xe0
 800a014:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a016:	2b00      	cmp	r3, #0
 800a018:	f000 80ee 	beq.w	800a1f8 <st_sssa8_convolve+0xa94>
 800a01c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a01e:	2000      	movs	r0, #0
 800a020:	9e6a      	ldr	r6, [sp, #424]	; 0x1a8
 800a022:	425b      	negs	r3, r3
 800a024:	4601      	mov	r1, r0
 800a026:	4637      	mov	r7, r6
 800a028:	b29b      	uxth	r3, r3
 800a02a:	930c      	str	r3, [sp, #48]	; 0x30
 800a02c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a02e:	931c      	str	r3, [sp, #112]	; 0x70
 800a030:	2a00      	cmp	r2, #0
 800a032:	d060      	beq.n	800a0f6 <st_sssa8_convolve+0x992>
 800a034:	3a01      	subs	r2, #1
 800a036:	9236      	str	r2, [sp, #216]	; 0xd8
 800a038:	2201      	movs	r2, #1
 800a03a:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 800a03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a040:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a042:	4293      	cmp	r3, r2
 800a044:	dd64      	ble.n	800a110 <st_sssa8_convolve+0x9ac>
 800a046:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a048:	ee18 8a10 	vmov	r8, s16
 800a04c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a04e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800a050:	fb01 3102 	mla	r1, r1, r2, r3
 800a054:	b283      	uxth	r3, r0
 800a056:	930e      	str	r3, [sp, #56]	; 0x38
 800a058:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a05a:	1acd      	subs	r5, r1, r3
 800a05c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800a060:	930b      	str	r3, [sp, #44]	; 0x2c
 800a062:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a064:	4699      	mov	r9, r3
 800a066:	461a      	mov	r2, r3
 800a068:	465b      	mov	r3, fp
 800a06a:	46cb      	mov	fp, r9
 800a06c:	4699      	mov	r9, r3
 800a06e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a070:	42a9      	cmp	r1, r5
 800a072:	da25      	bge.n	800a0c0 <st_sssa8_convolve+0x95c>
 800a074:	9b07      	ldr	r3, [sp, #28]
 800a076:	460c      	mov	r4, r1
 800a078:	f8cd b018 	str.w	fp, [sp, #24]
 800a07c:	468c      	mov	ip, r1
 800a07e:	4293      	cmp	r3, r2
 800a080:	fb0a f202 	mul.w	r2, sl, r2
 800a084:	bfcc      	ite	gt
 800a086:	2300      	movgt	r3, #0
 800a088:	2301      	movle	r3, #1
 800a08a:	9208      	str	r2, [sp, #32]
 800a08c:	ea43 73db 	orr.w	r3, r3, fp, lsr #31
 800a090:	469b      	mov	fp, r3
 800a092:	45e2      	cmp	sl, ip
 800a094:	464a      	mov	r2, r9
 800a096:	4639      	mov	r1, r7
 800a098:	4640      	mov	r0, r8
 800a09a:	bfcc      	ite	gt
 800a09c:	2300      	movgt	r3, #0
 800a09e:	2301      	movle	r3, #1
 800a0a0:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 800a0a4:	d102      	bne.n	800a0ac <st_sssa8_convolve+0x948>
 800a0a6:	f1bb 0f00 	cmp.w	fp, #0
 800a0aa:	d05a      	beq.n	800a162 <st_sssa8_convolve+0x9fe>
 800a0ac:	f003 f808 	bl	800d0c0 <arm_fill_q15>
 800a0b0:	3401      	adds	r4, #1
 800a0b2:	4437      	add	r7, r6
 800a0b4:	b224      	sxth	r4, r4
 800a0b6:	42ac      	cmp	r4, r5
 800a0b8:	46a4      	mov	ip, r4
 800a0ba:	dbea      	blt.n	800a092 <st_sssa8_convolve+0x92e>
 800a0bc:	f8dd b018 	ldr.w	fp, [sp, #24]
 800a0c0:	f10b 0b01 	add.w	fp, fp, #1
 800a0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0c6:	fa0f fb8b 	sxth.w	fp, fp
 800a0ca:	459b      	cmp	fp, r3
 800a0cc:	465a      	mov	r2, fp
 800a0ce:	dbce      	blt.n	800a06e <st_sssa8_convolve+0x90a>
 800a0d0:	46cb      	mov	fp, r9
 800a0d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0d4:	42bb      	cmp	r3, r7
 800a0d6:	d020      	beq.n	800a11a <st_sssa8_convolve+0x9b6>
 800a0d8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a0da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a0de:	3001      	adds	r0, #1
 800a0e0:	441a      	add	r2, r3
 800a0e2:	b200      	sxth	r0, r0
 800a0e4:	b293      	uxth	r3, r2
 800a0e6:	4601      	mov	r1, r0
 800a0e8:	930c      	str	r3, [sp, #48]	; 0x30
 800a0ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0ec:	4283      	cmp	r3, r0
 800a0ee:	dd6b      	ble.n	800a1c8 <st_sssa8_convolve+0xa64>
 800a0f0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800a0f2:	2a00      	cmp	r2, #0
 800a0f4:	d19e      	bne.n	800a034 <st_sssa8_convolve+0x8d0>
 800a0f6:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800a0f8:	2a00      	cmp	r2, #0
 800a0fa:	d13b      	bne.n	800a174 <st_sssa8_convolve+0xa10>
 800a0fc:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800a0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a100:	3a01      	subs	r2, #1
 800a102:	9238      	str	r2, [sp, #224]	; 0xe0
 800a104:	2201      	movs	r2, #1
 800a106:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 800a10a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a10c:	4293      	cmp	r3, r2
 800a10e:	dc9a      	bgt.n	800a046 <st_sssa8_convolve+0x8e2>
 800a110:	b283      	uxth	r3, r0
 800a112:	930e      	str	r3, [sp, #56]	; 0x38
 800a114:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a116:	42bb      	cmp	r3, r7
 800a118:	d1de      	bne.n	800a0d8 <st_sssa8_convolve+0x974>
 800a11a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a11c:	ee1a 2a90 	vmov	r2, s21
 800a120:	996a      	ldr	r1, [sp, #424]	; 0x1a8
 800a122:	ee19 0a90 	vmov	r0, s19
 800a126:	9305      	str	r3, [sp, #20]
 800a128:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a12a:	9304      	str	r3, [sp, #16]
 800a12c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a12e:	9303      	str	r3, [sp, #12]
 800a130:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a132:	9302      	str	r3, [sp, #8]
 800a134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a136:	9301      	str	r3, [sp, #4]
 800a138:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	ee19 3a10 	vmov	r3, s18
 800a140:	f002 f830 	bl	800c1a4 <st_sssa8_nn_mat_mult_kernel_opt>
 800a144:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a146:	901c      	str	r0, [sp, #112]	; 0x70
 800a148:	3201      	adds	r2, #1
 800a14a:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 800a14e:	b210      	sxth	r0, r2
 800a150:	440b      	add	r3, r1
 800a152:	4601      	mov	r1, r0
 800a154:	b29b      	uxth	r3, r3
 800a156:	930c      	str	r3, [sp, #48]	; 0x30
 800a158:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a15a:	4283      	cmp	r3, r0
 800a15c:	dd4c      	ble.n	800a1f8 <st_sssa8_convolve+0xa94>
 800a15e:	9f6a      	ldr	r7, [sp, #424]	; 0x1a8
 800a160:	e7c6      	b.n	800a0f0 <st_sssa8_convolve+0x98c>
 800a162:	9b08      	ldr	r3, [sp, #32]
 800a164:	eb03 000c 	add.w	r0, r3, ip
 800a168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a16a:	fb09 3000 	mla	r0, r9, r0, r3
 800a16e:	f000 fdad 	bl	800accc <st_int8_to16_no_shift>
 800a172:	e79d      	b.n	800a0b0 <st_sssa8_convolve+0x94c>
 800a174:	3a01      	subs	r2, #1
 800a176:	9237      	str	r2, [sp, #220]	; 0xdc
 800a178:	f8bd 20fc 	ldrh.w	r2, [sp, #252]	; 0xfc
 800a17c:	2a01      	cmp	r2, #1
 800a17e:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 800a182:	f43f af5c 	beq.w	800a03e <st_sssa8_convolve+0x8da>
 800a186:	b283      	uxth	r3, r0
 800a188:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a18a:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	; 0x30
 800a18e:	930e      	str	r3, [sp, #56]	; 0x38
 800a190:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a192:	429e      	cmp	r6, r3
 800a194:	dd9d      	ble.n	800a0d2 <st_sssa8_convolve+0x96e>
 800a196:	46b8      	mov	r8, r7
 800a198:	461d      	mov	r5, r3
 800a19a:	4618      	mov	r0, r3
 800a19c:	ee18 2a90 	vmov	r2, s17
 800a1a0:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800a1a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a1a6:	3501      	adds	r5, #1
 800a1a8:	fb00 400a 	mla	r0, r0, sl, r4
 800a1ac:	4641      	mov	r1, r8
 800a1ae:	9206      	str	r2, [sp, #24]
 800a1b0:	b22d      	sxth	r5, r5
 800a1b2:	fb0b 7000 	mla	r0, fp, r0, r7
 800a1b6:	f000 fd89 	bl	800accc <st_int8_to16_no_shift>
 800a1ba:	44c8      	add	r8, r9
 800a1bc:	42b5      	cmp	r5, r6
 800a1be:	4628      	mov	r0, r5
 800a1c0:	9a06      	ldr	r2, [sp, #24]
 800a1c2:	dbf0      	blt.n	800a1a6 <st_sssa8_convolve+0xa42>
 800a1c4:	4647      	mov	r7, r8
 800a1c6:	e784      	b.n	800a0d2 <st_sssa8_convolve+0x96e>
 800a1c8:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 800a1ca:	429f      	cmp	r7, r3
 800a1cc:	d014      	beq.n	800a1f8 <st_sssa8_convolve+0xa94>
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a1d2:	ee1a 2a90 	vmov	r2, s21
 800a1d6:	ee19 0a90 	vmov	r0, s19
 800a1da:	9305      	str	r3, [sp, #20]
 800a1dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a1de:	9304      	str	r3, [sp, #16]
 800a1e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1e2:	9303      	str	r3, [sp, #12]
 800a1e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a1e6:	9302      	str	r3, [sp, #8]
 800a1e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1ea:	9301      	str	r3, [sp, #4]
 800a1ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	ee19 3a10 	vmov	r3, s18
 800a1f4:	f002 faaa 	bl	800c74c <st_sssa8_nn_mat_mult_kernel_single_opt>
 800a1f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a1fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a1fc:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a1fe:	1a9b      	subs	r3, r3, r2
 800a200:	4411      	add	r1, r2
 800a202:	b29b      	uxth	r3, r3
 800a204:	9121      	str	r1, [sp, #132]	; 0x84
 800a206:	429a      	cmp	r2, r3
 800a208:	9324      	str	r3, [sp, #144]	; 0x90
 800a20a:	bf28      	it	cs
 800a20c:	461a      	movcs	r2, r3
 800a20e:	b294      	uxth	r4, r2
 800a210:	b954      	cbnz	r4, 800a228 <st_sssa8_convolve+0xac4>
 800a212:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a214:	3b01      	subs	r3, #1
 800a216:	b29b      	uxth	r3, r3
 800a218:	461a      	mov	r2, r3
 800a21a:	9323      	str	r3, [sp, #140]	; 0x8c
 800a21c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a220:	429a      	cmp	r2, r3
 800a222:	d013      	beq.n	800a24c <st_sssa8_convolve+0xae8>
 800a224:	9419      	str	r4, [sp, #100]	; 0x64
 800a226:	e6ef      	b.n	800a008 <st_sssa8_convolve+0x8a4>
 800a228:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800a22a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a22c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a22e:	fb02 1003 	mla	r0, r2, r3, r1
 800a232:	ee1a 1a90 	vmov	r1, s21
 800a236:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a23a:	ee19 1a90 	vmov	r1, s19
 800a23e:	9027      	str	r0, [sp, #156]	; 0x9c
 800a240:	ee0a 3a90 	vmov	s21, r3
 800a244:	4623      	mov	r3, r4
 800a246:	f000 fda3 	bl	800ad90 <st_int8_to16_dual>
 800a24a:	e7e2      	b.n	800a212 <st_sssa8_convolve+0xaae>
 800a24c:	46d1      	mov	r9, sl
 800a24e:	ee18 8a10 	vmov	r8, s16
 800a252:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a254:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a256:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800a258:	4413      	add	r3, r2
 800a25a:	3401      	adds	r4, #1
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	b224      	sxth	r4, r4
 800a260:	9326      	str	r3, [sp, #152]	; 0x98
 800a262:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a264:	4625      	mov	r5, r4
 800a266:	42a3      	cmp	r3, r4
 800a268:	f73f aea1 	bgt.w	8009fae <st_sssa8_convolve+0x84a>
 800a26c:	e42d      	b.n	8009aca <st_sssa8_convolve+0x366>
 800a26e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a270:	ee19 1a90 	vmov	r1, s19
 800a274:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a276:	985a      	ldr	r0, [sp, #360]	; 0x168
 800a278:	f000 fd8a 	bl	800ad90 <st_int8_to16_dual>
 800a27c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a27e:	2b00      	cmp	r3, #0
 800a280:	f47f aea9 	bne.w	8009fd6 <st_sssa8_convolve+0x872>
 800a284:	b2a3      	uxth	r3, r4
 800a286:	9328      	str	r3, [sp, #160]	; 0xa0
 800a288:	e7e3      	b.n	800a252 <st_sssa8_convolve+0xaee>
 800a28a:	bf00      	nop

0800a28c <st_sssa8_convolve_rgb>:
 800a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a290:	ed2d 8b02 	vpush	{d8}
 800a294:	b0c7      	sub	sp, #284	; 0x11c
 800a296:	2a03      	cmp	r2, #3
 800a298:	4682      	mov	sl, r0
 800a29a:	468b      	mov	fp, r1
 800a29c:	931a      	str	r3, [sp, #104]	; 0x68
 800a29e:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
 800a2a2:	f8bd 414c 	ldrh.w	r4, [sp, #332]	; 0x14c
 800a2a6:	9312      	str	r3, [sp, #72]	; 0x48
 800a2a8:	f8bd 3150 	ldrh.w	r3, [sp, #336]	; 0x150
 800a2ac:	f8bd 5170 	ldrh.w	r5, [sp, #368]	; 0x170
 800a2b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2b2:	f8bd 3154 	ldrh.w	r3, [sp, #340]	; 0x154
 800a2b6:	f99d 6164 	ldrsb.w	r6, [sp, #356]	; 0x164
 800a2ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2bc:	9410      	str	r4, [sp, #64]	; 0x40
 800a2be:	f99d 3168 	ldrsb.w	r3, [sp, #360]	; 0x168
 800a2c2:	950e      	str	r5, [sp, #56]	; 0x38
 800a2c4:	e9dd 1057 	ldrd	r1, r0, [sp, #348]	; 0x15c
 800a2c8:	f040 83ca 	bne.w	800aa60 <st_sssa8_convolve_rgb+0x7d4>
 800a2cc:	680a      	ldr	r2, [r1, #0]
 800a2ce:	f9b0 0000 	ldrsh.w	r0, [r0]
 800a2d2:	9216      	str	r2, [sp, #88]	; 0x58
 800a2d4:	fb14 f204 	smulbb	r2, r4, r4
 800a2d8:	4601      	mov	r1, r0
 800a2da:	9017      	str	r0, [sp, #92]	; 0x5c
 800a2dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a2e0:	b294      	uxth	r4, r2
 800a2e2:	1e42      	subs	r2, r0, #1
 800a2e4:	985d      	ldr	r0, [sp, #372]	; 0x174
 800a2e6:	921b      	str	r2, [sp, #108]	; 0x6c
 800a2e8:	b292      	uxth	r2, r2
 800a2ea:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800a2ee:	9413      	str	r4, [sp, #76]	; 0x4c
 800a2f0:	2a14      	cmp	r2, #20
 800a2f2:	901e      	str	r0, [sp, #120]	; 0x78
 800a2f4:	f240 83ac 	bls.w	800aa50 <st_sssa8_convolve_rgb+0x7c4>
 800a2f8:	9314      	str	r3, [sp, #80]	; 0x50
 800a2fa:	462b      	mov	r3, r5
 800a2fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2fe:	a932      	add	r1, sp, #200	; 0xc8
 800a300:	a83c      	add	r0, sp, #240	; 0xf0
 800a302:	fb02 f402 	mul.w	r4, r2, r2
 800a306:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
 800a30a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a30c:	0065      	lsls	r5, r4, #1
 800a30e:	e9cd 3334 	strd	r3, r3, [sp, #208]	; 0xd0
 800a312:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a314:	e9cd 3336 	strd	r3, r3, [sp, #216]	; 0xd8
 800a318:	ab2e      	add	r3, sp, #184	; 0xb8
 800a31a:	e9cd 222f 	strd	r2, r2, [sp, #188]	; 0xbc
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	aa26      	add	r2, sp, #152	; 0x98
 800a322:	ab2a      	add	r3, sp, #168	; 0xa8
 800a324:	e9cd bb27 	strd	fp, fp, [sp, #156]	; 0x9c
 800a328:	f000 fc02 	bl	800ab30 <ai_padding_opt_init>
 800a32c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a32e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a332:	995d      	ldr	r1, [sp, #372]	; 0x174
 800a334:	4413      	add	r3, r2
 800a336:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a33a:	ee08 3a10 	vmov	s16, r3
 800a33e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a340:	fb02 f303 	mul.w	r3, r2, r3
 800a344:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a348:	f340 8378 	ble.w	800aa3c <st_sssa8_convolve_rgb+0x7b0>
 800a34c:	2300      	movs	r3, #0
 800a34e:	9321      	str	r3, [sp, #132]	; 0x84
 800a350:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a352:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a356:	fbb3 f3f2 	udiv	r3, r3, r2
 800a35a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a35c:	f023 0301 	bic.w	r3, r3, #1
 800a360:	4293      	cmp	r3, r2
 800a362:	bf28      	it	cs
 800a364:	4613      	movcs	r3, r2
 800a366:	2b01      	cmp	r3, #1
 800a368:	931f      	str	r3, [sp, #124]	; 0x7c
 800a36a:	f240 81a4 	bls.w	800a6b6 <st_sssa8_convolve_rgb+0x42a>
 800a36e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800a370:	4613      	mov	r3, r2
 800a372:	fbb2 f2f1 	udiv	r2, r2, r1
 800a376:	fb01 3312 	mls	r3, r1, r2, r3
 800a37a:	b292      	uxth	r2, r2
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	921d      	str	r2, [sp, #116]	; 0x74
 800a380:	b11b      	cbz	r3, 800a38a <st_sssa8_convolve_rgb+0xfe>
 800a382:	4613      	mov	r3, r2
 800a384:	3301      	adds	r3, #1
 800a386:	b29b      	uxth	r3, r3
 800a388:	931d      	str	r3, [sp, #116]	; 0x74
 800a38a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f000 8184 	beq.w	800a69a <st_sssa8_convolve_rgb+0x40e>
 800a392:	442c      	add	r4, r5
 800a394:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 800a396:	b235      	sxth	r5, r6
 800a398:	2600      	movs	r6, #0
 800a39a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a39e:	4657      	mov	r7, sl
 800a3a0:	4634      	mov	r4, r6
 800a3a2:	46aa      	mov	sl, r5
 800a3a4:	9311      	str	r3, [sp, #68]	; 0x44
 800a3a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3a8:	425b      	negs	r3, r3
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	9224      	str	r2, [sp, #144]	; 0x90
 800a3b2:	9220      	str	r2, [sp, #128]	; 0x80
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	9325      	str	r3, [sp, #148]	; 0x94
 800a3b8:	a83c      	add	r0, sp, #240	; 0xf0
 800a3ba:	f000 fc13 	bl	800abe4 <ai_padding_opt_phase1>
 800a3be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3c0:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 800a3c2:	fb04 f303 	mul.w	r3, r4, r3
 800a3c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a3c8:	fb01 2303 	mla	r3, r1, r3, r2
 800a3cc:	9319      	str	r3, [sp, #100]	; 0x64
 800a3ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 8168 	beq.w	800a6a6 <st_sssa8_convolve_rgb+0x41a>
 800a3d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 814f 	beq.w	800a67c <st_sssa8_convolve_rgb+0x3f0>
 800a3de:	b2b3      	uxth	r3, r6
 800a3e0:	9323      	str	r3, [sp, #140]	; 0x8c
 800a3e2:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 800a3e6:	1a9b      	subs	r3, r3, r2
 800a3e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3ea:	fb04 3302 	mla	r3, r4, r2, r3
 800a3ee:	9308      	str	r3, [sp, #32]
 800a3f0:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
 800a3f4:	930d      	str	r3, [sp, #52]	; 0x34
 800a3f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a3f8:	931b      	str	r3, [sp, #108]	; 0x6c
 800a3fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3fc:	931c      	str	r3, [sp, #112]	; 0x70
 800a3fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a400:	9315      	str	r3, [sp, #84]	; 0x54
 800a402:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a404:	9322      	str	r3, [sp, #136]	; 0x88
 800a406:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a408:	ee08 3a90 	vmov	s17, r3
 800a40c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800a40e:	2000      	movs	r0, #0
 800a410:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a412:	933d      	str	r3, [sp, #244]	; 0xf4
 800a414:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a416:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800a418:	933e      	str	r3, [sp, #248]	; 0xf8
 800a41a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a41c:	9118      	str	r1, [sp, #96]	; 0x60
 800a41e:	4601      	mov	r1, r0
 800a420:	9309      	str	r3, [sp, #36]	; 0x24
 800a422:	923c      	str	r2, [sp, #240]	; 0xf0
 800a424:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 800a426:	2a00      	cmp	r2, #0
 800a428:	d05b      	beq.n	800a4e2 <st_sssa8_convolve_rgb+0x256>
 800a42a:	3a01      	subs	r2, #1
 800a42c:	923c      	str	r2, [sp, #240]	; 0xf0
 800a42e:	2201      	movs	r2, #1
 800a430:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800a434:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a436:	9c08      	ldr	r4, [sp, #32]
 800a438:	42a2      	cmp	r2, r4
 800a43a:	da5f      	bge.n	800a4fc <st_sssa8_convolve_rgb+0x270>
 800a43c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a43e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a440:	970a      	str	r7, [sp, #40]	; 0x28
 800a442:	fb01 2104 	mla	r1, r1, r4, r2
 800a446:	b282      	uxth	r2, r0
 800a448:	920c      	str	r2, [sp, #48]	; 0x30
 800a44a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a44c:	1a8d      	subs	r5, r1, r2
 800a44e:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 800a452:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a454:	4690      	mov	r8, r2
 800a456:	4689      	mov	r9, r1
 800a458:	45a8      	cmp	r8, r5
 800a45a:	da26      	bge.n	800a4aa <st_sssa8_convolve_rgb+0x21e>
 800a45c:	ea4f 7ed9 	mov.w	lr, r9, lsr #31
 800a460:	1d9a      	adds	r2, r3, #6
 800a462:	4640      	mov	r0, r8
 800a464:	fb01 f30b 	mul.w	r3, r1, fp
 800a468:	458b      	cmp	fp, r1
 800a46a:	bfd8      	it	le
 800a46c:	f04e 0e01 	orrle.w	lr, lr, #1
 800a470:	4646      	mov	r6, r8
 800a472:	9307      	str	r3, [sp, #28]
 800a474:	2400      	movs	r4, #0
 800a476:	0fc1      	lsrs	r1, r0, #31
 800a478:	1c47      	adds	r7, r0, #1
 800a47a:	4613      	mov	r3, r2
 800a47c:	f36a 040f 	bfi	r4, sl, #0, #16
 800a480:	45b3      	cmp	fp, r6
 800a482:	bfd8      	it	le
 800a484:	f041 0101 	orrle.w	r1, r1, #1
 800a488:	f1a2 0c06 	sub.w	ip, r2, #6
 800a48c:	f36a 441f 	bfi	r4, sl, #16, #16
 800a490:	b911      	cbnz	r1, 800a498 <st_sssa8_convolve_rgb+0x20c>
 800a492:	f1be 0f00 	cmp.w	lr, #0
 800a496:	d059      	beq.n	800a54c <st_sssa8_convolve_rgb+0x2c0>
 800a498:	b238      	sxth	r0, r7
 800a49a:	f842 4c04 	str.w	r4, [r2, #-4]
 800a49e:	f822 ac06 	strh.w	sl, [r2, #-6]
 800a4a2:	3206      	adds	r2, #6
 800a4a4:	42a8      	cmp	r0, r5
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	dbe4      	blt.n	800a474 <st_sssa8_convolve_rgb+0x1e8>
 800a4aa:	f109 0901 	add.w	r9, r9, #1
 800a4ae:	9a08      	ldr	r2, [sp, #32]
 800a4b0:	fa0f f989 	sxth.w	r9, r9
 800a4b4:	4591      	cmp	r9, r2
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	dbce      	blt.n	800a458 <st_sssa8_convolve_rgb+0x1cc>
 800a4ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a4bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d021      	beq.n	800a506 <st_sssa8_convolve_rgb+0x27a>
 800a4c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4c6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a4c8:	440a      	add	r2, r1
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	b292      	uxth	r2, r2
 800a4ce:	b200      	sxth	r0, r0
 800a4d0:	9209      	str	r2, [sp, #36]	; 0x24
 800a4d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4d4:	4601      	mov	r1, r0
 800a4d6:	4282      	cmp	r2, r0
 800a4d8:	f340 808f 	ble.w	800a5fa <st_sssa8_convolve_rgb+0x36e>
 800a4dc:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800a4de:	2a00      	cmp	r2, #0
 800a4e0:	d1a3      	bne.n	800a42a <st_sssa8_convolve_rgb+0x19e>
 800a4e2:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800a4e4:	2a00      	cmp	r2, #0
 800a4e6:	d14c      	bne.n	800a582 <st_sssa8_convolve_rgb+0x2f6>
 800a4e8:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800a4ea:	9c08      	ldr	r4, [sp, #32]
 800a4ec:	3a01      	subs	r2, #1
 800a4ee:	923e      	str	r2, [sp, #248]	; 0xf8
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800a4f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4f8:	42a2      	cmp	r2, r4
 800a4fa:	db9f      	blt.n	800a43c <st_sssa8_convolve_rgb+0x1b0>
 800a4fc:	b282      	uxth	r2, r0
 800a4fe:	920c      	str	r2, [sp, #48]	; 0x30
 800a500:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a502:	429a      	cmp	r2, r3
 800a504:	d1dd      	bne.n	800a4c2 <st_sssa8_convolve_rgb+0x236>
 800a506:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a508:	ee18 2a90 	vmov	r2, s17
 800a50c:	995d      	ldr	r1, [sp, #372]	; 0x174
 800a50e:	ee18 0a10 	vmov	r0, s16
 800a512:	9305      	str	r3, [sp, #20]
 800a514:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a516:	9304      	str	r3, [sp, #16]
 800a518:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a51a:	9303      	str	r3, [sp, #12]
 800a51c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a51e:	9302      	str	r3, [sp, #8]
 800a520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a522:	9301      	str	r3, [sp, #4]
 800a524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a526:	9300      	str	r3, [sp, #0]
 800a528:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a52a:	f001 fe3b 	bl	800c1a4 <st_sssa8_nn_mat_mult_kernel_opt>
 800a52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a530:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a534:	440b      	add	r3, r1
 800a536:	9018      	str	r0, [sp, #96]	; 0x60
 800a538:	3201      	adds	r2, #1
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	b210      	sxth	r0, r2
 800a53e:	9309      	str	r3, [sp, #36]	; 0x24
 800a540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a542:	4601      	mov	r1, r0
 800a544:	4283      	cmp	r3, r0
 800a546:	dd6f      	ble.n	800a628 <st_sssa8_convolve_rgb+0x39c>
 800a548:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 800a54a:	e7c7      	b.n	800a4dc <st_sssa8_convolve_rgb+0x250>
 800a54c:	9b07      	ldr	r3, [sp, #28]
 800a54e:	3001      	adds	r0, #1
 800a550:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a552:	441e      	add	r6, r3
 800a554:	b200      	sxth	r0, r0
 800a556:	4613      	mov	r3, r2
 800a558:	3206      	adds	r2, #6
 800a55a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800a55e:	42a8      	cmp	r0, r5
 800a560:	5989      	ldr	r1, [r1, r6]
 800a562:	4606      	mov	r6, r0
 800a564:	fa2f f481 	sxtb16	r4, r1
 800a568:	ea4f 2131 	mov.w	r1, r1, ror #8
 800a56c:	fa2f f181 	sxtb16	r1, r1
 800a570:	eac1 0104 	pkhbt	r1, r1, r4
 800a574:	f8cc 1002 	str.w	r1, [ip, #2]
 800a578:	f822 4c0c 	strh.w	r4, [r2, #-12]
 800a57c:	f6ff af7a 	blt.w	800a474 <st_sssa8_convolve_rgb+0x1e8>
 800a580:	e793      	b.n	800a4aa <st_sssa8_convolve_rgb+0x21e>
 800a582:	3a01      	subs	r2, #1
 800a584:	923d      	str	r2, [sp, #244]	; 0xf4
 800a586:	f8bd 2114 	ldrh.w	r2, [sp, #276]	; 0x114
 800a58a:	2a01      	cmp	r2, #1
 800a58c:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800a590:	f43f af50 	beq.w	800a434 <st_sssa8_convolve_rgb+0x1a8>
 800a594:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a596:	9c08      	ldr	r4, [sp, #32]
 800a598:	42a2      	cmp	r2, r4
 800a59a:	daaf      	bge.n	800a4fc <st_sssa8_convolve_rgb+0x270>
 800a59c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a59e:	46a6      	mov	lr, r4
 800a5a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a5a2:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 800a5a6:	fb01 2104 	mla	r1, r1, r4, r2
 800a5aa:	b282      	uxth	r2, r0
 800a5ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a5ae:	920c      	str	r2, [sp, #48]	; 0x30
 800a5b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5b2:	4626      	mov	r6, r4
 800a5b4:	1a8d      	subs	r5, r1, r2
 800a5b6:	45ac      	cmp	ip, r5
 800a5b8:	da19      	bge.n	800a5ee <st_sssa8_convolve_rgb+0x362>
 800a5ba:	fb04 f00b 	mul.w	r0, r4, fp
 800a5be:	4661      	mov	r1, ip
 800a5c0:	4662      	mov	r2, ip
 800a5c2:	4402      	add	r2, r0
 800a5c4:	3101      	adds	r1, #1
 800a5c6:	3306      	adds	r3, #6
 800a5c8:	b209      	sxth	r1, r1
 800a5ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a5ce:	42a9      	cmp	r1, r5
 800a5d0:	58ba      	ldr	r2, [r7, r2]
 800a5d2:	fa2f f482 	sxtb16	r4, r2
 800a5d6:	ea4f 2232 	mov.w	r2, r2, ror #8
 800a5da:	f823 4c06 	strh.w	r4, [r3, #-6]
 800a5de:	fa2f f282 	sxtb16	r2, r2
 800a5e2:	eac2 0204 	pkhbt	r2, r2, r4
 800a5e6:	f843 2c04 	str.w	r2, [r3, #-4]
 800a5ea:	460a      	mov	r2, r1
 800a5ec:	dbe9      	blt.n	800a5c2 <st_sssa8_convolve_rgb+0x336>
 800a5ee:	3601      	adds	r6, #1
 800a5f0:	b236      	sxth	r6, r6
 800a5f2:	4576      	cmp	r6, lr
 800a5f4:	4634      	mov	r4, r6
 800a5f6:	dbde      	blt.n	800a5b6 <st_sssa8_convolve_rgb+0x32a>
 800a5f8:	e760      	b.n	800a4bc <st_sssa8_convolve_rgb+0x230>
 800a5fa:	9a5d      	ldr	r2, [sp, #372]	; 0x174
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d013      	beq.n	800a628 <st_sssa8_convolve_rgb+0x39c>
 800a600:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a602:	4611      	mov	r1, r2
 800a604:	ee18 0a10 	vmov	r0, s16
 800a608:	ee18 2a90 	vmov	r2, s17
 800a60c:	9305      	str	r3, [sp, #20]
 800a60e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a610:	9304      	str	r3, [sp, #16]
 800a612:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a614:	9303      	str	r3, [sp, #12]
 800a616:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a618:	9302      	str	r3, [sp, #8]
 800a61a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a61c:	9301      	str	r3, [sp, #4]
 800a61e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a624:	f002 f892 	bl	800c74c <st_sssa8_nn_mat_mult_kernel_single_opt>
 800a628:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a62a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a62c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a62e:	1a9b      	subs	r3, r3, r2
 800a630:	4411      	add	r1, r2
 800a632:	b29b      	uxth	r3, r3
 800a634:	9119      	str	r1, [sp, #100]	; 0x64
 800a636:	429a      	cmp	r2, r3
 800a638:	931c      	str	r3, [sp, #112]	; 0x70
 800a63a:	bf28      	it	cs
 800a63c:	461a      	movcs	r2, r3
 800a63e:	b294      	uxth	r4, r2
 800a640:	b954      	cbnz	r4, 800a658 <st_sssa8_convolve_rgb+0x3cc>
 800a642:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a644:	3b01      	subs	r3, #1
 800a646:	b29b      	uxth	r3, r3
 800a648:	461a      	mov	r2, r3
 800a64a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a64c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a650:	429a      	cmp	r2, r3
 800a652:	d015      	beq.n	800a680 <st_sssa8_convolve_rgb+0x3f4>
 800a654:	9415      	str	r4, [sp, #84]	; 0x54
 800a656:	e6d9      	b.n	800a40c <st_sssa8_convolve_rgb+0x180>
 800a658:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a65a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a65c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a65e:	fb02 1003 	mla	r0, r2, r3, r1
 800a662:	ee18 1a90 	vmov	r1, s17
 800a666:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a66a:	ee18 1a10 	vmov	r1, s16
 800a66e:	9022      	str	r0, [sp, #136]	; 0x88
 800a670:	ee08 3a90 	vmov	s17, r3
 800a674:	4623      	mov	r3, r4
 800a676:	f000 fb8b 	bl	800ad90 <st_int8_to16_dual>
 800a67a:	e7e2      	b.n	800a642 <st_sssa8_convolve_rgb+0x3b6>
 800a67c:	b2b3      	uxth	r3, r6
 800a67e:	9323      	str	r3, [sp, #140]	; 0x8c
 800a680:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a682:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a684:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800a686:	4413      	add	r3, r2
 800a688:	3601      	adds	r6, #1
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	b236      	sxth	r6, r6
 800a68e:	9320      	str	r3, [sp, #128]	; 0x80
 800a690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a692:	4634      	mov	r4, r6
 800a694:	42b3      	cmp	r3, r6
 800a696:	f73f ae8f 	bgt.w	800a3b8 <st_sssa8_convolve_rgb+0x12c>
 800a69a:	2000      	movs	r0, #0
 800a69c:	b047      	add	sp, #284	; 0x11c
 800a69e:	ecbd 8b02 	vpop	{d8}
 800a6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a6a8:	ee18 1a10 	vmov	r1, s16
 800a6ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6ae:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a6b0:	f000 fb6e 	bl	800ad90 <st_int8_to16_dual>
 800a6b4:	e68f      	b.n	800a3d6 <st_sssa8_convolve_rgb+0x14a>
 800a6b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d0ee      	beq.n	800a69a <st_sssa8_convolve_rgb+0x40e>
 800a6bc:	442c      	add	r4, r5
 800a6be:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 800a6c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a6c2:	b231      	sxth	r1, r6
 800a6c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a6c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a6ca:	2600      	movs	r6, #0
 800a6cc:	9f5d      	ldr	r7, [sp, #372]	; 0x174
 800a6ce:	9318      	str	r3, [sp, #96]	; 0x60
 800a6d0:	4253      	negs	r3, r2
 800a6d2:	4688      	mov	r8, r1
 800a6d4:	1a82      	subs	r2, r0, r2
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	9615      	str	r6, [sp, #84]	; 0x54
 800a6da:	921c      	str	r2, [sp, #112]	; 0x70
 800a6dc:	9319      	str	r3, [sp, #100]	; 0x64
 800a6de:	9311      	str	r3, [sp, #68]	; 0x44
 800a6e0:	465b      	mov	r3, fp
 800a6e2:	46d3      	mov	fp, sl
 800a6e4:	469a      	mov	sl, r3
 800a6e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a6e8:	a83c      	add	r0, sp, #240	; 0xf0
 800a6ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6ec:	fb02 3306 	mla	r3, r2, r6, r3
 800a6f0:	2600      	movs	r6, #0
 800a6f2:	9307      	str	r3, [sp, #28]
 800a6f4:	f000 fa76 	bl	800abe4 <ai_padding_opt_phase1>
 800a6f8:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 800a6fc:	930c      	str	r3, [sp, #48]	; 0x30
 800a6fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a700:	9309      	str	r3, [sp, #36]	; 0x24
 800a702:	4633      	mov	r3, r6
 800a704:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800a706:	2a00      	cmp	r2, #0
 800a708:	f000 8119 	beq.w	800a93e <st_sssa8_convolve_rgb+0x6b2>
 800a70c:	3a01      	subs	r2, #1
 800a70e:	923c      	str	r2, [sp, #240]	; 0xf0
 800a710:	2201      	movs	r2, #1
 800a712:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800a716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a718:	9907      	ldr	r1, [sp, #28]
 800a71a:	428a      	cmp	r2, r1
 800a71c:	f280 811d 	bge.w	800a95a <st_sssa8_convolve_rgb+0x6ce>
 800a720:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a722:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a724:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800a728:	fb03 2301 	mla	r3, r3, r1, r2
 800a72c:	b2b2      	uxth	r2, r6
 800a72e:	920a      	str	r2, [sp, #40]	; 0x28
 800a730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a732:	1a98      	subs	r0, r3, r2
 800a734:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 800a738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a73a:	469b      	mov	fp, r3
 800a73c:	4691      	mov	r9, r2
 800a73e:	4583      	cmp	fp, r0
 800a740:	da2d      	bge.n	800a79e <st_sssa8_convolve_rgb+0x512>
 800a742:	4592      	cmp	sl, r2
 800a744:	fb02 f20a 	mul.w	r2, r2, sl
 800a748:	f107 0306 	add.w	r3, r7, #6
 800a74c:	465c      	mov	r4, fp
 800a74e:	bfcc      	ite	gt
 800a750:	f04f 0e00 	movgt.w	lr, #0
 800a754:	f04f 0e01 	movle.w	lr, #1
 800a758:	9208      	str	r2, [sp, #32]
 800a75a:	465a      	mov	r2, fp
 800a75c:	ea4e 7ed9 	orr.w	lr, lr, r9, lsr #31
 800a760:	45a2      	cmp	sl, r4
 800a762:	f04f 0100 	mov.w	r1, #0
 800a766:	f102 0601 	add.w	r6, r2, #1
 800a76a:	f1a3 0c06 	sub.w	ip, r3, #6
 800a76e:	bfcc      	ite	gt
 800a770:	2500      	movgt	r5, #0
 800a772:	2501      	movle	r5, #1
 800a774:	f368 010f 	bfi	r1, r8, #0, #16
 800a778:	461f      	mov	r7, r3
 800a77a:	ea55 75d2 	orrs.w	r5, r5, r2, lsr #31
 800a77e:	f368 411f 	bfi	r1, r8, #16, #16
 800a782:	d103      	bne.n	800a78c <st_sssa8_convolve_rgb+0x500>
 800a784:	f1be 0f00 	cmp.w	lr, #0
 800a788:	f000 80bf 	beq.w	800a90a <st_sssa8_convolve_rgb+0x67e>
 800a78c:	b232      	sxth	r2, r6
 800a78e:	f843 1c04 	str.w	r1, [r3, #-4]
 800a792:	f823 8c06 	strh.w	r8, [r3, #-6]
 800a796:	3306      	adds	r3, #6
 800a798:	4282      	cmp	r2, r0
 800a79a:	4614      	mov	r4, r2
 800a79c:	dbe0      	blt.n	800a760 <st_sssa8_convolve_rgb+0x4d4>
 800a79e:	f109 0901 	add.w	r9, r9, #1
 800a7a2:	9b07      	ldr	r3, [sp, #28]
 800a7a4:	fa0f f989 	sxth.w	r9, r9
 800a7a8:	4599      	cmp	r9, r3
 800a7aa:	464a      	mov	r2, r9
 800a7ac:	dbc7      	blt.n	800a73e <st_sssa8_convolve_rgb+0x4b2>
 800a7ae:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800a7b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a7b4:	42bb      	cmp	r3, r7
 800a7b6:	f000 80d6 	beq.w	800a966 <st_sssa8_convolve_rgb+0x6da>
 800a7ba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a7c0:	3601      	adds	r6, #1
 800a7c2:	4413      	add	r3, r2
 800a7c4:	b236      	sxth	r6, r6
 800a7c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	42b2      	cmp	r2, r6
 800a7cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ce:	4633      	mov	r3, r6
 800a7d0:	dc98      	bgt.n	800a704 <st_sssa8_convolve_rgb+0x478>
 800a7d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a7d8:	440b      	add	r3, r1
 800a7da:	3201      	adds	r2, #1
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	b212      	sxth	r2, r2
 800a7e0:	9311      	str	r3, [sp, #68]	; 0x44
 800a7e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7e4:	4616      	mov	r6, r2
 800a7e6:	9215      	str	r2, [sp, #84]	; 0x54
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	f73f af7c 	bgt.w	800a6e6 <st_sssa8_convolve_rgb+0x45a>
 800a7ee:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 800a7f0:	42bb      	cmp	r3, r7
 800a7f2:	f43f af52 	beq.w	800a69a <st_sssa8_convolve_rgb+0x40e>
 800a7f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f43f af4e 	beq.w	800a69a <st_sssa8_convolve_rgb+0x40e>
 800a7fe:	f103 0901 	add.w	r9, r3, #1
 800a802:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a804:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a806:	f1a3 0e04 	sub.w	lr, r3, #4
 800a80a:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 800a80c:	f1a2 0a02 	sub.w	sl, r2, #2
 800a810:	4499      	add	r9, r3
 800a812:	1c5e      	adds	r6, r3, #1
 800a814:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a816:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800a81a:	f003 0103 	and.w	r1, r3, #3
 800a81e:	2301      	movs	r3, #1
 800a820:	f101 3bff 	add.w	fp, r1, #4294967295
 800a824:	fa03 fa0a 	lsl.w	sl, r3, sl
 800a828:	f108 33ff 	add.w	r3, r8, #4294967295
 800a82c:	fa1f fb8b 	uxth.w	fp, fp
 800a830:	b29b      	uxth	r3, r3
 800a832:	3301      	adds	r3, #1
 800a834:	0098      	lsls	r0, r3, #2
 800a836:	9007      	str	r0, [sp, #28]
 800a838:	985d      	ldr	r0, [sp, #372]	; 0x174
 800a83a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a83e:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a840:	9308      	str	r3, [sp, #32]
 800a842:	f1c2 0301 	rsb	r3, r2, #1
 800a846:	e9cd 3809 	strd	r3, r8, [sp, #36]	; 0x24
 800a84a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a84c:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 800a850:	2a00      	cmp	r2, #0
 800a852:	d044      	beq.n	800a8de <st_sssa8_convolve_rgb+0x652>
 800a854:	9a07      	ldr	r2, [sp, #28]
 800a856:	9c5d      	ldr	r4, [sp, #372]	; 0x174
 800a858:	1885      	adds	r5, r0, r2
 800a85a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a85e:	fa2f f792 	sxtb16	r7, r2, ror #8
 800a862:	fa2f f282 	sxtb16	r2, r2
 800a866:	f8d4 8000 	ldr.w	r8, [r4]
 800a86a:	eac7 4c22 	pkhtb	ip, r7, r2, asr #16
 800a86e:	eac2 4207 	pkhbt	r2, r2, r7, lsl #16
 800a872:	fb22 3308 	smlad	r3, r2, r8, r3
 800a876:	6862      	ldr	r2, [r4, #4]
 800a878:	3408      	adds	r4, #8
 800a87a:	fb2c 3302 	smlad	r3, ip, r2, r3
 800a87e:	4285      	cmp	r5, r0
 800a880:	d1eb      	bne.n	800a85a <st_sssa8_convolve_rgb+0x5ce>
 800a882:	9a08      	ldr	r2, [sp, #32]
 800a884:	b379      	cbz	r1, 800a8e6 <st_sssa8_convolve_rgb+0x65a>
 800a886:	f995 0000 	ldrsb.w	r0, [r5]
 800a88a:	8814      	ldrh	r4, [r2, #0]
 800a88c:	fb14 3300 	smlabb	r3, r4, r0, r3
 800a890:	f1bb 0f00 	cmp.w	fp, #0
 800a894:	d00b      	beq.n	800a8ae <st_sssa8_convolve_rgb+0x622>
 800a896:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800a89a:	2902      	cmp	r1, #2
 800a89c:	8854      	ldrh	r4, [r2, #2]
 800a89e:	fb14 3300 	smlabb	r3, r4, r0, r3
 800a8a2:	d004      	beq.n	800a8ae <st_sssa8_convolve_rgb+0x622>
 800a8a4:	8890      	ldrh	r0, [r2, #4]
 800a8a6:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800a8aa:	fb10 3302 	smlabb	r3, r0, r2, r3
 800a8ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a8b0:	1868      	adds	r0, r5, r1
 800a8b2:	2a15      	cmp	r2, #21
 800a8b4:	dd1b      	ble.n	800a8ee <st_sssa8_convolve_rgb+0x662>
 800a8b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a8b8:	fb53 a302 	smmla	r3, r3, r2, sl
 800a8bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a8be:	4113      	asrs	r3, r2
 800a8c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f303 0307 	ssat	r3, #8, r3
 800a8c8:	f806 3c01 	strb.w	r3, [r6, #-1]
 800a8cc:	3601      	adds	r6, #1
 800a8ce:	45b1      	cmp	r9, r6
 800a8d0:	f43f aee3 	beq.w	800a69a <st_sssa8_convolve_rgb+0x40e>
 800a8d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8d6:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 800a8da:	2a00      	cmp	r2, #0
 800a8dc:	d1ba      	bne.n	800a854 <st_sssa8_convolve_rgb+0x5c8>
 800a8de:	4605      	mov	r5, r0
 800a8e0:	9a5d      	ldr	r2, [sp, #372]	; 0x174
 800a8e2:	2900      	cmp	r1, #0
 800a8e4:	d1cf      	bne.n	800a886 <st_sssa8_convolve_rgb+0x5fa>
 800a8e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	2a15      	cmp	r2, #21
 800a8ec:	dce3      	bgt.n	800a8b6 <st_sssa8_convolve_rgb+0x62a>
 800a8ee:	2a00      	cmp	r2, #0
 800a8f0:	f340 8096 	ble.w	800aa20 <st_sssa8_convolve_rgb+0x794>
 800a8f4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800a8f6:	005b      	lsls	r3, r3, #1
 800a8f8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a8fa:	fb53 5304 	smmla	r3, r3, r4, r5
 800a8fe:	4113      	asrs	r3, r2
 800a900:	f303 0307 	ssat	r3, #8, r3
 800a904:	f806 3c01 	strb.w	r3, [r6, #-1]
 800a908:	e7e0      	b.n	800a8cc <st_sssa8_convolve_rgb+0x640>
 800a90a:	9908      	ldr	r1, [sp, #32]
 800a90c:	3201      	adds	r2, #1
 800a90e:	3306      	adds	r3, #6
 800a910:	440c      	add	r4, r1
 800a912:	b212      	sxth	r2, r2
 800a914:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a916:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a91a:	4282      	cmp	r2, r0
 800a91c:	5909      	ldr	r1, [r1, r4]
 800a91e:	4614      	mov	r4, r2
 800a920:	fa2f f581 	sxtb16	r5, r1
 800a924:	ea4f 2131 	mov.w	r1, r1, ror #8
 800a928:	fa2f f181 	sxtb16	r1, r1
 800a92c:	eac1 0105 	pkhbt	r1, r1, r5
 800a930:	f8cc 1002 	str.w	r1, [ip, #2]
 800a934:	f823 5c0c 	strh.w	r5, [r3, #-12]
 800a938:	f6ff af12 	blt.w	800a760 <st_sssa8_convolve_rgb+0x4d4>
 800a93c:	e72f      	b.n	800a79e <st_sssa8_convolve_rgb+0x512>
 800a93e:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800a940:	2a00      	cmp	r2, #0
 800a942:	d130      	bne.n	800a9a6 <st_sssa8_convolve_rgb+0x71a>
 800a944:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800a946:	9907      	ldr	r1, [sp, #28]
 800a948:	3a01      	subs	r2, #1
 800a94a:	923e      	str	r2, [sp, #248]	; 0xf8
 800a94c:	2201      	movs	r2, #1
 800a94e:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800a952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a954:	428a      	cmp	r2, r1
 800a956:	f6ff aee3 	blt.w	800a720 <st_sssa8_convolve_rgb+0x494>
 800a95a:	b2b3      	uxth	r3, r6
 800a95c:	930a      	str	r3, [sp, #40]	; 0x28
 800a95e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a960:	42bb      	cmp	r3, r7
 800a962:	f47f af2a 	bne.w	800a7ba <st_sssa8_convolve_rgb+0x52e>
 800a966:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 800a968:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a96a:	9304      	str	r3, [sp, #16]
 800a96c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a96e:	995d      	ldr	r1, [sp, #372]	; 0x174
 800a970:	9303      	str	r3, [sp, #12]
 800a972:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a974:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a976:	9302      	str	r3, [sp, #8]
 800a978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a97a:	9301      	str	r3, [sp, #4]
 800a97c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a97e:	9300      	str	r3, [sp, #0]
 800a980:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a982:	f000 faef 	bl	800af64 <st_sssa8_nn_mat_mult_kernel>
 800a986:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a98a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a98c:	3601      	adds	r6, #1
 800a98e:	9f5d      	ldr	r7, [sp, #372]	; 0x174
 800a990:	4413      	add	r3, r2
 800a992:	b236      	sxth	r6, r6
 800a994:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a996:	b29b      	uxth	r3, r3
 800a998:	905b      	str	r0, [sp, #364]	; 0x16c
 800a99a:	42b2      	cmp	r2, r6
 800a99c:	9309      	str	r3, [sp, #36]	; 0x24
 800a99e:	4633      	mov	r3, r6
 800a9a0:	f73f aeb0 	bgt.w	800a704 <st_sssa8_convolve_rgb+0x478>
 800a9a4:	e715      	b.n	800a7d2 <st_sssa8_convolve_rgb+0x546>
 800a9a6:	3a01      	subs	r2, #1
 800a9a8:	923d      	str	r2, [sp, #244]	; 0xf4
 800a9aa:	f8bd 2114 	ldrh.w	r2, [sp, #276]	; 0x114
 800a9ae:	2a01      	cmp	r2, #1
 800a9b0:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800a9b4:	f43f aeaf 	beq.w	800a716 <st_sssa8_convolve_rgb+0x48a>
 800a9b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9ba:	9907      	ldr	r1, [sp, #28]
 800a9bc:	428a      	cmp	r2, r1
 800a9be:	dacc      	bge.n	800a95a <st_sssa8_convolve_rgb+0x6ce>
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	468c      	mov	ip, r1
 800a9c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9c8:	4605      	mov	r5, r0
 800a9ca:	fb03 2301 	mla	r3, r3, r1, r2
 800a9ce:	b2b2      	uxth	r2, r6
 800a9d0:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 800a9d4:	920a      	str	r2, [sp, #40]	; 0x28
 800a9d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a9d8:	1a9c      	subs	r4, r3, r2
 800a9da:	42a6      	cmp	r6, r4
 800a9dc:	da1a      	bge.n	800aa14 <st_sssa8_convolve_rgb+0x788>
 800a9de:	fb00 f10a 	mul.w	r1, r0, sl
 800a9e2:	4632      	mov	r2, r6
 800a9e4:	4633      	mov	r3, r6
 800a9e6:	440b      	add	r3, r1
 800a9e8:	3201      	adds	r2, #1
 800a9ea:	3706      	adds	r7, #6
 800a9ec:	b212      	sxth	r2, r2
 800a9ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a9f2:	42a2      	cmp	r2, r4
 800a9f4:	f85b 3003 	ldr.w	r3, [fp, r3]
 800a9f8:	fa2f f083 	sxtb16	r0, r3
 800a9fc:	ea4f 2333 	mov.w	r3, r3, ror #8
 800aa00:	f827 0c06 	strh.w	r0, [r7, #-6]
 800aa04:	fa2f f383 	sxtb16	r3, r3
 800aa08:	eac3 0300 	pkhbt	r3, r3, r0
 800aa0c:	f847 3c04 	str.w	r3, [r7, #-4]
 800aa10:	4613      	mov	r3, r2
 800aa12:	dbe8      	blt.n	800a9e6 <st_sssa8_convolve_rgb+0x75a>
 800aa14:	3501      	adds	r5, #1
 800aa16:	b22d      	sxth	r5, r5
 800aa18:	4565      	cmp	r5, ip
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	dbdd      	blt.n	800a9da <st_sssa8_convolve_rgb+0x74e>
 800aa1e:	e6c8      	b.n	800a7b2 <st_sssa8_convolve_rgb+0x526>
 800aa20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa22:	4093      	lsls	r3, r2
 800aa24:	f303 031f 	ssat	r3, #32, r3
 800aa28:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aa2a:	fb53 f312 	smmulr	r3, r3, r2
 800aa2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa30:	4413      	add	r3, r2
 800aa32:	f303 0307 	ssat	r3, #8, r3
 800aa36:	f806 3c01 	strb.w	r3, [r6, #-1]
 800aa3a:	e747      	b.n	800a8cc <st_sssa8_convolve_rgb+0x640>
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	ee18 1a10 	vmov	r1, s16
 800aa42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa44:	981a      	ldr	r0, [sp, #104]	; 0x68
 800aa46:	f000 f9a3 	bl	800ad90 <st_int8_to16_dual>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	9321      	str	r3, [sp, #132]	; 0x84
 800aa4e:	e47f      	b.n	800a350 <st_sssa8_convolve_rgb+0xc4>
 800aa50:	2201      	movs	r2, #1
 800aa52:	408b      	lsls	r3, r1
 800aa54:	408a      	lsls	r2, r1
 800aa56:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800aa5a:	9314      	str	r3, [sp, #80]	; 0x50
 800aa5c:	462b      	mov	r3, r5
 800aa5e:	e44d      	b.n	800a2fc <st_sssa8_convolve_rgb+0x70>
 800aa60:	f06f 0002 	mvn.w	r0, #2
 800aa64:	e61a      	b.n	800a69c <st_sssa8_convolve_rgb+0x410>
 800aa66:	bf00      	nop

0800aa68 <st_sssa8_convolve_1x1_WeightsPrefetch>:
 800aa68:	fb02 fc01 	mul.w	ip, r2, r1
 800aa6c:	b510      	push	{r4, lr}
 800aa6e:	685c      	ldr	r4, [r3, #4]
 800aa70:	ebb4 0f4c 	cmp.w	r4, ip, lsl #1
 800aa74:	da01      	bge.n	800aa7a <st_sssa8_convolve_1x1_WeightsPrefetch+0x12>
 800aa76:	2000      	movs	r0, #0
 800aa78:	bd10      	pop	{r4, pc}
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f000 fdac 	bl	800b5d8 <st_sssa8_fullW_prefetch>
 800aa80:	2000      	movs	r0, #0
 800aa82:	bd10      	pop	{r4, pc}

0800aa84 <st_sssa8_convolve_1x1>:
 800aa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa88:	b08b      	sub	sp, #44	; 0x2c
 800aa8a:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
 800aa8e:	f8bd 6054 	ldrh.w	r6, [sp, #84]	; 0x54
 800aa92:	2d01      	cmp	r5, #1
 800aa94:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
 800aa98:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800aa9c:	f8bd e064 	ldrh.w	lr, [sp, #100]	; 0x64
 800aaa0:	f8bd a068 	ldrh.w	sl, [sp, #104]	; 0x68
 800aaa4:	f8bd b06c 	ldrh.w	fp, [sp, #108]	; 0x6c
 800aaa8:	f99d 807c 	ldrsb.w	r8, [sp, #124]	; 0x7c
 800aaac:	f99d c080 	ldrsb.w	ip, [sp, #128]	; 0x80
 800aab0:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800aab2:	d139      	bne.n	800ab28 <st_sssa8_convolve_1x1+0xa4>
 800aab4:	2f01      	cmp	r7, #1
 800aab6:	d137      	bne.n	800ab28 <st_sssa8_convolve_1x1+0xa4>
 800aab8:	ea59 050e 	orrs.w	r5, r9, lr
 800aabc:	d134      	bne.n	800ab28 <st_sssa8_convolve_1x1+0xa4>
 800aabe:	f1ba 0f01 	cmp.w	sl, #1
 800aac2:	d131      	bne.n	800ab28 <st_sssa8_convolve_1x1+0xa4>
 800aac4:	f1bb 0f01 	cmp.w	fp, #1
 800aac8:	d12e      	bne.n	800ab28 <st_sssa8_convolve_1x1+0xa4>
 800aaca:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800aacc:	f9b5 7000 	ldrsh.w	r7, [r5]
 800aad0:	e9d4 5e00 	ldrd	r5, lr, [r4]
 800aad4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800aad6:	f8d4 9000 	ldr.w	r9, [r4]
 800aada:	1e7c      	subs	r4, r7, #1
 800aadc:	b2a4      	uxth	r4, r4
 800aade:	2c14      	cmp	r4, #20
 800aae0:	d91b      	bls.n	800ab1a <st_sssa8_convolve_1x1+0x96>
 800aae2:	4664      	mov	r4, ip
 800aae4:	9304      	str	r3, [sp, #16]
 800aae6:	fb06 f303 	mul.w	r3, r6, r3
 800aaea:	fb01 f202 	mul.w	r2, r1, r2
 800aaee:	9914      	ldr	r1, [sp, #80]	; 0x50
 800aaf0:	ebbe 0f43 	cmp.w	lr, r3, lsl #1
 800aaf4:	9507      	str	r5, [sp, #28]
 800aaf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaf8:	bfb8      	it	lt
 800aafa:	2500      	movlt	r5, #0
 800aafc:	f8cd 9000 	str.w	r9, [sp]
 800ab00:	9603      	str	r6, [sp, #12]
 800ab02:	9508      	str	r5, [sp, #32]
 800ab04:	e9cd 7201 	strd	r7, r2, [sp, #4]
 800ab08:	e9cd 8405 	strd	r8, r4, [sp, #20]
 800ab0c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ab0e:	f000 fe65 	bl	800b7dc <st_sssa8_nn_mat_mult_nt_t>
 800ab12:	2000      	movs	r0, #0
 800ab14:	b00b      	add	sp, #44	; 0x2c
 800ab16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1a:	2401      	movs	r4, #1
 800ab1c:	fa0c fc07 	lsl.w	ip, ip, r7
 800ab20:	40bc      	lsls	r4, r7
 800ab22:	eb0c 0454 	add.w	r4, ip, r4, lsr #1
 800ab26:	e7dd      	b.n	800aae4 <st_sssa8_convolve_1x1+0x60>
 800ab28:	f06f 0002 	mvn.w	r0, #2
 800ab2c:	e7f2      	b.n	800ab14 <st_sssa8_convolve_1x1+0x90>
 800ab2e:	bf00      	nop

0800ab30 <ai_padding_opt_init>:
 800ab30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab34:	2700      	movs	r7, #0
 800ab36:	9c07      	ldr	r4, [sp, #28]
 800ab38:	e9c0 7700 	strd	r7, r7, [r0]
 800ab3c:	6087      	str	r7, [r0, #8]
 800ab3e:	46b9      	mov	r9, r7
 800ab40:	690d      	ldr	r5, [r1, #16]
 800ab42:	f1c5 0c00 	rsb	ip, r5, #0
 800ab46:	689d      	ldr	r5, [r3, #8]
 800ab48:	42bd      	cmp	r5, r7
 800ab4a:	dd1c      	ble.n	800ab86 <ai_padding_opt_init+0x56>
 800ab4c:	463e      	mov	r6, r7
 800ab4e:	46be      	mov	lr, r7
 800ab50:	e010      	b.n	800ab74 <ai_padding_opt_init+0x44>
 800ab52:	6895      	ldr	r5, [r2, #8]
 800ab54:	eba5 080c 	sub.w	r8, r5, ip
 800ab58:	68a5      	ldr	r5, [r4, #8]
 800ab5a:	45a8      	cmp	r8, r5
 800ab5c:	da10      	bge.n	800ab80 <ai_padding_opt_init+0x50>
 800ab5e:	f109 0901 	add.w	r9, r9, #1
 800ab62:	f8c0 9008 	str.w	r9, [r0, #8]
 800ab66:	688d      	ldr	r5, [r1, #8]
 800ab68:	f10e 0e01 	add.w	lr, lr, #1
 800ab6c:	44ac      	add	ip, r5
 800ab6e:	689d      	ldr	r5, [r3, #8]
 800ab70:	4575      	cmp	r5, lr
 800ab72:	dd09      	ble.n	800ab88 <ai_padding_opt_init+0x58>
 800ab74:	f1bc 0f00 	cmp.w	ip, #0
 800ab78:	daeb      	bge.n	800ab52 <ai_padding_opt_init+0x22>
 800ab7a:	3601      	adds	r6, #1
 800ab7c:	6006      	str	r6, [r0, #0]
 800ab7e:	e7f2      	b.n	800ab66 <ai_padding_opt_init+0x36>
 800ab80:	3701      	adds	r7, #1
 800ab82:	6047      	str	r7, [r0, #4]
 800ab84:	e7ef      	b.n	800ab66 <ai_padding_opt_init+0x36>
 800ab86:	463e      	mov	r6, r7
 800ab88:	2500      	movs	r5, #0
 800ab8a:	f8c0 9014 	str.w	r9, [r0, #20]
 800ab8e:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800ab92:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800ab96:	6205      	str	r5, [r0, #32]
 800ab98:	694e      	ldr	r6, [r1, #20]
 800ab9a:	f1c6 0c00 	rsb	ip, r6, #0
 800ab9e:	685e      	ldr	r6, [r3, #4]
 800aba0:	42ae      	cmp	r6, r5
 800aba2:	dd1c      	ble.n	800abde <ai_padding_opt_init+0xae>
 800aba4:	46ae      	mov	lr, r5
 800aba6:	e00f      	b.n	800abc8 <ai_padding_opt_init+0x98>
 800aba8:	6855      	ldr	r5, [r2, #4]
 800abaa:	6866      	ldr	r6, [r4, #4]
 800abac:	eba5 050c 	sub.w	r5, r5, ip
 800abb0:	42b5      	cmp	r5, r6
 800abb2:	da10      	bge.n	800abd6 <ai_padding_opt_init+0xa6>
 800abb4:	6a05      	ldr	r5, [r0, #32]
 800abb6:	3501      	adds	r5, #1
 800abb8:	6205      	str	r5, [r0, #32]
 800abba:	68cd      	ldr	r5, [r1, #12]
 800abbc:	f10e 0e01 	add.w	lr, lr, #1
 800abc0:	44ac      	add	ip, r5
 800abc2:	685d      	ldr	r5, [r3, #4]
 800abc4:	4575      	cmp	r5, lr
 800abc6:	dd0a      	ble.n	800abde <ai_padding_opt_init+0xae>
 800abc8:	f1bc 0f00 	cmp.w	ip, #0
 800abcc:	daec      	bge.n	800aba8 <ai_padding_opt_init+0x78>
 800abce:	6985      	ldr	r5, [r0, #24]
 800abd0:	3501      	adds	r5, #1
 800abd2:	6185      	str	r5, [r0, #24]
 800abd4:	e7f1      	b.n	800abba <ai_padding_opt_init+0x8a>
 800abd6:	69c5      	ldr	r5, [r0, #28]
 800abd8:	3501      	adds	r5, #1
 800abda:	61c5      	str	r5, [r0, #28]
 800abdc:	e7ed      	b.n	800abba <ai_padding_opt_init+0x8a>
 800abde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abe2:	bf00      	nop

0800abe4 <ai_padding_opt_phase1>:
 800abe4:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800abe8:	b923      	cbnz	r3, 800abf4 <ai_padding_opt_phase1+0x10>
 800abea:	b17a      	cbz	r2, 800ac0c <ai_padding_opt_phase1+0x28>
 800abec:	3a01      	subs	r2, #1
 800abee:	8483      	strh	r3, [r0, #36]	; 0x24
 800abf0:	61c2      	str	r2, [r0, #28]
 800abf2:	e004      	b.n	800abfe <ai_padding_opt_phase1+0x1a>
 800abf4:	b152      	cbz	r2, 800ac0c <ai_padding_opt_phase1+0x28>
 800abf6:	2201      	movs	r2, #1
 800abf8:	3b01      	subs	r3, #1
 800abfa:	8482      	strh	r2, [r0, #36]	; 0x24
 800abfc:	6183      	str	r3, [r0, #24]
 800abfe:	68c3      	ldr	r3, [r0, #12]
 800ac00:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800ac04:	6003      	str	r3, [r0, #0]
 800ac06:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800ac0a:	4770      	bx	lr
 800ac0c:	6a03      	ldr	r3, [r0, #32]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	3b01      	subs	r3, #1
 800ac12:	8482      	strh	r2, [r0, #36]	; 0x24
 800ac14:	6203      	str	r3, [r0, #32]
 800ac16:	e7f2      	b.n	800abfe <ai_padding_opt_phase1+0x1a>

0800ac18 <st_uint8_fill>:
 800ac18:	078b      	lsls	r3, r1, #30
 800ac1a:	468c      	mov	ip, r1
 800ac1c:	d00a      	beq.n	800ac34 <st_uint8_fill+0x1c>
 800ac1e:	b912      	cbnz	r2, 800ac26 <st_uint8_fill+0xe>
 800ac20:	e04d      	b.n	800acbe <st_uint8_fill+0xa6>
 800ac22:	2a00      	cmp	r2, #0
 800ac24:	d04c      	beq.n	800acc0 <st_uint8_fill+0xa8>
 800ac26:	f80c 0b01 	strb.w	r0, [ip], #1
 800ac2a:	f01c 0f03 	tst.w	ip, #3
 800ac2e:	f102 32ff 	add.w	r2, r2, #4294967295
 800ac32:	d1f6      	bne.n	800ac22 <st_uint8_fill+0xa>
 800ac34:	b510      	push	{r4, lr}
 800ac36:	0404      	lsls	r4, r0, #16
 800ac38:	0911      	lsrs	r1, r2, #4
 800ac3a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 800ac3e:	ea44 0400 	orr.w	r4, r4, r0
 800ac42:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 800ac46:	d03d      	beq.n	800acc4 <st_uint8_fill+0xac>
 800ac48:	1e4b      	subs	r3, r1, #1
 800ac4a:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 800ac4e:	2b04      	cmp	r3, #4
 800ac50:	f10c 0310 	add.w	r3, ip, #16
 800ac54:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800ac58:	d922      	bls.n	800aca0 <st_uint8_fill+0x88>
 800ac5a:	f01c 0f07 	tst.w	ip, #7
 800ac5e:	d11f      	bne.n	800aca0 <st_uint8_fill+0x88>
 800ac60:	e943 4404 	strd	r4, r4, [r3, #-16]
 800ac64:	e943 4402 	strd	r4, r4, [r3, #-8]
 800ac68:	3310      	adds	r3, #16
 800ac6a:	428b      	cmp	r3, r1
 800ac6c:	d1f8      	bne.n	800ac60 <st_uint8_fill+0x48>
 800ac6e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800ac72:	44f4      	add	ip, lr
 800ac74:	f002 0203 	and.w	r2, r2, #3
 800ac78:	b15b      	cbz	r3, 800ac92 <st_uint8_fill+0x7a>
 800ac7a:	1e59      	subs	r1, r3, #1
 800ac7c:	f8cc 4000 	str.w	r4, [ip]
 800ac80:	d005      	beq.n	800ac8e <st_uint8_fill+0x76>
 800ac82:	2901      	cmp	r1, #1
 800ac84:	f8cc 4004 	str.w	r4, [ip, #4]
 800ac88:	bf18      	it	ne
 800ac8a:	f8cc 4008 	strne.w	r4, [ip, #8]
 800ac8e:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 800ac92:	b1b2      	cbz	r2, 800acc2 <st_uint8_fill+0xaa>
 800ac94:	4601      	mov	r1, r0
 800ac96:	4660      	mov	r0, ip
 800ac98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac9c:	f002 bb76 	b.w	800d38c <memset>
 800aca0:	e943 4404 	strd	r4, r4, [r3, #-16]
 800aca4:	e943 4402 	strd	r4, r4, [r3, #-8]
 800aca8:	3310      	adds	r3, #16
 800acaa:	428b      	cmp	r3, r1
 800acac:	d0df      	beq.n	800ac6e <st_uint8_fill+0x56>
 800acae:	e943 4404 	strd	r4, r4, [r3, #-16]
 800acb2:	e943 4402 	strd	r4, r4, [r3, #-8]
 800acb6:	3310      	adds	r3, #16
 800acb8:	428b      	cmp	r3, r1
 800acba:	d1f1      	bne.n	800aca0 <st_uint8_fill+0x88>
 800acbc:	e7d7      	b.n	800ac6e <st_uint8_fill+0x56>
 800acbe:	4770      	bx	lr
 800acc0:	4770      	bx	lr
 800acc2:	bd10      	pop	{r4, pc}
 800acc4:	0893      	lsrs	r3, r2, #2
 800acc6:	f002 0203 	and.w	r2, r2, #3
 800acca:	e7d5      	b.n	800ac78 <st_uint8_fill+0x60>

0800accc <st_int8_to16_no_shift>:
 800accc:	b570      	push	{r4, r5, r6, lr}
 800acce:	f1b2 0410 	subs.w	r4, r2, #16
 800acd2:	f04f 0e00 	mov.w	lr, #0
 800acd6:	d438      	bmi.n	800ad4a <st_int8_to16_no_shift+0x7e>
 800acd8:	f8d0 c000 	ldr.w	ip, [r0]
 800acdc:	6843      	ldr	r3, [r0, #4]
 800acde:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800ace2:	fa2f fc8c 	sxtb16	ip, ip
 800ace6:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800acea:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800acee:	fa2f f593 	sxtb16	r5, r3, ror #8
 800acf2:	3010      	adds	r0, #16
 800acf4:	604e      	str	r6, [r1, #4]
 800acf6:	f8c1 c000 	str.w	ip, [r1]
 800acfa:	fa2f f383 	sxtb16	r3, r3
 800acfe:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800ad02:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800ad06:	60ce      	str	r6, [r1, #12]
 800ad08:	608b      	str	r3, [r1, #8]
 800ad0a:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800ad0e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ad12:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800ad16:	fa2f fc8c 	sxtb16	ip, ip
 800ad1a:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800ad1e:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800ad22:	fa2f f593 	sxtb16	r5, r3, ror #8
 800ad26:	f10e 0e10 	add.w	lr, lr, #16
 800ad2a:	f8c1 c010 	str.w	ip, [r1, #16]
 800ad2e:	614e      	str	r6, [r1, #20]
 800ad30:	3120      	adds	r1, #32
 800ad32:	45a6      	cmp	lr, r4
 800ad34:	fa2f f383 	sxtb16	r3, r3
 800ad38:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 800ad3c:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800ad40:	f841 cc04 	str.w	ip, [r1, #-4]
 800ad44:	f841 3c08 	str.w	r3, [r1, #-8]
 800ad48:	ddc6      	ble.n	800acd8 <st_int8_to16_no_shift+0xc>
 800ad4a:	1f16      	subs	r6, r2, #4
 800ad4c:	4576      	cmp	r6, lr
 800ad4e:	db12      	blt.n	800ad76 <st_int8_to16_no_shift+0xaa>
 800ad50:	f850 3b04 	ldr.w	r3, [r0], #4
 800ad54:	fa2f f493 	sxtb16	r4, r3, ror #8
 800ad58:	f10e 0e04 	add.w	lr, lr, #4
 800ad5c:	3108      	adds	r1, #8
 800ad5e:	fa2f f383 	sxtb16	r3, r3
 800ad62:	45b6      	cmp	lr, r6
 800ad64:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 800ad68:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 800ad6c:	f841 5c04 	str.w	r5, [r1, #-4]
 800ad70:	f841 3c08 	str.w	r3, [r1, #-8]
 800ad74:	ddec      	ble.n	800ad50 <st_int8_to16_no_shift+0x84>
 800ad76:	4572      	cmp	r2, lr
 800ad78:	dd08      	ble.n	800ad8c <st_int8_to16_no_shift+0xc0>
 800ad7a:	eba2 020e 	sub.w	r2, r2, lr
 800ad7e:	4402      	add	r2, r0
 800ad80:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800ad84:	4290      	cmp	r0, r2
 800ad86:	f821 3b02 	strh.w	r3, [r1], #2
 800ad8a:	d1f9      	bne.n	800ad80 <st_int8_to16_no_shift+0xb4>
 800ad8c:	bd70      	pop	{r4, r5, r6, pc}
 800ad8e:	bf00      	nop

0800ad90 <st_int8_to16_dual>:
 800ad90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad94:	4698      	mov	r8, r3
 800ad96:	085b      	lsrs	r3, r3, #1
 800ad98:	eb00 0c02 	add.w	ip, r0, r2
 800ad9c:	f000 80b9 	beq.w	800af12 <st_int8_to16_dual+0x182>
 800ada0:	f1a2 0710 	sub.w	r7, r2, #16
 800ada4:	1f16      	subs	r6, r2, #4
 800ada6:	2f00      	cmp	r7, #0
 800ada8:	f04f 0500 	mov.w	r5, #0
 800adac:	db73      	blt.n	800ae96 <st_int8_to16_dual+0x106>
 800adae:	f8d0 e000 	ldr.w	lr, [r0]
 800adb2:	f8dc 4000 	ldr.w	r4, [ip]
 800adb6:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800adba:	fa2f fe8e 	sxtb16	lr, lr
 800adbe:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800adc2:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800adc6:	fa2f f994 	sxtb16	r9, r4, ror #8
 800adca:	f8c1 e000 	str.w	lr, [r1]
 800adce:	f8c1 a008 	str.w	sl, [r1, #8]
 800add2:	fa2f f484 	sxtb16	r4, r4
 800add6:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800adda:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800adde:	f8c1 e00c 	str.w	lr, [r1, #12]
 800ade2:	604c      	str	r4, [r1, #4]
 800ade4:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800ade8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800adec:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800adf0:	fa2f fe8e 	sxtb16	lr, lr
 800adf4:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800adf8:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800adfc:	fa2f f994 	sxtb16	r9, r4, ror #8
 800ae00:	f8c1 e010 	str.w	lr, [r1, #16]
 800ae04:	f8c1 a018 	str.w	sl, [r1, #24]
 800ae08:	fa2f f484 	sxtb16	r4, r4
 800ae0c:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800ae10:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800ae14:	f8c1 e01c 	str.w	lr, [r1, #28]
 800ae18:	614c      	str	r4, [r1, #20]
 800ae1a:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800ae1e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800ae22:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800ae26:	fa2f fe8e 	sxtb16	lr, lr
 800ae2a:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800ae2e:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800ae32:	fa2f f994 	sxtb16	r9, r4, ror #8
 800ae36:	3010      	adds	r0, #16
 800ae38:	f10c 0c10 	add.w	ip, ip, #16
 800ae3c:	f8c1 e020 	str.w	lr, [r1, #32]
 800ae40:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 800ae44:	fa2f f484 	sxtb16	r4, r4
 800ae48:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800ae4c:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800ae50:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 800ae54:	624c      	str	r4, [r1, #36]	; 0x24
 800ae56:	f850 ec04 	ldr.w	lr, [r0, #-4]
 800ae5a:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800ae5e:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800ae62:	fa2f fe8e 	sxtb16	lr, lr
 800ae66:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 800ae6a:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800ae6e:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800ae72:	3510      	adds	r5, #16
 800ae74:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 800ae78:	f8c1 9038 	str.w	r9, [r1, #56]	; 0x38
 800ae7c:	3140      	adds	r1, #64	; 0x40
 800ae7e:	42bd      	cmp	r5, r7
 800ae80:	fa2f f484 	sxtb16	r4, r4
 800ae84:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 800ae88:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800ae8c:	f841 ec04 	str.w	lr, [r1, #-4]
 800ae90:	f841 4c0c 	str.w	r4, [r1, #-12]
 800ae94:	dd8b      	ble.n	800adae <st_int8_to16_dual+0x1e>
 800ae96:	42ae      	cmp	r6, r5
 800ae98:	db1e      	blt.n	800aed8 <st_int8_to16_dual+0x148>
 800ae9a:	f850 4b04 	ldr.w	r4, [r0], #4
 800ae9e:	f85c eb04 	ldr.w	lr, [ip], #4
 800aea2:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800aea6:	fa2f f484 	sxtb16	r4, r4
 800aeaa:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 800aeae:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800aeb2:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800aeb6:	3504      	adds	r5, #4
 800aeb8:	600c      	str	r4, [r1, #0]
 800aeba:	f8c1 9008 	str.w	r9, [r1, #8]
 800aebe:	3110      	adds	r1, #16
 800aec0:	42b5      	cmp	r5, r6
 800aec2:	fa2f fe8e 	sxtb16	lr, lr
 800aec6:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 800aeca:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800aece:	f841 4c04 	str.w	r4, [r1, #-4]
 800aed2:	f841 ec0c 	str.w	lr, [r1, #-12]
 800aed6:	dde0      	ble.n	800ae9a <st_int8_to16_dual+0x10a>
 800aed8:	42aa      	cmp	r2, r5
 800aeda:	dd40      	ble.n	800af5e <st_int8_to16_dual+0x1ce>
 800aedc:	1b55      	subs	r5, r2, r5
 800aede:	1d0c      	adds	r4, r1, #4
 800aee0:	46e6      	mov	lr, ip
 800aee2:	eb00 0a05 	add.w	sl, r0, r5
 800aee6:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800aeea:	3404      	adds	r4, #4
 800aeec:	f824 9c08 	strh.w	r9, [r4, #-8]
 800aef0:	4550      	cmp	r0, sl
 800aef2:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 800aef6:	f824 9c06 	strh.w	r9, [r4, #-6]
 800aefa:	d1f4      	bne.n	800aee6 <st_int8_to16_dual+0x156>
 800aefc:	44ac      	add	ip, r5
 800aefe:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800af02:	3b01      	subs	r3, #1
 800af04:	eb0a 0002 	add.w	r0, sl, r2
 800af08:	4494      	add	ip, r2
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f47f af4a 	bne.w	800ada6 <st_int8_to16_dual+0x16>
 800af12:	f018 0f01 	tst.w	r8, #1
 800af16:	d020      	beq.n	800af5a <st_int8_to16_dual+0x1ca>
 800af18:	1f17      	subs	r7, r2, #4
 800af1a:	f04f 0400 	mov.w	r4, #0
 800af1e:	d411      	bmi.n	800af44 <st_int8_to16_dual+0x1b4>
 800af20:	f850 3b04 	ldr.w	r3, [r0], #4
 800af24:	fa2f f593 	sxtb16	r5, r3, ror #8
 800af28:	3404      	adds	r4, #4
 800af2a:	3108      	adds	r1, #8
 800af2c:	fa2f f383 	sxtb16	r3, r3
 800af30:	42a7      	cmp	r7, r4
 800af32:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800af36:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800af3a:	f841 6c04 	str.w	r6, [r1, #-4]
 800af3e:	f841 3c08 	str.w	r3, [r1, #-8]
 800af42:	daed      	bge.n	800af20 <st_int8_to16_dual+0x190>
 800af44:	42a2      	cmp	r2, r4
 800af46:	dd08      	ble.n	800af5a <st_int8_to16_dual+0x1ca>
 800af48:	1b13      	subs	r3, r2, r4
 800af4a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800af4e:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800af52:	f821 2b02 	strh.w	r2, [r1], #2
 800af56:	428b      	cmp	r3, r1
 800af58:	d1f9      	bne.n	800af4e <st_int8_to16_dual+0x1be>
 800af5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af5e:	4682      	mov	sl, r0
 800af60:	e7cf      	b.n	800af02 <st_int8_to16_dual+0x172>
 800af62:	bf00      	nop

0800af64 <st_sssa8_nn_mat_mult_kernel>:
 800af64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af68:	b09f      	sub	sp, #124	; 0x7c
 800af6a:	4680      	mov	r8, r0
 800af6c:	0858      	lsrs	r0, r3, #1
 800af6e:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800af70:	f8bd 40a0 	ldrh.w	r4, [sp, #160]	; 0xa0
 800af74:	f9bd 50a4 	ldrsh.w	r5, [sp, #164]	; 0xa4
 800af78:	441e      	add	r6, r3
 800af7a:	931b      	str	r3, [sp, #108]	; 0x6c
 800af7c:	9110      	str	r1, [sp, #64]	; 0x40
 800af7e:	921a      	str	r2, [sp, #104]	; 0x68
 800af80:	9407      	str	r4, [sp, #28]
 800af82:	950f      	str	r5, [sp, #60]	; 0x3c
 800af84:	9619      	str	r6, [sp, #100]	; 0x64
 800af86:	901d      	str	r0, [sp, #116]	; 0x74
 800af88:	f000 820b 	beq.w	800b3a2 <st_sssa8_nn_mat_mult_kernel+0x43e>
 800af8c:	460f      	mov	r7, r1
 800af8e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 800af92:	4694      	mov	ip, r2
 800af94:	1e42      	subs	r2, r0, #1
 800af96:	9111      	str	r1, [sp, #68]	; 0x44
 800af98:	2001      	movs	r0, #1
 800af9a:	1ea9      	subs	r1, r5, #2
 800af9c:	f1a4 0310 	sub.w	r3, r4, #16
 800afa0:	b292      	uxth	r2, r2
 800afa2:	4088      	lsls	r0, r1
 800afa4:	091b      	lsrs	r3, r3, #4
 800afa6:	f10c 0110 	add.w	r1, ip, #16
 800afaa:	9017      	str	r0, [sp, #92]	; 0x5c
 800afac:	4660      	mov	r0, ip
 800afae:	3301      	adds	r3, #1
 800afb0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800afb4:	3008      	adds	r0, #8
 800afb6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800afb8:	9213      	str	r2, [sp, #76]	; 0x4c
 800afba:	4622      	mov	r2, r4
 800afbc:	9008      	str	r0, [sp, #32]
 800afbe:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 800afc2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800afc4:	3c03      	subs	r4, #3
 800afc6:	9115      	str	r1, [sp, #84]	; 0x54
 800afc8:	3002      	adds	r0, #2
 800afca:	9412      	str	r4, [sp, #72]	; 0x48
 800afcc:	9009      	str	r0, [sp, #36]	; 0x24
 800afce:	1cb0      	adds	r0, r6, #2
 800afd0:	900a      	str	r0, [sp, #40]	; 0x28
 800afd2:	0118      	lsls	r0, r3, #4
 800afd4:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 800afd8:	900b      	str	r0, [sp, #44]	; 0x2c
 800afda:	9314      	str	r3, [sp, #80]	; 0x50
 800afdc:	1f13      	subs	r3, r2, #4
 800afde:	9316      	str	r3, [sp, #88]	; 0x58
 800afe0:	f1c5 0301 	rsb	r3, r5, #1
 800afe4:	931c      	str	r3, [sp, #112]	; 0x70
 800afe6:	1e6b      	subs	r3, r5, #1
 800afe8:	9318      	str	r3, [sp, #96]	; 0x60
 800afea:	9b07      	ldr	r3, [sp, #28]
 800afec:	9908      	ldr	r1, [sp, #32]
 800afee:	eb08 0503 	add.w	r5, r8, r3
 800aff2:	2b0f      	cmp	r3, #15
 800aff4:	e951 2a02 	ldrd	r2, sl, [r1, #-8]
 800aff8:	9503      	str	r5, [sp, #12]
 800affa:	f340 82ad 	ble.w	800b558 <st_sssa8_nn_mat_mult_kernel+0x5f4>
 800affe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b000:	46d6      	mov	lr, sl
 800b002:	4691      	mov	r9, r2
 800b004:	9501      	str	r5, [sp, #4]
 800b006:	4443      	add	r3, r8
 800b008:	e9dd 0410 	ldrd	r0, r4, [sp, #64]	; 0x40
 800b00c:	9302      	str	r3, [sp, #8]
 800b00e:	9000      	str	r0, [sp, #0]
 800b010:	9b00      	ldr	r3, [sp, #0]
 800b012:	f8d4 c000 	ldr.w	ip, [r4]
 800b016:	681f      	ldr	r7, [r3, #0]
 800b018:	f8d8 1000 	ldr.w	r1, [r8]
 800b01c:	fa2f f391 	sxtb16	r3, r1, ror #8
 800b020:	9801      	ldr	r0, [sp, #4]
 800b022:	fa2f f181 	sxtb16	r1, r1
 800b026:	6805      	ldr	r5, [r0, #0]
 800b028:	eac3 4b21 	pkhtb	fp, r3, r1, asr #16
 800b02c:	eac1 4103 	pkhbt	r1, r1, r3, lsl #16
 800b030:	fa2f f695 	sxtb16	r6, r5, ror #8
 800b034:	fa2f f585 	sxtb16	r5, r5
 800b038:	eac6 4325 	pkhtb	r3, r6, r5, asr #16
 800b03c:	eac5 4506 	pkhbt	r5, r5, r6, lsl #16
 800b040:	fb21 2207 	smlad	r2, r1, r7, r2
 800b044:	fb21 910c 	smlad	r1, r1, ip, r9
 800b048:	fb25 a707 	smlad	r7, r5, r7, sl
 800b04c:	fb25 e50c 	smlad	r5, r5, ip, lr
 800b050:	9e00      	ldr	r6, [sp, #0]
 800b052:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800b056:	f8d6 a004 	ldr.w	sl, [r6, #4]
 800b05a:	fb2b 260a 	smlad	r6, fp, sl, r2
 800b05e:	fb2b 1b0e 	smlad	fp, fp, lr, r1
 800b062:	fb23 770a 	smlad	r7, r3, sl, r7
 800b066:	fb23 5e0e 	smlad	lr, r3, lr, r5
 800b06a:	9b00      	ldr	r3, [sp, #0]
 800b06c:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800b070:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800b074:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b078:	fa2f f995 	sxtb16	r9, r5, ror #8
 800b07c:	fa2f f585 	sxtb16	r5, r5
 800b080:	6843      	ldr	r3, [r0, #4]
 800b082:	eac9 4125 	pkhtb	r1, r9, r5, asr #16
 800b086:	eac5 4509 	pkhbt	r5, r5, r9, lsl #16
 800b08a:	fa2f f993 	sxtb16	r9, r3, ror #8
 800b08e:	fa2f f383 	sxtb16	r3, r3
 800b092:	eac9 4223 	pkhtb	r2, r9, r3, asr #16
 800b096:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 800b09a:	fb25 660a 	smlad	r6, r5, sl, r6
 800b09e:	fb25 bb0c 	smlad	fp, r5, ip, fp
 800b0a2:	fb23 7a0a 	smlad	sl, r3, sl, r7
 800b0a6:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800b0aa:	9b00      	ldr	r3, [sp, #0]
 800b0ac:	68e5      	ldr	r5, [r4, #12]
 800b0ae:	68df      	ldr	r7, [r3, #12]
 800b0b0:	fb21 6607 	smlad	r6, r1, r7, r6
 800b0b4:	fb21 b105 	smlad	r1, r1, r5, fp
 800b0b8:	fb22 aa07 	smlad	sl, r2, r7, sl
 800b0bc:	fb22 cc05 	smlad	ip, r2, r5, ip
 800b0c0:	691f      	ldr	r7, [r3, #16]
 800b0c2:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800b0c6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800b0ca:	fa2f f592 	sxtb16	r5, r2, ror #8
 800b0ce:	fa2f f282 	sxtb16	r2, r2
 800b0d2:	6883      	ldr	r3, [r0, #8]
 800b0d4:	eac5 4922 	pkhtb	r9, r5, r2, asr #16
 800b0d8:	eac2 4205 	pkhbt	r2, r2, r5, lsl #16
 800b0dc:	fa2f f593 	sxtb16	r5, r3, ror #8
 800b0e0:	fa2f f383 	sxtb16	r3, r3
 800b0e4:	eac5 4b23 	pkhtb	fp, r5, r3, asr #16
 800b0e8:	eac3 4505 	pkhbt	r5, r3, r5, lsl #16
 800b0ec:	fb22 6607 	smlad	r6, r2, r7, r6
 800b0f0:	fb22 120e 	smlad	r2, r2, lr, r1
 800b0f4:	fb25 a707 	smlad	r7, r5, r7, sl
 800b0f8:	fb25 c50e 	smlad	r5, r5, lr, ip
 800b0fc:	9b00      	ldr	r3, [sp, #0]
 800b0fe:	6961      	ldr	r1, [r4, #20]
 800b100:	f8d3 a014 	ldr.w	sl, [r3, #20]
 800b104:	fb29 660a 	smlad	r6, r9, sl, r6
 800b108:	fb29 2901 	smlad	r9, r9, r1, r2
 800b10c:	fb2b 770a 	smlad	r7, fp, sl, r7
 800b110:	fb2b 5501 	smlad	r5, fp, r1, r5
 800b114:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800b118:	f108 0810 	add.w	r8, r8, #16
 800b11c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800b120:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800b124:	fa2f f291 	sxtb16	r2, r1, ror #8
 800b128:	68c3      	ldr	r3, [r0, #12]
 800b12a:	3010      	adds	r0, #16
 800b12c:	fa2f f181 	sxtb16	r1, r1
 800b130:	9001      	str	r0, [sp, #4]
 800b132:	eac2 4b21 	pkhtb	fp, r2, r1, asr #16
 800b136:	eac1 4102 	pkhbt	r1, r1, r2, lsl #16
 800b13a:	fa2f f293 	sxtb16	r2, r3, ror #8
 800b13e:	fa2f f383 	sxtb16	r3, r3
 800b142:	eac2 4c23 	pkhtb	ip, r2, r3, asr #16
 800b146:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 800b14a:	fb21 660a 	smlad	r6, r1, sl, r6
 800b14e:	fb21 990e 	smlad	r9, r1, lr, r9
 800b152:	fb23 7a0a 	smlad	sl, r3, sl, r7
 800b156:	fb23 530e 	smlad	r3, r3, lr, r5
 800b15a:	9a00      	ldr	r2, [sp, #0]
 800b15c:	3420      	adds	r4, #32
 800b15e:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800b162:	69d1      	ldr	r1, [r2, #28]
 800b164:	3220      	adds	r2, #32
 800b166:	9200      	str	r2, [sp, #0]
 800b168:	fb2b 6201 	smlad	r2, fp, r1, r6
 800b16c:	fb2b 990e 	smlad	r9, fp, lr, r9
 800b170:	fb2c aa01 	smlad	sl, ip, r1, sl
 800b174:	fb2c 3e0e 	smlad	lr, ip, lr, r3
 800b178:	9b02      	ldr	r3, [sp, #8]
 800b17a:	4598      	cmp	r8, r3
 800b17c:	f47f af48 	bne.w	800b010 <st_sssa8_nn_mat_mult_kernel+0xac>
 800b180:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b182:	9b03      	ldr	r3, [sp, #12]
 800b184:	440b      	add	r3, r1
 800b186:	9303      	str	r3, [sp, #12]
 800b188:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b18a:	9304      	str	r3, [sp, #16]
 800b18c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b18e:	e9cd 1305 	strd	r1, r3, [sp, #20]
 800b192:	460b      	mov	r3, r1
 800b194:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b196:	4299      	cmp	r1, r3
 800b198:	f340 81ec 	ble.w	800b574 <st_sssa8_nn_mat_mult_kernel+0x610>
 800b19c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b19e:	9d02      	ldr	r5, [sp, #8]
 800b1a0:	1acb      	subs	r3, r1, r3
 800b1a2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b1a6:	9c04      	ldr	r4, [sp, #16]
 800b1a8:	089b      	lsrs	r3, r3, #2
 800b1aa:	9806      	ldr	r0, [sp, #24]
 800b1ac:	930d      	str	r3, [sp, #52]	; 0x34
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	0099      	lsls	r1, r3, #2
 800b1b2:	930c      	str	r3, [sp, #48]	; 0x30
 800b1b4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b1b8:	910e      	str	r1, [sp, #56]	; 0x38
 800b1ba:	e9cd b300 	strd	fp, r3, [sp]
 800b1be:	f8d0 8000 	ldr.w	r8, [r0]
 800b1c2:	f8d4 c000 	ldr.w	ip, [r4]
 800b1c6:	f855 1b04 	ldr.w	r1, [r5], #4
 800b1ca:	fa2f f691 	sxtb16	r6, r1, ror #8
 800b1ce:	9f00      	ldr	r7, [sp, #0]
 800b1d0:	fa2f f181 	sxtb16	r1, r1
 800b1d4:	f857 3b04 	ldr.w	r3, [r7], #4
 800b1d8:	9700      	str	r7, [sp, #0]
 800b1da:	eac6 4721 	pkhtb	r7, r6, r1, asr #16
 800b1de:	eac1 4106 	pkhbt	r1, r1, r6, lsl #16
 800b1e2:	fa2f fb93 	sxtb16	fp, r3, ror #8
 800b1e6:	fa2f f383 	sxtb16	r3, r3
 800b1ea:	eacb 4623 	pkhtb	r6, fp, r3, asr #16
 800b1ee:	eac3 430b 	pkhbt	r3, r3, fp, lsl #16
 800b1f2:	fb21 2208 	smlad	r2, r1, r8, r2
 800b1f6:	fb21 990c 	smlad	r9, r1, ip, r9
 800b1fa:	fb23 aa08 	smlad	sl, r3, r8, sl
 800b1fe:	fb23 e30c 	smlad	r3, r3, ip, lr
 800b202:	6841      	ldr	r1, [r0, #4]
 800b204:	3408      	adds	r4, #8
 800b206:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800b20a:	3008      	adds	r0, #8
 800b20c:	fb27 2201 	smlad	r2, r7, r1, r2
 800b210:	fb27 990e 	smlad	r9, r7, lr, r9
 800b214:	fb26 aa01 	smlad	sl, r6, r1, sl
 800b218:	fb26 3e0e 	smlad	lr, r6, lr, r3
 800b21c:	9b01      	ldr	r3, [sp, #4]
 800b21e:	429d      	cmp	r5, r3
 800b220:	d1cd      	bne.n	800b1be <st_sssa8_nn_mat_mult_kernel+0x25a>
 800b222:	9b03      	ldr	r3, [sp, #12]
 800b224:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b226:	440b      	add	r3, r1
 800b228:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b22a:	9303      	str	r3, [sp, #12]
 800b22c:	9b05      	ldr	r3, [sp, #20]
 800b22e:	3304      	adds	r3, #4
 800b230:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800b234:	9904      	ldr	r1, [sp, #16]
 800b236:	9305      	str	r3, [sp, #20]
 800b238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b23a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b23e:	9104      	str	r1, [sp, #16]
 800b240:	9906      	ldr	r1, [sp, #24]
 800b242:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800b246:	9306      	str	r3, [sp, #24]
 800b248:	9c07      	ldr	r4, [sp, #28]
 800b24a:	9d05      	ldr	r5, [sp, #20]
 800b24c:	42ac      	cmp	r4, r5
 800b24e:	dd58      	ble.n	800b302 <st_sssa8_nn_mat_mult_kernel+0x39e>
 800b250:	9e01      	ldr	r6, [sp, #4]
 800b252:	9f06      	ldr	r7, [sp, #24]
 800b254:	9b03      	ldr	r3, [sp, #12]
 800b256:	f9b7 1000 	ldrsh.w	r1, [r7]
 800b25a:	f993 3000 	ldrsb.w	r3, [r3]
 800b25e:	f996 0000 	ldrsb.w	r0, [r6]
 800b262:	fb11 aa03 	smlabb	sl, r1, r3, sl
 800b266:	fb11 2200 	smlabb	r2, r1, r0, r2
 800b26a:	9904      	ldr	r1, [sp, #16]
 800b26c:	f9b1 1000 	ldrsh.w	r1, [r1]
 800b270:	fb11 ee03 	smlabb	lr, r1, r3, lr
 800b274:	1c6b      	adds	r3, r5, #1
 800b276:	fb11 9900 	smlabb	r9, r1, r0, r9
 800b27a:	429c      	cmp	r4, r3
 800b27c:	dd3b      	ble.n	800b2f6 <st_sssa8_nn_mat_mult_kernel+0x392>
 800b27e:	9b03      	ldr	r3, [sp, #12]
 800b280:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800b284:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b288:	f996 0001 	ldrsb.w	r0, [r6, #1]
 800b28c:	fb11 aa03 	smlabb	sl, r1, r3, sl
 800b290:	fb11 2200 	smlabb	r2, r1, r0, r2
 800b294:	9904      	ldr	r1, [sp, #16]
 800b296:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800b29a:	fb11 ee03 	smlabb	lr, r1, r3, lr
 800b29e:	1cab      	adds	r3, r5, #2
 800b2a0:	fb11 9900 	smlabb	r9, r1, r0, r9
 800b2a4:	429c      	cmp	r4, r3
 800b2a6:	dd26      	ble.n	800b2f6 <st_sssa8_nn_mat_mult_kernel+0x392>
 800b2a8:	9b03      	ldr	r3, [sp, #12]
 800b2aa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b2ae:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800b2b2:	f996 0002 	ldrsb.w	r0, [r6, #2]
 800b2b6:	fb11 aa03 	smlabb	sl, r1, r3, sl
 800b2ba:	fb11 2200 	smlabb	r2, r1, r0, r2
 800b2be:	9904      	ldr	r1, [sp, #16]
 800b2c0:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800b2c4:	fb11 ee03 	smlabb	lr, r1, r3, lr
 800b2c8:	1ceb      	adds	r3, r5, #3
 800b2ca:	fb11 9900 	smlabb	r9, r1, r0, r9
 800b2ce:	429c      	cmp	r4, r3
 800b2d0:	dd11      	ble.n	800b2f6 <st_sssa8_nn_mat_mult_kernel+0x392>
 800b2d2:	9903      	ldr	r1, [sp, #12]
 800b2d4:	9804      	ldr	r0, [sp, #16]
 800b2d6:	f991 1003 	ldrsb.w	r1, [r1, #3]
 800b2da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b2de:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800b2e2:	fb13 aa01 	smlabb	sl, r3, r1, sl
 800b2e6:	fb10 ee01 	smlabb	lr, r0, r1, lr
 800b2ea:	f996 1003 	ldrsb.w	r1, [r6, #3]
 800b2ee:	fb13 2201 	smlabb	r2, r3, r1, r2
 800b2f2:	fb10 9901 	smlabb	r9, r0, r1, r9
 800b2f6:	9905      	ldr	r1, [sp, #20]
 800b2f8:	9b07      	ldr	r3, [sp, #28]
 800b2fa:	1a5b      	subs	r3, r3, r1
 800b2fc:	9901      	ldr	r1, [sp, #4]
 800b2fe:	4419      	add	r1, r3
 800b300:	9101      	str	r1, [sp, #4]
 800b302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b304:	2b15      	cmp	r3, #21
 800b306:	f340 80c5 	ble.w	800b494 <st_sssa8_nn_mat_mult_kernel+0x530>
 800b30a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b30c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800b30e:	fb52 3201 	smmla	r2, r2, r1, r3
 800b312:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b314:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800b316:	410a      	asrs	r2, r1
 800b318:	fb59 3900 	smmla	r9, r9, r0, r3
 800b31c:	982b      	ldr	r0, [sp, #172]	; 0xac
 800b31e:	4402      	add	r2, r0
 800b320:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800b322:	fb5a 3700 	smmla	r7, sl, r0, r3
 800b326:	fb5e 3e00 	smmla	lr, lr, r0, r3
 800b32a:	f302 0207 	ssat	r2, #8, r2
 800b32e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b330:	fa47 f301 	asr.w	r3, r7, r1
 800b334:	f800 2c02 	strb.w	r2, [r0, #-2]
 800b338:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800b33a:	4413      	add	r3, r2
 800b33c:	f303 0307 	ssat	r3, #8, r3
 800b340:	fa49 f901 	asr.w	r9, r9, r1
 800b344:	f800 3c01 	strb.w	r3, [r0, #-1]
 800b348:	eb09 0302 	add.w	r3, r9, r2
 800b34c:	f303 0307 	ssat	r3, #8, r3
 800b350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b352:	fa4e fe01 	asr.w	lr, lr, r1
 800b356:	f802 3c02 	strb.w	r3, [r2, #-2]
 800b35a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b35c:	4473      	add	r3, lr
 800b35e:	f303 0307 	ssat	r3, #8, r3
 800b362:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b366:	9a01      	ldr	r2, [sp, #4]
 800b368:	9907      	ldr	r1, [sp, #28]
 800b36a:	9b08      	ldr	r3, [sp, #32]
 800b36c:	440a      	add	r2, r1
 800b36e:	3308      	adds	r3, #8
 800b370:	4690      	mov	r8, r2
 800b372:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b374:	9308      	str	r3, [sp, #32]
 800b376:	3202      	adds	r2, #2
 800b378:	9209      	str	r2, [sp, #36]	; 0x24
 800b37a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b37c:	3202      	adds	r2, #2
 800b37e:	920a      	str	r2, [sp, #40]	; 0x28
 800b380:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b382:	4293      	cmp	r3, r2
 800b384:	f47f ae31 	bne.w	800afea <st_sssa8_nn_mat_mult_kernel+0x86>
 800b388:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b38a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800b38c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800b390:	922c      	str	r2, [sp, #176]	; 0xb0
 800b392:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b394:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800b398:	9219      	str	r2, [sp, #100]	; 0x64
 800b39a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b39c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b3a0:	931a      	str	r3, [sp, #104]	; 0x68
 800b3a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3a4:	07db      	lsls	r3, r3, #31
 800b3a6:	d56f      	bpl.n	800b488 <st_sssa8_nn_mat_mult_kernel+0x524>
 800b3a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b3aa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	9b07      	ldr	r3, [sp, #28]
 800b3b0:	ea5f 0993 	movs.w	r9, r3, lsr #2
 800b3b4:	eb04 0e43 	add.w	lr, r4, r3, lsl #1
 800b3b8:	f000 810b 	beq.w	800b5d2 <st_sssa8_nn_mat_mult_kernel+0x66e>
 800b3bc:	eb08 0c89 	add.w	ip, r8, r9, lsl #2
 800b3c0:	4675      	mov	r5, lr
 800b3c2:	4610      	mov	r0, r2
 800b3c4:	f858 3b04 	ldr.w	r3, [r8], #4
 800b3c8:	fa2f f793 	sxtb16	r7, r3, ror #8
 800b3cc:	fa2f f383 	sxtb16	r3, r3
 800b3d0:	6821      	ldr	r1, [r4, #0]
 800b3d2:	eac7 4623 	pkhtb	r6, r7, r3, asr #16
 800b3d6:	eac3 4307 	pkhbt	r3, r3, r7, lsl #16
 800b3da:	fb23 2201 	smlad	r2, r3, r1, r2
 800b3de:	6829      	ldr	r1, [r5, #0]
 800b3e0:	fb23 0301 	smlad	r3, r3, r1, r0
 800b3e4:	6861      	ldr	r1, [r4, #4]
 800b3e6:	3508      	adds	r5, #8
 800b3e8:	f855 0c04 	ldr.w	r0, [r5, #-4]
 800b3ec:	3408      	adds	r4, #8
 800b3ee:	fb26 2201 	smlad	r2, r6, r1, r2
 800b3f2:	fb26 3000 	smlad	r0, r6, r0, r3
 800b3f6:	45c4      	cmp	ip, r8
 800b3f8:	d1e4      	bne.n	800b3c4 <st_sssa8_nn_mat_mult_kernel+0x460>
 800b3fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3fc:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800b400:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b404:	9310      	str	r3, [sp, #64]	; 0x40
 800b406:	9b07      	ldr	r3, [sp, #28]
 800b408:	f013 0303 	ands.w	r3, r3, #3
 800b40c:	d020      	beq.n	800b450 <st_sssa8_nn_mat_mult_kernel+0x4ec>
 800b40e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b410:	3b01      	subs	r3, #1
 800b412:	f99c 1000 	ldrsb.w	r1, [ip]
 800b416:	882c      	ldrh	r4, [r5, #0]
 800b418:	b29b      	uxth	r3, r3
 800b41a:	fb14 2201 	smlabb	r2, r4, r1, r2
 800b41e:	f8be 4000 	ldrh.w	r4, [lr]
 800b422:	fb14 0001 	smlabb	r0, r4, r1, r0
 800b426:	b19b      	cbz	r3, 800b450 <st_sssa8_nn_mat_mult_kernel+0x4ec>
 800b428:	f99c 1001 	ldrsb.w	r1, [ip, #1]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	886c      	ldrh	r4, [r5, #2]
 800b430:	fb14 2201 	smlabb	r2, r4, r1, r2
 800b434:	f8be 4002 	ldrh.w	r4, [lr, #2]
 800b438:	fb14 0001 	smlabb	r0, r4, r1, r0
 800b43c:	d008      	beq.n	800b450 <st_sssa8_nn_mat_mult_kernel+0x4ec>
 800b43e:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 800b442:	88a9      	ldrh	r1, [r5, #4]
 800b444:	fb11 2203 	smlabb	r2, r1, r3, r2
 800b448:	f8be 1004 	ldrh.w	r1, [lr, #4]
 800b44c:	fb11 0003 	smlabb	r0, r1, r3, r0
 800b450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b452:	2b15      	cmp	r3, #21
 800b454:	f340 8091 	ble.w	800b57a <st_sssa8_nn_mat_mult_kernel+0x616>
 800b458:	1e9c      	subs	r4, r3, #2
 800b45a:	1e59      	subs	r1, r3, #1
 800b45c:	2301      	movs	r3, #1
 800b45e:	40a3      	lsls	r3, r4
 800b460:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800b462:	fb52 3204 	smmla	r2, r2, r4, r3
 800b466:	fb50 3304 	smmla	r3, r0, r4, r3
 800b46a:	410a      	asrs	r2, r1
 800b46c:	982b      	ldr	r0, [sp, #172]	; 0xac
 800b46e:	4402      	add	r2, r0
 800b470:	f302 0207 	ssat	r2, #8, r2
 800b474:	410b      	asrs	r3, r1
 800b476:	4403      	add	r3, r0
 800b478:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800b47a:	f800 2b01 	strb.w	r2, [r0], #1
 800b47e:	f303 0307 	ssat	r3, #8, r3
 800b482:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b484:	902c      	str	r0, [sp, #176]	; 0xb0
 800b486:	7013      	strb	r3, [r2, #0]
 800b488:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b48a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800b48c:	4418      	add	r0, r3
 800b48e:	b01f      	add	sp, #124	; 0x7c
 800b490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b494:	2b00      	cmp	r3, #0
 800b496:	dd2a      	ble.n	800b4ee <st_sssa8_nn_mat_mult_kernel+0x58a>
 800b498:	ea4f 074a 	mov.w	r7, sl, lsl #1
 800b49c:	0052      	lsls	r2, r2, #1
 800b49e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800b4a2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800b4a6:	e9dd 102a 	ldrd	r1, r0, [sp, #168]	; 0xa8
 800b4aa:	fb52 0201 	smmla	r2, r2, r1, r0
 800b4ae:	fb59 0901 	smmla	r9, r9, r1, r0
 800b4b2:	411a      	asrs	r2, r3
 800b4b4:	fb57 0a01 	smmla	sl, r7, r1, r0
 800b4b8:	fb5e 0e01 	smmla	lr, lr, r1, r0
 800b4bc:	f302 0207 	ssat	r2, #8, r2
 800b4c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4c2:	fa4a f703 	asr.w	r7, sl, r3
 800b4c6:	f801 2c02 	strb.w	r2, [r1, #-2]
 800b4ca:	f307 0707 	ssat	r7, #8, r7
 800b4ce:	fa49 f903 	asr.w	r9, r9, r3
 800b4d2:	f801 7c01 	strb.w	r7, [r1, #-1]
 800b4d6:	f309 0907 	ssat	r9, #8, r9
 800b4da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4dc:	fa4e fe03 	asr.w	lr, lr, r3
 800b4e0:	f802 9c02 	strb.w	r9, [r2, #-2]
 800b4e4:	f30e 0e07 	ssat	lr, #8, lr
 800b4e8:	f802 ec01 	strb.w	lr, [r2, #-1]
 800b4ec:	e73b      	b.n	800b366 <st_sssa8_nn_mat_mult_kernel+0x402>
 800b4ee:	981c      	ldr	r0, [sp, #112]	; 0x70
 800b4f0:	4082      	lsls	r2, r0
 800b4f2:	f302 021f 	ssat	r2, #32, r2
 800b4f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800b4f8:	fb52 f213 	smmulr	r2, r2, r3
 800b4fc:	fa09 f300 	lsl.w	r3, r9, r0
 800b500:	f303 031f 	ssat	r3, #32, r3
 800b504:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800b506:	fb53 f311 	smmulr	r3, r3, r1
 800b50a:	fa0a f100 	lsl.w	r1, sl, r0
 800b50e:	f301 011f 	ssat	r1, #32, r1
 800b512:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800b514:	fb51 f114 	smmulr	r1, r1, r4
 800b518:	fa0e fe00 	lsl.w	lr, lr, r0
 800b51c:	f30e 001f 	ssat	r0, #32, lr
 800b520:	fb50 f014 	smmulr	r0, r0, r4
 800b524:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800b526:	4422      	add	r2, r4
 800b528:	f302 0207 	ssat	r2, #8, r2
 800b52c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b52e:	f804 2c02 	strb.w	r2, [r4, #-2]
 800b532:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800b534:	4411      	add	r1, r2
 800b536:	f301 0107 	ssat	r1, #8, r1
 800b53a:	4413      	add	r3, r2
 800b53c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b540:	f303 0307 	ssat	r3, #8, r3
 800b544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b546:	f802 3c02 	strb.w	r3, [r2, #-2]
 800b54a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b54c:	4418      	add	r0, r3
 800b54e:	f300 0007 	ssat	r0, #8, r0
 800b552:	f802 0c01 	strb.w	r0, [r2, #-1]
 800b556:	e706      	b.n	800b366 <st_sssa8_nn_mat_mult_kernel+0x402>
 800b558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b55a:	46d6      	mov	lr, sl
 800b55c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b55e:	4691      	mov	r9, r2
 800b560:	9304      	str	r3, [sp, #16]
 800b562:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b564:	f8cd 8008 	str.w	r8, [sp, #8]
 800b568:	9306      	str	r3, [sp, #24]
 800b56a:	2300      	movs	r3, #0
 800b56c:	4299      	cmp	r1, r3
 800b56e:	9305      	str	r3, [sp, #20]
 800b570:	f73f ae14 	bgt.w	800b19c <st_sssa8_nn_mat_mult_kernel+0x238>
 800b574:	9b02      	ldr	r3, [sp, #8]
 800b576:	9301      	str	r3, [sp, #4]
 800b578:	e666      	b.n	800b248 <st_sssa8_nn_mat_mult_kernel+0x2e4>
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	4619      	mov	r1, r3
 800b57e:	dd0c      	ble.n	800b59a <st_sssa8_nn_mat_mult_kernel+0x636>
 800b580:	0043      	lsls	r3, r0, #1
 800b582:	0052      	lsls	r2, r2, #1
 800b584:	e9dd 042a 	ldrd	r0, r4, [sp, #168]	; 0xa8
 800b588:	fb52 4200 	smmla	r2, r2, r0, r4
 800b58c:	fb53 4300 	smmla	r3, r3, r0, r4
 800b590:	410a      	asrs	r2, r1
 800b592:	f302 0207 	ssat	r2, #8, r2
 800b596:	410b      	asrs	r3, r1
 800b598:	e76e      	b.n	800b478 <st_sssa8_nn_mat_mult_kernel+0x514>
 800b59a:	f1c3 0301 	rsb	r3, r3, #1
 800b59e:	409a      	lsls	r2, r3
 800b5a0:	f302 021f 	ssat	r2, #32, r2
 800b5a4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800b5a6:	fb52 f211 	smmulr	r2, r2, r1
 800b5aa:	fa00 f303 	lsl.w	r3, r0, r3
 800b5ae:	f303 031f 	ssat	r3, #32, r3
 800b5b2:	fb53 f311 	smmulr	r3, r3, r1
 800b5b6:	992b      	ldr	r1, [sp, #172]	; 0xac
 800b5b8:	440a      	add	r2, r1
 800b5ba:	f302 0207 	ssat	r2, #8, r2
 800b5be:	440b      	add	r3, r1
 800b5c0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800b5c2:	f801 2b01 	strb.w	r2, [r1], #1
 800b5c6:	f303 0307 	ssat	r3, #8, r3
 800b5ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b5cc:	912c      	str	r1, [sp, #176]	; 0xb0
 800b5ce:	7013      	strb	r3, [r2, #0]
 800b5d0:	e75a      	b.n	800b488 <st_sssa8_nn_mat_mult_kernel+0x524>
 800b5d2:	46c4      	mov	ip, r8
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	e716      	b.n	800b406 <st_sssa8_nn_mat_mult_kernel+0x4a2>

0800b5d8 <st_sssa8_fullW_prefetch>:
 800b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5dc:	b087      	sub	sp, #28
 800b5de:	eb00 0802 	add.w	r8, r0, r2
 800b5e2:	9105      	str	r1, [sp, #20]
 800b5e4:	1049      	asrs	r1, r1, #1
 800b5e6:	9100      	str	r1, [sp, #0]
 800b5e8:	f000 80e1 	beq.w	800b7ae <st_sssa8_fullW_prefetch+0x1d6>
 800b5ec:	f1a2 0110 	sub.w	r1, r2, #16
 800b5f0:	1ed4      	subs	r4, r2, #3
 800b5f2:	0909      	lsrs	r1, r1, #4
 800b5f4:	9402      	str	r4, [sp, #8]
 800b5f6:	1f14      	subs	r4, r2, #4
 800b5f8:	3101      	adds	r1, #1
 800b5fa:	9404      	str	r4, [sp, #16]
 800b5fc:	ea4f 1b01 	mov.w	fp, r1, lsl #4
 800b600:	0189      	lsls	r1, r1, #6
 800b602:	9103      	str	r1, [sp, #12]
 800b604:	2a0f      	cmp	r2, #15
 800b606:	f340 80e4 	ble.w	800b7d2 <st_sssa8_fullW_prefetch+0x1fa>
 800b60a:	eb00 060b 	add.w	r6, r0, fp
 800b60e:	4645      	mov	r5, r8
 800b610:	461c      	mov	r4, r3
 800b612:	6801      	ldr	r1, [r0, #0]
 800b614:	3010      	adds	r0, #16
 800b616:	682f      	ldr	r7, [r5, #0]
 800b618:	3440      	adds	r4, #64	; 0x40
 800b61a:	fa2f fc81 	sxtb16	ip, r1
 800b61e:	3510      	adds	r5, #16
 800b620:	f844 cc40 	str.w	ip, [r4, #-64]
 800b624:	ea4f 2131 	mov.w	r1, r1, ror #8
 800b628:	42b0      	cmp	r0, r6
 800b62a:	fa2f f181 	sxtb16	r1, r1
 800b62e:	f844 1c3c 	str.w	r1, [r4, #-60]
 800b632:	ea4f 2137 	mov.w	r1, r7, ror #8
 800b636:	fa2f f787 	sxtb16	r7, r7
 800b63a:	fa2f f181 	sxtb16	r1, r1
 800b63e:	f844 7c38 	str.w	r7, [r4, #-56]
 800b642:	f844 1c34 	str.w	r1, [r4, #-52]
 800b646:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 800b64a:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 800b64e:	ea4f 2c31 	mov.w	ip, r1, ror #8
 800b652:	fa2f f181 	sxtb16	r1, r1
 800b656:	fa2f fc8c 	sxtb16	ip, ip
 800b65a:	f844 1c28 	str.w	r1, [r4, #-40]
 800b65e:	f844 cc24 	str.w	ip, [r4, #-36]
 800b662:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800b666:	fa2f f787 	sxtb16	r7, r7
 800b66a:	f844 7c30 	str.w	r7, [r4, #-48]
 800b66e:	fa2f f78c 	sxtb16	r7, ip
 800b672:	f844 7c2c 	str.w	r7, [r4, #-44]
 800b676:	f850 7c08 	ldr.w	r7, [r0, #-8]
 800b67a:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800b67e:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800b682:	fa2f f787 	sxtb16	r7, r7
 800b686:	fa2f fc8c 	sxtb16	ip, ip
 800b68a:	f844 7c20 	str.w	r7, [r4, #-32]
 800b68e:	ea4f 2731 	mov.w	r7, r1, ror #8
 800b692:	f844 cc1c 	str.w	ip, [r4, #-28]
 800b696:	fa2f f787 	sxtb16	r7, r7
 800b69a:	fa2f f181 	sxtb16	r1, r1
 800b69e:	f844 7c14 	str.w	r7, [r4, #-20]
 800b6a2:	f844 1c18 	str.w	r1, [r4, #-24]
 800b6a6:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800b6aa:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800b6ae:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800b6b2:	fa2f f787 	sxtb16	r7, r7
 800b6b6:	fa2f fc8c 	sxtb16	ip, ip
 800b6ba:	f844 7c10 	str.w	r7, [r4, #-16]
 800b6be:	ea4f 2731 	mov.w	r7, r1, ror #8
 800b6c2:	f844 cc0c 	str.w	ip, [r4, #-12]
 800b6c6:	fa2f f787 	sxtb16	r7, r7
 800b6ca:	fa2f f181 	sxtb16	r1, r1
 800b6ce:	f844 7c04 	str.w	r7, [r4, #-4]
 800b6d2:	f844 1c08 	str.w	r1, [r4, #-8]
 800b6d6:	d19c      	bne.n	800b612 <st_sssa8_fullW_prefetch+0x3a>
 800b6d8:	9903      	ldr	r1, [sp, #12]
 800b6da:	44d8      	add	r8, fp
 800b6dc:	46de      	mov	lr, fp
 800b6de:	440b      	add	r3, r1
 800b6e0:	9902      	ldr	r1, [sp, #8]
 800b6e2:	4571      	cmp	r1, lr
 800b6e4:	dd73      	ble.n	800b7ce <st_sssa8_fullW_prefetch+0x1f6>
 800b6e6:	9904      	ldr	r1, [sp, #16]
 800b6e8:	4647      	mov	r7, r8
 800b6ea:	461c      	mov	r4, r3
 800b6ec:	eba1 090e 	sub.w	r9, r1, lr
 800b6f0:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800b6f4:	f109 0a01 	add.w	sl, r9, #1
 800b6f8:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800b6fc:	9101      	str	r1, [sp, #4]
 800b6fe:	eb06 018a 	add.w	r1, r6, sl, lsl #2
 800b702:	f856 0b04 	ldr.w	r0, [r6], #4
 800b706:	3410      	adds	r4, #16
 800b708:	f857 5b04 	ldr.w	r5, [r7], #4
 800b70c:	fa2f fc80 	sxtb16	ip, r0
 800b710:	428e      	cmp	r6, r1
 800b712:	ea4f 2030 	mov.w	r0, r0, ror #8
 800b716:	fa2f f080 	sxtb16	r0, r0
 800b71a:	f844 0c0c 	str.w	r0, [r4, #-12]
 800b71e:	ea4f 2035 	mov.w	r0, r5, ror #8
 800b722:	fa2f f585 	sxtb16	r5, r5
 800b726:	f844 cc10 	str.w	ip, [r4, #-16]
 800b72a:	f844 5c08 	str.w	r5, [r4, #-8]
 800b72e:	fa2f f080 	sxtb16	r0, r0
 800b732:	f844 0c04 	str.w	r0, [r4, #-4]
 800b736:	d1e4      	bne.n	800b702 <st_sssa8_fullW_prefetch+0x12a>
 800b738:	9801      	ldr	r0, [sp, #4]
 800b73a:	f10e 0e04 	add.w	lr, lr, #4
 800b73e:	eb03 130a 	add.w	r3, r3, sl, lsl #4
 800b742:	4480      	add	r8, r0
 800b744:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800b748:	4572      	cmp	r2, lr
 800b74a:	dd29      	ble.n	800b7a0 <st_sssa8_fullW_prefetch+0x1c8>
 800b74c:	f991 0000 	ldrsb.w	r0, [r1]
 800b750:	8018      	strh	r0, [r3, #0]
 800b752:	f998 0000 	ldrsb.w	r0, [r8]
 800b756:	8058      	strh	r0, [r3, #2]
 800b758:	f10e 0001 	add.w	r0, lr, #1
 800b75c:	4282      	cmp	r2, r0
 800b75e:	dd19      	ble.n	800b794 <st_sssa8_fullW_prefetch+0x1bc>
 800b760:	f991 0001 	ldrsb.w	r0, [r1, #1]
 800b764:	8098      	strh	r0, [r3, #4]
 800b766:	f998 0001 	ldrsb.w	r0, [r8, #1]
 800b76a:	80d8      	strh	r0, [r3, #6]
 800b76c:	f10e 0002 	add.w	r0, lr, #2
 800b770:	4282      	cmp	r2, r0
 800b772:	dd0f      	ble.n	800b794 <st_sssa8_fullW_prefetch+0x1bc>
 800b774:	f991 0002 	ldrsb.w	r0, [r1, #2]
 800b778:	8118      	strh	r0, [r3, #8]
 800b77a:	f10e 0003 	add.w	r0, lr, #3
 800b77e:	f998 4002 	ldrsb.w	r4, [r8, #2]
 800b782:	4282      	cmp	r2, r0
 800b784:	815c      	strh	r4, [r3, #10]
 800b786:	dd05      	ble.n	800b794 <st_sssa8_fullW_prefetch+0x1bc>
 800b788:	f991 0003 	ldrsb.w	r0, [r1, #3]
 800b78c:	8198      	strh	r0, [r3, #12]
 800b78e:	f998 0003 	ldrsb.w	r0, [r8, #3]
 800b792:	81d8      	strh	r0, [r3, #14]
 800b794:	eba2 0e0e 	sub.w	lr, r2, lr
 800b798:	4471      	add	r1, lr
 800b79a:	44f0      	add	r8, lr
 800b79c:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 800b7a0:	1888      	adds	r0, r1, r2
 800b7a2:	9900      	ldr	r1, [sp, #0]
 800b7a4:	4490      	add	r8, r2
 800b7a6:	3901      	subs	r1, #1
 800b7a8:	9100      	str	r1, [sp, #0]
 800b7aa:	f47f af2b 	bne.w	800b604 <st_sssa8_fullW_prefetch+0x2c>
 800b7ae:	9905      	ldr	r1, [sp, #20]
 800b7b0:	07c9      	lsls	r1, r1, #31
 800b7b2:	d509      	bpl.n	800b7c8 <st_sssa8_fullW_prefetch+0x1f0>
 800b7b4:	2a00      	cmp	r2, #0
 800b7b6:	dd07      	ble.n	800b7c8 <st_sssa8_fullW_prefetch+0x1f0>
 800b7b8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800b7bc:	f910 1b01 	ldrsb.w	r1, [r0], #1
 800b7c0:	f823 1b02 	strh.w	r1, [r3], #2
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d1f9      	bne.n	800b7bc <st_sssa8_fullW_prefetch+0x1e4>
 800b7c8:	b007      	add	sp, #28
 800b7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ce:	4631      	mov	r1, r6
 800b7d0:	e7ba      	b.n	800b748 <st_sssa8_fullW_prefetch+0x170>
 800b7d2:	4606      	mov	r6, r0
 800b7d4:	f04f 0e00 	mov.w	lr, #0
 800b7d8:	e782      	b.n	800b6e0 <st_sssa8_fullW_prefetch+0x108>
 800b7da:	bf00      	nop

0800b7dc <st_sssa8_nn_mat_mult_nt_t>:
 800b7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e0:	b0ab      	sub	sp, #172	; 0xac
 800b7e2:	469c      	mov	ip, r3
 800b7e4:	901e      	str	r0, [sp, #120]	; 0x78
 800b7e6:	f9bd 50d4 	ldrsh.w	r5, [sp, #212]	; 0xd4
 800b7ea:	9122      	str	r1, [sp, #136]	; 0x88
 800b7ec:	9229      	str	r2, [sp, #164]	; 0xa4
 800b7ee:	9314      	str	r3, [sp, #80]	; 0x50
 800b7f0:	9508      	str	r5, [sp, #32]
 800b7f2:	e9dd 043b 	ldrd	r0, r4, [sp, #236]	; 0xec
 800b7f6:	2c00      	cmp	r4, #0
 800b7f8:	bf18      	it	ne
 800b7fa:	4620      	movne	r0, r4
 800b7fc:	903b      	str	r0, [sp, #236]	; 0xec
 800b7fe:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800b800:	2801      	cmp	r0, #1
 800b802:	f340 84ca 	ble.w	800c19a <st_sssa8_nn_mat_mult_nt_t+0x9be>
 800b806:	9838      	ldr	r0, [sp, #224]	; 0xe0
 800b808:	4688      	mov	r8, r1
 800b80a:	4696      	mov	lr, r2
 800b80c:	9f38      	ldr	r7, [sp, #224]	; 0xe0
 800b80e:	f1a0 0310 	sub.w	r3, r0, #16
 800b812:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800b814:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 800b816:	10bf      	asrs	r7, r7, #2
 800b818:	1e82      	subs	r2, r0, #2
 800b81a:	0919      	lsrs	r1, r3, #4
 800b81c:	f023 000f 	bic.w	r0, r3, #15
 800b820:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800b822:	0852      	lsrs	r2, r2, #1
 800b824:	f004 0403 	and.w	r4, r4, #3
 800b828:	105b      	asrs	r3, r3, #1
 800b82a:	3101      	adds	r1, #1
 800b82c:	1c56      	adds	r6, r2, #1
 800b82e:	2201      	movs	r2, #1
 800b830:	931d      	str	r3, [sp, #116]	; 0x74
 800b832:	1eab      	subs	r3, r5, #2
 800b834:	9628      	str	r6, [sp, #160]	; 0xa0
 800b836:	fa02 f503 	lsl.w	r5, r2, r3
 800b83a:	9424      	str	r4, [sp, #144]	; 0x90
 800b83c:	9723      	str	r7, [sp, #140]	; 0x8c
 800b83e:	9515      	str	r5, [sp, #84]	; 0x54
 800b840:	9d37      	ldr	r5, [sp, #220]	; 0xdc
 800b842:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 800b846:	4095      	lsls	r5, r2
 800b848:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800b84a:	f022 0303 	bic.w	r3, r2, #3
 800b84e:	4642      	mov	r2, r8
 800b850:	950d      	str	r5, [sp, #52]	; 0x34
 800b852:	18d3      	adds	r3, r2, r3
 800b854:	931a      	str	r3, [sp, #104]	; 0x68
 800b856:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b858:	3314      	adds	r3, #20
 800b85a:	1818      	adds	r0, r3, r0
 800b85c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b85e:	9012      	str	r0, [sp, #72]	; 0x48
 800b860:	f06f 0003 	mvn.w	r0, #3
 800b864:	1ac0      	subs	r0, r0, r3
 800b866:	9013      	str	r0, [sp, #76]	; 0x4c
 800b868:	f1a3 000f 	sub.w	r0, r3, #15
 800b86c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b86e:	9836      	ldr	r0, [sp, #216]	; 0xd8
 800b870:	f000 0001 	and.w	r0, r0, #1
 800b874:	901f      	str	r0, [sp, #124]	; 0x7c
 800b876:	0058      	lsls	r0, r3, #1
 800b878:	9019      	str	r0, [sp, #100]	; 0x64
 800b87a:	0098      	lsls	r0, r3, #2
 800b87c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b87e:	9021      	str	r0, [sp, #132]	; 0x84
 800b880:	eb0c 0046 	add.w	r0, ip, r6, lsl #1
 800b884:	fb05 f303 	mul.w	r3, r5, r3
 800b888:	901b      	str	r0, [sp, #108]	; 0x6c
 800b88a:	0138      	lsls	r0, r7, #4
 800b88c:	9320      	str	r3, [sp, #128]	; 0x80
 800b88e:	9025      	str	r0, [sp, #148]	; 0x94
 800b890:	1e60      	subs	r0, r4, #1
 800b892:	9027      	str	r0, [sp, #156]	; 0x9c
 800b894:	1ea0      	subs	r0, r4, #2
 800b896:	9026      	str	r0, [sp, #152]	; 0x98
 800b898:	0108      	lsls	r0, r1, #4
 800b89a:	0189      	lsls	r1, r1, #6
 800b89c:	9011      	str	r0, [sp, #68]	; 0x44
 800b89e:	911c      	str	r1, [sp, #112]	; 0x70
 800b8a0:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 800b8a4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b8a6:	3b03      	subs	r3, #3
 800b8a8:	930c      	str	r3, [sp, #48]	; 0x30
 800b8aa:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f000 83c9 	beq.w	800c044 <st_sssa8_nn_mat_mult_nt_t+0x868>
 800b8b2:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f040 8378 	bne.w	800bfaa <st_sssa8_nn_mat_mult_nt_t+0x7ce>
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	4618      	mov	r0, r3
 800b8be:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b8c0:	680b      	ldr	r3, [r1, #0]
 800b8c2:	18c3      	adds	r3, r0, r3
 800b8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8c6:	684b      	ldr	r3, [r1, #4]
 800b8c8:	18d3      	adds	r3, r2, r3
 800b8ca:	930a      	str	r3, [sp, #40]	; 0x28
 800b8cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f000 8419 	beq.w	800c106 <st_sssa8_nn_mat_mult_nt_t+0x92a>
 800b8d4:	9304      	str	r3, [sp, #16]
 800b8d6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b8d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b8da:	3304      	adds	r3, #4
 800b8dc:	981c      	ldr	r0, [sp, #112]	; 0x70
 800b8de:	1c51      	adds	r1, r2, #1
 800b8e0:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800b8e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8e6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b8e8:	9103      	str	r1, [sp, #12]
 800b8ea:	3b04      	subs	r3, #4
 800b8ec:	993b      	ldr	r1, [sp, #236]	; 0xec
 800b8ee:	9202      	str	r2, [sp, #8]
 800b8f0:	9310      	str	r3, [sp, #64]	; 0x40
 800b8f2:	4401      	add	r1, r0
 800b8f4:	9b08      	ldr	r3, [sp, #32]
 800b8f6:	910e      	str	r1, [sp, #56]	; 0x38
 800b8f8:	f1c3 0301 	rsb	r3, r3, #1
 800b8fc:	9317      	str	r3, [sp, #92]	; 0x5c
 800b8fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b900:	2b00      	cmp	r3, #0
 800b902:	f340 8250 	ble.w	800bda6 <st_sssa8_nn_mat_mult_nt_t+0x5ca>
 800b906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b90a:	eb0b 0703 	add.w	r7, fp, r3
 800b90e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b910:	f8cd b014 	str.w	fp, [sp, #20]
 800b914:	4604      	mov	r4, r0
 800b916:	445b      	add	r3, fp
 800b918:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800b91a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800b91e:	9301      	str	r3, [sp, #4]
 800b920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b922:	4619      	mov	r1, r3
 800b924:	f85b c007 	ldr.w	ip, [fp, r7]
 800b928:	eb0b 0e07 	add.w	lr, fp, r7
 800b92c:	6832      	ldr	r2, [r6, #0]
 800b92e:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800b932:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800b936:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800b93a:	fa2f f58c 	sxtb16	r5, ip
 800b93e:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 800b942:	fb25 0002 	smlad	r0, r5, r2, r0
 800b946:	fb2c 0009 	smlad	r0, ip, r9, r0
 800b94a:	fb25 350a 	smlad	r5, r5, sl, r3
 800b94e:	fb2c 5508 	smlad	r5, ip, r8, r5
 800b952:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800b956:	fa2f fc83 	sxtb16	ip, r3
 800b95a:	fa2f f393 	sxtb16	r3, r3, ror #8
 800b95e:	fb2c 4202 	smlad	r2, ip, r2, r4
 800b962:	fb2c 110a 	smlad	r1, ip, sl, r1
 800b966:	fb23 2209 	smlad	r2, r3, r9, r2
 800b96a:	f8d6 9010 	ldr.w	r9, [r6, #16]
 800b96e:	6974      	ldr	r4, [r6, #20]
 800b970:	fb23 1808 	smlad	r8, r3, r8, r1
 800b974:	f8de 1004 	ldr.w	r1, [lr, #4]
 800b978:	69b3      	ldr	r3, [r6, #24]
 800b97a:	f8d6 a01c 	ldr.w	sl, [r6, #28]
 800b97e:	fa2f fc81 	sxtb16	ip, r1
 800b982:	fa2f f191 	sxtb16	r1, r1, ror #8
 800b986:	fb2c 0009 	smlad	r0, ip, r9, r0
 800b98a:	fb21 0004 	smlad	r0, r1, r4, r0
 800b98e:	fb2c 5c03 	smlad	ip, ip, r3, r5
 800b992:	fb21 cc0a 	smlad	ip, r1, sl, ip
 800b996:	683d      	ldr	r5, [r7, #0]
 800b998:	fa2f f185 	sxtb16	r1, r5
 800b99c:	fa2f f595 	sxtb16	r5, r5, ror #8
 800b9a0:	fb21 2909 	smlad	r9, r1, r9, r2
 800b9a4:	fb21 8803 	smlad	r8, r1, r3, r8
 800b9a8:	fb25 9904 	smlad	r9, r5, r4, r9
 800b9ac:	6a34      	ldr	r4, [r6, #32]
 800b9ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b9b0:	fb25 8a0a 	smlad	sl, r5, sl, r8
 800b9b4:	f8de 2008 	ldr.w	r2, [lr, #8]
 800b9b8:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 800b9bc:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 800b9be:	fa2f f182 	sxtb16	r1, r2
 800b9c2:	fa2f f292 	sxtb16	r2, r2, ror #8
 800b9c6:	fb21 0004 	smlad	r0, r1, r4, r0
 800b9ca:	fb22 0003 	smlad	r0, r2, r3, r0
 800b9ce:	fb21 c108 	smlad	r1, r1, r8, ip
 800b9d2:	fb22 1205 	smlad	r2, r2, r5, r1
 800b9d6:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800b9da:	fa2f f18c 	sxtb16	r1, ip
 800b9de:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 800b9e2:	fb21 9404 	smlad	r4, r1, r4, r9
 800b9e6:	fb21 aa08 	smlad	sl, r1, r8, sl
 800b9ea:	fb2c 4903 	smlad	r9, ip, r3, r4
 800b9ee:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
 800b9f2:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800b9f4:	fb2c a505 	smlad	r5, ip, r5, sl
 800b9f8:	f8de 300c 	ldr.w	r3, [lr, #12]
 800b9fc:	3640      	adds	r6, #64	; 0x40
 800b9fe:	f856 ac08 	ldr.w	sl, [r6, #-8]
 800ba02:	f856 ec04 	ldr.w	lr, [r6, #-4]
 800ba06:	fa2f f183 	sxtb16	r1, r3
 800ba0a:	fa2f f393 	sxtb16	r3, r3, ror #8
 800ba0e:	fb21 0008 	smlad	r0, r1, r8, r0
 800ba12:	fb23 0004 	smlad	r0, r3, r4, r0
 800ba16:	fb21 220a 	smlad	r2, r1, sl, r2
 800ba1a:	fb23 230e 	smlad	r3, r3, lr, r2
 800ba1e:	68b9      	ldr	r1, [r7, #8]
 800ba20:	fa2f f281 	sxtb16	r2, r1
 800ba24:	fa2f f191 	sxtb16	r1, r1, ror #8
 800ba28:	fb22 9908 	smlad	r9, r2, r8, r9
 800ba2c:	fb22 550a 	smlad	r5, r2, sl, r5
 800ba30:	fb21 9404 	smlad	r4, r1, r4, r9
 800ba34:	fb21 510e 	smlad	r1, r1, lr, r5
 800ba38:	3710      	adds	r7, #16
 800ba3a:	9a01      	ldr	r2, [sp, #4]
 800ba3c:	42ba      	cmp	r2, r7
 800ba3e:	f47f af71 	bne.w	800b924 <st_sssa8_nn_mat_mult_nt_t+0x148>
 800ba42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba44:	f8dd b014 	ldr.w	fp, [sp, #20]
 800ba48:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ba4a:	4692      	mov	sl, r2
 800ba4c:	4493      	add	fp, r2
 800ba4e:	9501      	str	r5, [sp, #4]
 800ba50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba52:	4592      	cmp	sl, r2
 800ba54:	f280 81a5 	bge.w	800bda2 <st_sssa8_nn_mat_mult_nt_t+0x5c6>
 800ba58:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ba5a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ba5e:	eba5 020a 	sub.w	r2, r5, sl
 800ba62:	46aa      	mov	sl, r5
 800ba64:	0892      	lsrs	r2, r2, #2
 800ba66:	4616      	mov	r6, r2
 800ba68:	9206      	str	r2, [sp, #24]
 800ba6a:	9a01      	ldr	r2, [sp, #4]
 800ba6c:	3601      	adds	r6, #1
 800ba6e:	eb0b 0986 	add.w	r9, fp, r6, lsl #2
 800ba72:	9605      	str	r6, [sp, #20]
 800ba74:	f8d2 8000 	ldr.w	r8, [r2]
 800ba78:	3210      	adds	r2, #16
 800ba7a:	f85b 5b04 	ldr.w	r5, [fp], #4
 800ba7e:	f852 cc0c 	ldr.w	ip, [r2, #-12]
 800ba82:	f852 ec08 	ldr.w	lr, [r2, #-8]
 800ba86:	f852 7c04 	ldr.w	r7, [r2, #-4]
 800ba8a:	fa2f f685 	sxtb16	r6, r5
 800ba8e:	fa2f f595 	sxtb16	r5, r5, ror #8
 800ba92:	fb26 0008 	smlad	r0, r6, r8, r0
 800ba96:	fb25 000c 	smlad	r0, r5, ip, r0
 800ba9a:	fb26 330e 	smlad	r3, r6, lr, r3
 800ba9e:	fb25 3307 	smlad	r3, r5, r7, r3
 800baa2:	f85b 500a 	ldr.w	r5, [fp, sl]
 800baa6:	fa2f f685 	sxtb16	r6, r5
 800baaa:	fa2f f595 	sxtb16	r5, r5, ror #8
 800baae:	fb26 4408 	smlad	r4, r6, r8, r4
 800bab2:	fb26 110e 	smlad	r1, r6, lr, r1
 800bab6:	fb25 440c 	smlad	r4, r5, ip, r4
 800baba:	fb25 1107 	smlad	r1, r5, r7, r1
 800babe:	45cb      	cmp	fp, r9
 800bac0:	d1d8      	bne.n	800ba74 <st_sssa8_nn_mat_mult_nt_t+0x298>
 800bac2:	9a01      	ldr	r2, [sp, #4]
 800bac4:	9d05      	ldr	r5, [sp, #20]
 800bac6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800baca:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800bace:	9d06      	ldr	r5, [sp, #24]
 800bad0:	9201      	str	r2, [sp, #4]
 800bad2:	f10a 0204 	add.w	r2, sl, #4
 800bad6:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 800bada:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800badc:	4552      	cmp	r2, sl
 800bade:	dd58      	ble.n	800bb92 <st_sssa8_nn_mat_mult_nt_t+0x3b6>
 800bae0:	9f01      	ldr	r7, [sp, #4]
 800bae2:	f999 2000 	ldrsb.w	r2, [r9]
 800bae6:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 800baea:	f9b7 6000 	ldrsh.w	r6, [r7]
 800baee:	fb15 3302 	smlabb	r3, r5, r2, r3
 800baf2:	fb16 0002 	smlabb	r0, r6, r2, r0
 800baf6:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800baf8:	f919 2002 	ldrsb.w	r2, [r9, r2]
 800bafc:	fb15 1102 	smlabb	r1, r5, r2, r1
 800bb00:	9d38      	ldr	r5, [sp, #224]	; 0xe0
 800bb02:	fb16 4402 	smlabb	r4, r6, r2, r4
 800bb06:	f10a 0201 	add.w	r2, sl, #1
 800bb0a:	4295      	cmp	r5, r2
 800bb0c:	dd3d      	ble.n	800bb8a <st_sssa8_nn_mat_mult_nt_t+0x3ae>
 800bb0e:	eb09 0205 	add.w	r2, r9, r5
 800bb12:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 800bb16:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 800bb1a:	f992 2001 	ldrsb.w	r2, [r2, #1]
 800bb1e:	fb16 4402 	smlabb	r4, r6, r2, r4
 800bb22:	fb15 1102 	smlabb	r1, r5, r2, r1
 800bb26:	f999 2001 	ldrsb.w	r2, [r9, #1]
 800bb2a:	fb16 0002 	smlabb	r0, r6, r2, r0
 800bb2e:	9e38      	ldr	r6, [sp, #224]	; 0xe0
 800bb30:	fb15 3302 	smlabb	r3, r5, r2, r3
 800bb34:	f10a 0202 	add.w	r2, sl, #2
 800bb38:	f109 0502 	add.w	r5, r9, #2
 800bb3c:	4296      	cmp	r6, r2
 800bb3e:	dd24      	ble.n	800bb8a <st_sssa8_nn_mat_mult_nt_t+0x3ae>
 800bb40:	57aa      	ldrsb	r2, [r5, r6]
 800bb42:	f9b7 6008 	ldrsh.w	r6, [r7, #8]
 800bb46:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 800bb4a:	fb16 4402 	smlabb	r4, r6, r2, r4
 800bb4e:	fb15 1102 	smlabb	r1, r5, r2, r1
 800bb52:	f999 2002 	ldrsb.w	r2, [r9, #2]
 800bb56:	fb16 0002 	smlabb	r0, r6, r2, r0
 800bb5a:	9e38      	ldr	r6, [sp, #224]	; 0xe0
 800bb5c:	fb15 3302 	smlabb	r3, r5, r2, r3
 800bb60:	f10a 0203 	add.w	r2, sl, #3
 800bb64:	f109 0503 	add.w	r5, r9, #3
 800bb68:	4296      	cmp	r6, r2
 800bb6a:	dd0e      	ble.n	800bb8a <st_sssa8_nn_mat_mult_nt_t+0x3ae>
 800bb6c:	57ad      	ldrsb	r5, [r5, r6]
 800bb6e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800bb72:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 800bb76:	fb12 4405 	smlabb	r4, r2, r5, r4
 800bb7a:	fb16 1105 	smlabb	r1, r6, r5, r1
 800bb7e:	f999 5003 	ldrsb.w	r5, [r9, #3]
 800bb82:	fb12 0005 	smlabb	r0, r2, r5, r0
 800bb86:	fb16 3305 	smlabb	r3, r6, r5, r3
 800bb8a:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800bb8c:	eba2 020a 	sub.w	r2, r2, sl
 800bb90:	4491      	add	r9, r2
 800bb92:	9a08      	ldr	r2, [sp, #32]
 800bb94:	2a15      	cmp	r2, #21
 800bb96:	f340 80a8 	ble.w	800bcea <st_sssa8_nn_mat_mult_nt_t+0x50e>
 800bb9a:	3a01      	subs	r2, #1
 800bb9c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bb9e:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 800bba0:	fb50 5006 	smmla	r0, r0, r6, r5
 800bba4:	fb54 5406 	smmla	r4, r4, r6, r5
 800bba8:	4110      	asrs	r0, r2
 800bbaa:	fb53 5306 	smmla	r3, r3, r6, r5
 800bbae:	fb51 5106 	smmla	r1, r1, r6, r5
 800bbb2:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
 800bbb4:	4428      	add	r0, r5
 800bbb6:	f300 0007 	ssat	r0, #8, r0
 800bbba:	9d03      	ldr	r5, [sp, #12]
 800bbbc:	4113      	asrs	r3, r2
 800bbbe:	f805 0c01 	strb.w	r0, [r5, #-1]
 800bbc2:	983a      	ldr	r0, [sp, #232]	; 0xe8
 800bbc4:	4403      	add	r3, r0
 800bbc6:	f303 0307 	ssat	r3, #8, r3
 800bbca:	9802      	ldr	r0, [sp, #8]
 800bbcc:	4114      	asrs	r4, r2
 800bbce:	7043      	strb	r3, [r0, #1]
 800bbd0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800bbd2:	18e3      	adds	r3, r4, r3
 800bbd4:	f303 0307 	ssat	r3, #8, r3
 800bbd8:	4111      	asrs	r1, r2
 800bbda:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800bbdc:	5483      	strb	r3, [r0, r2]
 800bbde:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800bbe0:	4419      	add	r1, r3
 800bbe2:	f301 0207 	ssat	r2, #8, r1
 800bbe6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800bbe8:	54ea      	strb	r2, [r5, r3]
 800bbea:	4603      	mov	r3, r0
 800bbec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbee:	4413      	add	r3, r2
 800bbf0:	9302      	str	r3, [sp, #8]
 800bbf2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800bbf4:	eb09 0b03 	add.w	fp, r9, r3
 800bbf8:	9b03      	ldr	r3, [sp, #12]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	9303      	str	r3, [sp, #12]
 800bbfe:	9b04      	ldr	r3, [sp, #16]
 800bc00:	3b01      	subs	r3, #1
 800bc02:	9304      	str	r3, [sp, #16]
 800bc04:	f47f ae7b 	bne.w	800b8fe <st_sssa8_nn_mat_mult_nt_t+0x122>
 800bc08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc0a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bc0c:	eb03 0a02 	add.w	sl, r3, r2
 800bc10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f040 80d0 	bne.w	800bdb8 <st_sssa8_nn_mat_mult_nt_t+0x5dc>
 800bc18:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 800bc1c:	4413      	add	r3, r2
 800bc1e:	9318      	str	r3, [sp, #96]	; 0x60
 800bc20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc22:	3302      	adds	r3, #2
 800bc24:	9314      	str	r3, [sp, #80]	; 0x50
 800bc26:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800bc28:	b11b      	cbz	r3, 800bc32 <st_sssa8_nn_mat_mult_nt_t+0x456>
 800bc2a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800bc2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc2e:	4413      	add	r3, r2
 800bc30:	933b      	str	r3, [sp, #236]	; 0xec
 800bc32:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bc34:	3308      	adds	r3, #8
 800bc36:	9316      	str	r3, [sp, #88]	; 0x58
 800bc38:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 800bc3c:	4413      	add	r3, r2
 800bc3e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bc40:	931a      	str	r3, [sp, #104]	; 0x68
 800bc42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc44:	4293      	cmp	r3, r2
 800bc46:	f47f ae30 	bne.w	800b8aa <st_sssa8_nn_mat_mult_nt_t+0xce>
 800bc4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc4c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bc4e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800bc50:	fb01 3302 	mla	r3, r1, r2, r3
 800bc54:	9322      	str	r3, [sp, #136]	; 0x88
 800bc56:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800bc58:	07db      	lsls	r3, r3, #31
 800bc5a:	d542      	bpl.n	800bce2 <st_sssa8_nn_mat_mult_nt_t+0x506>
 800bc5c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	dd3f      	ble.n	800bce2 <st_sssa8_nn_mat_mult_nt_t+0x506>
 800bc62:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800bc64:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 800bc68:	9a08      	ldr	r2, [sp, #32]
 800bc6a:	2500      	movs	r5, #0
 800bc6c:	441e      	add	r6, r3
 800bc6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bc70:	1e97      	subs	r7, r2, #2
 800bc72:	f1c2 0e01 	rsb	lr, r2, #1
 800bc76:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	f102 3cff 	add.w	ip, r2, #4294967295
 800bc80:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 800bc84:	fa03 f707 	lsl.w	r7, r3, r7
 800bc88:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bc8a:	4693      	mov	fp, r2
 800bc8c:	f8cd e004 	str.w	lr, [sp, #4]
 800bc90:	e9dd a838 	ldrd	sl, r8, [sp, #224]	; 0xe0
 800bc94:	f1ba 0f00 	cmp.w	sl, #0
 800bc98:	6832      	ldr	r2, [r6, #0]
 800bc9a:	dd0d      	ble.n	800bcb8 <st_sssa8_nn_mat_mult_nt_t+0x4dc>
 800bc9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc9e:	eb01 0e0a 	add.w	lr, r1, sl
 800bca2:	1e58      	subs	r0, r3, #1
 800bca4:	f911 3b01 	ldrsb.w	r3, [r1], #1
 800bca8:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 800bcac:	eba3 0308 	sub.w	r3, r3, r8
 800bcb0:	4571      	cmp	r1, lr
 800bcb2:	fb04 2203 	mla	r2, r4, r3, r2
 800bcb6:	d1f5      	bne.n	800bca4 <st_sssa8_nn_mat_mult_nt_t+0x4c8>
 800bcb8:	f1bb 0f15 	cmp.w	fp, #21
 800bcbc:	f340 8228 	ble.w	800c110 <st_sssa8_nn_mat_mult_nt_t+0x934>
 800bcc0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800bcc2:	fb52 7303 	smmla	r3, r2, r3, r7
 800bcc6:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800bcc8:	fa43 f30c 	asr.w	r3, r3, ip
 800bccc:	4413      	add	r3, r2
 800bcce:	f303 0307 	ssat	r3, #8, r3
 800bcd2:	f889 3000 	strb.w	r3, [r9]
 800bcd6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800bcd8:	3501      	adds	r5, #1
 800bcda:	4499      	add	r9, r3
 800bcdc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800bcde:	42ab      	cmp	r3, r5
 800bce0:	d1d8      	bne.n	800bc94 <st_sssa8_nn_mat_mult_nt_t+0x4b8>
 800bce2:	2000      	movs	r0, #0
 800bce4:	b02b      	add	sp, #172	; 0xac
 800bce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcea:	2a00      	cmp	r2, #0
 800bcec:	dd23      	ble.n	800bd36 <st_sssa8_nn_mat_mult_nt_t+0x55a>
 800bcee:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800bcf0:	0040      	lsls	r0, r0, #1
 800bcf2:	9e3a      	ldr	r6, [sp, #232]	; 0xe8
 800bcf4:	0064      	lsls	r4, r4, #1
 800bcf6:	fb50 6005 	smmla	r0, r0, r5, r6
 800bcfa:	005b      	lsls	r3, r3, #1
 800bcfc:	4110      	asrs	r0, r2
 800bcfe:	0049      	lsls	r1, r1, #1
 800bd00:	fb54 6405 	smmla	r4, r4, r5, r6
 800bd04:	fb53 6305 	smmla	r3, r3, r5, r6
 800bd08:	fb51 6105 	smmla	r1, r1, r5, r6
 800bd0c:	f300 0007 	ssat	r0, #8, r0
 800bd10:	9d03      	ldr	r5, [sp, #12]
 800bd12:	4113      	asrs	r3, r2
 800bd14:	f805 0c01 	strb.w	r0, [r5, #-1]
 800bd18:	f303 0307 	ssat	r3, #8, r3
 800bd1c:	9802      	ldr	r0, [sp, #8]
 800bd1e:	4114      	asrs	r4, r2
 800bd20:	7043      	strb	r3, [r0, #1]
 800bd22:	f304 0407 	ssat	r4, #8, r4
 800bd26:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800bd28:	4111      	asrs	r1, r2
 800bd2a:	54c4      	strb	r4, [r0, r3]
 800bd2c:	f301 0107 	ssat	r1, #8, r1
 800bd30:	54e9      	strb	r1, [r5, r3]
 800bd32:	4603      	mov	r3, r0
 800bd34:	e75a      	b.n	800bbec <st_sssa8_nn_mat_mult_nt_t+0x410>
 800bd36:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800bd38:	fa00 f205 	lsl.w	r2, r0, r5
 800bd3c:	f302 021f 	ssat	r2, #32, r2
 800bd40:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800bd42:	fb52 f210 	smmulr	r2, r2, r0
 800bd46:	fa04 f005 	lsl.w	r0, r4, r5
 800bd4a:	f300 001f 	ssat	r0, #32, r0
 800bd4e:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 800bd50:	fb50 f014 	smmulr	r0, r0, r4
 800bd54:	462c      	mov	r4, r5
 800bd56:	40ab      	lsls	r3, r5
 800bd58:	f303 031f 	ssat	r3, #32, r3
 800bd5c:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800bd5e:	fb53 f315 	smmulr	r3, r3, r5
 800bd62:	40a1      	lsls	r1, r4
 800bd64:	f301 011f 	ssat	r1, #32, r1
 800bd68:	fb51 f115 	smmulr	r1, r1, r5
 800bd6c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800bd6e:	4422      	add	r2, r4
 800bd70:	f302 0207 	ssat	r2, #8, r2
 800bd74:	9c03      	ldr	r4, [sp, #12]
 800bd76:	f804 2c01 	strb.w	r2, [r4, #-1]
 800bd7a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f303 0307 	ssat	r3, #8, r3
 800bd82:	9a02      	ldr	r2, [sp, #8]
 800bd84:	7053      	strb	r3, [r2, #1]
 800bd86:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800bd88:	4418      	add	r0, r3
 800bd8a:	f300 0007 	ssat	r0, #8, r0
 800bd8e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800bd90:	54d0      	strb	r0, [r2, r3]
 800bd92:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800bd94:	4419      	add	r1, r3
 800bd96:	f301 0107 	ssat	r1, #8, r1
 800bd9a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800bd9c:	54e1      	strb	r1, [r4, r3]
 800bd9e:	4613      	mov	r3, r2
 800bda0:	e724      	b.n	800bbec <st_sssa8_nn_mat_mult_nt_t+0x410>
 800bda2:	46d9      	mov	r9, fp
 800bda4:	e699      	b.n	800bada <st_sssa8_nn_mat_mult_nt_t+0x2fe>
 800bda6:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800bda8:	f04f 0a00 	mov.w	sl, #0
 800bdac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdae:	9301      	str	r3, [sp, #4]
 800bdb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	e64b      	b.n	800ba50 <st_sssa8_nn_mat_mult_nt_t+0x274>
 800bdb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f340 81e8 	ble.w	800c190 <st_sssa8_nn_mat_mult_nt_t+0x9b4>
 800bdc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bdc2:	e9dd 5209 	ldrd	r5, r2, [sp, #36]	; 0x24
 800bdc6:	eb0b 0e03 	add.w	lr, fp, r3
 800bdca:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800bdcc:	f8db 1000 	ldr.w	r1, [fp]
 800bdd0:	fa2f f081 	sxtb16	r0, r1
 800bdd4:	fa2f f191 	sxtb16	r1, r1, ror #8
 800bdd8:	681c      	ldr	r4, [r3, #0]
 800bdda:	fb20 5404 	smlad	r4, r0, r4, r5
 800bdde:	685d      	ldr	r5, [r3, #4]
 800bde0:	fb21 4505 	smlad	r5, r1, r5, r4
 800bde4:	689c      	ldr	r4, [r3, #8]
 800bde6:	fb20 2204 	smlad	r2, r0, r4, r2
 800bdea:	68d8      	ldr	r0, [r3, #12]
 800bdec:	fb21 2100 	smlad	r1, r1, r0, r2
 800bdf0:	f8db 2004 	ldr.w	r2, [fp, #4]
 800bdf4:	fa2f f082 	sxtb16	r0, r2
 800bdf8:	fa2f f292 	sxtb16	r2, r2, ror #8
 800bdfc:	691c      	ldr	r4, [r3, #16]
 800bdfe:	fb20 5404 	smlad	r4, r0, r4, r5
 800be02:	695d      	ldr	r5, [r3, #20]
 800be04:	fb22 4505 	smlad	r5, r2, r5, r4
 800be08:	699c      	ldr	r4, [r3, #24]
 800be0a:	fb20 1004 	smlad	r0, r0, r4, r1
 800be0e:	69d9      	ldr	r1, [r3, #28]
 800be10:	fb22 0201 	smlad	r2, r2, r1, r0
 800be14:	f8db 1008 	ldr.w	r1, [fp, #8]
 800be18:	fa2f f081 	sxtb16	r0, r1
 800be1c:	fa2f f191 	sxtb16	r1, r1, ror #8
 800be20:	6a1c      	ldr	r4, [r3, #32]
 800be22:	fb20 5404 	smlad	r4, r0, r4, r5
 800be26:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800be28:	fb21 4606 	smlad	r6, r1, r6, r4
 800be2c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800be2e:	fb20 2004 	smlad	r0, r0, r4, r2
 800be32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be34:	fb21 0102 	smlad	r1, r1, r2, r0
 800be38:	f8db 500c 	ldr.w	r5, [fp, #12]
 800be3c:	3340      	adds	r3, #64	; 0x40
 800be3e:	f853 4c10 	ldr.w	r4, [r3, #-16]
 800be42:	f10b 0b10 	add.w	fp, fp, #16
 800be46:	f853 8c0c 	ldr.w	r8, [r3, #-12]
 800be4a:	f853 cc08 	ldr.w	ip, [r3, #-8]
 800be4e:	f853 7c04 	ldr.w	r7, [r3, #-4]
 800be52:	fa2f f085 	sxtb16	r0, r5
 800be56:	fa2f f295 	sxtb16	r2, r5, ror #8
 800be5a:	fb20 6404 	smlad	r4, r0, r4, r6
 800be5e:	fb22 4508 	smlad	r5, r2, r8, r4
 800be62:	fb20 110c 	smlad	r1, r0, ip, r1
 800be66:	fb22 1207 	smlad	r2, r2, r7, r1
 800be6a:	45de      	cmp	lr, fp
 800be6c:	d1ae      	bne.n	800bdcc <st_sssa8_nn_mat_mult_nt_t+0x5f0>
 800be6e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800be70:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 800be74:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 800be78:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800be7a:	eb03 0c02 	add.w	ip, r3, r2
 800be7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be80:	4573      	cmp	r3, lr
 800be82:	f340 8183 	ble.w	800c18c <st_sssa8_nn_mat_mult_nt_t+0x9b0>
 800be86:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800be88:	f1a3 0904 	sub.w	r9, r3, #4
 800be8c:	4663      	mov	r3, ip
 800be8e:	eba9 090e 	sub.w	r9, r9, lr
 800be92:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800be96:	f109 0801 	add.w	r8, r9, #1
 800be9a:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 800be9e:	eb0b 0788 	add.w	r7, fp, r8, lsl #2
 800bea2:	e9cd ae01 	strd	sl, lr, [sp, #4]
 800bea6:	6818      	ldr	r0, [r3, #0]
 800bea8:	3310      	adds	r3, #16
 800beaa:	f85b 2b04 	ldr.w	r2, [fp], #4
 800beae:	f853 ac0c 	ldr.w	sl, [r3, #-12]
 800beb2:	f853 ec08 	ldr.w	lr, [r3, #-8]
 800beb6:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800beba:	fa2f f182 	sxtb16	r1, r2
 800bebe:	fa2f f292 	sxtb16	r2, r2, ror #8
 800bec2:	fb21 4400 	smlad	r4, r1, r0, r4
 800bec6:	fb22 440a 	smlad	r4, r2, sl, r4
 800beca:	fb21 550e 	smlad	r5, r1, lr, r5
 800bece:	fb22 5506 	smlad	r5, r2, r6, r5
 800bed2:	45bb      	cmp	fp, r7
 800bed4:	d1e7      	bne.n	800bea6 <st_sssa8_nn_mat_mult_nt_t+0x6ca>
 800bed6:	eb0c 1c08 	add.w	ip, ip, r8, lsl #4
 800beda:	e9dd ae01 	ldrd	sl, lr, [sp, #4]
 800bede:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 800bee2:	f10e 0e04 	add.w	lr, lr, #4
 800bee6:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800beea:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800beec:	4573      	cmp	r3, lr
 800beee:	dd40      	ble.n	800bf72 <st_sssa8_nn_mat_mult_nt_t+0x796>
 800bef0:	f997 3000 	ldrsb.w	r3, [r7]
 800bef4:	f8bc 2000 	ldrh.w	r2, [ip]
 800bef8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800befa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800befc:	fb12 1103 	smlabb	r1, r2, r3, r1
 800bf00:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bf04:	fb12 0003 	smlabb	r0, r2, r3, r0
 800bf08:	f10e 0301 	add.w	r3, lr, #1
 800bf0c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800bf0e:	9109      	str	r1, [sp, #36]	; 0x24
 800bf10:	429a      	cmp	r2, r3
 800bf12:	900a      	str	r0, [sp, #40]	; 0x28
 800bf14:	dd2d      	ble.n	800bf72 <st_sssa8_nn_mat_mult_nt_t+0x796>
 800bf16:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800bf1a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 800bf1e:	fb12 1103 	smlabb	r1, r2, r3, r1
 800bf22:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800bf26:	fb12 0003 	smlabb	r0, r2, r3, r0
 800bf2a:	f10e 0302 	add.w	r3, lr, #2
 800bf2e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800bf30:	9109      	str	r1, [sp, #36]	; 0x24
 800bf32:	429a      	cmp	r2, r3
 800bf34:	900a      	str	r0, [sp, #40]	; 0x28
 800bf36:	dd1c      	ble.n	800bf72 <st_sssa8_nn_mat_mult_nt_t+0x796>
 800bf38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bf3c:	f10e 0e03 	add.w	lr, lr, #3
 800bf40:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 800bf44:	fb12 1103 	smlabb	r1, r2, r3, r1
 800bf48:	f8bc 200a 	ldrh.w	r2, [ip, #10]
 800bf4c:	fb12 0003 	smlabb	r0, r2, r3, r0
 800bf50:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800bf52:	9109      	str	r1, [sp, #36]	; 0x24
 800bf54:	4573      	cmp	r3, lr
 800bf56:	900a      	str	r0, [sp, #40]	; 0x28
 800bf58:	dd0b      	ble.n	800bf72 <st_sssa8_nn_mat_mult_nt_t+0x796>
 800bf5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf5e:	f8bc 200c 	ldrh.w	r2, [ip, #12]
 800bf62:	fb12 1203 	smlabb	r2, r2, r3, r1
 800bf66:	9209      	str	r2, [sp, #36]	; 0x24
 800bf68:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 800bf6c:	fb12 0303 	smlabb	r3, r2, r3, r0
 800bf70:	930a      	str	r3, [sp, #40]	; 0x28
 800bf72:	9908      	ldr	r1, [sp, #32]
 800bf74:	2915      	cmp	r1, #21
 800bf76:	f340 80af 	ble.w	800c0d8 <st_sssa8_nn_mat_mult_nt_t+0x8fc>
 800bf7a:	3901      	subs	r1, #1
 800bf7c:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800bf7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf82:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 800bf84:	fb52 3200 	smmla	r2, r2, r0, r3
 800bf88:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf8a:	410a      	asrs	r2, r1
 800bf8c:	fb50 3304 	smmla	r3, r0, r4, r3
 800bf90:	983a      	ldr	r0, [sp, #232]	; 0xe8
 800bf92:	4402      	add	r2, r0
 800bf94:	f302 0207 	ssat	r2, #8, r2
 800bf98:	410b      	asrs	r3, r1
 800bf9a:	f88a 2000 	strb.w	r2, [sl]
 800bf9e:	4403      	add	r3, r0
 800bfa0:	f303 0307 	ssat	r3, #8, r3
 800bfa4:	f88a 3001 	strb.w	r3, [sl, #1]
 800bfa8:	e636      	b.n	800bc18 <st_sssa8_nn_mat_mult_nt_t+0x43c>
 800bfaa:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800bfac:	2900      	cmp	r1, #0
 800bfae:	f000 80e9 	beq.w	800c184 <st_sssa8_nn_mat_mult_nt_t+0x9a8>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3210      	adds	r2, #16
 800bfba:	f932 4c10 	ldrsh.w	r4, [r2, #-16]
 800bfbe:	3901      	subs	r1, #1
 800bfc0:	f102 0210 	add.w	r2, r2, #16
 800bfc4:	eba0 0004 	sub.w	r0, r0, r4
 800bfc8:	f932 4c18 	ldrsh.w	r4, [r2, #-24]
 800bfcc:	eba3 0304 	sub.w	r3, r3, r4
 800bfd0:	f932 4c1e 	ldrsh.w	r4, [r2, #-30]
 800bfd4:	eba0 0004 	sub.w	r0, r0, r4
 800bfd8:	f932 4c16 	ldrsh.w	r4, [r2, #-22]
 800bfdc:	eba3 0304 	sub.w	r3, r3, r4
 800bfe0:	f932 4c1c 	ldrsh.w	r4, [r2, #-28]
 800bfe4:	eba0 0004 	sub.w	r0, r0, r4
 800bfe8:	f932 4c14 	ldrsh.w	r4, [r2, #-20]
 800bfec:	eba3 0304 	sub.w	r3, r3, r4
 800bff0:	f932 4c1a 	ldrsh.w	r4, [r2, #-26]
 800bff4:	eba0 0004 	sub.w	r0, r0, r4
 800bff8:	f932 4c12 	ldrsh.w	r4, [r2, #-18]
 800bffc:	eba3 0304 	sub.w	r3, r3, r4
 800c000:	d1db      	bne.n	800bfba <st_sssa8_nn_mat_mult_nt_t+0x7de>
 800c002:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800c004:	9925      	ldr	r1, [sp, #148]	; 0x94
 800c006:	440a      	add	r2, r1
 800c008:	9924      	ldr	r1, [sp, #144]	; 0x90
 800c00a:	b1a9      	cbz	r1, 800c038 <st_sssa8_nn_mat_mult_nt_t+0x85c>
 800c00c:	f9b2 1000 	ldrsh.w	r1, [r2]
 800c010:	1a40      	subs	r0, r0, r1
 800c012:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800c016:	1a5b      	subs	r3, r3, r1
 800c018:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800c01a:	b169      	cbz	r1, 800c038 <st_sssa8_nn_mat_mult_nt_t+0x85c>
 800c01c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800c020:	1a40      	subs	r0, r0, r1
 800c022:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800c026:	1a5b      	subs	r3, r3, r1
 800c028:	9926      	ldr	r1, [sp, #152]	; 0x98
 800c02a:	b129      	cbz	r1, 800c038 <st_sssa8_nn_mat_mult_nt_t+0x85c>
 800c02c:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 800c030:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800c034:	1a40      	subs	r0, r0, r1
 800c036:	1a9b      	subs	r3, r3, r2
 800c038:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800c03a:	fb02 f000 	mul.w	r0, r2, r0
 800c03e:	fb03 f202 	mul.w	r2, r3, r2
 800c042:	e43c      	b.n	800b8be <st_sssa8_nn_mat_mult_nt_t+0xe2>
 800c044:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800c046:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c048:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800c04a:	18ec      	adds	r4, r5, r3
 800c04c:	2800      	cmp	r0, #0
 800c04e:	f000 80a6 	beq.w	800c19e <st_sssa8_nn_mat_mult_nt_t+0x9c2>
 800c052:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800c054:	f855 3b04 	ldr.w	r3, [r5], #4
 800c058:	3210      	adds	r2, #16
 800c05a:	f854 1b04 	ldr.w	r1, [r4], #4
 800c05e:	3801      	subs	r0, #1
 800c060:	fa2f f683 	sxtb16	r6, r3
 800c064:	ea4f 2333 	mov.w	r3, r3, ror #8
 800c068:	f842 6c10 	str.w	r6, [r2, #-16]
 800c06c:	fa2f f383 	sxtb16	r3, r3
 800c070:	f842 3c0c 	str.w	r3, [r2, #-12]
 800c074:	ea4f 2331 	mov.w	r3, r1, ror #8
 800c078:	fa2f f181 	sxtb16	r1, r1
 800c07c:	fa2f f383 	sxtb16	r3, r3
 800c080:	f842 1c08 	str.w	r1, [r2, #-8]
 800c084:	f842 3c04 	str.w	r3, [r2, #-4]
 800c088:	d1e4      	bne.n	800c054 <st_sssa8_nn_mat_mult_nt_t+0x878>
 800c08a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800c08c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800c08e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800c090:	9938      	ldr	r1, [sp, #224]	; 0xe0
 800c092:	4413      	add	r3, r2
 800c094:	4602      	mov	r2, r0
 800c096:	180c      	adds	r4, r1, r0
 800c098:	9924      	ldr	r1, [sp, #144]	; 0x90
 800c09a:	2900      	cmp	r1, #0
 800c09c:	f43f ac09 	beq.w	800b8b2 <st_sssa8_nn_mat_mult_nt_t+0xd6>
 800c0a0:	f992 1000 	ldrsb.w	r1, [r2]
 800c0a4:	8019      	strh	r1, [r3, #0]
 800c0a6:	f994 1000 	ldrsb.w	r1, [r4]
 800c0aa:	8059      	strh	r1, [r3, #2]
 800c0ac:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800c0ae:	2900      	cmp	r1, #0
 800c0b0:	f43f abff 	beq.w	800b8b2 <st_sssa8_nn_mat_mult_nt_t+0xd6>
 800c0b4:	f992 1001 	ldrsb.w	r1, [r2, #1]
 800c0b8:	8099      	strh	r1, [r3, #4]
 800c0ba:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800c0be:	80d9      	strh	r1, [r3, #6]
 800c0c0:	9926      	ldr	r1, [sp, #152]	; 0x98
 800c0c2:	2900      	cmp	r1, #0
 800c0c4:	f43f abf5 	beq.w	800b8b2 <st_sssa8_nn_mat_mult_nt_t+0xd6>
 800c0c8:	f992 2002 	ldrsb.w	r2, [r2, #2]
 800c0cc:	811a      	strh	r2, [r3, #8]
 800c0ce:	f994 2002 	ldrsb.w	r2, [r4, #2]
 800c0d2:	815a      	strh	r2, [r3, #10]
 800c0d4:	f7ff bbed 	b.w	800b8b2 <st_sssa8_nn_mat_mult_nt_t+0xd6>
 800c0d8:	2900      	cmp	r1, #0
 800c0da:	dd37      	ble.n	800c14c <st_sssa8_nn_mat_mult_nt_t+0x970>
 800c0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0e0:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800c0e2:	005b      	lsls	r3, r3, #1
 800c0e4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800c0e6:	0052      	lsls	r2, r2, #1
 800c0e8:	fb53 4300 	smmla	r3, r3, r0, r4
 800c0ec:	fb52 4200 	smmla	r2, r2, r0, r4
 800c0f0:	410b      	asrs	r3, r1
 800c0f2:	f303 0307 	ssat	r3, #8, r3
 800c0f6:	410a      	asrs	r2, r1
 800c0f8:	f88a 3000 	strb.w	r3, [sl]
 800c0fc:	f302 0307 	ssat	r3, #8, r2
 800c100:	f88a 3001 	strb.w	r3, [sl, #1]
 800c104:	e588      	b.n	800bc18 <st_sssa8_nn_mat_mult_nt_t+0x43c>
 800c106:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800c10a:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 800c10e:	e57f      	b.n	800bc10 <st_sssa8_nn_mat_mult_nt_t+0x434>
 800c110:	f1bb 0f00 	cmp.w	fp, #0
 800c114:	dd0b      	ble.n	800c12e <st_sssa8_nn_mat_mult_nt_t+0x952>
 800c116:	0053      	lsls	r3, r2, #1
 800c118:	983a      	ldr	r0, [sp, #232]	; 0xe8
 800c11a:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800c11c:	fb53 0302 	smmla	r3, r3, r2, r0
 800c120:	fa43 f30b 	asr.w	r3, r3, fp
 800c124:	f303 0307 	ssat	r3, #8, r3
 800c128:	f889 3000 	strb.w	r3, [r9]
 800c12c:	e5d3      	b.n	800bcd6 <st_sssa8_nn_mat_mult_nt_t+0x4fa>
 800c12e:	9b01      	ldr	r3, [sp, #4]
 800c130:	fa02 f303 	lsl.w	r3, r2, r3
 800c134:	f303 031f 	ssat	r3, #32, r3
 800c138:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800c13a:	fb53 f312 	smmulr	r3, r3, r2
 800c13e:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800c140:	4413      	add	r3, r2
 800c142:	f303 0307 	ssat	r3, #8, r3
 800c146:	f889 3000 	strb.w	r3, [r9]
 800c14a:	e5c4      	b.n	800bcd6 <st_sssa8_nn_mat_mult_nt_t+0x4fa>
 800c14c:	f1c1 0301 	rsb	r3, r1, #1
 800c150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c152:	409a      	lsls	r2, r3
 800c154:	f302 021f 	ssat	r2, #32, r2
 800c158:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800c15a:	fb52 f211 	smmulr	r2, r2, r1
 800c15e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c160:	4099      	lsls	r1, r3
 800c162:	f301 031f 	ssat	r3, #32, r1
 800c166:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800c168:	fb53 f311 	smmulr	r3, r3, r1
 800c16c:	993a      	ldr	r1, [sp, #232]	; 0xe8
 800c16e:	440a      	add	r2, r1
 800c170:	f302 0207 	ssat	r2, #8, r2
 800c174:	440b      	add	r3, r1
 800c176:	f88a 2000 	strb.w	r2, [sl]
 800c17a:	f303 0307 	ssat	r3, #8, r3
 800c17e:	f88a 3001 	strb.w	r3, [sl, #1]
 800c182:	e549      	b.n	800bc18 <st_sssa8_nn_mat_mult_nt_t+0x43c>
 800c184:	4608      	mov	r0, r1
 800c186:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800c188:	460b      	mov	r3, r1
 800c18a:	e73d      	b.n	800c008 <st_sssa8_nn_mat_mult_nt_t+0x82c>
 800c18c:	465f      	mov	r7, fp
 800c18e:	e6ac      	b.n	800beea <st_sssa8_nn_mat_mult_nt_t+0x70e>
 800c190:	f8dd c0ec 	ldr.w	ip, [sp, #236]	; 0xec
 800c194:	f04f 0e00 	mov.w	lr, #0
 800c198:	e671      	b.n	800be7e <st_sssa8_nn_mat_mult_nt_t+0x6a2>
 800c19a:	931b      	str	r3, [sp, #108]	; 0x6c
 800c19c:	e55b      	b.n	800bc56 <st_sssa8_nn_mat_mult_nt_t+0x47a>
 800c19e:	462a      	mov	r2, r5
 800c1a0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800c1a2:	e779      	b.n	800c098 <st_sssa8_nn_mat_mult_nt_t+0x8bc>

0800c1a4 <st_sssa8_nn_mat_mult_kernel_opt>:
 800c1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a8:	b09b      	sub	sp, #108	; 0x6c
 800c1aa:	4683      	mov	fp, r0
 800c1ac:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 800c1b0:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 800c1b2:	f8bd 4094 	ldrh.w	r4, [sp, #148]	; 0x94
 800c1b6:	0870      	lsrs	r0, r6, #1
 800c1b8:	f9bd 5098 	ldrsh.w	r5, [sp, #152]	; 0x98
 800c1bc:	441f      	add	r7, r3
 800c1be:	9318      	str	r3, [sp, #96]	; 0x60
 800c1c0:	9616      	str	r6, [sp, #88]	; 0x58
 800c1c2:	9109      	str	r1, [sp, #36]	; 0x24
 800c1c4:	9215      	str	r2, [sp, #84]	; 0x54
 800c1c6:	9404      	str	r4, [sp, #16]
 800c1c8:	9508      	str	r5, [sp, #32]
 800c1ca:	9714      	str	r7, [sp, #80]	; 0x50
 800c1cc:	9019      	str	r0, [sp, #100]	; 0x64
 800c1ce:	f000 81a5 	beq.w	800c51c <st_sssa8_nn_mat_mult_kernel_opt+0x378>
 800c1d2:	460e      	mov	r6, r1
 800c1d4:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 800c1d8:	4694      	mov	ip, r2
 800c1da:	1e42      	subs	r2, r0, #1
 800c1dc:	910a      	str	r1, [sp, #40]	; 0x28
 800c1de:	2001      	movs	r0, #1
 800c1e0:	1ea9      	subs	r1, r5, #2
 800c1e2:	f1a4 0310 	sub.w	r3, r4, #16
 800c1e6:	b292      	uxth	r2, r2
 800c1e8:	46d9      	mov	r9, fp
 800c1ea:	4088      	lsls	r0, r1
 800c1ec:	091b      	lsrs	r3, r3, #4
 800c1ee:	f10c 0110 	add.w	r1, ip, #16
 800c1f2:	9012      	str	r0, [sp, #72]	; 0x48
 800c1f4:	4660      	mov	r0, ip
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c1fc:	3008      	adds	r0, #8
 800c1fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c200:	920c      	str	r2, [sp, #48]	; 0x30
 800c202:	4622      	mov	r2, r4
 800c204:	9001      	str	r0, [sp, #4]
 800c206:	3c03      	subs	r4, #3
 800c208:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800c20a:	940b      	str	r4, [sp, #44]	; 0x2c
 800c20c:	3002      	adds	r0, #2
 800c20e:	9003      	str	r0, [sp, #12]
 800c210:	1cb8      	adds	r0, r7, #2
 800c212:	9002      	str	r0, [sp, #8]
 800c214:	eb06 1043 	add.w	r0, r6, r3, lsl #5
 800c218:	9010      	str	r0, [sp, #64]	; 0x40
 800c21a:	0198      	lsls	r0, r3, #6
 800c21c:	900d      	str	r0, [sp, #52]	; 0x34
 800c21e:	0118      	lsls	r0, r3, #4
 800c220:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 800c224:	900f      	str	r0, [sp, #60]	; 0x3c
 800c226:	930e      	str	r3, [sp, #56]	; 0x38
 800c228:	1f13      	subs	r3, r2, #4
 800c22a:	9311      	str	r3, [sp, #68]	; 0x44
 800c22c:	f1c5 0301 	rsb	r3, r5, #1
 800c230:	9317      	str	r3, [sp, #92]	; 0x5c
 800c232:	1e6b      	subs	r3, r5, #1
 800c234:	9313      	str	r3, [sp, #76]	; 0x4c
 800c236:	9904      	ldr	r1, [sp, #16]
 800c238:	9a01      	ldr	r2, [sp, #4]
 800c23a:	290f      	cmp	r1, #15
 800c23c:	e952 3202 	ldrd	r3, r2, [r2, #-8]
 800c240:	f340 823e 	ble.w	800c6c0 <st_sssa8_nn_mat_mult_kernel_opt+0x51c>
 800c244:	464d      	mov	r5, r9
 800c246:	4611      	mov	r1, r2
 800c248:	4618      	mov	r0, r3
 800c24a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800c24c:	e9dd 4709 	ldrd	r4, r7, [sp, #36]	; 0x24
 800c250:	f8d4 e000 	ldr.w	lr, [r4]
 800c254:	f8d7 a000 	ldr.w	sl, [r7]
 800c258:	f8d5 c000 	ldr.w	ip, [r5]
 800c25c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800c260:	fb2c 330e 	smlad	r3, ip, lr, r3
 800c264:	fb2c 000a 	smlad	r0, ip, sl, r0
 800c268:	fb28 2e0e 	smlad	lr, r8, lr, r2
 800c26c:	fb28 110a 	smlad	r1, r8, sl, r1
 800c270:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800c274:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800c278:	68aa      	ldr	r2, [r5, #8]
 800c27a:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 800c27e:	fb22 330c 	smlad	r3, r2, ip, r3
 800c282:	fb22 0008 	smlad	r0, r2, r8, r0
 800c286:	fb2b ee0c 	smlad	lr, fp, ip, lr
 800c28a:	fb2b 1808 	smlad	r8, fp, r8, r1
 800c28e:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800c292:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800c296:	692a      	ldr	r2, [r5, #16]
 800c298:	f8d5 a014 	ldr.w	sl, [r5, #20]
 800c29c:	fb22 330c 	smlad	r3, r2, ip, r3
 800c2a0:	fb22 000b 	smlad	r0, r2, fp, r0
 800c2a4:	fb2a ee0c 	smlad	lr, sl, ip, lr
 800c2a8:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 800c2ac:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800c2b0:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c2b4:	f8d5 8018 	ldr.w	r8, [r5, #24]
 800c2b8:	69e9      	ldr	r1, [r5, #28]
 800c2ba:	fb28 330c 	smlad	r3, r8, ip, r3
 800c2be:	fb28 000a 	smlad	r0, r8, sl, r0
 800c2c2:	fb21 ec0c 	smlad	ip, r1, ip, lr
 800c2c6:	fb21 ba0a 	smlad	sl, r1, sl, fp
 800c2ca:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800c2ce:	6939      	ldr	r1, [r7, #16]
 800c2d0:	f8d5 8020 	ldr.w	r8, [r5, #32]
 800c2d4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800c2d6:	fb28 330e 	smlad	r3, r8, lr, r3
 800c2da:	fb28 0001 	smlad	r0, r8, r1, r0
 800c2de:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800c2e2:	fb22 a101 	smlad	r1, r2, r1, sl
 800c2e6:	f8d4 e014 	ldr.w	lr, [r4, #20]
 800c2ea:	f8d7 a014 	ldr.w	sl, [r7, #20]
 800c2ee:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
 800c2f2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800c2f4:	fb28 330e 	smlad	r3, r8, lr, r3
 800c2f8:	fb28 000a 	smlad	r0, r8, sl, r0
 800c2fc:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800c300:	fb22 120a 	smlad	r2, r2, sl, r1
 800c304:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800c308:	f8d7 b018 	ldr.w	fp, [r7, #24]
 800c30c:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800c310:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800c312:	fb28 330e 	smlad	r3, r8, lr, r3
 800c316:	fb28 080b 	smlad	r8, r8, fp, r0
 800c31a:	fb21 ce0e 	smlad	lr, r1, lr, ip
 800c31e:	fb21 210b 	smlad	r1, r1, fp, r2
 800c322:	69e2      	ldr	r2, [r4, #28]
 800c324:	3720      	adds	r7, #32
 800c326:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800c328:	3420      	adds	r4, #32
 800c32a:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
 800c32e:	3540      	adds	r5, #64	; 0x40
 800c330:	f857 bc04 	ldr.w	fp, [r7, #-4]
 800c334:	fb20 3302 	smlad	r3, r0, r2, r3
 800c338:	fb20 800b 	smlad	r0, r0, fp, r8
 800c33c:	fb2c e202 	smlad	r2, ip, r2, lr
 800c340:	fb2c 110b 	smlad	r1, ip, fp, r1
 800c344:	42a6      	cmp	r6, r4
 800c346:	d183      	bne.n	800c250 <st_sssa8_nn_mat_mult_kernel_opt+0xac>
 800c348:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c34a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800c34e:	44a9      	add	r9, r5
 800c350:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c352:	9500      	str	r5, [sp, #0]
 800c354:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c356:	45ab      	cmp	fp, r5
 800c358:	f280 81bd 	bge.w	800c6d6 <st_sssa8_nn_mat_mult_kernel_opt+0x532>
 800c35c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c35e:	f8dd c000 	ldr.w	ip, [sp]
 800c362:	eba5 050b 	sub.w	r5, r5, fp
 800c366:	08ad      	lsrs	r5, r5, #2
 800c368:	462e      	mov	r6, r5
 800c36a:	9507      	str	r5, [sp, #28]
 800c36c:	464d      	mov	r5, r9
 800c36e:	3601      	adds	r6, #1
 800c370:	00f7      	lsls	r7, r6, #3
 800c372:	9606      	str	r6, [sp, #24]
 800c374:	eb04 08c6 	add.w	r8, r4, r6, lsl #3
 800c378:	9705      	str	r7, [sp, #20]
 800c37a:	f8d4 e000 	ldr.w	lr, [r4]
 800c37e:	f8dc 7000 	ldr.w	r7, [ip]
 800c382:	f8d5 a000 	ldr.w	sl, [r5]
 800c386:	686e      	ldr	r6, [r5, #4]
 800c388:	fb2a 330e 	smlad	r3, sl, lr, r3
 800c38c:	fb2a 0007 	smlad	r0, sl, r7, r0
 800c390:	fb26 220e 	smlad	r2, r6, lr, r2
 800c394:	fb26 1107 	smlad	r1, r6, r7, r1
 800c398:	6867      	ldr	r7, [r4, #4]
 800c39a:	f10c 0c08 	add.w	ip, ip, #8
 800c39e:	68ae      	ldr	r6, [r5, #8]
 800c3a0:	3408      	adds	r4, #8
 800c3a2:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800c3a6:	3510      	adds	r5, #16
 800c3a8:	f85c ac04 	ldr.w	sl, [ip, #-4]
 800c3ac:	fb26 3307 	smlad	r3, r6, r7, r3
 800c3b0:	fb26 000a 	smlad	r0, r6, sl, r0
 800c3b4:	fb2e 2207 	smlad	r2, lr, r7, r2
 800c3b8:	fb2e 110a 	smlad	r1, lr, sl, r1
 800c3bc:	4544      	cmp	r4, r8
 800c3be:	d1dc      	bne.n	800c37a <st_sssa8_nn_mat_mult_kernel_opt+0x1d6>
 800c3c0:	9c06      	ldr	r4, [sp, #24]
 800c3c2:	f10b 0b04 	add.w	fp, fp, #4
 800c3c6:	9d05      	ldr	r5, [sp, #20]
 800c3c8:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 800c3cc:	9c00      	ldr	r4, [sp, #0]
 800c3ce:	442c      	add	r4, r5
 800c3d0:	9400      	str	r4, [sp, #0]
 800c3d2:	9c07      	ldr	r4, [sp, #28]
 800c3d4:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 800c3d8:	9f04      	ldr	r7, [sp, #16]
 800c3da:	455f      	cmp	r7, fp
 800c3dc:	dd54      	ble.n	800c488 <st_sssa8_nn_mat_mult_kernel_opt+0x2e4>
 800c3de:	f9b8 5000 	ldrsh.w	r5, [r8]
 800c3e2:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
 800c3e6:	f9b9 6000 	ldrsh.w	r6, [r9]
 800c3ea:	fb05 2204 	mla	r2, r5, r4, r2
 800c3ee:	fb06 3305 	mla	r3, r6, r5, r3
 800c3f2:	9d00      	ldr	r5, [sp, #0]
 800c3f4:	f9b5 5000 	ldrsh.w	r5, [r5]
 800c3f8:	fb05 1104 	mla	r1, r5, r4, r1
 800c3fc:	f10b 0401 	add.w	r4, fp, #1
 800c400:	fb06 0005 	mla	r0, r6, r5, r0
 800c404:	42a7      	cmp	r7, r4
 800c406:	dd3a      	ble.n	800c47e <st_sssa8_nn_mat_mult_kernel_opt+0x2da>
 800c408:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800c40c:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 800c410:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 800c414:	fb05 2204 	mla	r2, r5, r4, r2
 800c418:	fb06 3305 	mla	r3, r6, r5, r3
 800c41c:	9d00      	ldr	r5, [sp, #0]
 800c41e:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 800c422:	fb05 1104 	mla	r1, r5, r4, r1
 800c426:	f10b 0402 	add.w	r4, fp, #2
 800c42a:	fb06 0005 	mla	r0, r6, r5, r0
 800c42e:	42a7      	cmp	r7, r4
 800c430:	dd25      	ble.n	800c47e <st_sssa8_nn_mat_mult_kernel_opt+0x2da>
 800c432:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 800c436:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 800c43a:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 800c43e:	fb05 2204 	mla	r2, r5, r4, r2
 800c442:	fb06 3305 	mla	r3, r6, r5, r3
 800c446:	9d00      	ldr	r5, [sp, #0]
 800c448:	f9b5 5004 	ldrsh.w	r5, [r5, #4]
 800c44c:	fb05 1104 	mla	r1, r5, r4, r1
 800c450:	f10b 0403 	add.w	r4, fp, #3
 800c454:	fb06 0005 	mla	r0, r6, r5, r0
 800c458:	42a7      	cmp	r7, r4
 800c45a:	dd10      	ble.n	800c47e <st_sssa8_nn_mat_mult_kernel_opt+0x2da>
 800c45c:	9c00      	ldr	r4, [sp, #0]
 800c45e:	f9b8 5006 	ldrsh.w	r5, [r8, #6]
 800c462:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 800c466:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 800c46a:	fb04 3305 	mla	r3, r4, r5, r3
 800c46e:	fb04 0006 	mla	r0, r4, r6, r0
 800c472:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 800c476:	fb05 2204 	mla	r2, r5, r4, r2
 800c47a:	fb06 1104 	mla	r1, r6, r4, r1
 800c47e:	9c04      	ldr	r4, [sp, #16]
 800c480:	eba4 0b0b 	sub.w	fp, r4, fp
 800c484:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 800c488:	9c08      	ldr	r4, [sp, #32]
 800c48a:	2c15      	cmp	r4, #21
 800c48c:	f340 80bf 	ble.w	800c60e <st_sssa8_nn_mat_mult_kernel_opt+0x46a>
 800c490:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800c492:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800c494:	fb53 4305 	smmla	r3, r3, r5, r4
 800c498:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800c49a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800c49c:	412b      	asrs	r3, r5
 800c49e:	fb50 4006 	smmla	r0, r0, r6, r4
 800c4a2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800c4a4:	4433      	add	r3, r6
 800c4a6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800c4a8:	fb52 4206 	smmla	r2, r2, r6, r4
 800c4ac:	fb51 4106 	smmla	r1, r1, r6, r4
 800c4b0:	f303 0307 	ssat	r3, #8, r3
 800c4b4:	9c03      	ldr	r4, [sp, #12]
 800c4b6:	412a      	asrs	r2, r5
 800c4b8:	f804 3c02 	strb.w	r3, [r4, #-2]
 800c4bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c4be:	18d3      	adds	r3, r2, r3
 800c4c0:	f303 0307 	ssat	r3, #8, r3
 800c4c4:	4128      	asrs	r0, r5
 800c4c6:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c4ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c4cc:	18c3      	adds	r3, r0, r3
 800c4ce:	f303 0307 	ssat	r3, #8, r3
 800c4d2:	9a02      	ldr	r2, [sp, #8]
 800c4d4:	4129      	asrs	r1, r5
 800c4d6:	f802 3c02 	strb.w	r3, [r2, #-2]
 800c4da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c4dc:	18cb      	adds	r3, r1, r3
 800c4de:	f303 0307 	ssat	r3, #8, r3
 800c4e2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c4e6:	4622      	mov	r2, r4
 800c4e8:	3202      	adds	r2, #2
 800c4ea:	9b01      	ldr	r3, [sp, #4]
 800c4ec:	9203      	str	r2, [sp, #12]
 800c4ee:	3308      	adds	r3, #8
 800c4f0:	9a02      	ldr	r2, [sp, #8]
 800c4f2:	9301      	str	r3, [sp, #4]
 800c4f4:	3202      	adds	r2, #2
 800c4f6:	9202      	str	r2, [sp, #8]
 800c4f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	f47f ae9b 	bne.w	800c236 <st_sssa8_nn_mat_mult_kernel_opt+0x92>
 800c500:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c502:	46cb      	mov	fp, r9
 800c504:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800c506:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800c50a:	9229      	str	r2, [sp, #164]	; 0xa4
 800c50c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c50e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800c512:	9214      	str	r2, [sp, #80]	; 0x50
 800c514:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c516:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c51a:	9315      	str	r3, [sp, #84]	; 0x54
 800c51c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c51e:	07db      	lsls	r3, r3, #31
 800c520:	d56c      	bpl.n	800c5fc <st_sssa8_nn_mat_mult_kernel_opt+0x458>
 800c522:	9a04      	ldr	r2, [sp, #16]
 800c524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c526:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c528:	0896      	lsrs	r6, r2, #2
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	eb00 0742 	add.w	r7, r0, r2, lsl #1
 800c530:	f000 8109 	beq.w	800c746 <st_sssa8_nn_mat_mult_kernel_opt+0x5a2>
 800c534:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800c538:	463c      	mov	r4, r7
 800c53a:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
 800c53e:	461a      	mov	r2, r3
 800c540:	f8db 5000 	ldr.w	r5, [fp]
 800c544:	f10b 0b08 	add.w	fp, fp, #8
 800c548:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 800c54c:	f8d0 c000 	ldr.w	ip, [r0]
 800c550:	fb25 330c 	smlad	r3, r5, ip, r3
 800c554:	f8d4 c000 	ldr.w	ip, [r4]
 800c558:	fb25 220c 	smlad	r2, r5, ip, r2
 800c55c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c560:	3408      	adds	r4, #8
 800c562:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800c566:	3008      	adds	r0, #8
 800c568:	fb21 330c 	smlad	r3, r1, ip, r3
 800c56c:	fb21 2205 	smlad	r2, r1, r5, r2
 800c570:	45b3      	cmp	fp, r6
 800c572:	d1e5      	bne.n	800c540 <st_sssa8_nn_mat_mult_kernel_opt+0x39c>
 800c574:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c576:	4477      	add	r7, lr
 800c578:	4471      	add	r1, lr
 800c57a:	9109      	str	r1, [sp, #36]	; 0x24
 800c57c:	9904      	ldr	r1, [sp, #16]
 800c57e:	f011 0103 	ands.w	r1, r1, #3
 800c582:	d01d      	beq.n	800c5c0 <st_sssa8_nn_mat_mult_kernel_opt+0x41c>
 800c584:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c586:	3901      	subs	r1, #1
 800c588:	f9b6 0000 	ldrsh.w	r0, [r6]
 800c58c:	882c      	ldrh	r4, [r5, #0]
 800c58e:	b289      	uxth	r1, r1
 800c590:	fb14 3300 	smlabb	r3, r4, r0, r3
 800c594:	883c      	ldrh	r4, [r7, #0]
 800c596:	fb14 2200 	smlabb	r2, r4, r0, r2
 800c59a:	b189      	cbz	r1, 800c5c0 <st_sssa8_nn_mat_mult_kernel_opt+0x41c>
 800c59c:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 800c5a0:	2901      	cmp	r1, #1
 800c5a2:	886c      	ldrh	r4, [r5, #2]
 800c5a4:	fb14 3300 	smlabb	r3, r4, r0, r3
 800c5a8:	887c      	ldrh	r4, [r7, #2]
 800c5aa:	fb14 2200 	smlabb	r2, r4, r0, r2
 800c5ae:	d007      	beq.n	800c5c0 <st_sssa8_nn_mat_mult_kernel_opt+0x41c>
 800c5b0:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 800c5b4:	88a8      	ldrh	r0, [r5, #4]
 800c5b6:	fb11 3300 	smlabb	r3, r1, r0, r3
 800c5ba:	88b8      	ldrh	r0, [r7, #4]
 800c5bc:	fb11 2200 	smlabb	r2, r1, r0, r2
 800c5c0:	9908      	ldr	r1, [sp, #32]
 800c5c2:	2915      	cmp	r1, #21
 800c5c4:	f340 8089 	ble.w	800c6da <st_sssa8_nn_mat_mult_kernel_opt+0x536>
 800c5c8:	1e8c      	subs	r4, r1, #2
 800c5ca:	1e48      	subs	r0, r1, #1
 800c5cc:	2101      	movs	r1, #1
 800c5ce:	40a1      	lsls	r1, r4
 800c5d0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800c5d2:	fb53 1404 	smmla	r4, r3, r4, r1
 800c5d6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c5d8:	fb52 1303 	smmla	r3, r2, r3, r1
 800c5dc:	fa44 f200 	asr.w	r2, r4, r0
 800c5e0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800c5e2:	440a      	add	r2, r1
 800c5e4:	f302 0207 	ssat	r2, #8, r2
 800c5e8:	4103      	asrs	r3, r0
 800c5ea:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800c5ec:	440b      	add	r3, r1
 800c5ee:	f800 2b01 	strb.w	r2, [r0], #1
 800c5f2:	f303 0307 	ssat	r3, #8, r3
 800c5f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c5f8:	9029      	str	r0, [sp, #164]	; 0xa4
 800c5fa:	7013      	strb	r3, [r2, #0]
 800c5fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c5fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c600:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 800c604:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c606:	4418      	add	r0, r3
 800c608:	b01b      	add	sp, #108	; 0x6c
 800c60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c60e:	2c00      	cmp	r4, #0
 800c610:	dd25      	ble.n	800c65e <st_sssa8_nn_mat_mult_kernel_opt+0x4ba>
 800c612:	005b      	lsls	r3, r3, #1
 800c614:	0040      	lsls	r0, r0, #1
 800c616:	0052      	lsls	r2, r2, #1
 800c618:	0049      	lsls	r1, r1, #1
 800c61a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 800c61e:	fb53 6305 	smmla	r3, r3, r5, r6
 800c622:	fb50 6005 	smmla	r0, r0, r5, r6
 800c626:	4123      	asrs	r3, r4
 800c628:	fb52 6205 	smmla	r2, r2, r5, r6
 800c62c:	fb51 6105 	smmla	r1, r1, r5, r6
 800c630:	f303 0307 	ssat	r3, #8, r3
 800c634:	9d03      	ldr	r5, [sp, #12]
 800c636:	4122      	asrs	r2, r4
 800c638:	f805 3c02 	strb.w	r3, [r5, #-2]
 800c63c:	f302 0207 	ssat	r2, #8, r2
 800c640:	4120      	asrs	r0, r4
 800c642:	f805 2c01 	strb.w	r2, [r5, #-1]
 800c646:	f300 0007 	ssat	r0, #8, r0
 800c64a:	9b02      	ldr	r3, [sp, #8]
 800c64c:	4121      	asrs	r1, r4
 800c64e:	f803 0c02 	strb.w	r0, [r3, #-2]
 800c652:	f301 0107 	ssat	r1, #8, r1
 800c656:	462a      	mov	r2, r5
 800c658:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c65c:	e744      	b.n	800c4e8 <st_sssa8_nn_mat_mult_kernel_opt+0x344>
 800c65e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800c660:	40a3      	lsls	r3, r4
 800c662:	f303 031f 	ssat	r3, #32, r3
 800c666:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800c668:	fb53 f315 	smmulr	r3, r3, r5
 800c66c:	40a0      	lsls	r0, r4
 800c66e:	f300 001f 	ssat	r0, #32, r0
 800c672:	fb50 f015 	smmulr	r0, r0, r5
 800c676:	40a2      	lsls	r2, r4
 800c678:	f302 021f 	ssat	r2, #32, r2
 800c67c:	fb52 f215 	smmulr	r2, r2, r5
 800c680:	40a1      	lsls	r1, r4
 800c682:	f301 011f 	ssat	r1, #32, r1
 800c686:	fb51 f115 	smmulr	r1, r1, r5
 800c68a:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800c68c:	4423      	add	r3, r4
 800c68e:	f303 0307 	ssat	r3, #8, r3
 800c692:	9c03      	ldr	r4, [sp, #12]
 800c694:	f804 3c02 	strb.w	r3, [r4, #-2]
 800c698:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c69a:	441a      	add	r2, r3
 800c69c:	f302 0207 	ssat	r2, #8, r2
 800c6a0:	4418      	add	r0, r3
 800c6a2:	f804 2c01 	strb.w	r2, [r4, #-1]
 800c6a6:	f300 0007 	ssat	r0, #8, r0
 800c6aa:	9b02      	ldr	r3, [sp, #8]
 800c6ac:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800c6ae:	f803 0c02 	strb.w	r0, [r3, #-2]
 800c6b2:	4411      	add	r1, r2
 800c6b4:	f301 0107 	ssat	r1, #8, r1
 800c6b8:	4622      	mov	r2, r4
 800c6ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c6be:	e713      	b.n	800c4e8 <st_sssa8_nn_mat_mult_kernel_opt+0x344>
 800c6c0:	f04f 0b00 	mov.w	fp, #0
 800c6c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c6c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	45ab      	cmp	fp, r5
 800c6cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c6ce:	9100      	str	r1, [sp, #0]
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	f6ff ae43 	blt.w	800c35c <st_sssa8_nn_mat_mult_kernel_opt+0x1b8>
 800c6d6:	46a0      	mov	r8, r4
 800c6d8:	e67e      	b.n	800c3d8 <st_sssa8_nn_mat_mult_kernel_opt+0x234>
 800c6da:	2900      	cmp	r1, #0
 800c6dc:	4608      	mov	r0, r1
 800c6de:	dd15      	ble.n	800c70c <st_sssa8_nn_mat_mult_kernel_opt+0x568>
 800c6e0:	0059      	lsls	r1, r3, #1
 800c6e2:	0053      	lsls	r3, r2, #1
 800c6e4:	e9dd 2427 	ldrd	r2, r4, [sp, #156]	; 0x9c
 800c6e8:	fb51 4202 	smmla	r2, r1, r2, r4
 800c6ec:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800c6ee:	4102      	asrs	r2, r0
 800c6f0:	fb53 4301 	smmla	r3, r3, r1, r4
 800c6f4:	f302 0207 	ssat	r2, #8, r2
 800c6f8:	4103      	asrs	r3, r0
 800c6fa:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800c6fc:	f800 2b01 	strb.w	r2, [r0], #1
 800c700:	f303 0307 	ssat	r3, #8, r3
 800c704:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c706:	9029      	str	r0, [sp, #164]	; 0xa4
 800c708:	7013      	strb	r3, [r2, #0]
 800c70a:	e777      	b.n	800c5fc <st_sssa8_nn_mat_mult_kernel_opt+0x458>
 800c70c:	f1c1 0101 	rsb	r1, r1, #1
 800c710:	408b      	lsls	r3, r1
 800c712:	f303 031f 	ssat	r3, #32, r3
 800c716:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800c718:	fb53 f310 	smmulr	r3, r3, r0
 800c71c:	fa02 f101 	lsl.w	r1, r2, r1
 800c720:	f301 011f 	ssat	r1, #32, r1
 800c724:	fb51 f110 	smmulr	r1, r1, r0
 800c728:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800c72a:	441a      	add	r2, r3
 800c72c:	f302 0207 	ssat	r2, #8, r2
 800c730:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c732:	440b      	add	r3, r1
 800c734:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800c736:	f801 2b01 	strb.w	r2, [r1], #1
 800c73a:	f303 0307 	ssat	r3, #8, r3
 800c73e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c740:	9129      	str	r1, [sp, #164]	; 0xa4
 800c742:	7013      	strb	r3, [r2, #0]
 800c744:	e75a      	b.n	800c5fc <st_sssa8_nn_mat_mult_kernel_opt+0x458>
 800c746:	465e      	mov	r6, fp
 800c748:	461a      	mov	r2, r3
 800c74a:	e717      	b.n	800c57c <st_sssa8_nn_mat_mult_kernel_opt+0x3d8>

0800c74c <st_sssa8_nn_mat_mult_kernel_single_opt>:
 800c74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c750:	b091      	sub	sp, #68	; 0x44
 800c752:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800c756:	f9bd 5070 	ldrsh.w	r5, [sp, #112]	; 0x70
 800c75a:	085c      	lsrs	r4, r3, #1
 800c75c:	f8bd b06c 	ldrh.w	fp, [sp, #108]	; 0x6c
 800c760:	930e      	str	r3, [sp, #56]	; 0x38
 800c762:	9104      	str	r1, [sp, #16]
 800c764:	920c      	str	r2, [sp, #48]	; 0x30
 800c766:	9503      	str	r5, [sp, #12]
 800c768:	940f      	str	r4, [sp, #60]	; 0x3c
 800c76a:	f000 819a 	beq.w	800caa2 <st_sssa8_nn_mat_mult_kernel_single_opt+0x356>
 800c76e:	4617      	mov	r7, r2
 800c770:	468c      	mov	ip, r1
 800c772:	1e62      	subs	r2, r4, #1
 800c774:	1ea9      	subs	r1, r5, #2
 800c776:	2401      	movs	r4, #1
 800c778:	f1ab 0310 	sub.w	r3, fp, #16
 800c77c:	b292      	uxth	r2, r2
 800c77e:	f107 0908 	add.w	r9, r7, #8
 800c782:	fa04 f601 	lsl.w	r6, r4, r1
 800c786:	f107 0110 	add.w	r1, r7, #16
 800c78a:	091b      	lsrs	r3, r3, #4
 800c78c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c790:	960a      	str	r6, [sp, #40]	; 0x28
 800c792:	3301      	adds	r3, #1
 800c794:	9206      	str	r2, [sp, #24]
 800c796:	f1ab 0203 	sub.w	r2, fp, #3
 800c79a:	eb0c 1743 	add.w	r7, ip, r3, lsl #5
 800c79e:	9205      	str	r2, [sp, #20]
 800c7a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c7a2:	3202      	adds	r2, #2
 800c7a4:	9201      	str	r2, [sp, #4]
 800c7a6:	019a      	lsls	r2, r3, #6
 800c7a8:	011b      	lsls	r3, r3, #4
 800c7aa:	9207      	str	r2, [sp, #28]
 800c7ac:	9308      	str	r3, [sp, #32]
 800c7ae:	f1ab 0304 	sub.w	r3, fp, #4
 800c7b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b4:	f1c5 0301 	rsb	r3, r5, #1
 800c7b8:	930d      	str	r3, [sp, #52]	; 0x34
 800c7ba:	1e6b      	subs	r3, r5, #1
 800c7bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7be:	f1bb 0f0f 	cmp.w	fp, #15
 800c7c2:	9c04      	ldr	r4, [sp, #16]
 800c7c4:	e959 2302 	ldrd	r2, r3, [r9, #-8]
 800c7c8:	f340 8144 	ble.w	800ca54 <st_sssa8_nn_mat_mult_kernel_single_opt+0x308>
 800c7cc:	4601      	mov	r1, r0
 800c7ce:	f8d4 c000 	ldr.w	ip, [r4]
 800c7d2:	680e      	ldr	r6, [r1, #0]
 800c7d4:	fb26 220c 	smlad	r2, r6, ip, r2
 800c7d8:	684d      	ldr	r5, [r1, #4]
 800c7da:	fb25 330c 	smlad	r3, r5, ip, r3
 800c7de:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800c7e2:	688e      	ldr	r6, [r1, #8]
 800c7e4:	fb26 260c 	smlad	r6, r6, ip, r2
 800c7e8:	68cd      	ldr	r5, [r1, #12]
 800c7ea:	fb25 350c 	smlad	r5, r5, ip, r3
 800c7ee:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800c7f2:	690a      	ldr	r2, [r1, #16]
 800c7f4:	fb22 660c 	smlad	r6, r2, ip, r6
 800c7f8:	694b      	ldr	r3, [r1, #20]
 800c7fa:	fb23 550c 	smlad	r5, r3, ip, r5
 800c7fe:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800c802:	698a      	ldr	r2, [r1, #24]
 800c804:	fb22 620c 	smlad	r2, r2, ip, r6
 800c808:	69cb      	ldr	r3, [r1, #28]
 800c80a:	fb23 530c 	smlad	r3, r3, ip, r5
 800c80e:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800c812:	6a0e      	ldr	r6, [r1, #32]
 800c814:	fb26 220c 	smlad	r2, r6, ip, r2
 800c818:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800c81a:	fb25 330c 	smlad	r3, r5, ip, r3
 800c81e:	f8d4 c014 	ldr.w	ip, [r4, #20]
 800c822:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800c824:	fb26 260c 	smlad	r6, r6, ip, r2
 800c828:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 800c82a:	fb25 350c 	smlad	r5, r5, ip, r3
 800c82e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800c832:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800c834:	fb22 660c 	smlad	r6, r2, ip, r6
 800c838:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c83a:	fb23 550c 	smlad	r5, r3, ip, r5
 800c83e:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800c842:	3140      	adds	r1, #64	; 0x40
 800c844:	f851 2c08 	ldr.w	r2, [r1, #-8]
 800c848:	3420      	adds	r4, #32
 800c84a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c84e:	fb22 620c 	smlad	r2, r2, ip, r6
 800c852:	fb23 530c 	smlad	r3, r3, ip, r5
 800c856:	42bc      	cmp	r4, r7
 800c858:	d1b9      	bne.n	800c7ce <st_sssa8_nn_mat_mult_kernel_single_opt+0x82>
 800c85a:	9907      	ldr	r1, [sp, #28]
 800c85c:	463c      	mov	r4, r7
 800c85e:	f8dd e020 	ldr.w	lr, [sp, #32]
 800c862:	4408      	add	r0, r1
 800c864:	9905      	ldr	r1, [sp, #20]
 800c866:	458e      	cmp	lr, r1
 800c868:	da25      	bge.n	800c8b6 <st_sssa8_nn_mat_mult_kernel_single_opt+0x16a>
 800c86a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c86c:	eba1 0a0e 	sub.w	sl, r1, lr
 800c870:	4601      	mov	r1, r0
 800c872:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 800c876:	f10a 0501 	add.w	r5, sl, #1
 800c87a:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 800c87e:	9502      	str	r5, [sp, #8]
 800c880:	6825      	ldr	r5, [r4, #0]
 800c882:	680e      	ldr	r6, [r1, #0]
 800c884:	fb26 2205 	smlad	r2, r6, r5, r2
 800c888:	684e      	ldr	r6, [r1, #4]
 800c88a:	fb26 3505 	smlad	r5, r6, r5, r3
 800c88e:	6866      	ldr	r6, [r4, #4]
 800c890:	3110      	adds	r1, #16
 800c892:	f851 cc08 	ldr.w	ip, [r1, #-8]
 800c896:	3408      	adds	r4, #8
 800c898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c89c:	fb2c 2206 	smlad	r2, ip, r6, r2
 800c8a0:	fb23 5306 	smlad	r3, r3, r6, r5
 800c8a4:	45a0      	cmp	r8, r4
 800c8a6:	d1eb      	bne.n	800c880 <st_sssa8_nn_mat_mult_kernel_single_opt+0x134>
 800c8a8:	9902      	ldr	r1, [sp, #8]
 800c8aa:	f10e 0e04 	add.w	lr, lr, #4
 800c8ae:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800c8b2:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 800c8b6:	45f3      	cmp	fp, lr
 800c8b8:	dd2f      	ble.n	800c91a <st_sssa8_nn_mat_mult_kernel_single_opt+0x1ce>
 800c8ba:	f9b4 1000 	ldrsh.w	r1, [r4]
 800c8be:	8805      	ldrh	r5, [r0, #0]
 800c8c0:	fb15 2201 	smlabb	r2, r5, r1, r2
 800c8c4:	8845      	ldrh	r5, [r0, #2]
 800c8c6:	fb11 3305 	smlabb	r3, r1, r5, r3
 800c8ca:	f10e 0101 	add.w	r1, lr, #1
 800c8ce:	458b      	cmp	fp, r1
 800c8d0:	dd1f      	ble.n	800c912 <st_sssa8_nn_mat_mult_kernel_single_opt+0x1c6>
 800c8d2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800c8d6:	8885      	ldrh	r5, [r0, #4]
 800c8d8:	fb15 2201 	smlabb	r2, r5, r1, r2
 800c8dc:	88c5      	ldrh	r5, [r0, #6]
 800c8de:	fb11 3305 	smlabb	r3, r1, r5, r3
 800c8e2:	f10e 0102 	add.w	r1, lr, #2
 800c8e6:	458b      	cmp	fp, r1
 800c8e8:	dd13      	ble.n	800c912 <st_sssa8_nn_mat_mult_kernel_single_opt+0x1c6>
 800c8ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800c8ee:	8905      	ldrh	r5, [r0, #8]
 800c8f0:	fb15 2201 	smlabb	r2, r5, r1, r2
 800c8f4:	8945      	ldrh	r5, [r0, #10]
 800c8f6:	fb11 3305 	smlabb	r3, r1, r5, r3
 800c8fa:	f10e 0103 	add.w	r1, lr, #3
 800c8fe:	458b      	cmp	fp, r1
 800c900:	dd07      	ble.n	800c912 <st_sssa8_nn_mat_mult_kernel_single_opt+0x1c6>
 800c902:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800c906:	8984      	ldrh	r4, [r0, #12]
 800c908:	fb14 2201 	smlabb	r2, r4, r1, r2
 800c90c:	89c4      	ldrh	r4, [r0, #14]
 800c90e:	fb11 3304 	smlabb	r3, r1, r4, r3
 800c912:	ebab 0e0e 	sub.w	lr, fp, lr
 800c916:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 800c91a:	9903      	ldr	r1, [sp, #12]
 800c91c:	2915      	cmp	r1, #21
 800c91e:	dd6e      	ble.n	800c9fe <st_sssa8_nn_mat_mult_kernel_single_opt+0x2b2>
 800c920:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c922:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800c924:	fb52 1204 	smmla	r2, r2, r4, r1
 800c928:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c92a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c92c:	4122      	asrs	r2, r4
 800c92e:	fb53 1305 	smmla	r3, r3, r5, r1
 800c932:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c934:	440a      	add	r2, r1
 800c936:	f302 0207 	ssat	r2, #8, r2
 800c93a:	9901      	ldr	r1, [sp, #4]
 800c93c:	4123      	asrs	r3, r4
 800c93e:	f801 2c02 	strb.w	r2, [r1, #-2]
 800c942:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c944:	4413      	add	r3, r2
 800c946:	f303 0307 	ssat	r3, #8, r3
 800c94a:	f801 3c01 	strb.w	r3, [r1, #-1]
 800c94e:	460b      	mov	r3, r1
 800c950:	3302      	adds	r3, #2
 800c952:	f109 0908 	add.w	r9, r9, #8
 800c956:	9301      	str	r3, [sp, #4]
 800c958:	9b06      	ldr	r3, [sp, #24]
 800c95a:	4599      	cmp	r9, r3
 800c95c:	f47f af2f 	bne.w	800c7be <st_sssa8_nn_mat_mult_kernel_single_opt+0x72>
 800c960:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c964:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c968:	920c      	str	r2, [sp, #48]	; 0x30
 800c96a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c96c:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800c970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c972:	07db      	lsls	r3, r3, #31
 800c974:	d53f      	bpl.n	800c9f6 <st_sssa8_nn_mat_mult_kernel_single_opt+0x2aa>
 800c976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c978:	ea5f 069b 	movs.w	r6, fp, lsr #2
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	d014      	beq.n	800c9aa <st_sssa8_nn_mat_mult_kernel_single_opt+0x25e>
 800c980:	00f7      	lsls	r7, r6, #3
 800c982:	9b04      	ldr	r3, [sp, #16]
 800c984:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800c988:	6805      	ldr	r5, [r0, #0]
 800c98a:	3008      	adds	r0, #8
 800c98c:	f850 4c04 	ldr.w	r4, [r0, #-4]
 800c990:	f8d3 c000 	ldr.w	ip, [r3]
 800c994:	fb25 220c 	smlad	r2, r5, ip, r2
 800c998:	685d      	ldr	r5, [r3, #4]
 800c99a:	3308      	adds	r3, #8
 800c99c:	fb24 2205 	smlad	r2, r4, r5, r2
 800c9a0:	4286      	cmp	r6, r0
 800c9a2:	d1f1      	bne.n	800c988 <st_sssa8_nn_mat_mult_kernel_single_opt+0x23c>
 800c9a4:	9b04      	ldr	r3, [sp, #16]
 800c9a6:	443b      	add	r3, r7
 800c9a8:	9304      	str	r3, [sp, #16]
 800c9aa:	f01b 0303 	ands.w	r3, fp, #3
 800c9ae:	d011      	beq.n	800c9d4 <st_sssa8_nn_mat_mult_kernel_single_opt+0x288>
 800c9b0:	3b01      	subs	r3, #1
 800c9b2:	9e04      	ldr	r6, [sp, #16]
 800c9b4:	8804      	ldrh	r4, [r0, #0]
 800c9b6:	8835      	ldrh	r5, [r6, #0]
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	fb15 2204 	smlabb	r2, r5, r4, r2
 800c9be:	b14b      	cbz	r3, 800c9d4 <st_sssa8_nn_mat_mult_kernel_single_opt+0x288>
 800c9c0:	8875      	ldrh	r5, [r6, #2]
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	8844      	ldrh	r4, [r0, #2]
 800c9c6:	fb15 2204 	smlabb	r2, r5, r4, r2
 800c9ca:	d003      	beq.n	800c9d4 <st_sssa8_nn_mat_mult_kernel_single_opt+0x288>
 800c9cc:	8880      	ldrh	r0, [r0, #4]
 800c9ce:	88b3      	ldrh	r3, [r6, #4]
 800c9d0:	fb10 2203 	smlabb	r2, r0, r3, r2
 800c9d4:	9b03      	ldr	r3, [sp, #12]
 800c9d6:	2b15      	cmp	r3, #21
 800c9d8:	dd3f      	ble.n	800ca5a <st_sssa8_nn_mat_mult_kernel_single_opt+0x30e>
 800c9da:	1e9c      	subs	r4, r3, #2
 800c9dc:	1e58      	subs	r0, r3, #1
 800c9de:	2301      	movs	r3, #1
 800c9e0:	40a3      	lsls	r3, r4
 800c9e2:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800c9e4:	fb52 3304 	smmla	r3, r2, r4, r3
 800c9e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c9ea:	4103      	asrs	r3, r0
 800c9ec:	4413      	add	r3, r2
 800c9ee:	f303 0307 	ssat	r3, #8, r3
 800c9f2:	f801 3b01 	strb.w	r3, [r1], #1
 800c9f6:	4608      	mov	r0, r1
 800c9f8:	b011      	add	sp, #68	; 0x44
 800c9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fe:	2900      	cmp	r1, #0
 800ca00:	dd14      	ble.n	800ca2c <st_sssa8_nn_mat_mult_kernel_single_opt+0x2e0>
 800ca02:	0052      	lsls	r2, r2, #1
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	e9dd 451d 	ldrd	r4, r5, [sp, #116]	; 0x74
 800ca0a:	fb52 5204 	smmla	r2, r2, r4, r5
 800ca0e:	fb53 5304 	smmla	r3, r3, r4, r5
 800ca12:	410a      	asrs	r2, r1
 800ca14:	f302 0207 	ssat	r2, #8, r2
 800ca18:	9c01      	ldr	r4, [sp, #4]
 800ca1a:	410b      	asrs	r3, r1
 800ca1c:	f804 2c02 	strb.w	r2, [r4, #-2]
 800ca20:	f303 0307 	ssat	r3, #8, r3
 800ca24:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ca28:	4623      	mov	r3, r4
 800ca2a:	e791      	b.n	800c950 <st_sssa8_nn_mat_mult_kernel_single_opt+0x204>
 800ca2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ca2e:	408a      	lsls	r2, r1
 800ca30:	f302 021f 	ssat	r2, #32, r2
 800ca34:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800ca36:	fb52 f214 	smmulr	r2, r2, r4
 800ca3a:	408b      	lsls	r3, r1
 800ca3c:	f303 031f 	ssat	r3, #32, r3
 800ca40:	fb53 f314 	smmulr	r3, r3, r4
 800ca44:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ca46:	440a      	add	r2, r1
 800ca48:	f302 0207 	ssat	r2, #8, r2
 800ca4c:	9901      	ldr	r1, [sp, #4]
 800ca4e:	f801 2c02 	strb.w	r2, [r1, #-2]
 800ca52:	e776      	b.n	800c942 <st_sssa8_nn_mat_mult_kernel_single_opt+0x1f6>
 800ca54:	f04f 0e00 	mov.w	lr, #0
 800ca58:	e704      	b.n	800c864 <st_sssa8_nn_mat_mult_kernel_single_opt+0x118>
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	dd0d      	ble.n	800ca7c <st_sssa8_nn_mat_mult_kernel_single_opt+0x330>
 800ca60:	0053      	lsls	r3, r2, #1
 800ca62:	e9dd 241d 	ldrd	r2, r4, [sp, #116]	; 0x74
 800ca66:	fb53 4302 	smmla	r3, r3, r2, r4
 800ca6a:	4103      	asrs	r3, r0
 800ca6c:	f303 0307 	ssat	r3, #8, r3
 800ca70:	f801 3b01 	strb.w	r3, [r1], #1
 800ca74:	4608      	mov	r0, r1
 800ca76:	b011      	add	sp, #68	; 0x44
 800ca78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca7c:	f1c3 0301 	rsb	r3, r3, #1
 800ca80:	fa02 f303 	lsl.w	r3, r2, r3
 800ca84:	f303 031f 	ssat	r3, #32, r3
 800ca88:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ca8a:	fb53 f312 	smmulr	r3, r3, r2
 800ca8e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ca90:	4413      	add	r3, r2
 800ca92:	f303 0307 	ssat	r3, #8, r3
 800ca96:	f801 3b01 	strb.w	r3, [r1], #1
 800ca9a:	4608      	mov	r0, r1
 800ca9c:	b011      	add	sp, #68	; 0x44
 800ca9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800caa4:	e764      	b.n	800c970 <st_sssa8_nn_mat_mult_kernel_single_opt+0x224>
 800caa6:	bf00      	nop

0800caa8 <st_int8_maxpool>:
 800caa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caac:	b095      	sub	sp, #84	; 0x54
 800caae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cab2:	4692      	mov	sl, r2
 800cab4:	ee80 6a20 	vdiv.f32	s12, s0, s1
 800cab8:	9306      	str	r3, [sp, #24]
 800caba:	f99d 30a0 	ldrsb.w	r3, [sp, #160]	; 0xa0
 800cabe:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 800cac2:	ee07 3a90 	vmov	s15, r3
 800cac6:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 800caca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cace:	9103      	str	r1, [sp, #12]
 800cad0:	9307      	str	r3, [sp, #28]
 800cad2:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800cad6:	f99d 109c 	ldrsb.w	r1, [sp, #156]	; 0x9c
 800cada:	9308      	str	r3, [sp, #32]
 800cadc:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 800cae0:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 800cae4:	9309      	str	r3, [sp, #36]	; 0x24
 800cae6:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800caea:	9000      	str	r0, [sp, #0]
 800caec:	930a      	str	r3, [sp, #40]	; 0x28
 800caee:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800caf2:	9204      	str	r2, [sp, #16]
 800caf4:	930b      	str	r3, [sp, #44]	; 0x2c
 800caf6:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 800cafa:	9102      	str	r1, [sp, #8]
 800cafc:	930c      	str	r3, [sp, #48]	; 0x30
 800cafe:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800cb02:	9305      	str	r3, [sp, #20]
 800cb04:	f2c0 808c 	blt.w	800cc20 <st_int8_maxpool+0x178>
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	f000 8086 	beq.w	800cc1a <st_int8_maxpool+0x172>
 800cb0e:	eeb4 0a60 	vcmp.f32	s0, s1
 800cb12:	460a      	mov	r2, r1
 800cb14:	ee17 1a90 	vmov	r1, s15
 800cb18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb1c:	bf0c      	ite	eq
 800cb1e:	2301      	moveq	r3, #1
 800cb20:	2300      	movne	r3, #0
 800cb22:	428a      	cmp	r2, r1
 800cb24:	bf14      	ite	ne
 800cb26:	2300      	movne	r3, #0
 800cb28:	f003 0301 	andeq.w	r3, r3, #1
 800cb2c:	9301      	str	r3, [sp, #4]
 800cb2e:	9b04      	ldr	r3, [sp, #16]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d072      	beq.n	800cc1a <st_int8_maxpool+0x172>
 800cb34:	f1b9 0f00 	cmp.w	r9, #0
 800cb38:	d06f      	beq.n	800cc1a <st_int8_maxpool+0x172>
 800cb3a:	f1b9 0f01 	cmp.w	r9, #1
 800cb3e:	f040 81d2 	bne.w	800cee6 <st_int8_maxpool+0x43e>
 800cb42:	2300      	movs	r3, #0
 800cb44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cb48:	eddf 5a95 	vldr	s11, [pc, #596]	; 800cda0 <st_int8_maxpool+0x2f8>
 800cb4c:	469b      	mov	fp, r3
 800cb4e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cb52:	930d      	str	r3, [sp, #52]	; 0x34
 800cb54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb56:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800cb5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb5c:	fb0b fe03 	mul.w	lr, fp, r3
 800cb60:	9b04      	ldr	r3, [sp, #16]
 800cb62:	fb0b f303 	mul.w	r3, fp, r3
 800cb66:	f04f 0b00 	mov.w	fp, #0
 800cb6a:	9303      	str	r3, [sp, #12]
 800cb6c:	ebae 0302 	sub.w	r3, lr, r2
 800cb70:	eba2 0e0e 	sub.w	lr, r2, lr
 800cb74:	9a06      	ldr	r2, [sp, #24]
 800cb76:	455b      	cmp	r3, fp
 800cb78:	46d8      	mov	r8, fp
 800cb7a:	eb0e 0c02 	add.w	ip, lr, r2
 800cb7e:	9a08      	ldr	r2, [sp, #32]
 800cb80:	bfc8      	it	gt
 800cb82:	46de      	movgt	lr, fp
 800cb84:	4594      	cmp	ip, r2
 800cb86:	4473      	add	r3, lr
 800cb88:	bfa8      	it	ge
 800cb8a:	4694      	movge	ip, r2
 800cb8c:	fb0a f303 	mul.w	r3, sl, r3
 800cb90:	930e      	str	r3, [sp, #56]	; 0x38
 800cb92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb96:	fb08 f203 	mul.w	r2, r8, r3
 800cb9a:	9b03      	ldr	r3, [sp, #12]
 800cb9c:	4498      	add	r8, r3
 800cb9e:	1a53      	subs	r3, r2, r1
 800cba0:	1a8a      	subs	r2, r1, r2
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	ebaa 0403 	sub.w	r4, sl, r3
 800cba8:	bfd8      	it	le
 800cbaa:	4617      	movle	r7, r2
 800cbac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbae:	bfc8      	it	gt
 800cbb0:	2700      	movgt	r7, #0
 800cbb2:	189d      	adds	r5, r3, r2
 800cbb4:	9b07      	ldr	r3, [sp, #28]
 800cbb6:	429c      	cmp	r4, r3
 800cbb8:	443d      	add	r5, r7
 800cbba:	bfa8      	it	ge
 800cbbc:	461c      	movge	r4, r3
 800cbbe:	45f4      	cmp	ip, lr
 800cbc0:	f340 80ea 	ble.w	800cd98 <st_int8_maxpool+0x2f0>
 800cbc4:	9b00      	ldr	r3, [sp, #0]
 800cbc6:	4676      	mov	r6, lr
 800cbc8:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800cbcc:	441d      	add	r5, r3
 800cbce:	42bc      	cmp	r4, r7
 800cbd0:	dd09      	ble.n	800cbe6 <st_int8_maxpool+0x13e>
 800cbd2:	462a      	mov	r2, r5
 800cbd4:	463b      	mov	r3, r7
 800cbd6:	f912 0b01 	ldrsb.w	r0, [r2], #1
 800cbda:	3301      	adds	r3, #1
 800cbdc:	4281      	cmp	r1, r0
 800cbde:	bfb8      	it	lt
 800cbe0:	4601      	movlt	r1, r0
 800cbe2:	42a3      	cmp	r3, r4
 800cbe4:	d1f7      	bne.n	800cbd6 <st_int8_maxpool+0x12e>
 800cbe6:	3601      	adds	r6, #1
 800cbe8:	4455      	add	r5, sl
 800cbea:	4566      	cmp	r6, ip
 800cbec:	d1ef      	bne.n	800cbce <st_int8_maxpool+0x126>
 800cbee:	9b01      	ldr	r3, [sp, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	f000 80b6 	beq.w	800cd62 <st_int8_maxpool+0x2ba>
 800cbf6:	f809 1008 	strb.w	r1, [r9, r8]
 800cbfa:	f10b 0b01 	add.w	fp, fp, #1
 800cbfe:	9b04      	ldr	r3, [sp, #16]
 800cc00:	fa0f fb8b 	sxth.w	fp, fp
 800cc04:	455b      	cmp	r3, fp
 800cc06:	46d8      	mov	r8, fp
 800cc08:	dcc3      	bgt.n	800cb92 <st_int8_maxpool+0xea>
 800cc0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc0c:	9a05      	ldr	r2, [sp, #20]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	b21b      	sxth	r3, r3
 800cc12:	429a      	cmp	r2, r3
 800cc14:	469b      	mov	fp, r3
 800cc16:	930d      	str	r3, [sp, #52]	; 0x34
 800cc18:	dc9c      	bgt.n	800cb54 <st_int8_maxpool+0xac>
 800cc1a:	b015      	add	sp, #84	; 0x54
 800cc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d0fa      	beq.n	800cc1a <st_int8_maxpool+0x172>
 800cc24:	eeb4 0a60 	vcmp.f32	s0, s1
 800cc28:	ee17 0a90 	vmov	r0, s15
 800cc2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc30:	bf0c      	ite	eq
 800cc32:	2301      	moveq	r3, #1
 800cc34:	2300      	movne	r3, #0
 800cc36:	4281      	cmp	r1, r0
 800cc38:	bf14      	ite	ne
 800cc3a:	2300      	movne	r3, #0
 800cc3c:	f003 0301 	andeq.w	r3, r3, #1
 800cc40:	9301      	str	r3, [sp, #4]
 800cc42:	2a00      	cmp	r2, #0
 800cc44:	d0e9      	beq.n	800cc1a <st_int8_maxpool+0x172>
 800cc46:	f1b9 0f00 	cmp.w	r9, #0
 800cc4a:	d0e6      	beq.n	800cc1a <st_int8_maxpool+0x172>
 800cc4c:	f1b9 0f01 	cmp.w	r9, #1
 800cc50:	f040 80a8 	bne.w	800cda4 <st_int8_maxpool+0x2fc>
 800cc54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cc58:	2300      	movs	r3, #0
 800cc5a:	eddf 5a51 	vldr	s11, [pc, #324]	; 800cda0 <st_int8_maxpool+0x2f8>
 800cc5e:	f8dd b000 	ldr.w	fp, [sp]
 800cc62:	930d      	str	r3, [sp, #52]	; 0x34
 800cc64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc66:	f04f 0900 	mov.w	r9, #0
 800cc6a:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800cc6e:	fb03 fe02 	mul.w	lr, r3, r2
 800cc72:	9a04      	ldr	r2, [sp, #16]
 800cc74:	46c8      	mov	r8, r9
 800cc76:	fb03 f302 	mul.w	r3, r3, r2
 800cc7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	ebae 0302 	sub.w	r3, lr, r2
 800cc82:	eba2 0e0e 	sub.w	lr, r2, lr
 800cc86:	9a06      	ldr	r2, [sp, #24]
 800cc88:	454b      	cmp	r3, r9
 800cc8a:	eb0e 0c02 	add.w	ip, lr, r2
 800cc8e:	9a08      	ldr	r2, [sp, #32]
 800cc90:	bfc8      	it	gt
 800cc92:	46ce      	movgt	lr, r9
 800cc94:	4594      	cmp	ip, r2
 800cc96:	4473      	add	r3, lr
 800cc98:	bfa8      	it	ge
 800cc9a:	4694      	movge	ip, r2
 800cc9c:	fb0a f303 	mul.w	r3, sl, r3
 800cca0:	930e      	str	r3, [sp, #56]	; 0x38
 800cca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cca6:	fb08 f203 	mul.w	r2, r8, r3
 800ccaa:	9b00      	ldr	r3, [sp, #0]
 800ccac:	4498      	add	r8, r3
 800ccae:	1a53      	subs	r3, r2, r1
 800ccb0:	1a8a      	subs	r2, r1, r2
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	ebaa 0403 	sub.w	r4, sl, r3
 800ccb8:	bfd8      	it	le
 800ccba:	4617      	movle	r7, r2
 800ccbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ccbe:	bfc8      	it	gt
 800ccc0:	2700      	movgt	r7, #0
 800ccc2:	189d      	adds	r5, r3, r2
 800ccc4:	9b07      	ldr	r3, [sp, #28]
 800ccc6:	429c      	cmp	r4, r3
 800ccc8:	443d      	add	r5, r7
 800ccca:	bfa8      	it	ge
 800cccc:	461c      	movge	r4, r3
 800ccce:	45f4      	cmp	ip, lr
 800ccd0:	dd45      	ble.n	800cd5e <st_int8_maxpool+0x2b6>
 800ccd2:	445d      	add	r5, fp
 800ccd4:	4676      	mov	r6, lr
 800ccd6:	217f      	movs	r1, #127	; 0x7f
 800ccd8:	42bc      	cmp	r4, r7
 800ccda:	dd09      	ble.n	800ccf0 <st_int8_maxpool+0x248>
 800ccdc:	462a      	mov	r2, r5
 800ccde:	463b      	mov	r3, r7
 800cce0:	f912 0b01 	ldrsb.w	r0, [r2], #1
 800cce4:	3301      	adds	r3, #1
 800cce6:	4281      	cmp	r1, r0
 800cce8:	bfa8      	it	ge
 800ccea:	4601      	movge	r1, r0
 800ccec:	429c      	cmp	r4, r3
 800ccee:	d1f7      	bne.n	800cce0 <st_int8_maxpool+0x238>
 800ccf0:	3601      	adds	r6, #1
 800ccf2:	4455      	add	r5, sl
 800ccf4:	45b4      	cmp	ip, r6
 800ccf6:	d1ef      	bne.n	800ccd8 <st_int8_maxpool+0x230>
 800ccf8:	9b01      	ldr	r3, [sp, #4]
 800ccfa:	b1a3      	cbz	r3, 800cd26 <st_int8_maxpool+0x27e>
 800ccfc:	9b03      	ldr	r3, [sp, #12]
 800ccfe:	f803 1008 	strb.w	r1, [r3, r8]
 800cd02:	f109 0901 	add.w	r9, r9, #1
 800cd06:	9b04      	ldr	r3, [sp, #16]
 800cd08:	fa0f f989 	sxth.w	r9, r9
 800cd0c:	454b      	cmp	r3, r9
 800cd0e:	46c8      	mov	r8, r9
 800cd10:	dcc7      	bgt.n	800cca2 <st_int8_maxpool+0x1fa>
 800cd12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd14:	9a05      	ldr	r2, [sp, #20]
 800cd16:	3301      	adds	r3, #1
 800cd18:	b21b      	sxth	r3, r3
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	930d      	str	r3, [sp, #52]	; 0x34
 800cd1e:	dca1      	bgt.n	800cc64 <st_int8_maxpool+0x1bc>
 800cd20:	b015      	add	sp, #84	; 0x54
 800cd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd26:	9b02      	ldr	r3, [sp, #8]
 800cd28:	eef0 6a47 	vmov.f32	s13, s14
 800cd2c:	1ac9      	subs	r1, r1, r3
 800cd2e:	ee07 1a90 	vmov	s15, r1
 800cd32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd36:	eee6 6a27 	vfma.f32	s13, s12, s15
 800cd3a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800cd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd42:	fe65 7a25 	vselge.f32	s15, s10, s11
 800cd46:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800cd4a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800cd4e:	ee17 3a90 	vmov	r3, s15
 800cd52:	f303 0307 	ssat	r3, #8, r3
 800cd56:	9a03      	ldr	r2, [sp, #12]
 800cd58:	f802 3008 	strb.w	r3, [r2, r8]
 800cd5c:	e7d1      	b.n	800cd02 <st_int8_maxpool+0x25a>
 800cd5e:	217f      	movs	r1, #127	; 0x7f
 800cd60:	e7ca      	b.n	800ccf8 <st_int8_maxpool+0x250>
 800cd62:	9b02      	ldr	r3, [sp, #8]
 800cd64:	eef0 6a47 	vmov.f32	s13, s14
 800cd68:	1ac9      	subs	r1, r1, r3
 800cd6a:	ee07 1a90 	vmov	s15, r1
 800cd6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd72:	eee6 6a27 	vfma.f32	s13, s12, s15
 800cd76:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800cd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd7e:	fe65 7a25 	vselge.f32	s15, s10, s11
 800cd82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd8a:	ee17 3a90 	vmov	r3, s15
 800cd8e:	f303 0307 	ssat	r3, #8, r3
 800cd92:	f809 3008 	strb.w	r3, [r9, r8]
 800cd96:	e730      	b.n	800cbfa <st_int8_maxpool+0x152>
 800cd98:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800cd9c:	e727      	b.n	800cbee <st_int8_maxpool+0x146>
 800cd9e:	bf00      	nop
 800cda0:	befffffc 	.word	0xbefffffc
 800cda4:	f04f 0800 	mov.w	r8, #0
 800cda8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cdac:	ed5f 5a04 	vldr	s11, [pc, #-16]	; 800cda0 <st_int8_maxpool+0x2f8>
 800cdb0:	fb0a fb09 	mul.w	fp, sl, r9
 800cdb4:	4643      	mov	r3, r8
 800cdb6:	46c4      	mov	ip, r8
 800cdb8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cdbc:	9904      	ldr	r1, [sp, #16]
 800cdbe:	2000      	movs	r0, #0
 800cdc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdc2:	9c08      	ldr	r4, [sp, #32]
 800cdc4:	fb03 f202 	mul.w	r2, r3, r2
 800cdc8:	fb03 f301 	mul.w	r3, r3, r1
 800cdcc:	900d      	str	r0, [sp, #52]	; 0x34
 800cdce:	9310      	str	r3, [sp, #64]	; 0x40
 800cdd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdd2:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 800cdd6:	1ad1      	subs	r1, r2, r3
 800cdd8:	1a9b      	subs	r3, r3, r2
 800cdda:	9a06      	ldr	r2, [sp, #24]
 800cddc:	4281      	cmp	r1, r0
 800cdde:	441a      	add	r2, r3
 800cde0:	bfc8      	it	gt
 800cde2:	4603      	movgt	r3, r0
 800cde4:	4294      	cmp	r4, r2
 800cde6:	4419      	add	r1, r3
 800cde8:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdea:	bfa8      	it	ge
 800cdec:	4614      	movge	r4, r2
 800cdee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	fb03 f301 	mul.w	r3, r3, r1
 800cdf6:	46a2      	mov	sl, r4
 800cdf8:	9311      	str	r3, [sp, #68]	; 0x44
 800cdfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdfc:	f04f 0e00 	mov.w	lr, #0
 800ce00:	9c07      	ldr	r4, [sp, #28]
 800ce02:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800ce06:	fb02 f103 	mul.w	r1, r2, r3
 800ce0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce0c:	46f0      	mov	r8, lr
 800ce0e:	441a      	add	r2, r3
 800ce10:	9b03      	ldr	r3, [sp, #12]
 800ce12:	fb09 3c02 	mla	ip, r9, r2, r3
 800ce16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce18:	1a8b      	subs	r3, r1, r2
 800ce1a:	1a51      	subs	r1, r2, r1
 800ce1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	441a      	add	r2, r3
 800ce22:	bfd8      	it	le
 800ce24:	460f      	movle	r7, r1
 800ce26:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ce28:	bfc8      	it	gt
 800ce2a:	2700      	movgt	r7, #0
 800ce2c:	1acb      	subs	r3, r1, r3
 800ce2e:	443a      	add	r2, r7
 800ce30:	429c      	cmp	r4, r3
 800ce32:	bfa8      	it	ge
 800ce34:	461c      	movge	r4, r3
 800ce36:	fb09 f302 	mul.w	r3, r9, r2
 800ce3a:	9312      	str	r3, [sp, #72]	; 0x48
 800ce3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ce3e:	4555      	cmp	r5, sl
 800ce40:	da4f      	bge.n	800cee2 <st_int8_maxpool+0x43a>
 800ce42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce44:	217f      	movs	r1, #127	; 0x7f
 800ce46:	eb08 0603 	add.w	r6, r8, r3
 800ce4a:	9b00      	ldr	r3, [sp, #0]
 800ce4c:	441e      	add	r6, r3
 800ce4e:	42a7      	cmp	r7, r4
 800ce50:	da0a      	bge.n	800ce68 <st_int8_maxpool+0x3c0>
 800ce52:	4632      	mov	r2, r6
 800ce54:	463b      	mov	r3, r7
 800ce56:	f992 0000 	ldrsb.w	r0, [r2]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	444a      	add	r2, r9
 800ce5e:	4281      	cmp	r1, r0
 800ce60:	bfa8      	it	ge
 800ce62:	4601      	movge	r1, r0
 800ce64:	429c      	cmp	r4, r3
 800ce66:	d1f6      	bne.n	800ce56 <st_int8_maxpool+0x3ae>
 800ce68:	3501      	adds	r5, #1
 800ce6a:	445e      	add	r6, fp
 800ce6c:	45aa      	cmp	sl, r5
 800ce6e:	d1ee      	bne.n	800ce4e <st_int8_maxpool+0x3a6>
 800ce70:	9b01      	ldr	r3, [sp, #4]
 800ce72:	b1db      	cbz	r3, 800ceac <st_int8_maxpool+0x404>
 800ce74:	f80c 1008 	strb.w	r1, [ip, r8]
 800ce78:	f10e 0e01 	add.w	lr, lr, #1
 800ce7c:	fa0f fe8e 	sxth.w	lr, lr
 800ce80:	45ce      	cmp	lr, r9
 800ce82:	46f0      	mov	r8, lr
 800ce84:	dbda      	blt.n	800ce3c <st_int8_maxpool+0x394>
 800ce86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce88:	9904      	ldr	r1, [sp, #16]
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	b21b      	sxth	r3, r3
 800ce8e:	428b      	cmp	r3, r1
 800ce90:	461a      	mov	r2, r3
 800ce92:	930d      	str	r3, [sp, #52]	; 0x34
 800ce94:	dbb1      	blt.n	800cdfa <st_int8_maxpool+0x352>
 800ce96:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800ce9a:	9a05      	ldr	r2, [sp, #20]
 800ce9c:	f10c 0301 	add.w	r3, ip, #1
 800cea0:	fa0f fc83 	sxth.w	ip, r3
 800cea4:	4594      	cmp	ip, r2
 800cea6:	4663      	mov	r3, ip
 800cea8:	db88      	blt.n	800cdbc <st_int8_maxpool+0x314>
 800ceaa:	e6b6      	b.n	800cc1a <st_int8_maxpool+0x172>
 800ceac:	9b02      	ldr	r3, [sp, #8]
 800ceae:	eef0 6a47 	vmov.f32	s13, s14
 800ceb2:	1ac9      	subs	r1, r1, r3
 800ceb4:	ee07 1a90 	vmov	s15, r1
 800ceb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cebc:	eee7 6a86 	vfma.f32	s13, s15, s12
 800cec0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800cec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cec8:	fe65 7a25 	vselge.f32	s15, s10, s11
 800cecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ced0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ced4:	ee17 3a90 	vmov	r3, s15
 800ced8:	f303 0307 	ssat	r3, #8, r3
 800cedc:	f80c 3008 	strb.w	r3, [ip, r8]
 800cee0:	e7ca      	b.n	800ce78 <st_int8_maxpool+0x3d0>
 800cee2:	217f      	movs	r1, #127	; 0x7f
 800cee4:	e7c4      	b.n	800ce70 <st_int8_maxpool+0x3c8>
 800cee6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ceea:	2300      	movs	r3, #0
 800ceec:	ed5f 5a54 	vldr	s11, [pc, #-336]	; 800cda0 <st_int8_maxpool+0x2f8>
 800cef0:	fb0a fb09 	mul.w	fp, sl, r9
 800cef4:	930e      	str	r3, [sp, #56]	; 0x38
 800cef6:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800cefa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cefc:	2000      	movs	r0, #0
 800cefe:	9c08      	ldr	r4, [sp, #32]
 800cf00:	fb03 f102 	mul.w	r1, r3, r2
 800cf04:	9a04      	ldr	r2, [sp, #16]
 800cf06:	900f      	str	r0, [sp, #60]	; 0x3c
 800cf08:	fb03 f302 	mul.w	r3, r3, r2
 800cf0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf0e:	9312      	str	r3, [sp, #72]	; 0x48
 800cf10:	1a8b      	subs	r3, r1, r2
 800cf12:	1a51      	subs	r1, r2, r1
 800cf14:	9a06      	ldr	r2, [sp, #24]
 800cf16:	4283      	cmp	r3, r0
 800cf18:	440a      	add	r2, r1
 800cf1a:	bfc8      	it	gt
 800cf1c:	4601      	movgt	r1, r0
 800cf1e:	4294      	cmp	r4, r2
 800cf20:	440b      	add	r3, r1
 800cf22:	910d      	str	r1, [sp, #52]	; 0x34
 800cf24:	bfa8      	it	ge
 800cf26:	4614      	movge	r4, r2
 800cf28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cf2a:	46a6      	mov	lr, r4
 800cf2c:	fb02 f303 	mul.w	r3, r2, r3
 800cf30:	4602      	mov	r2, r0
 800cf32:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf36:	f04f 0c00 	mov.w	ip, #0
 800cf3a:	9c07      	ldr	r4, [sp, #28]
 800cf3c:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800cf40:	fb02 f103 	mul.w	r1, r2, r3
 800cf44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf46:	46e2      	mov	sl, ip
 800cf48:	441a      	add	r2, r3
 800cf4a:	9b03      	ldr	r3, [sp, #12]
 800cf4c:	fb09 3802 	mla	r8, r9, r2, r3
 800cf50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf52:	1a8b      	subs	r3, r1, r2
 800cf54:	1a51      	subs	r1, r2, r1
 800cf56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	441a      	add	r2, r3
 800cf5c:	bfd8      	it	le
 800cf5e:	460f      	movle	r7, r1
 800cf60:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cf62:	bfc8      	it	gt
 800cf64:	2700      	movgt	r7, #0
 800cf66:	1acb      	subs	r3, r1, r3
 800cf68:	443a      	add	r2, r7
 800cf6a:	429c      	cmp	r4, r3
 800cf6c:	bfa8      	it	ge
 800cf6e:	461c      	movge	r4, r3
 800cf70:	fb09 f302 	mul.w	r3, r9, r2
 800cf74:	9310      	str	r3, [sp, #64]	; 0x40
 800cf76:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800cf78:	4576      	cmp	r6, lr
 800cf7a:	da4d      	bge.n	800d018 <st_int8_maxpool+0x570>
 800cf7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf7e:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800cf82:	eb0a 0503 	add.w	r5, sl, r3
 800cf86:	9b00      	ldr	r3, [sp, #0]
 800cf88:	441d      	add	r5, r3
 800cf8a:	42a7      	cmp	r7, r4
 800cf8c:	da0a      	bge.n	800cfa4 <st_int8_maxpool+0x4fc>
 800cf8e:	462a      	mov	r2, r5
 800cf90:	463b      	mov	r3, r7
 800cf92:	f992 0000 	ldrsb.w	r0, [r2]
 800cf96:	3301      	adds	r3, #1
 800cf98:	444a      	add	r2, r9
 800cf9a:	4281      	cmp	r1, r0
 800cf9c:	bfb8      	it	lt
 800cf9e:	4601      	movlt	r1, r0
 800cfa0:	429c      	cmp	r4, r3
 800cfa2:	d1f6      	bne.n	800cf92 <st_int8_maxpool+0x4ea>
 800cfa4:	3601      	adds	r6, #1
 800cfa6:	445d      	add	r5, fp
 800cfa8:	45b6      	cmp	lr, r6
 800cfaa:	d1ee      	bne.n	800cf8a <st_int8_maxpool+0x4e2>
 800cfac:	9b01      	ldr	r3, [sp, #4]
 800cfae:	b1c3      	cbz	r3, 800cfe2 <st_int8_maxpool+0x53a>
 800cfb0:	f808 100a 	strb.w	r1, [r8, sl]
 800cfb4:	f10c 0c01 	add.w	ip, ip, #1
 800cfb8:	fa0f fc8c 	sxth.w	ip, ip
 800cfbc:	45cc      	cmp	ip, r9
 800cfbe:	46e2      	mov	sl, ip
 800cfc0:	dbd9      	blt.n	800cf76 <st_int8_maxpool+0x4ce>
 800cfc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cfc4:	9904      	ldr	r1, [sp, #16]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	b21b      	sxth	r3, r3
 800cfca:	428b      	cmp	r3, r1
 800cfcc:	461a      	mov	r2, r3
 800cfce:	930f      	str	r3, [sp, #60]	; 0x3c
 800cfd0:	dbb0      	blt.n	800cf34 <st_int8_maxpool+0x48c>
 800cfd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfd4:	9905      	ldr	r1, [sp, #20]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	b21b      	sxth	r3, r3
 800cfda:	428b      	cmp	r3, r1
 800cfdc:	930e      	str	r3, [sp, #56]	; 0x38
 800cfde:	db8c      	blt.n	800cefa <st_int8_maxpool+0x452>
 800cfe0:	e61b      	b.n	800cc1a <st_int8_maxpool+0x172>
 800cfe2:	9b02      	ldr	r3, [sp, #8]
 800cfe4:	eef0 6a47 	vmov.f32	s13, s14
 800cfe8:	1ac9      	subs	r1, r1, r3
 800cfea:	ee07 1a90 	vmov	s15, r1
 800cfee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cff2:	eee7 6a86 	vfma.f32	s13, s15, s12
 800cff6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800cffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cffe:	fe65 7a25 	vselge.f32	s15, s10, s11
 800d002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d00a:	ee17 3a90 	vmov	r3, s15
 800d00e:	f303 0307 	ssat	r3, #8, r3
 800d012:	f808 300a 	strb.w	r3, [r8, sl]
 800d016:	e7cd      	b.n	800cfb4 <st_int8_maxpool+0x50c>
 800d018:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800d01c:	e7c6      	b.n	800cfac <st_int8_maxpool+0x504>
 800d01e:	bf00      	nop

0800d020 <arm_copy_q7>:
 800d020:	b530      	push	{r4, r5, lr}
 800d022:	0894      	lsrs	r4, r2, #2
 800d024:	d02b      	beq.n	800d07e <arm_copy_q7+0x5e>
 800d026:	1e63      	subs	r3, r4, #1
 800d028:	ea41 0500 	orr.w	r5, r1, r0
 800d02c:	2b0b      	cmp	r3, #11
 800d02e:	f3c5 0502 	ubfx	r5, r5, #0, #3
 800d032:	bf94      	ite	ls
 800d034:	2300      	movls	r3, #0
 800d036:	2301      	movhi	r3, #1
 800d038:	2d00      	cmp	r5, #0
 800d03a:	bf18      	it	ne
 800d03c:	2300      	movne	r3, #0
 800d03e:	b393      	cbz	r3, 800d0a6 <arm_copy_q7+0x86>
 800d040:	43c3      	mvns	r3, r0
 800d042:	440b      	add	r3, r1
 800d044:	2b06      	cmp	r3, #6
 800d046:	d92e      	bls.n	800d0a6 <arm_copy_q7+0x86>
 800d048:	f022 0507 	bic.w	r5, r2, #7
 800d04c:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
 800d050:	f1a0 0e08 	sub.w	lr, r0, #8
 800d054:	460b      	mov	r3, r1
 800d056:	440d      	add	r5, r1
 800d058:	f10e 0e08 	add.w	lr, lr, #8
 800d05c:	ed9e 7b00 	vldr	d7, [lr]
 800d060:	eca3 7b02 	vstmia	r3!, {d7}
 800d064:	42ab      	cmp	r3, r5
 800d066:	d1f7      	bne.n	800d058 <arm_copy_q7+0x38>
 800d068:	ebb4 0f4c 	cmp.w	r4, ip, lsl #1
 800d06c:	d018      	beq.n	800d0a0 <arm_copy_q7+0x80>
 800d06e:	f850 303c 	ldr.w	r3, [r0, ip, lsl #3]
 800d072:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800d076:	f841 303c 	str.w	r3, [r1, ip, lsl #3]
 800d07a:	4470      	add	r0, lr
 800d07c:	4471      	add	r1, lr
 800d07e:	f012 0203 	ands.w	r2, r2, #3
 800d082:	d00c      	beq.n	800d09e <arm_copy_q7+0x7e>
 800d084:	f990 3000 	ldrsb.w	r3, [r0]
 800d088:	3a01      	subs	r2, #1
 800d08a:	700b      	strb	r3, [r1, #0]
 800d08c:	d007      	beq.n	800d09e <arm_copy_q7+0x7e>
 800d08e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d092:	2a01      	cmp	r2, #1
 800d094:	704b      	strb	r3, [r1, #1]
 800d096:	d002      	beq.n	800d09e <arm_copy_q7+0x7e>
 800d098:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800d09c:	708b      	strb	r3, [r1, #2]
 800d09e:	bd30      	pop	{r4, r5, pc}
 800d0a0:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 800d0a4:	e7e9      	b.n	800d07a <arm_copy_q7+0x5a>
 800d0a6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800d0aa:	460d      	mov	r5, r1
 800d0ac:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	f853 cb04 	ldr.w	ip, [r3], #4
 800d0b6:	42a3      	cmp	r3, r4
 800d0b8:	f845 cb04 	str.w	ip, [r5], #4
 800d0bc:	d1f9      	bne.n	800d0b2 <arm_copy_q7+0x92>
 800d0be:	e7dc      	b.n	800d07a <arm_copy_q7+0x5a>

0800d0c0 <arm_fill_q15>:
 800d0c0:	b510      	push	{r4, lr}
 800d0c2:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 800d0c6:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800d0ca:	d013      	beq.n	800d0f4 <arm_fill_q15+0x34>
 800d0cc:	f10e 33ff 	add.w	r3, lr, #4294967295
 800d0d0:	2b09      	cmp	r3, #9
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	d919      	bls.n	800d10a <arm_fill_q15+0x4a>
 800d0d6:	f011 0f07 	tst.w	r1, #7
 800d0da:	d116      	bne.n	800d10a <arm_fill_q15+0x4a>
 800d0dc:	f04f 0c00 	mov.w	ip, #0
 800d0e0:	f10c 0c01 	add.w	ip, ip, #1
 800d0e4:	45e6      	cmp	lr, ip
 800d0e6:	e9c3 4400 	strd	r4, r4, [r3]
 800d0ea:	f103 0308 	add.w	r3, r3, #8
 800d0ee:	d1f7      	bne.n	800d0e0 <arm_fill_q15+0x20>
 800d0f0:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800d0f4:	f012 0203 	ands.w	r2, r2, #3
 800d0f8:	d006      	beq.n	800d108 <arm_fill_q15+0x48>
 800d0fa:	3a01      	subs	r2, #1
 800d0fc:	8008      	strh	r0, [r1, #0]
 800d0fe:	d003      	beq.n	800d108 <arm_fill_q15+0x48>
 800d100:	2a01      	cmp	r2, #1
 800d102:	8048      	strh	r0, [r1, #2]
 800d104:	bf18      	it	ne
 800d106:	8088      	strhne	r0, [r1, #4]
 800d108:	bd10      	pop	{r4, pc}
 800d10a:	46f4      	mov	ip, lr
 800d10c:	f1bc 0c01 	subs.w	ip, ip, #1
 800d110:	601c      	str	r4, [r3, #0]
 800d112:	605c      	str	r4, [r3, #4]
 800d114:	f103 0308 	add.w	r3, r3, #8
 800d118:	d1f8      	bne.n	800d10c <arm_fill_q15+0x4c>
 800d11a:	e7e9      	b.n	800d0f0 <arm_fill_q15+0x30>

0800d11c <ai_version_get>:
 800d11c:	0212      	lsls	r2, r2, #8
 800d11e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d122:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800d126:	4770      	bx	lr

0800d128 <get_tensor_byte_size>:
 800d128:	b430      	push	{r4, r5}
 800d12a:	6985      	ldr	r5, [r0, #24]
 800d12c:	68c4      	ldr	r4, [r0, #12]
 800d12e:	6941      	ldr	r1, [r0, #20]
 800d130:	4b06      	ldr	r3, [pc, #24]	; (800d14c <get_tensor_byte_size+0x24>)
 800d132:	6828      	ldr	r0, [r5, #0]
 800d134:	4a06      	ldr	r2, [pc, #24]	; (800d150 <get_tensor_byte_size+0x28>)
 800d136:	4003      	ands	r3, r0
 800d138:	68c9      	ldr	r1, [r1, #12]
 800d13a:	68e0      	ldr	r0, [r4, #12]
 800d13c:	4293      	cmp	r3, r2
 800d13e:	fb01 f000 	mul.w	r0, r1, r0
 800d142:	d101      	bne.n	800d148 <get_tensor_byte_size+0x20>
 800d144:	3007      	adds	r0, #7
 800d146:	08c0      	lsrs	r0, r0, #3
 800d148:	bc30      	pop	{r4, r5}
 800d14a:	4770      	bx	lr
 800d14c:	017fffff 	.word	0x017fffff
 800d150:	000400c0 	.word	0x000400c0

0800d154 <ai_array_to_buffer_fmt>:
 800d154:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800d158:	2b02      	cmp	r3, #2
 800d15a:	d050      	beq.n	800d1fe <ai_array_to_buffer_fmt+0xaa>
 800d15c:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800d160:	4b29      	ldr	r3, [pc, #164]	; (800d208 <ai_array_to_buffer_fmt+0xb4>)
 800d162:	429a      	cmp	r2, r3
 800d164:	d00b      	beq.n	800d17e <ai_array_to_buffer_fmt+0x2a>
 800d166:	dc1c      	bgt.n	800d1a2 <ai_array_to_buffer_fmt+0x4e>
 800d168:	4b28      	ldr	r3, [pc, #160]	; (800d20c <ai_array_to_buffer_fmt+0xb8>)
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d007      	beq.n	800d17e <ai_array_to_buffer_fmt+0x2a>
 800d16e:	dd0b      	ble.n	800d188 <ai_array_to_buffer_fmt+0x34>
 800d170:	4b27      	ldr	r3, [pc, #156]	; (800d210 <ai_array_to_buffer_fmt+0xbc>)
 800d172:	429a      	cmp	r2, r3
 800d174:	d003      	beq.n	800d17e <ai_array_to_buffer_fmt+0x2a>
 800d176:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d131      	bne.n	800d1e2 <ai_array_to_buffer_fmt+0x8e>
 800d17e:	4613      	mov	r3, r2
 800d180:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d184:	4318      	orrs	r0, r3
 800d186:	4770      	bx	lr
 800d188:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d0f6      	beq.n	800d17e <ai_array_to_buffer_fmt+0x2a>
 800d190:	dd2c      	ble.n	800d1ec <ai_array_to_buffer_fmt+0x98>
 800d192:	4b20      	ldr	r3, [pc, #128]	; (800d214 <ai_array_to_buffer_fmt+0xc0>)
 800d194:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d198:	429a      	cmp	r2, r3
 800d19a:	bf18      	it	ne
 800d19c:	2340      	movne	r3, #64	; 0x40
 800d19e:	4318      	orrs	r0, r3
 800d1a0:	4770      	bx	lr
 800d1a2:	4b1d      	ldr	r3, [pc, #116]	; (800d218 <ai_array_to_buffer_fmt+0xc4>)
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d0ea      	beq.n	800d17e <ai_array_to_buffer_fmt+0x2a>
 800d1a8:	dd0e      	ble.n	800d1c8 <ai_array_to_buffer_fmt+0x74>
 800d1aa:	4b1c      	ldr	r3, [pc, #112]	; (800d21c <ai_array_to_buffer_fmt+0xc8>)
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d0e6      	beq.n	800d17e <ai_array_to_buffer_fmt+0x2a>
 800d1b0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d0e2      	beq.n	800d17e <ai_array_to_buffer_fmt+0x2a>
 800d1b8:	4b19      	ldr	r3, [pc, #100]	; (800d220 <ai_array_to_buffer_fmt+0xcc>)
 800d1ba:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	bf18      	it	ne
 800d1c2:	2340      	movne	r3, #64	; 0x40
 800d1c4:	4318      	orrs	r0, r3
 800d1c6:	4770      	bx	lr
 800d1c8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d0d6      	beq.n	800d17e <ai_array_to_buffer_fmt+0x2a>
 800d1d0:	3307      	adds	r3, #7
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d0d3      	beq.n	800d17e <ai_array_to_buffer_fmt+0x2a>
 800d1d6:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	bf18      	it	ne
 800d1de:	2340      	movne	r3, #64	; 0x40
 800d1e0:	e7ce      	b.n	800d180 <ai_array_to_buffer_fmt+0x2c>
 800d1e2:	4b10      	ldr	r3, [pc, #64]	; (800d224 <ai_array_to_buffer_fmt+0xd0>)
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	bf18      	it	ne
 800d1e8:	2340      	movne	r3, #64	; 0x40
 800d1ea:	e7c9      	b.n	800d180 <ai_array_to_buffer_fmt+0x2c>
 800d1ec:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d0c4      	beq.n	800d17e <ai_array_to_buffer_fmt+0x2a>
 800d1f4:	3380      	adds	r3, #128	; 0x80
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	bf18      	it	ne
 800d1fa:	2340      	movne	r3, #64	; 0x40
 800d1fc:	e7c0      	b.n	800d180 <ai_array_to_buffer_fmt+0x2c>
 800d1fe:	4b0a      	ldr	r3, [pc, #40]	; (800d228 <ai_array_to_buffer_fmt+0xd4>)
 800d200:	4003      	ands	r3, r0
 800d202:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d206:	e7bb      	b.n	800d180 <ai_array_to_buffer_fmt+0x2c>
 800d208:	00840040 	.word	0x00840040
 800d20c:	00040840 	.word	0x00040840
 800d210:	00041040 	.word	0x00041040
 800d214:	00040447 	.word	0x00040447
 800d218:	00840840 	.word	0x00840840
 800d21c:	00841040 	.word	0x00841040
 800d220:	0084084f 	.word	0x0084084f
 800d224:	0004084f 	.word	0x0004084f
 800d228:	00803fff 	.word	0x00803fff

0800d22c <ai_array_get_byte_size>:
 800d22c:	b319      	cbz	r1, 800d276 <ai_array_get_byte_size+0x4a>
 800d22e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d232:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800d236:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800d23a:	11c0      	asrs	r0, r0, #7
 800d23c:	fb03 f101 	mul.w	r1, r3, r1
 800d240:	2a04      	cmp	r2, #4
 800d242:	f101 0107 	add.w	r1, r1, #7
 800d246:	f021 0107 	bic.w	r1, r1, #7
 800d24a:	fa21 f10c 	lsr.w	r1, r1, ip
 800d24e:	d00b      	beq.n	800d268 <ai_array_get_byte_size+0x3c>
 800d250:	2a08      	cmp	r2, #8
 800d252:	d002      	beq.n	800d25a <ai_array_get_byte_size+0x2e>
 800d254:	3107      	adds	r1, #7
 800d256:	08c8      	lsrs	r0, r1, #3
 800d258:	4770      	bx	lr
 800d25a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d25e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800d262:	3107      	adds	r1, #7
 800d264:	08c8      	lsrs	r0, r1, #3
 800d266:	4770      	bx	lr
 800d268:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d26c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800d270:	3107      	adds	r1, #7
 800d272:	08c8      	lsrs	r0, r1, #3
 800d274:	4770      	bx	lr
 800d276:	4608      	mov	r0, r1
 800d278:	4770      	bx	lr
 800d27a:	bf00      	nop

0800d27c <ai_array_get_data_byte_size>:
 800d27c:	b161      	cbz	r1, 800d298 <ai_array_get_data_byte_size+0x1c>
 800d27e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d282:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800d286:	fb03 f101 	mul.w	r1, r3, r1
 800d28a:	1dc8      	adds	r0, r1, #7
 800d28c:	f020 0007 	bic.w	r0, r0, #7
 800d290:	40d0      	lsrs	r0, r2
 800d292:	3007      	adds	r0, #7
 800d294:	08c0      	lsrs	r0, r0, #3
 800d296:	4770      	bx	lr
 800d298:	4608      	mov	r0, r1
 800d29a:	4770      	bx	lr

0800d29c <core_tensor_clone>:
 800d29c:	680b      	ldr	r3, [r1, #0]
 800d29e:	6882      	ldr	r2, [r0, #8]
 800d2a0:	6003      	str	r3, [r0, #0]
 800d2a2:	684b      	ldr	r3, [r1, #4]
 800d2a4:	6043      	str	r3, [r0, #4]
 800d2a6:	698b      	ldr	r3, [r1, #24]
 800d2a8:	6183      	str	r3, [r0, #24]
 800d2aa:	688b      	ldr	r3, [r1, #8]
 800d2ac:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800d2b0:	f363 221f 	bfi	r2, r3, #8, #24
 800d2b4:	b410      	push	{r4}
 800d2b6:	6082      	str	r2, [r0, #8]
 800d2b8:	b15b      	cbz	r3, 800d2d2 <core_tensor_clone+0x36>
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	68cc      	ldr	r4, [r1, #12]
 800d2be:	68c2      	ldr	r2, [r0, #12]
 800d2c0:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800d2c4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	6882      	ldr	r2, [r0, #8]
 800d2cc:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800d2d0:	d3f4      	bcc.n	800d2bc <core_tensor_clone+0x20>
 800d2d2:	690b      	ldr	r3, [r1, #16]
 800d2d4:	6902      	ldr	r2, [r0, #16]
 800d2d6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800d2da:	f363 221f 	bfi	r2, r3, #8, #24
 800d2de:	6102      	str	r2, [r0, #16]
 800d2e0:	b15b      	cbz	r3, 800d2fa <core_tensor_clone+0x5e>
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	694c      	ldr	r4, [r1, #20]
 800d2e6:	6942      	ldr	r2, [r0, #20]
 800d2e8:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800d2ec:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	6902      	ldr	r2, [r0, #16]
 800d2f4:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800d2f8:	d3f4      	bcc.n	800d2e4 <core_tensor_clone+0x48>
 800d2fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2fe:	4770      	bx	lr

0800d300 <core_array_clone>:
 800d300:	4684      	mov	ip, r0
 800d302:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800d304:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop

0800d30c <__errno>:
 800d30c:	4b01      	ldr	r3, [pc, #4]	; (800d314 <__errno+0x8>)
 800d30e:	6818      	ldr	r0, [r3, #0]
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop
 800d314:	24001cbc 	.word	0x24001cbc

0800d318 <__libc_init_array>:
 800d318:	b570      	push	{r4, r5, r6, lr}
 800d31a:	4d0d      	ldr	r5, [pc, #52]	; (800d350 <__libc_init_array+0x38>)
 800d31c:	4c0d      	ldr	r4, [pc, #52]	; (800d354 <__libc_init_array+0x3c>)
 800d31e:	1b64      	subs	r4, r4, r5
 800d320:	10a4      	asrs	r4, r4, #2
 800d322:	2600      	movs	r6, #0
 800d324:	42a6      	cmp	r6, r4
 800d326:	d109      	bne.n	800d33c <__libc_init_array+0x24>
 800d328:	4d0b      	ldr	r5, [pc, #44]	; (800d358 <__libc_init_array+0x40>)
 800d32a:	4c0c      	ldr	r4, [pc, #48]	; (800d35c <__libc_init_array+0x44>)
 800d32c:	f002 ff02 	bl	8010134 <_init>
 800d330:	1b64      	subs	r4, r4, r5
 800d332:	10a4      	asrs	r4, r4, #2
 800d334:	2600      	movs	r6, #0
 800d336:	42a6      	cmp	r6, r4
 800d338:	d105      	bne.n	800d346 <__libc_init_array+0x2e>
 800d33a:	bd70      	pop	{r4, r5, r6, pc}
 800d33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d340:	4798      	blx	r3
 800d342:	3601      	adds	r6, #1
 800d344:	e7ee      	b.n	800d324 <__libc_init_array+0xc>
 800d346:	f855 3b04 	ldr.w	r3, [r5], #4
 800d34a:	4798      	blx	r3
 800d34c:	3601      	adds	r6, #1
 800d34e:	e7f2      	b.n	800d336 <__libc_init_array+0x1e>
 800d350:	0806f1e8 	.word	0x0806f1e8
 800d354:	0806f1e8 	.word	0x0806f1e8
 800d358:	0806f1e8 	.word	0x0806f1e8
 800d35c:	0806f1ec 	.word	0x0806f1ec

0800d360 <malloc>:
 800d360:	4b02      	ldr	r3, [pc, #8]	; (800d36c <malloc+0xc>)
 800d362:	4601      	mov	r1, r0
 800d364:	6818      	ldr	r0, [r3, #0]
 800d366:	f000 b869 	b.w	800d43c <_malloc_r>
 800d36a:	bf00      	nop
 800d36c:	24001cbc 	.word	0x24001cbc

0800d370 <memcpy>:
 800d370:	440a      	add	r2, r1
 800d372:	4291      	cmp	r1, r2
 800d374:	f100 33ff 	add.w	r3, r0, #4294967295
 800d378:	d100      	bne.n	800d37c <memcpy+0xc>
 800d37a:	4770      	bx	lr
 800d37c:	b510      	push	{r4, lr}
 800d37e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d382:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d386:	4291      	cmp	r1, r2
 800d388:	d1f9      	bne.n	800d37e <memcpy+0xe>
 800d38a:	bd10      	pop	{r4, pc}

0800d38c <memset>:
 800d38c:	4402      	add	r2, r0
 800d38e:	4603      	mov	r3, r0
 800d390:	4293      	cmp	r3, r2
 800d392:	d100      	bne.n	800d396 <memset+0xa>
 800d394:	4770      	bx	lr
 800d396:	f803 1b01 	strb.w	r1, [r3], #1
 800d39a:	e7f9      	b.n	800d390 <memset+0x4>

0800d39c <_free_r>:
 800d39c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d39e:	2900      	cmp	r1, #0
 800d3a0:	d048      	beq.n	800d434 <_free_r+0x98>
 800d3a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3a6:	9001      	str	r0, [sp, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f1a1 0404 	sub.w	r4, r1, #4
 800d3ae:	bfb8      	it	lt
 800d3b0:	18e4      	addlt	r4, r4, r3
 800d3b2:	f001 fb23 	bl	800e9fc <__malloc_lock>
 800d3b6:	4a20      	ldr	r2, [pc, #128]	; (800d438 <_free_r+0x9c>)
 800d3b8:	9801      	ldr	r0, [sp, #4]
 800d3ba:	6813      	ldr	r3, [r2, #0]
 800d3bc:	4615      	mov	r5, r2
 800d3be:	b933      	cbnz	r3, 800d3ce <_free_r+0x32>
 800d3c0:	6063      	str	r3, [r4, #4]
 800d3c2:	6014      	str	r4, [r2, #0]
 800d3c4:	b003      	add	sp, #12
 800d3c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3ca:	f001 bb1d 	b.w	800ea08 <__malloc_unlock>
 800d3ce:	42a3      	cmp	r3, r4
 800d3d0:	d90b      	bls.n	800d3ea <_free_r+0x4e>
 800d3d2:	6821      	ldr	r1, [r4, #0]
 800d3d4:	1862      	adds	r2, r4, r1
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	bf04      	itt	eq
 800d3da:	681a      	ldreq	r2, [r3, #0]
 800d3dc:	685b      	ldreq	r3, [r3, #4]
 800d3de:	6063      	str	r3, [r4, #4]
 800d3e0:	bf04      	itt	eq
 800d3e2:	1852      	addeq	r2, r2, r1
 800d3e4:	6022      	streq	r2, [r4, #0]
 800d3e6:	602c      	str	r4, [r5, #0]
 800d3e8:	e7ec      	b.n	800d3c4 <_free_r+0x28>
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	b10b      	cbz	r3, 800d3f4 <_free_r+0x58>
 800d3f0:	42a3      	cmp	r3, r4
 800d3f2:	d9fa      	bls.n	800d3ea <_free_r+0x4e>
 800d3f4:	6811      	ldr	r1, [r2, #0]
 800d3f6:	1855      	adds	r5, r2, r1
 800d3f8:	42a5      	cmp	r5, r4
 800d3fa:	d10b      	bne.n	800d414 <_free_r+0x78>
 800d3fc:	6824      	ldr	r4, [r4, #0]
 800d3fe:	4421      	add	r1, r4
 800d400:	1854      	adds	r4, r2, r1
 800d402:	42a3      	cmp	r3, r4
 800d404:	6011      	str	r1, [r2, #0]
 800d406:	d1dd      	bne.n	800d3c4 <_free_r+0x28>
 800d408:	681c      	ldr	r4, [r3, #0]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	6053      	str	r3, [r2, #4]
 800d40e:	4421      	add	r1, r4
 800d410:	6011      	str	r1, [r2, #0]
 800d412:	e7d7      	b.n	800d3c4 <_free_r+0x28>
 800d414:	d902      	bls.n	800d41c <_free_r+0x80>
 800d416:	230c      	movs	r3, #12
 800d418:	6003      	str	r3, [r0, #0]
 800d41a:	e7d3      	b.n	800d3c4 <_free_r+0x28>
 800d41c:	6825      	ldr	r5, [r4, #0]
 800d41e:	1961      	adds	r1, r4, r5
 800d420:	428b      	cmp	r3, r1
 800d422:	bf04      	itt	eq
 800d424:	6819      	ldreq	r1, [r3, #0]
 800d426:	685b      	ldreq	r3, [r3, #4]
 800d428:	6063      	str	r3, [r4, #4]
 800d42a:	bf04      	itt	eq
 800d42c:	1949      	addeq	r1, r1, r5
 800d42e:	6021      	streq	r1, [r4, #0]
 800d430:	6054      	str	r4, [r2, #4]
 800d432:	e7c7      	b.n	800d3c4 <_free_r+0x28>
 800d434:	b003      	add	sp, #12
 800d436:	bd30      	pop	{r4, r5, pc}
 800d438:	2400c4f8 	.word	0x2400c4f8

0800d43c <_malloc_r>:
 800d43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43e:	1ccd      	adds	r5, r1, #3
 800d440:	f025 0503 	bic.w	r5, r5, #3
 800d444:	3508      	adds	r5, #8
 800d446:	2d0c      	cmp	r5, #12
 800d448:	bf38      	it	cc
 800d44a:	250c      	movcc	r5, #12
 800d44c:	2d00      	cmp	r5, #0
 800d44e:	4606      	mov	r6, r0
 800d450:	db01      	blt.n	800d456 <_malloc_r+0x1a>
 800d452:	42a9      	cmp	r1, r5
 800d454:	d903      	bls.n	800d45e <_malloc_r+0x22>
 800d456:	230c      	movs	r3, #12
 800d458:	6033      	str	r3, [r6, #0]
 800d45a:	2000      	movs	r0, #0
 800d45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d45e:	f001 facd 	bl	800e9fc <__malloc_lock>
 800d462:	4921      	ldr	r1, [pc, #132]	; (800d4e8 <_malloc_r+0xac>)
 800d464:	680a      	ldr	r2, [r1, #0]
 800d466:	4614      	mov	r4, r2
 800d468:	b99c      	cbnz	r4, 800d492 <_malloc_r+0x56>
 800d46a:	4f20      	ldr	r7, [pc, #128]	; (800d4ec <_malloc_r+0xb0>)
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	b923      	cbnz	r3, 800d47a <_malloc_r+0x3e>
 800d470:	4621      	mov	r1, r4
 800d472:	4630      	mov	r0, r6
 800d474:	f000 fc7e 	bl	800dd74 <_sbrk_r>
 800d478:	6038      	str	r0, [r7, #0]
 800d47a:	4629      	mov	r1, r5
 800d47c:	4630      	mov	r0, r6
 800d47e:	f000 fc79 	bl	800dd74 <_sbrk_r>
 800d482:	1c43      	adds	r3, r0, #1
 800d484:	d123      	bne.n	800d4ce <_malloc_r+0x92>
 800d486:	230c      	movs	r3, #12
 800d488:	6033      	str	r3, [r6, #0]
 800d48a:	4630      	mov	r0, r6
 800d48c:	f001 fabc 	bl	800ea08 <__malloc_unlock>
 800d490:	e7e3      	b.n	800d45a <_malloc_r+0x1e>
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	1b5b      	subs	r3, r3, r5
 800d496:	d417      	bmi.n	800d4c8 <_malloc_r+0x8c>
 800d498:	2b0b      	cmp	r3, #11
 800d49a:	d903      	bls.n	800d4a4 <_malloc_r+0x68>
 800d49c:	6023      	str	r3, [r4, #0]
 800d49e:	441c      	add	r4, r3
 800d4a0:	6025      	str	r5, [r4, #0]
 800d4a2:	e004      	b.n	800d4ae <_malloc_r+0x72>
 800d4a4:	6863      	ldr	r3, [r4, #4]
 800d4a6:	42a2      	cmp	r2, r4
 800d4a8:	bf0c      	ite	eq
 800d4aa:	600b      	streq	r3, [r1, #0]
 800d4ac:	6053      	strne	r3, [r2, #4]
 800d4ae:	4630      	mov	r0, r6
 800d4b0:	f001 faaa 	bl	800ea08 <__malloc_unlock>
 800d4b4:	f104 000b 	add.w	r0, r4, #11
 800d4b8:	1d23      	adds	r3, r4, #4
 800d4ba:	f020 0007 	bic.w	r0, r0, #7
 800d4be:	1ac2      	subs	r2, r0, r3
 800d4c0:	d0cc      	beq.n	800d45c <_malloc_r+0x20>
 800d4c2:	1a1b      	subs	r3, r3, r0
 800d4c4:	50a3      	str	r3, [r4, r2]
 800d4c6:	e7c9      	b.n	800d45c <_malloc_r+0x20>
 800d4c8:	4622      	mov	r2, r4
 800d4ca:	6864      	ldr	r4, [r4, #4]
 800d4cc:	e7cc      	b.n	800d468 <_malloc_r+0x2c>
 800d4ce:	1cc4      	adds	r4, r0, #3
 800d4d0:	f024 0403 	bic.w	r4, r4, #3
 800d4d4:	42a0      	cmp	r0, r4
 800d4d6:	d0e3      	beq.n	800d4a0 <_malloc_r+0x64>
 800d4d8:	1a21      	subs	r1, r4, r0
 800d4da:	4630      	mov	r0, r6
 800d4dc:	f000 fc4a 	bl	800dd74 <_sbrk_r>
 800d4e0:	3001      	adds	r0, #1
 800d4e2:	d1dd      	bne.n	800d4a0 <_malloc_r+0x64>
 800d4e4:	e7cf      	b.n	800d486 <_malloc_r+0x4a>
 800d4e6:	bf00      	nop
 800d4e8:	2400c4f8 	.word	0x2400c4f8
 800d4ec:	2400c4fc 	.word	0x2400c4fc

0800d4f0 <__cvt>:
 800d4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4f2:	ed2d 8b02 	vpush	{d8}
 800d4f6:	eeb0 8b40 	vmov.f64	d8, d0
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	4617      	mov	r7, r2
 800d4fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d500:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d502:	ee18 2a90 	vmov	r2, s17
 800d506:	f025 0520 	bic.w	r5, r5, #32
 800d50a:	2a00      	cmp	r2, #0
 800d50c:	bfb6      	itet	lt
 800d50e:	222d      	movlt	r2, #45	; 0x2d
 800d510:	2200      	movge	r2, #0
 800d512:	eeb1 8b40 	vneglt.f64	d8, d0
 800d516:	2d46      	cmp	r5, #70	; 0x46
 800d518:	460c      	mov	r4, r1
 800d51a:	701a      	strb	r2, [r3, #0]
 800d51c:	d004      	beq.n	800d528 <__cvt+0x38>
 800d51e:	2d45      	cmp	r5, #69	; 0x45
 800d520:	d100      	bne.n	800d524 <__cvt+0x34>
 800d522:	3401      	adds	r4, #1
 800d524:	2102      	movs	r1, #2
 800d526:	e000      	b.n	800d52a <__cvt+0x3a>
 800d528:	2103      	movs	r1, #3
 800d52a:	ab03      	add	r3, sp, #12
 800d52c:	9301      	str	r3, [sp, #4]
 800d52e:	ab02      	add	r3, sp, #8
 800d530:	9300      	str	r3, [sp, #0]
 800d532:	4622      	mov	r2, r4
 800d534:	4633      	mov	r3, r6
 800d536:	eeb0 0b48 	vmov.f64	d0, d8
 800d53a:	f000 fcd9 	bl	800def0 <_dtoa_r>
 800d53e:	2d47      	cmp	r5, #71	; 0x47
 800d540:	d109      	bne.n	800d556 <__cvt+0x66>
 800d542:	07fb      	lsls	r3, r7, #31
 800d544:	d407      	bmi.n	800d556 <__cvt+0x66>
 800d546:	9b03      	ldr	r3, [sp, #12]
 800d548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d54a:	1a1b      	subs	r3, r3, r0
 800d54c:	6013      	str	r3, [r2, #0]
 800d54e:	b005      	add	sp, #20
 800d550:	ecbd 8b02 	vpop	{d8}
 800d554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d556:	2d46      	cmp	r5, #70	; 0x46
 800d558:	eb00 0204 	add.w	r2, r0, r4
 800d55c:	d10c      	bne.n	800d578 <__cvt+0x88>
 800d55e:	7803      	ldrb	r3, [r0, #0]
 800d560:	2b30      	cmp	r3, #48	; 0x30
 800d562:	d107      	bne.n	800d574 <__cvt+0x84>
 800d564:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d56c:	bf1c      	itt	ne
 800d56e:	f1c4 0401 	rsbne	r4, r4, #1
 800d572:	6034      	strne	r4, [r6, #0]
 800d574:	6833      	ldr	r3, [r6, #0]
 800d576:	441a      	add	r2, r3
 800d578:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d580:	bf08      	it	eq
 800d582:	9203      	streq	r2, [sp, #12]
 800d584:	2130      	movs	r1, #48	; 0x30
 800d586:	9b03      	ldr	r3, [sp, #12]
 800d588:	4293      	cmp	r3, r2
 800d58a:	d2dc      	bcs.n	800d546 <__cvt+0x56>
 800d58c:	1c5c      	adds	r4, r3, #1
 800d58e:	9403      	str	r4, [sp, #12]
 800d590:	7019      	strb	r1, [r3, #0]
 800d592:	e7f8      	b.n	800d586 <__cvt+0x96>

0800d594 <__exponent>:
 800d594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d596:	4603      	mov	r3, r0
 800d598:	2900      	cmp	r1, #0
 800d59a:	bfb8      	it	lt
 800d59c:	4249      	neglt	r1, r1
 800d59e:	f803 2b02 	strb.w	r2, [r3], #2
 800d5a2:	bfb4      	ite	lt
 800d5a4:	222d      	movlt	r2, #45	; 0x2d
 800d5a6:	222b      	movge	r2, #43	; 0x2b
 800d5a8:	2909      	cmp	r1, #9
 800d5aa:	7042      	strb	r2, [r0, #1]
 800d5ac:	dd2a      	ble.n	800d604 <__exponent+0x70>
 800d5ae:	f10d 0407 	add.w	r4, sp, #7
 800d5b2:	46a4      	mov	ip, r4
 800d5b4:	270a      	movs	r7, #10
 800d5b6:	46a6      	mov	lr, r4
 800d5b8:	460a      	mov	r2, r1
 800d5ba:	fb91 f6f7 	sdiv	r6, r1, r7
 800d5be:	fb07 1516 	mls	r5, r7, r6, r1
 800d5c2:	3530      	adds	r5, #48	; 0x30
 800d5c4:	2a63      	cmp	r2, #99	; 0x63
 800d5c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800d5ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d5ce:	4631      	mov	r1, r6
 800d5d0:	dcf1      	bgt.n	800d5b6 <__exponent+0x22>
 800d5d2:	3130      	adds	r1, #48	; 0x30
 800d5d4:	f1ae 0502 	sub.w	r5, lr, #2
 800d5d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d5dc:	1c44      	adds	r4, r0, #1
 800d5de:	4629      	mov	r1, r5
 800d5e0:	4561      	cmp	r1, ip
 800d5e2:	d30a      	bcc.n	800d5fa <__exponent+0x66>
 800d5e4:	f10d 0209 	add.w	r2, sp, #9
 800d5e8:	eba2 020e 	sub.w	r2, r2, lr
 800d5ec:	4565      	cmp	r5, ip
 800d5ee:	bf88      	it	hi
 800d5f0:	2200      	movhi	r2, #0
 800d5f2:	4413      	add	r3, r2
 800d5f4:	1a18      	subs	r0, r3, r0
 800d5f6:	b003      	add	sp, #12
 800d5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d602:	e7ed      	b.n	800d5e0 <__exponent+0x4c>
 800d604:	2330      	movs	r3, #48	; 0x30
 800d606:	3130      	adds	r1, #48	; 0x30
 800d608:	7083      	strb	r3, [r0, #2]
 800d60a:	70c1      	strb	r1, [r0, #3]
 800d60c:	1d03      	adds	r3, r0, #4
 800d60e:	e7f1      	b.n	800d5f4 <__exponent+0x60>

0800d610 <_printf_float>:
 800d610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d614:	b08b      	sub	sp, #44	; 0x2c
 800d616:	460c      	mov	r4, r1
 800d618:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d61c:	4616      	mov	r6, r2
 800d61e:	461f      	mov	r7, r3
 800d620:	4605      	mov	r5, r0
 800d622:	f001 f9e7 	bl	800e9f4 <_localeconv_r>
 800d626:	f8d0 b000 	ldr.w	fp, [r0]
 800d62a:	4658      	mov	r0, fp
 800d62c:	f7f2 fe60 	bl	80002f0 <strlen>
 800d630:	2300      	movs	r3, #0
 800d632:	9308      	str	r3, [sp, #32]
 800d634:	f8d8 3000 	ldr.w	r3, [r8]
 800d638:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d63c:	6822      	ldr	r2, [r4, #0]
 800d63e:	3307      	adds	r3, #7
 800d640:	f023 0307 	bic.w	r3, r3, #7
 800d644:	f103 0108 	add.w	r1, r3, #8
 800d648:	f8c8 1000 	str.w	r1, [r8]
 800d64c:	4682      	mov	sl, r0
 800d64e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d652:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d656:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d8b8 <_printf_float+0x2a8>
 800d65a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d65e:	eeb0 6bc0 	vabs.f64	d6, d0
 800d662:	eeb4 6b47 	vcmp.f64	d6, d7
 800d666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d66a:	dd24      	ble.n	800d6b6 <_printf_float+0xa6>
 800d66c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d674:	d502      	bpl.n	800d67c <_printf_float+0x6c>
 800d676:	232d      	movs	r3, #45	; 0x2d
 800d678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d67c:	4b90      	ldr	r3, [pc, #576]	; (800d8c0 <_printf_float+0x2b0>)
 800d67e:	4891      	ldr	r0, [pc, #580]	; (800d8c4 <_printf_float+0x2b4>)
 800d680:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d684:	bf94      	ite	ls
 800d686:	4698      	movls	r8, r3
 800d688:	4680      	movhi	r8, r0
 800d68a:	2303      	movs	r3, #3
 800d68c:	6123      	str	r3, [r4, #16]
 800d68e:	f022 0204 	bic.w	r2, r2, #4
 800d692:	2300      	movs	r3, #0
 800d694:	6022      	str	r2, [r4, #0]
 800d696:	9304      	str	r3, [sp, #16]
 800d698:	9700      	str	r7, [sp, #0]
 800d69a:	4633      	mov	r3, r6
 800d69c:	aa09      	add	r2, sp, #36	; 0x24
 800d69e:	4621      	mov	r1, r4
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	f000 f9d3 	bl	800da4c <_printf_common>
 800d6a6:	3001      	adds	r0, #1
 800d6a8:	f040 808a 	bne.w	800d7c0 <_printf_float+0x1b0>
 800d6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b0:	b00b      	add	sp, #44	; 0x2c
 800d6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b6:	eeb4 0b40 	vcmp.f64	d0, d0
 800d6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6be:	d709      	bvc.n	800d6d4 <_printf_float+0xc4>
 800d6c0:	ee10 3a90 	vmov	r3, s1
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	bfbc      	itt	lt
 800d6c8:	232d      	movlt	r3, #45	; 0x2d
 800d6ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d6ce:	487e      	ldr	r0, [pc, #504]	; (800d8c8 <_printf_float+0x2b8>)
 800d6d0:	4b7e      	ldr	r3, [pc, #504]	; (800d8cc <_printf_float+0x2bc>)
 800d6d2:	e7d5      	b.n	800d680 <_printf_float+0x70>
 800d6d4:	6863      	ldr	r3, [r4, #4]
 800d6d6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d6da:	9104      	str	r1, [sp, #16]
 800d6dc:	1c59      	adds	r1, r3, #1
 800d6de:	d13c      	bne.n	800d75a <_printf_float+0x14a>
 800d6e0:	2306      	movs	r3, #6
 800d6e2:	6063      	str	r3, [r4, #4]
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	9303      	str	r3, [sp, #12]
 800d6e8:	ab08      	add	r3, sp, #32
 800d6ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d6ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d6f2:	ab07      	add	r3, sp, #28
 800d6f4:	6861      	ldr	r1, [r4, #4]
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	6022      	str	r2, [r4, #0]
 800d6fa:	f10d 031b 	add.w	r3, sp, #27
 800d6fe:	4628      	mov	r0, r5
 800d700:	f7ff fef6 	bl	800d4f0 <__cvt>
 800d704:	9b04      	ldr	r3, [sp, #16]
 800d706:	9907      	ldr	r1, [sp, #28]
 800d708:	2b47      	cmp	r3, #71	; 0x47
 800d70a:	4680      	mov	r8, r0
 800d70c:	d108      	bne.n	800d720 <_printf_float+0x110>
 800d70e:	1cc8      	adds	r0, r1, #3
 800d710:	db02      	blt.n	800d718 <_printf_float+0x108>
 800d712:	6863      	ldr	r3, [r4, #4]
 800d714:	4299      	cmp	r1, r3
 800d716:	dd41      	ble.n	800d79c <_printf_float+0x18c>
 800d718:	f1a9 0902 	sub.w	r9, r9, #2
 800d71c:	fa5f f989 	uxtb.w	r9, r9
 800d720:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d724:	d820      	bhi.n	800d768 <_printf_float+0x158>
 800d726:	3901      	subs	r1, #1
 800d728:	464a      	mov	r2, r9
 800d72a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d72e:	9107      	str	r1, [sp, #28]
 800d730:	f7ff ff30 	bl	800d594 <__exponent>
 800d734:	9a08      	ldr	r2, [sp, #32]
 800d736:	9004      	str	r0, [sp, #16]
 800d738:	1813      	adds	r3, r2, r0
 800d73a:	2a01      	cmp	r2, #1
 800d73c:	6123      	str	r3, [r4, #16]
 800d73e:	dc02      	bgt.n	800d746 <_printf_float+0x136>
 800d740:	6822      	ldr	r2, [r4, #0]
 800d742:	07d2      	lsls	r2, r2, #31
 800d744:	d501      	bpl.n	800d74a <_printf_float+0x13a>
 800d746:	3301      	adds	r3, #1
 800d748:	6123      	str	r3, [r4, #16]
 800d74a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d0a2      	beq.n	800d698 <_printf_float+0x88>
 800d752:	232d      	movs	r3, #45	; 0x2d
 800d754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d758:	e79e      	b.n	800d698 <_printf_float+0x88>
 800d75a:	9904      	ldr	r1, [sp, #16]
 800d75c:	2947      	cmp	r1, #71	; 0x47
 800d75e:	d1c1      	bne.n	800d6e4 <_printf_float+0xd4>
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1bf      	bne.n	800d6e4 <_printf_float+0xd4>
 800d764:	2301      	movs	r3, #1
 800d766:	e7bc      	b.n	800d6e2 <_printf_float+0xd2>
 800d768:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d76c:	d118      	bne.n	800d7a0 <_printf_float+0x190>
 800d76e:	2900      	cmp	r1, #0
 800d770:	6863      	ldr	r3, [r4, #4]
 800d772:	dd0b      	ble.n	800d78c <_printf_float+0x17c>
 800d774:	6121      	str	r1, [r4, #16]
 800d776:	b913      	cbnz	r3, 800d77e <_printf_float+0x16e>
 800d778:	6822      	ldr	r2, [r4, #0]
 800d77a:	07d0      	lsls	r0, r2, #31
 800d77c:	d502      	bpl.n	800d784 <_printf_float+0x174>
 800d77e:	3301      	adds	r3, #1
 800d780:	440b      	add	r3, r1
 800d782:	6123      	str	r3, [r4, #16]
 800d784:	2300      	movs	r3, #0
 800d786:	65a1      	str	r1, [r4, #88]	; 0x58
 800d788:	9304      	str	r3, [sp, #16]
 800d78a:	e7de      	b.n	800d74a <_printf_float+0x13a>
 800d78c:	b913      	cbnz	r3, 800d794 <_printf_float+0x184>
 800d78e:	6822      	ldr	r2, [r4, #0]
 800d790:	07d2      	lsls	r2, r2, #31
 800d792:	d501      	bpl.n	800d798 <_printf_float+0x188>
 800d794:	3302      	adds	r3, #2
 800d796:	e7f4      	b.n	800d782 <_printf_float+0x172>
 800d798:	2301      	movs	r3, #1
 800d79a:	e7f2      	b.n	800d782 <_printf_float+0x172>
 800d79c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d7a0:	9b08      	ldr	r3, [sp, #32]
 800d7a2:	4299      	cmp	r1, r3
 800d7a4:	db05      	blt.n	800d7b2 <_printf_float+0x1a2>
 800d7a6:	6823      	ldr	r3, [r4, #0]
 800d7a8:	6121      	str	r1, [r4, #16]
 800d7aa:	07d8      	lsls	r0, r3, #31
 800d7ac:	d5ea      	bpl.n	800d784 <_printf_float+0x174>
 800d7ae:	1c4b      	adds	r3, r1, #1
 800d7b0:	e7e7      	b.n	800d782 <_printf_float+0x172>
 800d7b2:	2900      	cmp	r1, #0
 800d7b4:	bfd4      	ite	le
 800d7b6:	f1c1 0202 	rsble	r2, r1, #2
 800d7ba:	2201      	movgt	r2, #1
 800d7bc:	4413      	add	r3, r2
 800d7be:	e7e0      	b.n	800d782 <_printf_float+0x172>
 800d7c0:	6823      	ldr	r3, [r4, #0]
 800d7c2:	055a      	lsls	r2, r3, #21
 800d7c4:	d407      	bmi.n	800d7d6 <_printf_float+0x1c6>
 800d7c6:	6923      	ldr	r3, [r4, #16]
 800d7c8:	4642      	mov	r2, r8
 800d7ca:	4631      	mov	r1, r6
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	47b8      	blx	r7
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	d12a      	bne.n	800d82a <_printf_float+0x21a>
 800d7d4:	e76a      	b.n	800d6ac <_printf_float+0x9c>
 800d7d6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d7da:	f240 80e2 	bls.w	800d9a2 <_printf_float+0x392>
 800d7de:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d7e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ea:	d133      	bne.n	800d854 <_printf_float+0x244>
 800d7ec:	4a38      	ldr	r2, [pc, #224]	; (800d8d0 <_printf_float+0x2c0>)
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	4631      	mov	r1, r6
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	47b8      	blx	r7
 800d7f6:	3001      	adds	r0, #1
 800d7f8:	f43f af58 	beq.w	800d6ac <_printf_float+0x9c>
 800d7fc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d800:	429a      	cmp	r2, r3
 800d802:	db02      	blt.n	800d80a <_printf_float+0x1fa>
 800d804:	6823      	ldr	r3, [r4, #0]
 800d806:	07d8      	lsls	r0, r3, #31
 800d808:	d50f      	bpl.n	800d82a <_printf_float+0x21a>
 800d80a:	4653      	mov	r3, sl
 800d80c:	465a      	mov	r2, fp
 800d80e:	4631      	mov	r1, r6
 800d810:	4628      	mov	r0, r5
 800d812:	47b8      	blx	r7
 800d814:	3001      	adds	r0, #1
 800d816:	f43f af49 	beq.w	800d6ac <_printf_float+0x9c>
 800d81a:	f04f 0800 	mov.w	r8, #0
 800d81e:	f104 091a 	add.w	r9, r4, #26
 800d822:	9b08      	ldr	r3, [sp, #32]
 800d824:	3b01      	subs	r3, #1
 800d826:	4543      	cmp	r3, r8
 800d828:	dc09      	bgt.n	800d83e <_printf_float+0x22e>
 800d82a:	6823      	ldr	r3, [r4, #0]
 800d82c:	079b      	lsls	r3, r3, #30
 800d82e:	f100 8108 	bmi.w	800da42 <_printf_float+0x432>
 800d832:	68e0      	ldr	r0, [r4, #12]
 800d834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d836:	4298      	cmp	r0, r3
 800d838:	bfb8      	it	lt
 800d83a:	4618      	movlt	r0, r3
 800d83c:	e738      	b.n	800d6b0 <_printf_float+0xa0>
 800d83e:	2301      	movs	r3, #1
 800d840:	464a      	mov	r2, r9
 800d842:	4631      	mov	r1, r6
 800d844:	4628      	mov	r0, r5
 800d846:	47b8      	blx	r7
 800d848:	3001      	adds	r0, #1
 800d84a:	f43f af2f 	beq.w	800d6ac <_printf_float+0x9c>
 800d84e:	f108 0801 	add.w	r8, r8, #1
 800d852:	e7e6      	b.n	800d822 <_printf_float+0x212>
 800d854:	9b07      	ldr	r3, [sp, #28]
 800d856:	2b00      	cmp	r3, #0
 800d858:	dc3c      	bgt.n	800d8d4 <_printf_float+0x2c4>
 800d85a:	4a1d      	ldr	r2, [pc, #116]	; (800d8d0 <_printf_float+0x2c0>)
 800d85c:	2301      	movs	r3, #1
 800d85e:	4631      	mov	r1, r6
 800d860:	4628      	mov	r0, r5
 800d862:	47b8      	blx	r7
 800d864:	3001      	adds	r0, #1
 800d866:	f43f af21 	beq.w	800d6ac <_printf_float+0x9c>
 800d86a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d86e:	4313      	orrs	r3, r2
 800d870:	d102      	bne.n	800d878 <_printf_float+0x268>
 800d872:	6823      	ldr	r3, [r4, #0]
 800d874:	07d9      	lsls	r1, r3, #31
 800d876:	d5d8      	bpl.n	800d82a <_printf_float+0x21a>
 800d878:	4653      	mov	r3, sl
 800d87a:	465a      	mov	r2, fp
 800d87c:	4631      	mov	r1, r6
 800d87e:	4628      	mov	r0, r5
 800d880:	47b8      	blx	r7
 800d882:	3001      	adds	r0, #1
 800d884:	f43f af12 	beq.w	800d6ac <_printf_float+0x9c>
 800d888:	f04f 0900 	mov.w	r9, #0
 800d88c:	f104 0a1a 	add.w	sl, r4, #26
 800d890:	9b07      	ldr	r3, [sp, #28]
 800d892:	425b      	negs	r3, r3
 800d894:	454b      	cmp	r3, r9
 800d896:	dc01      	bgt.n	800d89c <_printf_float+0x28c>
 800d898:	9b08      	ldr	r3, [sp, #32]
 800d89a:	e795      	b.n	800d7c8 <_printf_float+0x1b8>
 800d89c:	2301      	movs	r3, #1
 800d89e:	4652      	mov	r2, sl
 800d8a0:	4631      	mov	r1, r6
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	47b8      	blx	r7
 800d8a6:	3001      	adds	r0, #1
 800d8a8:	f43f af00 	beq.w	800d6ac <_printf_float+0x9c>
 800d8ac:	f109 0901 	add.w	r9, r9, #1
 800d8b0:	e7ee      	b.n	800d890 <_printf_float+0x280>
 800d8b2:	bf00      	nop
 800d8b4:	f3af 8000 	nop.w
 800d8b8:	ffffffff 	.word	0xffffffff
 800d8bc:	7fefffff 	.word	0x7fefffff
 800d8c0:	0806ecb4 	.word	0x0806ecb4
 800d8c4:	0806ecb8 	.word	0x0806ecb8
 800d8c8:	0806ecc0 	.word	0x0806ecc0
 800d8cc:	0806ecbc 	.word	0x0806ecbc
 800d8d0:	0806ecc4 	.word	0x0806ecc4
 800d8d4:	9a08      	ldr	r2, [sp, #32]
 800d8d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	bfa8      	it	ge
 800d8dc:	461a      	movge	r2, r3
 800d8de:	2a00      	cmp	r2, #0
 800d8e0:	4691      	mov	r9, r2
 800d8e2:	dc38      	bgt.n	800d956 <_printf_float+0x346>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	9305      	str	r3, [sp, #20]
 800d8e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8ec:	f104 021a 	add.w	r2, r4, #26
 800d8f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8f2:	9905      	ldr	r1, [sp, #20]
 800d8f4:	9304      	str	r3, [sp, #16]
 800d8f6:	eba3 0309 	sub.w	r3, r3, r9
 800d8fa:	428b      	cmp	r3, r1
 800d8fc:	dc33      	bgt.n	800d966 <_printf_float+0x356>
 800d8fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d902:	429a      	cmp	r2, r3
 800d904:	db3c      	blt.n	800d980 <_printf_float+0x370>
 800d906:	6823      	ldr	r3, [r4, #0]
 800d908:	07da      	lsls	r2, r3, #31
 800d90a:	d439      	bmi.n	800d980 <_printf_float+0x370>
 800d90c:	9a08      	ldr	r2, [sp, #32]
 800d90e:	9b04      	ldr	r3, [sp, #16]
 800d910:	9907      	ldr	r1, [sp, #28]
 800d912:	1ad3      	subs	r3, r2, r3
 800d914:	eba2 0901 	sub.w	r9, r2, r1
 800d918:	4599      	cmp	r9, r3
 800d91a:	bfa8      	it	ge
 800d91c:	4699      	movge	r9, r3
 800d91e:	f1b9 0f00 	cmp.w	r9, #0
 800d922:	dc35      	bgt.n	800d990 <_printf_float+0x380>
 800d924:	f04f 0800 	mov.w	r8, #0
 800d928:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d92c:	f104 0a1a 	add.w	sl, r4, #26
 800d930:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d934:	1a9b      	subs	r3, r3, r2
 800d936:	eba3 0309 	sub.w	r3, r3, r9
 800d93a:	4543      	cmp	r3, r8
 800d93c:	f77f af75 	ble.w	800d82a <_printf_float+0x21a>
 800d940:	2301      	movs	r3, #1
 800d942:	4652      	mov	r2, sl
 800d944:	4631      	mov	r1, r6
 800d946:	4628      	mov	r0, r5
 800d948:	47b8      	blx	r7
 800d94a:	3001      	adds	r0, #1
 800d94c:	f43f aeae 	beq.w	800d6ac <_printf_float+0x9c>
 800d950:	f108 0801 	add.w	r8, r8, #1
 800d954:	e7ec      	b.n	800d930 <_printf_float+0x320>
 800d956:	4613      	mov	r3, r2
 800d958:	4631      	mov	r1, r6
 800d95a:	4642      	mov	r2, r8
 800d95c:	4628      	mov	r0, r5
 800d95e:	47b8      	blx	r7
 800d960:	3001      	adds	r0, #1
 800d962:	d1bf      	bne.n	800d8e4 <_printf_float+0x2d4>
 800d964:	e6a2      	b.n	800d6ac <_printf_float+0x9c>
 800d966:	2301      	movs	r3, #1
 800d968:	4631      	mov	r1, r6
 800d96a:	4628      	mov	r0, r5
 800d96c:	9204      	str	r2, [sp, #16]
 800d96e:	47b8      	blx	r7
 800d970:	3001      	adds	r0, #1
 800d972:	f43f ae9b 	beq.w	800d6ac <_printf_float+0x9c>
 800d976:	9b05      	ldr	r3, [sp, #20]
 800d978:	9a04      	ldr	r2, [sp, #16]
 800d97a:	3301      	adds	r3, #1
 800d97c:	9305      	str	r3, [sp, #20]
 800d97e:	e7b7      	b.n	800d8f0 <_printf_float+0x2e0>
 800d980:	4653      	mov	r3, sl
 800d982:	465a      	mov	r2, fp
 800d984:	4631      	mov	r1, r6
 800d986:	4628      	mov	r0, r5
 800d988:	47b8      	blx	r7
 800d98a:	3001      	adds	r0, #1
 800d98c:	d1be      	bne.n	800d90c <_printf_float+0x2fc>
 800d98e:	e68d      	b.n	800d6ac <_printf_float+0x9c>
 800d990:	9a04      	ldr	r2, [sp, #16]
 800d992:	464b      	mov	r3, r9
 800d994:	4442      	add	r2, r8
 800d996:	4631      	mov	r1, r6
 800d998:	4628      	mov	r0, r5
 800d99a:	47b8      	blx	r7
 800d99c:	3001      	adds	r0, #1
 800d99e:	d1c1      	bne.n	800d924 <_printf_float+0x314>
 800d9a0:	e684      	b.n	800d6ac <_printf_float+0x9c>
 800d9a2:	9a08      	ldr	r2, [sp, #32]
 800d9a4:	2a01      	cmp	r2, #1
 800d9a6:	dc01      	bgt.n	800d9ac <_printf_float+0x39c>
 800d9a8:	07db      	lsls	r3, r3, #31
 800d9aa:	d537      	bpl.n	800da1c <_printf_float+0x40c>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	4642      	mov	r2, r8
 800d9b0:	4631      	mov	r1, r6
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	47b8      	blx	r7
 800d9b6:	3001      	adds	r0, #1
 800d9b8:	f43f ae78 	beq.w	800d6ac <_printf_float+0x9c>
 800d9bc:	4653      	mov	r3, sl
 800d9be:	465a      	mov	r2, fp
 800d9c0:	4631      	mov	r1, r6
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	47b8      	blx	r7
 800d9c6:	3001      	adds	r0, #1
 800d9c8:	f43f ae70 	beq.w	800d6ac <_printf_float+0x9c>
 800d9cc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d9d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d8:	d01b      	beq.n	800da12 <_printf_float+0x402>
 800d9da:	9b08      	ldr	r3, [sp, #32]
 800d9dc:	f108 0201 	add.w	r2, r8, #1
 800d9e0:	3b01      	subs	r3, #1
 800d9e2:	4631      	mov	r1, r6
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	47b8      	blx	r7
 800d9e8:	3001      	adds	r0, #1
 800d9ea:	d10e      	bne.n	800da0a <_printf_float+0x3fa>
 800d9ec:	e65e      	b.n	800d6ac <_printf_float+0x9c>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	464a      	mov	r2, r9
 800d9f2:	4631      	mov	r1, r6
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	47b8      	blx	r7
 800d9f8:	3001      	adds	r0, #1
 800d9fa:	f43f ae57 	beq.w	800d6ac <_printf_float+0x9c>
 800d9fe:	f108 0801 	add.w	r8, r8, #1
 800da02:	9b08      	ldr	r3, [sp, #32]
 800da04:	3b01      	subs	r3, #1
 800da06:	4543      	cmp	r3, r8
 800da08:	dcf1      	bgt.n	800d9ee <_printf_float+0x3de>
 800da0a:	9b04      	ldr	r3, [sp, #16]
 800da0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800da10:	e6db      	b.n	800d7ca <_printf_float+0x1ba>
 800da12:	f04f 0800 	mov.w	r8, #0
 800da16:	f104 091a 	add.w	r9, r4, #26
 800da1a:	e7f2      	b.n	800da02 <_printf_float+0x3f2>
 800da1c:	2301      	movs	r3, #1
 800da1e:	4642      	mov	r2, r8
 800da20:	e7df      	b.n	800d9e2 <_printf_float+0x3d2>
 800da22:	2301      	movs	r3, #1
 800da24:	464a      	mov	r2, r9
 800da26:	4631      	mov	r1, r6
 800da28:	4628      	mov	r0, r5
 800da2a:	47b8      	blx	r7
 800da2c:	3001      	adds	r0, #1
 800da2e:	f43f ae3d 	beq.w	800d6ac <_printf_float+0x9c>
 800da32:	f108 0801 	add.w	r8, r8, #1
 800da36:	68e3      	ldr	r3, [r4, #12]
 800da38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da3a:	1a5b      	subs	r3, r3, r1
 800da3c:	4543      	cmp	r3, r8
 800da3e:	dcf0      	bgt.n	800da22 <_printf_float+0x412>
 800da40:	e6f7      	b.n	800d832 <_printf_float+0x222>
 800da42:	f04f 0800 	mov.w	r8, #0
 800da46:	f104 0919 	add.w	r9, r4, #25
 800da4a:	e7f4      	b.n	800da36 <_printf_float+0x426>

0800da4c <_printf_common>:
 800da4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da50:	4616      	mov	r6, r2
 800da52:	4699      	mov	r9, r3
 800da54:	688a      	ldr	r2, [r1, #8]
 800da56:	690b      	ldr	r3, [r1, #16]
 800da58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da5c:	4293      	cmp	r3, r2
 800da5e:	bfb8      	it	lt
 800da60:	4613      	movlt	r3, r2
 800da62:	6033      	str	r3, [r6, #0]
 800da64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da68:	4607      	mov	r7, r0
 800da6a:	460c      	mov	r4, r1
 800da6c:	b10a      	cbz	r2, 800da72 <_printf_common+0x26>
 800da6e:	3301      	adds	r3, #1
 800da70:	6033      	str	r3, [r6, #0]
 800da72:	6823      	ldr	r3, [r4, #0]
 800da74:	0699      	lsls	r1, r3, #26
 800da76:	bf42      	ittt	mi
 800da78:	6833      	ldrmi	r3, [r6, #0]
 800da7a:	3302      	addmi	r3, #2
 800da7c:	6033      	strmi	r3, [r6, #0]
 800da7e:	6825      	ldr	r5, [r4, #0]
 800da80:	f015 0506 	ands.w	r5, r5, #6
 800da84:	d106      	bne.n	800da94 <_printf_common+0x48>
 800da86:	f104 0a19 	add.w	sl, r4, #25
 800da8a:	68e3      	ldr	r3, [r4, #12]
 800da8c:	6832      	ldr	r2, [r6, #0]
 800da8e:	1a9b      	subs	r3, r3, r2
 800da90:	42ab      	cmp	r3, r5
 800da92:	dc26      	bgt.n	800dae2 <_printf_common+0x96>
 800da94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da98:	1e13      	subs	r3, r2, #0
 800da9a:	6822      	ldr	r2, [r4, #0]
 800da9c:	bf18      	it	ne
 800da9e:	2301      	movne	r3, #1
 800daa0:	0692      	lsls	r2, r2, #26
 800daa2:	d42b      	bmi.n	800dafc <_printf_common+0xb0>
 800daa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800daa8:	4649      	mov	r1, r9
 800daaa:	4638      	mov	r0, r7
 800daac:	47c0      	blx	r8
 800daae:	3001      	adds	r0, #1
 800dab0:	d01e      	beq.n	800daf0 <_printf_common+0xa4>
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	68e5      	ldr	r5, [r4, #12]
 800dab6:	6832      	ldr	r2, [r6, #0]
 800dab8:	f003 0306 	and.w	r3, r3, #6
 800dabc:	2b04      	cmp	r3, #4
 800dabe:	bf08      	it	eq
 800dac0:	1aad      	subeq	r5, r5, r2
 800dac2:	68a3      	ldr	r3, [r4, #8]
 800dac4:	6922      	ldr	r2, [r4, #16]
 800dac6:	bf0c      	ite	eq
 800dac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dacc:	2500      	movne	r5, #0
 800dace:	4293      	cmp	r3, r2
 800dad0:	bfc4      	itt	gt
 800dad2:	1a9b      	subgt	r3, r3, r2
 800dad4:	18ed      	addgt	r5, r5, r3
 800dad6:	2600      	movs	r6, #0
 800dad8:	341a      	adds	r4, #26
 800dada:	42b5      	cmp	r5, r6
 800dadc:	d11a      	bne.n	800db14 <_printf_common+0xc8>
 800dade:	2000      	movs	r0, #0
 800dae0:	e008      	b.n	800daf4 <_printf_common+0xa8>
 800dae2:	2301      	movs	r3, #1
 800dae4:	4652      	mov	r2, sl
 800dae6:	4649      	mov	r1, r9
 800dae8:	4638      	mov	r0, r7
 800daea:	47c0      	blx	r8
 800daec:	3001      	adds	r0, #1
 800daee:	d103      	bne.n	800daf8 <_printf_common+0xac>
 800daf0:	f04f 30ff 	mov.w	r0, #4294967295
 800daf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daf8:	3501      	adds	r5, #1
 800dafa:	e7c6      	b.n	800da8a <_printf_common+0x3e>
 800dafc:	18e1      	adds	r1, r4, r3
 800dafe:	1c5a      	adds	r2, r3, #1
 800db00:	2030      	movs	r0, #48	; 0x30
 800db02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db06:	4422      	add	r2, r4
 800db08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db10:	3302      	adds	r3, #2
 800db12:	e7c7      	b.n	800daa4 <_printf_common+0x58>
 800db14:	2301      	movs	r3, #1
 800db16:	4622      	mov	r2, r4
 800db18:	4649      	mov	r1, r9
 800db1a:	4638      	mov	r0, r7
 800db1c:	47c0      	blx	r8
 800db1e:	3001      	adds	r0, #1
 800db20:	d0e6      	beq.n	800daf0 <_printf_common+0xa4>
 800db22:	3601      	adds	r6, #1
 800db24:	e7d9      	b.n	800dada <_printf_common+0x8e>
	...

0800db28 <_printf_i>:
 800db28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db2c:	460c      	mov	r4, r1
 800db2e:	4691      	mov	r9, r2
 800db30:	7e27      	ldrb	r7, [r4, #24]
 800db32:	990c      	ldr	r1, [sp, #48]	; 0x30
 800db34:	2f78      	cmp	r7, #120	; 0x78
 800db36:	4680      	mov	r8, r0
 800db38:	469a      	mov	sl, r3
 800db3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db3e:	d807      	bhi.n	800db50 <_printf_i+0x28>
 800db40:	2f62      	cmp	r7, #98	; 0x62
 800db42:	d80a      	bhi.n	800db5a <_printf_i+0x32>
 800db44:	2f00      	cmp	r7, #0
 800db46:	f000 80d8 	beq.w	800dcfa <_printf_i+0x1d2>
 800db4a:	2f58      	cmp	r7, #88	; 0x58
 800db4c:	f000 80a3 	beq.w	800dc96 <_printf_i+0x16e>
 800db50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800db54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db58:	e03a      	b.n	800dbd0 <_printf_i+0xa8>
 800db5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db5e:	2b15      	cmp	r3, #21
 800db60:	d8f6      	bhi.n	800db50 <_printf_i+0x28>
 800db62:	a001      	add	r0, pc, #4	; (adr r0, 800db68 <_printf_i+0x40>)
 800db64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800db68:	0800dbc1 	.word	0x0800dbc1
 800db6c:	0800dbd5 	.word	0x0800dbd5
 800db70:	0800db51 	.word	0x0800db51
 800db74:	0800db51 	.word	0x0800db51
 800db78:	0800db51 	.word	0x0800db51
 800db7c:	0800db51 	.word	0x0800db51
 800db80:	0800dbd5 	.word	0x0800dbd5
 800db84:	0800db51 	.word	0x0800db51
 800db88:	0800db51 	.word	0x0800db51
 800db8c:	0800db51 	.word	0x0800db51
 800db90:	0800db51 	.word	0x0800db51
 800db94:	0800dce1 	.word	0x0800dce1
 800db98:	0800dc05 	.word	0x0800dc05
 800db9c:	0800dcc3 	.word	0x0800dcc3
 800dba0:	0800db51 	.word	0x0800db51
 800dba4:	0800db51 	.word	0x0800db51
 800dba8:	0800dd03 	.word	0x0800dd03
 800dbac:	0800db51 	.word	0x0800db51
 800dbb0:	0800dc05 	.word	0x0800dc05
 800dbb4:	0800db51 	.word	0x0800db51
 800dbb8:	0800db51 	.word	0x0800db51
 800dbbc:	0800dccb 	.word	0x0800dccb
 800dbc0:	680b      	ldr	r3, [r1, #0]
 800dbc2:	1d1a      	adds	r2, r3, #4
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	600a      	str	r2, [r1, #0]
 800dbc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dbcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e0a3      	b.n	800dd1c <_printf_i+0x1f4>
 800dbd4:	6825      	ldr	r5, [r4, #0]
 800dbd6:	6808      	ldr	r0, [r1, #0]
 800dbd8:	062e      	lsls	r6, r5, #24
 800dbda:	f100 0304 	add.w	r3, r0, #4
 800dbde:	d50a      	bpl.n	800dbf6 <_printf_i+0xce>
 800dbe0:	6805      	ldr	r5, [r0, #0]
 800dbe2:	600b      	str	r3, [r1, #0]
 800dbe4:	2d00      	cmp	r5, #0
 800dbe6:	da03      	bge.n	800dbf0 <_printf_i+0xc8>
 800dbe8:	232d      	movs	r3, #45	; 0x2d
 800dbea:	426d      	negs	r5, r5
 800dbec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbf0:	485e      	ldr	r0, [pc, #376]	; (800dd6c <_printf_i+0x244>)
 800dbf2:	230a      	movs	r3, #10
 800dbf4:	e019      	b.n	800dc2a <_printf_i+0x102>
 800dbf6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800dbfa:	6805      	ldr	r5, [r0, #0]
 800dbfc:	600b      	str	r3, [r1, #0]
 800dbfe:	bf18      	it	ne
 800dc00:	b22d      	sxthne	r5, r5
 800dc02:	e7ef      	b.n	800dbe4 <_printf_i+0xbc>
 800dc04:	680b      	ldr	r3, [r1, #0]
 800dc06:	6825      	ldr	r5, [r4, #0]
 800dc08:	1d18      	adds	r0, r3, #4
 800dc0a:	6008      	str	r0, [r1, #0]
 800dc0c:	0628      	lsls	r0, r5, #24
 800dc0e:	d501      	bpl.n	800dc14 <_printf_i+0xec>
 800dc10:	681d      	ldr	r5, [r3, #0]
 800dc12:	e002      	b.n	800dc1a <_printf_i+0xf2>
 800dc14:	0669      	lsls	r1, r5, #25
 800dc16:	d5fb      	bpl.n	800dc10 <_printf_i+0xe8>
 800dc18:	881d      	ldrh	r5, [r3, #0]
 800dc1a:	4854      	ldr	r0, [pc, #336]	; (800dd6c <_printf_i+0x244>)
 800dc1c:	2f6f      	cmp	r7, #111	; 0x6f
 800dc1e:	bf0c      	ite	eq
 800dc20:	2308      	moveq	r3, #8
 800dc22:	230a      	movne	r3, #10
 800dc24:	2100      	movs	r1, #0
 800dc26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc2a:	6866      	ldr	r6, [r4, #4]
 800dc2c:	60a6      	str	r6, [r4, #8]
 800dc2e:	2e00      	cmp	r6, #0
 800dc30:	bfa2      	ittt	ge
 800dc32:	6821      	ldrge	r1, [r4, #0]
 800dc34:	f021 0104 	bicge.w	r1, r1, #4
 800dc38:	6021      	strge	r1, [r4, #0]
 800dc3a:	b90d      	cbnz	r5, 800dc40 <_printf_i+0x118>
 800dc3c:	2e00      	cmp	r6, #0
 800dc3e:	d04d      	beq.n	800dcdc <_printf_i+0x1b4>
 800dc40:	4616      	mov	r6, r2
 800dc42:	fbb5 f1f3 	udiv	r1, r5, r3
 800dc46:	fb03 5711 	mls	r7, r3, r1, r5
 800dc4a:	5dc7      	ldrb	r7, [r0, r7]
 800dc4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc50:	462f      	mov	r7, r5
 800dc52:	42bb      	cmp	r3, r7
 800dc54:	460d      	mov	r5, r1
 800dc56:	d9f4      	bls.n	800dc42 <_printf_i+0x11a>
 800dc58:	2b08      	cmp	r3, #8
 800dc5a:	d10b      	bne.n	800dc74 <_printf_i+0x14c>
 800dc5c:	6823      	ldr	r3, [r4, #0]
 800dc5e:	07df      	lsls	r7, r3, #31
 800dc60:	d508      	bpl.n	800dc74 <_printf_i+0x14c>
 800dc62:	6923      	ldr	r3, [r4, #16]
 800dc64:	6861      	ldr	r1, [r4, #4]
 800dc66:	4299      	cmp	r1, r3
 800dc68:	bfde      	ittt	le
 800dc6a:	2330      	movle	r3, #48	; 0x30
 800dc6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc70:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dc74:	1b92      	subs	r2, r2, r6
 800dc76:	6122      	str	r2, [r4, #16]
 800dc78:	f8cd a000 	str.w	sl, [sp]
 800dc7c:	464b      	mov	r3, r9
 800dc7e:	aa03      	add	r2, sp, #12
 800dc80:	4621      	mov	r1, r4
 800dc82:	4640      	mov	r0, r8
 800dc84:	f7ff fee2 	bl	800da4c <_printf_common>
 800dc88:	3001      	adds	r0, #1
 800dc8a:	d14c      	bne.n	800dd26 <_printf_i+0x1fe>
 800dc8c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc90:	b004      	add	sp, #16
 800dc92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc96:	4835      	ldr	r0, [pc, #212]	; (800dd6c <_printf_i+0x244>)
 800dc98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dc9c:	6823      	ldr	r3, [r4, #0]
 800dc9e:	680e      	ldr	r6, [r1, #0]
 800dca0:	061f      	lsls	r7, r3, #24
 800dca2:	f856 5b04 	ldr.w	r5, [r6], #4
 800dca6:	600e      	str	r6, [r1, #0]
 800dca8:	d514      	bpl.n	800dcd4 <_printf_i+0x1ac>
 800dcaa:	07d9      	lsls	r1, r3, #31
 800dcac:	bf44      	itt	mi
 800dcae:	f043 0320 	orrmi.w	r3, r3, #32
 800dcb2:	6023      	strmi	r3, [r4, #0]
 800dcb4:	b91d      	cbnz	r5, 800dcbe <_printf_i+0x196>
 800dcb6:	6823      	ldr	r3, [r4, #0]
 800dcb8:	f023 0320 	bic.w	r3, r3, #32
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	2310      	movs	r3, #16
 800dcc0:	e7b0      	b.n	800dc24 <_printf_i+0xfc>
 800dcc2:	6823      	ldr	r3, [r4, #0]
 800dcc4:	f043 0320 	orr.w	r3, r3, #32
 800dcc8:	6023      	str	r3, [r4, #0]
 800dcca:	2378      	movs	r3, #120	; 0x78
 800dccc:	4828      	ldr	r0, [pc, #160]	; (800dd70 <_printf_i+0x248>)
 800dcce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dcd2:	e7e3      	b.n	800dc9c <_printf_i+0x174>
 800dcd4:	065e      	lsls	r6, r3, #25
 800dcd6:	bf48      	it	mi
 800dcd8:	b2ad      	uxthmi	r5, r5
 800dcda:	e7e6      	b.n	800dcaa <_printf_i+0x182>
 800dcdc:	4616      	mov	r6, r2
 800dcde:	e7bb      	b.n	800dc58 <_printf_i+0x130>
 800dce0:	680b      	ldr	r3, [r1, #0]
 800dce2:	6826      	ldr	r6, [r4, #0]
 800dce4:	6960      	ldr	r0, [r4, #20]
 800dce6:	1d1d      	adds	r5, r3, #4
 800dce8:	600d      	str	r5, [r1, #0]
 800dcea:	0635      	lsls	r5, r6, #24
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	d501      	bpl.n	800dcf4 <_printf_i+0x1cc>
 800dcf0:	6018      	str	r0, [r3, #0]
 800dcf2:	e002      	b.n	800dcfa <_printf_i+0x1d2>
 800dcf4:	0671      	lsls	r1, r6, #25
 800dcf6:	d5fb      	bpl.n	800dcf0 <_printf_i+0x1c8>
 800dcf8:	8018      	strh	r0, [r3, #0]
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	6123      	str	r3, [r4, #16]
 800dcfe:	4616      	mov	r6, r2
 800dd00:	e7ba      	b.n	800dc78 <_printf_i+0x150>
 800dd02:	680b      	ldr	r3, [r1, #0]
 800dd04:	1d1a      	adds	r2, r3, #4
 800dd06:	600a      	str	r2, [r1, #0]
 800dd08:	681e      	ldr	r6, [r3, #0]
 800dd0a:	6862      	ldr	r2, [r4, #4]
 800dd0c:	2100      	movs	r1, #0
 800dd0e:	4630      	mov	r0, r6
 800dd10:	f7f2 faf6 	bl	8000300 <memchr>
 800dd14:	b108      	cbz	r0, 800dd1a <_printf_i+0x1f2>
 800dd16:	1b80      	subs	r0, r0, r6
 800dd18:	6060      	str	r0, [r4, #4]
 800dd1a:	6863      	ldr	r3, [r4, #4]
 800dd1c:	6123      	str	r3, [r4, #16]
 800dd1e:	2300      	movs	r3, #0
 800dd20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd24:	e7a8      	b.n	800dc78 <_printf_i+0x150>
 800dd26:	6923      	ldr	r3, [r4, #16]
 800dd28:	4632      	mov	r2, r6
 800dd2a:	4649      	mov	r1, r9
 800dd2c:	4640      	mov	r0, r8
 800dd2e:	47d0      	blx	sl
 800dd30:	3001      	adds	r0, #1
 800dd32:	d0ab      	beq.n	800dc8c <_printf_i+0x164>
 800dd34:	6823      	ldr	r3, [r4, #0]
 800dd36:	079b      	lsls	r3, r3, #30
 800dd38:	d413      	bmi.n	800dd62 <_printf_i+0x23a>
 800dd3a:	68e0      	ldr	r0, [r4, #12]
 800dd3c:	9b03      	ldr	r3, [sp, #12]
 800dd3e:	4298      	cmp	r0, r3
 800dd40:	bfb8      	it	lt
 800dd42:	4618      	movlt	r0, r3
 800dd44:	e7a4      	b.n	800dc90 <_printf_i+0x168>
 800dd46:	2301      	movs	r3, #1
 800dd48:	4632      	mov	r2, r6
 800dd4a:	4649      	mov	r1, r9
 800dd4c:	4640      	mov	r0, r8
 800dd4e:	47d0      	blx	sl
 800dd50:	3001      	adds	r0, #1
 800dd52:	d09b      	beq.n	800dc8c <_printf_i+0x164>
 800dd54:	3501      	adds	r5, #1
 800dd56:	68e3      	ldr	r3, [r4, #12]
 800dd58:	9903      	ldr	r1, [sp, #12]
 800dd5a:	1a5b      	subs	r3, r3, r1
 800dd5c:	42ab      	cmp	r3, r5
 800dd5e:	dcf2      	bgt.n	800dd46 <_printf_i+0x21e>
 800dd60:	e7eb      	b.n	800dd3a <_printf_i+0x212>
 800dd62:	2500      	movs	r5, #0
 800dd64:	f104 0619 	add.w	r6, r4, #25
 800dd68:	e7f5      	b.n	800dd56 <_printf_i+0x22e>
 800dd6a:	bf00      	nop
 800dd6c:	0806ecc6 	.word	0x0806ecc6
 800dd70:	0806ecd7 	.word	0x0806ecd7

0800dd74 <_sbrk_r>:
 800dd74:	b538      	push	{r3, r4, r5, lr}
 800dd76:	4d06      	ldr	r5, [pc, #24]	; (800dd90 <_sbrk_r+0x1c>)
 800dd78:	2300      	movs	r3, #0
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	4608      	mov	r0, r1
 800dd7e:	602b      	str	r3, [r5, #0]
 800dd80:	f7f3 f928 	bl	8000fd4 <_sbrk>
 800dd84:	1c43      	adds	r3, r0, #1
 800dd86:	d102      	bne.n	800dd8e <_sbrk_r+0x1a>
 800dd88:	682b      	ldr	r3, [r5, #0]
 800dd8a:	b103      	cbz	r3, 800dd8e <_sbrk_r+0x1a>
 800dd8c:	6023      	str	r3, [r4, #0]
 800dd8e:	bd38      	pop	{r3, r4, r5, pc}
 800dd90:	2400c5f0 	.word	0x2400c5f0

0800dd94 <siprintf>:
 800dd94:	b40e      	push	{r1, r2, r3}
 800dd96:	b500      	push	{lr}
 800dd98:	b09c      	sub	sp, #112	; 0x70
 800dd9a:	ab1d      	add	r3, sp, #116	; 0x74
 800dd9c:	9002      	str	r0, [sp, #8]
 800dd9e:	9006      	str	r0, [sp, #24]
 800dda0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dda4:	4809      	ldr	r0, [pc, #36]	; (800ddcc <siprintf+0x38>)
 800dda6:	9107      	str	r1, [sp, #28]
 800dda8:	9104      	str	r1, [sp, #16]
 800ddaa:	4909      	ldr	r1, [pc, #36]	; (800ddd0 <siprintf+0x3c>)
 800ddac:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddb0:	9105      	str	r1, [sp, #20]
 800ddb2:	6800      	ldr	r0, [r0, #0]
 800ddb4:	9301      	str	r3, [sp, #4]
 800ddb6:	a902      	add	r1, sp, #8
 800ddb8:	f001 fa3a 	bl	800f230 <_svfiprintf_r>
 800ddbc:	9b02      	ldr	r3, [sp, #8]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	701a      	strb	r2, [r3, #0]
 800ddc2:	b01c      	add	sp, #112	; 0x70
 800ddc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddc8:	b003      	add	sp, #12
 800ddca:	4770      	bx	lr
 800ddcc:	24001cbc 	.word	0x24001cbc
 800ddd0:	ffff0208 	.word	0xffff0208

0800ddd4 <quorem>:
 800ddd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd8:	6903      	ldr	r3, [r0, #16]
 800ddda:	690c      	ldr	r4, [r1, #16]
 800dddc:	42a3      	cmp	r3, r4
 800ddde:	4607      	mov	r7, r0
 800dde0:	f2c0 8081 	blt.w	800dee6 <quorem+0x112>
 800dde4:	3c01      	subs	r4, #1
 800dde6:	f101 0814 	add.w	r8, r1, #20
 800ddea:	f100 0514 	add.w	r5, r0, #20
 800ddee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddf2:	9301      	str	r3, [sp, #4]
 800ddf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ddf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	429a      	cmp	r2, r3
 800de00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800de04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de08:	fbb2 f6f3 	udiv	r6, r2, r3
 800de0c:	d331      	bcc.n	800de72 <quorem+0x9e>
 800de0e:	f04f 0e00 	mov.w	lr, #0
 800de12:	4640      	mov	r0, r8
 800de14:	46ac      	mov	ip, r5
 800de16:	46f2      	mov	sl, lr
 800de18:	f850 2b04 	ldr.w	r2, [r0], #4
 800de1c:	b293      	uxth	r3, r2
 800de1e:	fb06 e303 	mla	r3, r6, r3, lr
 800de22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800de26:	b29b      	uxth	r3, r3
 800de28:	ebaa 0303 	sub.w	r3, sl, r3
 800de2c:	0c12      	lsrs	r2, r2, #16
 800de2e:	f8dc a000 	ldr.w	sl, [ip]
 800de32:	fb06 e202 	mla	r2, r6, r2, lr
 800de36:	fa13 f38a 	uxtah	r3, r3, sl
 800de3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800de3e:	fa1f fa82 	uxth.w	sl, r2
 800de42:	f8dc 2000 	ldr.w	r2, [ip]
 800de46:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800de4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de4e:	b29b      	uxth	r3, r3
 800de50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de54:	4581      	cmp	r9, r0
 800de56:	f84c 3b04 	str.w	r3, [ip], #4
 800de5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800de5e:	d2db      	bcs.n	800de18 <quorem+0x44>
 800de60:	f855 300b 	ldr.w	r3, [r5, fp]
 800de64:	b92b      	cbnz	r3, 800de72 <quorem+0x9e>
 800de66:	9b01      	ldr	r3, [sp, #4]
 800de68:	3b04      	subs	r3, #4
 800de6a:	429d      	cmp	r5, r3
 800de6c:	461a      	mov	r2, r3
 800de6e:	d32e      	bcc.n	800dece <quorem+0xfa>
 800de70:	613c      	str	r4, [r7, #16]
 800de72:	4638      	mov	r0, r7
 800de74:	f001 f84c 	bl	800ef10 <__mcmp>
 800de78:	2800      	cmp	r0, #0
 800de7a:	db24      	blt.n	800dec6 <quorem+0xf2>
 800de7c:	3601      	adds	r6, #1
 800de7e:	4628      	mov	r0, r5
 800de80:	f04f 0c00 	mov.w	ip, #0
 800de84:	f858 2b04 	ldr.w	r2, [r8], #4
 800de88:	f8d0 e000 	ldr.w	lr, [r0]
 800de8c:	b293      	uxth	r3, r2
 800de8e:	ebac 0303 	sub.w	r3, ip, r3
 800de92:	0c12      	lsrs	r2, r2, #16
 800de94:	fa13 f38e 	uxtah	r3, r3, lr
 800de98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800de9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dea6:	45c1      	cmp	r9, r8
 800dea8:	f840 3b04 	str.w	r3, [r0], #4
 800deac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800deb0:	d2e8      	bcs.n	800de84 <quorem+0xb0>
 800deb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800deb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800deba:	b922      	cbnz	r2, 800dec6 <quorem+0xf2>
 800debc:	3b04      	subs	r3, #4
 800debe:	429d      	cmp	r5, r3
 800dec0:	461a      	mov	r2, r3
 800dec2:	d30a      	bcc.n	800deda <quorem+0x106>
 800dec4:	613c      	str	r4, [r7, #16]
 800dec6:	4630      	mov	r0, r6
 800dec8:	b003      	add	sp, #12
 800deca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dece:	6812      	ldr	r2, [r2, #0]
 800ded0:	3b04      	subs	r3, #4
 800ded2:	2a00      	cmp	r2, #0
 800ded4:	d1cc      	bne.n	800de70 <quorem+0x9c>
 800ded6:	3c01      	subs	r4, #1
 800ded8:	e7c7      	b.n	800de6a <quorem+0x96>
 800deda:	6812      	ldr	r2, [r2, #0]
 800dedc:	3b04      	subs	r3, #4
 800dede:	2a00      	cmp	r2, #0
 800dee0:	d1f0      	bne.n	800dec4 <quorem+0xf0>
 800dee2:	3c01      	subs	r4, #1
 800dee4:	e7eb      	b.n	800debe <quorem+0xea>
 800dee6:	2000      	movs	r0, #0
 800dee8:	e7ee      	b.n	800dec8 <quorem+0xf4>
 800deea:	0000      	movs	r0, r0
 800deec:	0000      	movs	r0, r0
	...

0800def0 <_dtoa_r>:
 800def0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800def4:	ec59 8b10 	vmov	r8, r9, d0
 800def8:	b095      	sub	sp, #84	; 0x54
 800defa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800defc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800defe:	9107      	str	r1, [sp, #28]
 800df00:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800df04:	4606      	mov	r6, r0
 800df06:	9209      	str	r2, [sp, #36]	; 0x24
 800df08:	9310      	str	r3, [sp, #64]	; 0x40
 800df0a:	b975      	cbnz	r5, 800df2a <_dtoa_r+0x3a>
 800df0c:	2010      	movs	r0, #16
 800df0e:	f7ff fa27 	bl	800d360 <malloc>
 800df12:	4602      	mov	r2, r0
 800df14:	6270      	str	r0, [r6, #36]	; 0x24
 800df16:	b920      	cbnz	r0, 800df22 <_dtoa_r+0x32>
 800df18:	4bab      	ldr	r3, [pc, #684]	; (800e1c8 <_dtoa_r+0x2d8>)
 800df1a:	21ea      	movs	r1, #234	; 0xea
 800df1c:	48ab      	ldr	r0, [pc, #684]	; (800e1cc <_dtoa_r+0x2dc>)
 800df1e:	f001 fa87 	bl	800f430 <__assert_func>
 800df22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800df26:	6005      	str	r5, [r0, #0]
 800df28:	60c5      	str	r5, [r0, #12]
 800df2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800df2c:	6819      	ldr	r1, [r3, #0]
 800df2e:	b151      	cbz	r1, 800df46 <_dtoa_r+0x56>
 800df30:	685a      	ldr	r2, [r3, #4]
 800df32:	604a      	str	r2, [r1, #4]
 800df34:	2301      	movs	r3, #1
 800df36:	4093      	lsls	r3, r2
 800df38:	608b      	str	r3, [r1, #8]
 800df3a:	4630      	mov	r0, r6
 800df3c:	f000 fdaa 	bl	800ea94 <_Bfree>
 800df40:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800df42:	2200      	movs	r2, #0
 800df44:	601a      	str	r2, [r3, #0]
 800df46:	f1b9 0300 	subs.w	r3, r9, #0
 800df4a:	bfbb      	ittet	lt
 800df4c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800df50:	9303      	strlt	r3, [sp, #12]
 800df52:	2300      	movge	r3, #0
 800df54:	2201      	movlt	r2, #1
 800df56:	bfac      	ite	ge
 800df58:	6023      	strge	r3, [r4, #0]
 800df5a:	6022      	strlt	r2, [r4, #0]
 800df5c:	4b9c      	ldr	r3, [pc, #624]	; (800e1d0 <_dtoa_r+0x2e0>)
 800df5e:	9c03      	ldr	r4, [sp, #12]
 800df60:	43a3      	bics	r3, r4
 800df62:	d11a      	bne.n	800df9a <_dtoa_r+0xaa>
 800df64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df66:	f242 730f 	movw	r3, #9999	; 0x270f
 800df6a:	6013      	str	r3, [r2, #0]
 800df6c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800df70:	ea53 0308 	orrs.w	r3, r3, r8
 800df74:	f000 8512 	beq.w	800e99c <_dtoa_r+0xaac>
 800df78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800df7a:	b953      	cbnz	r3, 800df92 <_dtoa_r+0xa2>
 800df7c:	4b95      	ldr	r3, [pc, #596]	; (800e1d4 <_dtoa_r+0x2e4>)
 800df7e:	e01f      	b.n	800dfc0 <_dtoa_r+0xd0>
 800df80:	4b95      	ldr	r3, [pc, #596]	; (800e1d8 <_dtoa_r+0x2e8>)
 800df82:	9300      	str	r3, [sp, #0]
 800df84:	3308      	adds	r3, #8
 800df86:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800df88:	6013      	str	r3, [r2, #0]
 800df8a:	9800      	ldr	r0, [sp, #0]
 800df8c:	b015      	add	sp, #84	; 0x54
 800df8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df92:	4b90      	ldr	r3, [pc, #576]	; (800e1d4 <_dtoa_r+0x2e4>)
 800df94:	9300      	str	r3, [sp, #0]
 800df96:	3303      	adds	r3, #3
 800df98:	e7f5      	b.n	800df86 <_dtoa_r+0x96>
 800df9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfa6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800dfaa:	d10b      	bne.n	800dfc4 <_dtoa_r+0xd4>
 800dfac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dfae:	2301      	movs	r3, #1
 800dfb0:	6013      	str	r3, [r2, #0]
 800dfb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f000 84ee 	beq.w	800e996 <_dtoa_r+0xaa6>
 800dfba:	4888      	ldr	r0, [pc, #544]	; (800e1dc <_dtoa_r+0x2ec>)
 800dfbc:	6018      	str	r0, [r3, #0]
 800dfbe:	1e43      	subs	r3, r0, #1
 800dfc0:	9300      	str	r3, [sp, #0]
 800dfc2:	e7e2      	b.n	800df8a <_dtoa_r+0x9a>
 800dfc4:	a913      	add	r1, sp, #76	; 0x4c
 800dfc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dfca:	aa12      	add	r2, sp, #72	; 0x48
 800dfcc:	4630      	mov	r0, r6
 800dfce:	f001 f843 	bl	800f058 <__d2b>
 800dfd2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800dfd6:	4605      	mov	r5, r0
 800dfd8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dfda:	2900      	cmp	r1, #0
 800dfdc:	d047      	beq.n	800e06e <_dtoa_r+0x17e>
 800dfde:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800dfe0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dfe4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dfe8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800dfec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dff0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800dff4:	2400      	movs	r4, #0
 800dff6:	ec43 2b16 	vmov	d6, r2, r3
 800dffa:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800dffe:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800e1b0 <_dtoa_r+0x2c0>
 800e002:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e006:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800e1b8 <_dtoa_r+0x2c8>
 800e00a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e00e:	eeb0 7b46 	vmov.f64	d7, d6
 800e012:	ee06 1a90 	vmov	s13, r1
 800e016:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800e01a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e1c0 <_dtoa_r+0x2d0>
 800e01e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e022:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e026:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e02e:	ee16 ba90 	vmov	fp, s13
 800e032:	9411      	str	r4, [sp, #68]	; 0x44
 800e034:	d508      	bpl.n	800e048 <_dtoa_r+0x158>
 800e036:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e03a:	eeb4 6b47 	vcmp.f64	d6, d7
 800e03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e042:	bf18      	it	ne
 800e044:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800e048:	f1bb 0f16 	cmp.w	fp, #22
 800e04c:	d832      	bhi.n	800e0b4 <_dtoa_r+0x1c4>
 800e04e:	4b64      	ldr	r3, [pc, #400]	; (800e1e0 <_dtoa_r+0x2f0>)
 800e050:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e054:	ed93 7b00 	vldr	d7, [r3]
 800e058:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e05c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e064:	d501      	bpl.n	800e06a <_dtoa_r+0x17a>
 800e066:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e06a:	2300      	movs	r3, #0
 800e06c:	e023      	b.n	800e0b6 <_dtoa_r+0x1c6>
 800e06e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e070:	4401      	add	r1, r0
 800e072:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800e076:	2b20      	cmp	r3, #32
 800e078:	bfc3      	ittte	gt
 800e07a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e07e:	fa04 f303 	lslgt.w	r3, r4, r3
 800e082:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800e086:	f1c3 0320 	rsble	r3, r3, #32
 800e08a:	bfc6      	itte	gt
 800e08c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800e090:	ea43 0308 	orrgt.w	r3, r3, r8
 800e094:	fa08 f303 	lslle.w	r3, r8, r3
 800e098:	ee07 3a90 	vmov	s15, r3
 800e09c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e0a0:	3901      	subs	r1, #1
 800e0a2:	ed8d 7b00 	vstr	d7, [sp]
 800e0a6:	9c01      	ldr	r4, [sp, #4]
 800e0a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800e0b0:	2401      	movs	r4, #1
 800e0b2:	e7a0      	b.n	800dff6 <_dtoa_r+0x106>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0b8:	1a43      	subs	r3, r0, r1
 800e0ba:	1e5a      	subs	r2, r3, #1
 800e0bc:	bf45      	ittet	mi
 800e0be:	f1c3 0301 	rsbmi	r3, r3, #1
 800e0c2:	9305      	strmi	r3, [sp, #20]
 800e0c4:	2300      	movpl	r3, #0
 800e0c6:	2300      	movmi	r3, #0
 800e0c8:	9206      	str	r2, [sp, #24]
 800e0ca:	bf54      	ite	pl
 800e0cc:	9305      	strpl	r3, [sp, #20]
 800e0ce:	9306      	strmi	r3, [sp, #24]
 800e0d0:	f1bb 0f00 	cmp.w	fp, #0
 800e0d4:	db18      	blt.n	800e108 <_dtoa_r+0x218>
 800e0d6:	9b06      	ldr	r3, [sp, #24]
 800e0d8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800e0dc:	445b      	add	r3, fp
 800e0de:	9306      	str	r3, [sp, #24]
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	9a07      	ldr	r2, [sp, #28]
 800e0e4:	2a09      	cmp	r2, #9
 800e0e6:	d849      	bhi.n	800e17c <_dtoa_r+0x28c>
 800e0e8:	2a05      	cmp	r2, #5
 800e0ea:	bfc4      	itt	gt
 800e0ec:	3a04      	subgt	r2, #4
 800e0ee:	9207      	strgt	r2, [sp, #28]
 800e0f0:	9a07      	ldr	r2, [sp, #28]
 800e0f2:	f1a2 0202 	sub.w	r2, r2, #2
 800e0f6:	bfcc      	ite	gt
 800e0f8:	2400      	movgt	r4, #0
 800e0fa:	2401      	movle	r4, #1
 800e0fc:	2a03      	cmp	r2, #3
 800e0fe:	d848      	bhi.n	800e192 <_dtoa_r+0x2a2>
 800e100:	e8df f002 	tbb	[pc, r2]
 800e104:	3a2c2e0b 	.word	0x3a2c2e0b
 800e108:	9b05      	ldr	r3, [sp, #20]
 800e10a:	2200      	movs	r2, #0
 800e10c:	eba3 030b 	sub.w	r3, r3, fp
 800e110:	9305      	str	r3, [sp, #20]
 800e112:	920e      	str	r2, [sp, #56]	; 0x38
 800e114:	f1cb 0300 	rsb	r3, fp, #0
 800e118:	e7e3      	b.n	800e0e2 <_dtoa_r+0x1f2>
 800e11a:	2200      	movs	r2, #0
 800e11c:	9208      	str	r2, [sp, #32]
 800e11e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e120:	2a00      	cmp	r2, #0
 800e122:	dc39      	bgt.n	800e198 <_dtoa_r+0x2a8>
 800e124:	f04f 0a01 	mov.w	sl, #1
 800e128:	46d1      	mov	r9, sl
 800e12a:	4652      	mov	r2, sl
 800e12c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e130:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800e132:	2100      	movs	r1, #0
 800e134:	6079      	str	r1, [r7, #4]
 800e136:	2004      	movs	r0, #4
 800e138:	f100 0c14 	add.w	ip, r0, #20
 800e13c:	4594      	cmp	ip, r2
 800e13e:	6879      	ldr	r1, [r7, #4]
 800e140:	d92f      	bls.n	800e1a2 <_dtoa_r+0x2b2>
 800e142:	4630      	mov	r0, r6
 800e144:	930c      	str	r3, [sp, #48]	; 0x30
 800e146:	f000 fc65 	bl	800ea14 <_Balloc>
 800e14a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e14c:	9000      	str	r0, [sp, #0]
 800e14e:	4602      	mov	r2, r0
 800e150:	2800      	cmp	r0, #0
 800e152:	d149      	bne.n	800e1e8 <_dtoa_r+0x2f8>
 800e154:	4b23      	ldr	r3, [pc, #140]	; (800e1e4 <_dtoa_r+0x2f4>)
 800e156:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e15a:	e6df      	b.n	800df1c <_dtoa_r+0x2c>
 800e15c:	2201      	movs	r2, #1
 800e15e:	e7dd      	b.n	800e11c <_dtoa_r+0x22c>
 800e160:	2200      	movs	r2, #0
 800e162:	9208      	str	r2, [sp, #32]
 800e164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e166:	eb0b 0a02 	add.w	sl, fp, r2
 800e16a:	f10a 0901 	add.w	r9, sl, #1
 800e16e:	464a      	mov	r2, r9
 800e170:	2a01      	cmp	r2, #1
 800e172:	bfb8      	it	lt
 800e174:	2201      	movlt	r2, #1
 800e176:	e7db      	b.n	800e130 <_dtoa_r+0x240>
 800e178:	2201      	movs	r2, #1
 800e17a:	e7f2      	b.n	800e162 <_dtoa_r+0x272>
 800e17c:	2401      	movs	r4, #1
 800e17e:	2200      	movs	r2, #0
 800e180:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800e184:	f04f 3aff 	mov.w	sl, #4294967295
 800e188:	2100      	movs	r1, #0
 800e18a:	46d1      	mov	r9, sl
 800e18c:	2212      	movs	r2, #18
 800e18e:	9109      	str	r1, [sp, #36]	; 0x24
 800e190:	e7ce      	b.n	800e130 <_dtoa_r+0x240>
 800e192:	2201      	movs	r2, #1
 800e194:	9208      	str	r2, [sp, #32]
 800e196:	e7f5      	b.n	800e184 <_dtoa_r+0x294>
 800e198:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e19c:	46d1      	mov	r9, sl
 800e19e:	4652      	mov	r2, sl
 800e1a0:	e7c6      	b.n	800e130 <_dtoa_r+0x240>
 800e1a2:	3101      	adds	r1, #1
 800e1a4:	6079      	str	r1, [r7, #4]
 800e1a6:	0040      	lsls	r0, r0, #1
 800e1a8:	e7c6      	b.n	800e138 <_dtoa_r+0x248>
 800e1aa:	bf00      	nop
 800e1ac:	f3af 8000 	nop.w
 800e1b0:	636f4361 	.word	0x636f4361
 800e1b4:	3fd287a7 	.word	0x3fd287a7
 800e1b8:	8b60c8b3 	.word	0x8b60c8b3
 800e1bc:	3fc68a28 	.word	0x3fc68a28
 800e1c0:	509f79fb 	.word	0x509f79fb
 800e1c4:	3fd34413 	.word	0x3fd34413
 800e1c8:	0806ecf5 	.word	0x0806ecf5
 800e1cc:	0806ed0c 	.word	0x0806ed0c
 800e1d0:	7ff00000 	.word	0x7ff00000
 800e1d4:	0806ecf1 	.word	0x0806ecf1
 800e1d8:	0806ece8 	.word	0x0806ece8
 800e1dc:	0806ecc5 	.word	0x0806ecc5
 800e1e0:	0806ee08 	.word	0x0806ee08
 800e1e4:	0806ed6b 	.word	0x0806ed6b
 800e1e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800e1ea:	9900      	ldr	r1, [sp, #0]
 800e1ec:	6011      	str	r1, [r2, #0]
 800e1ee:	f1b9 0f0e 	cmp.w	r9, #14
 800e1f2:	d872      	bhi.n	800e2da <_dtoa_r+0x3ea>
 800e1f4:	2c00      	cmp	r4, #0
 800e1f6:	d070      	beq.n	800e2da <_dtoa_r+0x3ea>
 800e1f8:	f1bb 0f00 	cmp.w	fp, #0
 800e1fc:	f340 80a6 	ble.w	800e34c <_dtoa_r+0x45c>
 800e200:	49ca      	ldr	r1, [pc, #808]	; (800e52c <_dtoa_r+0x63c>)
 800e202:	f00b 020f 	and.w	r2, fp, #15
 800e206:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e20a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e20e:	ed92 7b00 	vldr	d7, [r2]
 800e212:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e216:	f000 808d 	beq.w	800e334 <_dtoa_r+0x444>
 800e21a:	4ac5      	ldr	r2, [pc, #788]	; (800e530 <_dtoa_r+0x640>)
 800e21c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e220:	ed92 6b08 	vldr	d6, [r2, #32]
 800e224:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800e228:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e22c:	f001 010f 	and.w	r1, r1, #15
 800e230:	2203      	movs	r2, #3
 800e232:	48bf      	ldr	r0, [pc, #764]	; (800e530 <_dtoa_r+0x640>)
 800e234:	2900      	cmp	r1, #0
 800e236:	d17f      	bne.n	800e338 <_dtoa_r+0x448>
 800e238:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e23c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e240:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e244:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e246:	2900      	cmp	r1, #0
 800e248:	f000 80b2 	beq.w	800e3b0 <_dtoa_r+0x4c0>
 800e24c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e250:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e254:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25c:	f140 80a8 	bpl.w	800e3b0 <_dtoa_r+0x4c0>
 800e260:	f1b9 0f00 	cmp.w	r9, #0
 800e264:	f000 80a4 	beq.w	800e3b0 <_dtoa_r+0x4c0>
 800e268:	f1ba 0f00 	cmp.w	sl, #0
 800e26c:	dd31      	ble.n	800e2d2 <_dtoa_r+0x3e2>
 800e26e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e272:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e276:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e27a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e27e:	3201      	adds	r2, #1
 800e280:	4650      	mov	r0, sl
 800e282:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e286:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e28a:	ee07 2a90 	vmov	s15, r2
 800e28e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e292:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e296:	ed8d 5b02 	vstr	d5, [sp, #8]
 800e29a:	9c03      	ldr	r4, [sp, #12]
 800e29c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e2a0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	f040 8086 	bne.w	800e3b6 <_dtoa_r+0x4c6>
 800e2aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e2ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e2b2:	ec42 1b17 	vmov	d7, r1, r2
 800e2b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2be:	f300 8272 	bgt.w	800e7a6 <_dtoa_r+0x8b6>
 800e2c2:	eeb1 7b47 	vneg.f64	d7, d7
 800e2c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ce:	f100 8267 	bmi.w	800e7a0 <_dtoa_r+0x8b0>
 800e2d2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800e2d6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e2da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e2dc:	2a00      	cmp	r2, #0
 800e2de:	f2c0 8129 	blt.w	800e534 <_dtoa_r+0x644>
 800e2e2:	f1bb 0f0e 	cmp.w	fp, #14
 800e2e6:	f300 8125 	bgt.w	800e534 <_dtoa_r+0x644>
 800e2ea:	4b90      	ldr	r3, [pc, #576]	; (800e52c <_dtoa_r+0x63c>)
 800e2ec:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e2f0:	ed93 6b00 	vldr	d6, [r3]
 800e2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f280 80c3 	bge.w	800e482 <_dtoa_r+0x592>
 800e2fc:	f1b9 0f00 	cmp.w	r9, #0
 800e300:	f300 80bf 	bgt.w	800e482 <_dtoa_r+0x592>
 800e304:	f040 824c 	bne.w	800e7a0 <_dtoa_r+0x8b0>
 800e308:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e30c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e310:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e314:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e31c:	464c      	mov	r4, r9
 800e31e:	464f      	mov	r7, r9
 800e320:	f280 8222 	bge.w	800e768 <_dtoa_r+0x878>
 800e324:	f8dd 8000 	ldr.w	r8, [sp]
 800e328:	2331      	movs	r3, #49	; 0x31
 800e32a:	f808 3b01 	strb.w	r3, [r8], #1
 800e32e:	f10b 0b01 	add.w	fp, fp, #1
 800e332:	e21e      	b.n	800e772 <_dtoa_r+0x882>
 800e334:	2202      	movs	r2, #2
 800e336:	e77c      	b.n	800e232 <_dtoa_r+0x342>
 800e338:	07cc      	lsls	r4, r1, #31
 800e33a:	d504      	bpl.n	800e346 <_dtoa_r+0x456>
 800e33c:	ed90 6b00 	vldr	d6, [r0]
 800e340:	3201      	adds	r2, #1
 800e342:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e346:	1049      	asrs	r1, r1, #1
 800e348:	3008      	adds	r0, #8
 800e34a:	e773      	b.n	800e234 <_dtoa_r+0x344>
 800e34c:	d02e      	beq.n	800e3ac <_dtoa_r+0x4bc>
 800e34e:	f1cb 0100 	rsb	r1, fp, #0
 800e352:	4a76      	ldr	r2, [pc, #472]	; (800e52c <_dtoa_r+0x63c>)
 800e354:	f001 000f 	and.w	r0, r1, #15
 800e358:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e35c:	ed92 7b00 	vldr	d7, [r2]
 800e360:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e364:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e368:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e36c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800e370:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e374:	486e      	ldr	r0, [pc, #440]	; (800e530 <_dtoa_r+0x640>)
 800e376:	1109      	asrs	r1, r1, #4
 800e378:	2400      	movs	r4, #0
 800e37a:	2202      	movs	r2, #2
 800e37c:	b939      	cbnz	r1, 800e38e <_dtoa_r+0x49e>
 800e37e:	2c00      	cmp	r4, #0
 800e380:	f43f af60 	beq.w	800e244 <_dtoa_r+0x354>
 800e384:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e388:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e38c:	e75a      	b.n	800e244 <_dtoa_r+0x354>
 800e38e:	07cf      	lsls	r7, r1, #31
 800e390:	d509      	bpl.n	800e3a6 <_dtoa_r+0x4b6>
 800e392:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e396:	ed90 7b00 	vldr	d7, [r0]
 800e39a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e39e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e3a2:	3201      	adds	r2, #1
 800e3a4:	2401      	movs	r4, #1
 800e3a6:	1049      	asrs	r1, r1, #1
 800e3a8:	3008      	adds	r0, #8
 800e3aa:	e7e7      	b.n	800e37c <_dtoa_r+0x48c>
 800e3ac:	2202      	movs	r2, #2
 800e3ae:	e749      	b.n	800e244 <_dtoa_r+0x354>
 800e3b0:	465f      	mov	r7, fp
 800e3b2:	4648      	mov	r0, r9
 800e3b4:	e765      	b.n	800e282 <_dtoa_r+0x392>
 800e3b6:	ec42 1b17 	vmov	d7, r1, r2
 800e3ba:	4a5c      	ldr	r2, [pc, #368]	; (800e52c <_dtoa_r+0x63c>)
 800e3bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e3c0:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e3c4:	9a00      	ldr	r2, [sp, #0]
 800e3c6:	1814      	adds	r4, r2, r0
 800e3c8:	9a08      	ldr	r2, [sp, #32]
 800e3ca:	b352      	cbz	r2, 800e422 <_dtoa_r+0x532>
 800e3cc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e3d0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e3d4:	f8dd 8000 	ldr.w	r8, [sp]
 800e3d8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e3dc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e3e0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e3e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e3e8:	ee14 2a90 	vmov	r2, s9
 800e3ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e3f0:	3230      	adds	r2, #48	; 0x30
 800e3f2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e3f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3fe:	f808 2b01 	strb.w	r2, [r8], #1
 800e402:	d439      	bmi.n	800e478 <_dtoa_r+0x588>
 800e404:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e408:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e410:	d472      	bmi.n	800e4f8 <_dtoa_r+0x608>
 800e412:	45a0      	cmp	r8, r4
 800e414:	f43f af5d 	beq.w	800e2d2 <_dtoa_r+0x3e2>
 800e418:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e41c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e420:	e7e0      	b.n	800e3e4 <_dtoa_r+0x4f4>
 800e422:	f8dd 8000 	ldr.w	r8, [sp]
 800e426:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e42a:	4621      	mov	r1, r4
 800e42c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e430:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e434:	ee14 2a90 	vmov	r2, s9
 800e438:	3230      	adds	r2, #48	; 0x30
 800e43a:	f808 2b01 	strb.w	r2, [r8], #1
 800e43e:	45a0      	cmp	r8, r4
 800e440:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e444:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e448:	d118      	bne.n	800e47c <_dtoa_r+0x58c>
 800e44a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e44e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e452:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e45a:	dc4d      	bgt.n	800e4f8 <_dtoa_r+0x608>
 800e45c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e460:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e468:	f57f af33 	bpl.w	800e2d2 <_dtoa_r+0x3e2>
 800e46c:	4688      	mov	r8, r1
 800e46e:	3901      	subs	r1, #1
 800e470:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e474:	2b30      	cmp	r3, #48	; 0x30
 800e476:	d0f9      	beq.n	800e46c <_dtoa_r+0x57c>
 800e478:	46bb      	mov	fp, r7
 800e47a:	e02a      	b.n	800e4d2 <_dtoa_r+0x5e2>
 800e47c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e480:	e7d6      	b.n	800e430 <_dtoa_r+0x540>
 800e482:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e486:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e48a:	f8dd 8000 	ldr.w	r8, [sp]
 800e48e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e492:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e496:	ee15 3a10 	vmov	r3, s10
 800e49a:	3330      	adds	r3, #48	; 0x30
 800e49c:	f808 3b01 	strb.w	r3, [r8], #1
 800e4a0:	9b00      	ldr	r3, [sp, #0]
 800e4a2:	eba8 0303 	sub.w	r3, r8, r3
 800e4a6:	4599      	cmp	r9, r3
 800e4a8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e4ac:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e4b0:	d133      	bne.n	800e51a <_dtoa_r+0x62a>
 800e4b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e4b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4be:	dc1a      	bgt.n	800e4f6 <_dtoa_r+0x606>
 800e4c0:	eeb4 7b46 	vcmp.f64	d7, d6
 800e4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c8:	d103      	bne.n	800e4d2 <_dtoa_r+0x5e2>
 800e4ca:	ee15 3a10 	vmov	r3, s10
 800e4ce:	07d9      	lsls	r1, r3, #31
 800e4d0:	d411      	bmi.n	800e4f6 <_dtoa_r+0x606>
 800e4d2:	4629      	mov	r1, r5
 800e4d4:	4630      	mov	r0, r6
 800e4d6:	f000 fadd 	bl	800ea94 <_Bfree>
 800e4da:	2300      	movs	r3, #0
 800e4dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e4de:	f888 3000 	strb.w	r3, [r8]
 800e4e2:	f10b 0301 	add.w	r3, fp, #1
 800e4e6:	6013      	str	r3, [r2, #0]
 800e4e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	f43f ad4d 	beq.w	800df8a <_dtoa_r+0x9a>
 800e4f0:	f8c3 8000 	str.w	r8, [r3]
 800e4f4:	e549      	b.n	800df8a <_dtoa_r+0x9a>
 800e4f6:	465f      	mov	r7, fp
 800e4f8:	4643      	mov	r3, r8
 800e4fa:	4698      	mov	r8, r3
 800e4fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e500:	2a39      	cmp	r2, #57	; 0x39
 800e502:	d106      	bne.n	800e512 <_dtoa_r+0x622>
 800e504:	9a00      	ldr	r2, [sp, #0]
 800e506:	429a      	cmp	r2, r3
 800e508:	d1f7      	bne.n	800e4fa <_dtoa_r+0x60a>
 800e50a:	9900      	ldr	r1, [sp, #0]
 800e50c:	2230      	movs	r2, #48	; 0x30
 800e50e:	3701      	adds	r7, #1
 800e510:	700a      	strb	r2, [r1, #0]
 800e512:	781a      	ldrb	r2, [r3, #0]
 800e514:	3201      	adds	r2, #1
 800e516:	701a      	strb	r2, [r3, #0]
 800e518:	e7ae      	b.n	800e478 <_dtoa_r+0x588>
 800e51a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e51e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e526:	d1b2      	bne.n	800e48e <_dtoa_r+0x59e>
 800e528:	e7d3      	b.n	800e4d2 <_dtoa_r+0x5e2>
 800e52a:	bf00      	nop
 800e52c:	0806ee08 	.word	0x0806ee08
 800e530:	0806ede0 	.word	0x0806ede0
 800e534:	9908      	ldr	r1, [sp, #32]
 800e536:	2900      	cmp	r1, #0
 800e538:	f000 80d1 	beq.w	800e6de <_dtoa_r+0x7ee>
 800e53c:	9907      	ldr	r1, [sp, #28]
 800e53e:	2901      	cmp	r1, #1
 800e540:	f300 80b4 	bgt.w	800e6ac <_dtoa_r+0x7bc>
 800e544:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e546:	2900      	cmp	r1, #0
 800e548:	f000 80ac 	beq.w	800e6a4 <_dtoa_r+0x7b4>
 800e54c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e550:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e554:	461c      	mov	r4, r3
 800e556:	930a      	str	r3, [sp, #40]	; 0x28
 800e558:	9b05      	ldr	r3, [sp, #20]
 800e55a:	4413      	add	r3, r2
 800e55c:	9305      	str	r3, [sp, #20]
 800e55e:	9b06      	ldr	r3, [sp, #24]
 800e560:	2101      	movs	r1, #1
 800e562:	4413      	add	r3, r2
 800e564:	4630      	mov	r0, r6
 800e566:	9306      	str	r3, [sp, #24]
 800e568:	f000 fb50 	bl	800ec0c <__i2b>
 800e56c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e56e:	4607      	mov	r7, r0
 800e570:	f1b8 0f00 	cmp.w	r8, #0
 800e574:	dd0d      	ble.n	800e592 <_dtoa_r+0x6a2>
 800e576:	9a06      	ldr	r2, [sp, #24]
 800e578:	2a00      	cmp	r2, #0
 800e57a:	dd0a      	ble.n	800e592 <_dtoa_r+0x6a2>
 800e57c:	4542      	cmp	r2, r8
 800e57e:	9905      	ldr	r1, [sp, #20]
 800e580:	bfa8      	it	ge
 800e582:	4642      	movge	r2, r8
 800e584:	1a89      	subs	r1, r1, r2
 800e586:	9105      	str	r1, [sp, #20]
 800e588:	9906      	ldr	r1, [sp, #24]
 800e58a:	eba8 0802 	sub.w	r8, r8, r2
 800e58e:	1a8a      	subs	r2, r1, r2
 800e590:	9206      	str	r2, [sp, #24]
 800e592:	b303      	cbz	r3, 800e5d6 <_dtoa_r+0x6e6>
 800e594:	9a08      	ldr	r2, [sp, #32]
 800e596:	2a00      	cmp	r2, #0
 800e598:	f000 80a6 	beq.w	800e6e8 <_dtoa_r+0x7f8>
 800e59c:	2c00      	cmp	r4, #0
 800e59e:	dd13      	ble.n	800e5c8 <_dtoa_r+0x6d8>
 800e5a0:	4639      	mov	r1, r7
 800e5a2:	4622      	mov	r2, r4
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	930c      	str	r3, [sp, #48]	; 0x30
 800e5a8:	f000 fbec 	bl	800ed84 <__pow5mult>
 800e5ac:	462a      	mov	r2, r5
 800e5ae:	4601      	mov	r1, r0
 800e5b0:	4607      	mov	r7, r0
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	f000 fb40 	bl	800ec38 <__multiply>
 800e5b8:	4629      	mov	r1, r5
 800e5ba:	900a      	str	r0, [sp, #40]	; 0x28
 800e5bc:	4630      	mov	r0, r6
 800e5be:	f000 fa69 	bl	800ea94 <_Bfree>
 800e5c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5c6:	4615      	mov	r5, r2
 800e5c8:	1b1a      	subs	r2, r3, r4
 800e5ca:	d004      	beq.n	800e5d6 <_dtoa_r+0x6e6>
 800e5cc:	4629      	mov	r1, r5
 800e5ce:	4630      	mov	r0, r6
 800e5d0:	f000 fbd8 	bl	800ed84 <__pow5mult>
 800e5d4:	4605      	mov	r5, r0
 800e5d6:	2101      	movs	r1, #1
 800e5d8:	4630      	mov	r0, r6
 800e5da:	f000 fb17 	bl	800ec0c <__i2b>
 800e5de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	f340 8082 	ble.w	800e6ec <_dtoa_r+0x7fc>
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	4601      	mov	r1, r0
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	f000 fbc9 	bl	800ed84 <__pow5mult>
 800e5f2:	9b07      	ldr	r3, [sp, #28]
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	4604      	mov	r4, r0
 800e5f8:	dd7b      	ble.n	800e6f2 <_dtoa_r+0x802>
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	930a      	str	r3, [sp, #40]	; 0x28
 800e5fe:	6922      	ldr	r2, [r4, #16]
 800e600:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e604:	6910      	ldr	r0, [r2, #16]
 800e606:	f000 fab1 	bl	800eb6c <__hi0bits>
 800e60a:	f1c0 0020 	rsb	r0, r0, #32
 800e60e:	9b06      	ldr	r3, [sp, #24]
 800e610:	4418      	add	r0, r3
 800e612:	f010 001f 	ands.w	r0, r0, #31
 800e616:	f000 808d 	beq.w	800e734 <_dtoa_r+0x844>
 800e61a:	f1c0 0220 	rsb	r2, r0, #32
 800e61e:	2a04      	cmp	r2, #4
 800e620:	f340 8086 	ble.w	800e730 <_dtoa_r+0x840>
 800e624:	f1c0 001c 	rsb	r0, r0, #28
 800e628:	9b05      	ldr	r3, [sp, #20]
 800e62a:	4403      	add	r3, r0
 800e62c:	9305      	str	r3, [sp, #20]
 800e62e:	9b06      	ldr	r3, [sp, #24]
 800e630:	4403      	add	r3, r0
 800e632:	4480      	add	r8, r0
 800e634:	9306      	str	r3, [sp, #24]
 800e636:	9b05      	ldr	r3, [sp, #20]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	dd05      	ble.n	800e648 <_dtoa_r+0x758>
 800e63c:	4629      	mov	r1, r5
 800e63e:	461a      	mov	r2, r3
 800e640:	4630      	mov	r0, r6
 800e642:	f000 fbf9 	bl	800ee38 <__lshift>
 800e646:	4605      	mov	r5, r0
 800e648:	9b06      	ldr	r3, [sp, #24]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	dd05      	ble.n	800e65a <_dtoa_r+0x76a>
 800e64e:	4621      	mov	r1, r4
 800e650:	461a      	mov	r2, r3
 800e652:	4630      	mov	r0, r6
 800e654:	f000 fbf0 	bl	800ee38 <__lshift>
 800e658:	4604      	mov	r4, r0
 800e65a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d06b      	beq.n	800e738 <_dtoa_r+0x848>
 800e660:	4621      	mov	r1, r4
 800e662:	4628      	mov	r0, r5
 800e664:	f000 fc54 	bl	800ef10 <__mcmp>
 800e668:	2800      	cmp	r0, #0
 800e66a:	da65      	bge.n	800e738 <_dtoa_r+0x848>
 800e66c:	2300      	movs	r3, #0
 800e66e:	4629      	mov	r1, r5
 800e670:	220a      	movs	r2, #10
 800e672:	4630      	mov	r0, r6
 800e674:	f000 fa30 	bl	800ead8 <__multadd>
 800e678:	9b08      	ldr	r3, [sp, #32]
 800e67a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e67e:	4605      	mov	r5, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	f000 8192 	beq.w	800e9aa <_dtoa_r+0xaba>
 800e686:	4639      	mov	r1, r7
 800e688:	2300      	movs	r3, #0
 800e68a:	220a      	movs	r2, #10
 800e68c:	4630      	mov	r0, r6
 800e68e:	f000 fa23 	bl	800ead8 <__multadd>
 800e692:	f1ba 0f00 	cmp.w	sl, #0
 800e696:	4607      	mov	r7, r0
 800e698:	f300 808e 	bgt.w	800e7b8 <_dtoa_r+0x8c8>
 800e69c:	9b07      	ldr	r3, [sp, #28]
 800e69e:	2b02      	cmp	r3, #2
 800e6a0:	dc51      	bgt.n	800e746 <_dtoa_r+0x856>
 800e6a2:	e089      	b.n	800e7b8 <_dtoa_r+0x8c8>
 800e6a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e6a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e6aa:	e751      	b.n	800e550 <_dtoa_r+0x660>
 800e6ac:	f109 34ff 	add.w	r4, r9, #4294967295
 800e6b0:	42a3      	cmp	r3, r4
 800e6b2:	bfbf      	itttt	lt
 800e6b4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800e6b6:	1ae3      	sublt	r3, r4, r3
 800e6b8:	18d2      	addlt	r2, r2, r3
 800e6ba:	4613      	movlt	r3, r2
 800e6bc:	bfb7      	itett	lt
 800e6be:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e6c0:	1b1c      	subge	r4, r3, r4
 800e6c2:	4623      	movlt	r3, r4
 800e6c4:	2400      	movlt	r4, #0
 800e6c6:	f1b9 0f00 	cmp.w	r9, #0
 800e6ca:	bfb5      	itete	lt
 800e6cc:	9a05      	ldrlt	r2, [sp, #20]
 800e6ce:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800e6d2:	eba2 0809 	sublt.w	r8, r2, r9
 800e6d6:	464a      	movge	r2, r9
 800e6d8:	bfb8      	it	lt
 800e6da:	2200      	movlt	r2, #0
 800e6dc:	e73b      	b.n	800e556 <_dtoa_r+0x666>
 800e6de:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e6e2:	9f08      	ldr	r7, [sp, #32]
 800e6e4:	461c      	mov	r4, r3
 800e6e6:	e743      	b.n	800e570 <_dtoa_r+0x680>
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	e76f      	b.n	800e5cc <_dtoa_r+0x6dc>
 800e6ec:	9b07      	ldr	r3, [sp, #28]
 800e6ee:	2b01      	cmp	r3, #1
 800e6f0:	dc18      	bgt.n	800e724 <_dtoa_r+0x834>
 800e6f2:	9b02      	ldr	r3, [sp, #8]
 800e6f4:	b9b3      	cbnz	r3, 800e724 <_dtoa_r+0x834>
 800e6f6:	9b03      	ldr	r3, [sp, #12]
 800e6f8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e6fc:	b9a2      	cbnz	r2, 800e728 <_dtoa_r+0x838>
 800e6fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e702:	0d12      	lsrs	r2, r2, #20
 800e704:	0512      	lsls	r2, r2, #20
 800e706:	b18a      	cbz	r2, 800e72c <_dtoa_r+0x83c>
 800e708:	9b05      	ldr	r3, [sp, #20]
 800e70a:	3301      	adds	r3, #1
 800e70c:	9305      	str	r3, [sp, #20]
 800e70e:	9b06      	ldr	r3, [sp, #24]
 800e710:	3301      	adds	r3, #1
 800e712:	9306      	str	r3, [sp, #24]
 800e714:	2301      	movs	r3, #1
 800e716:	930a      	str	r3, [sp, #40]	; 0x28
 800e718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f47f af6f 	bne.w	800e5fe <_dtoa_r+0x70e>
 800e720:	2001      	movs	r0, #1
 800e722:	e774      	b.n	800e60e <_dtoa_r+0x71e>
 800e724:	2300      	movs	r3, #0
 800e726:	e7f6      	b.n	800e716 <_dtoa_r+0x826>
 800e728:	9b02      	ldr	r3, [sp, #8]
 800e72a:	e7f4      	b.n	800e716 <_dtoa_r+0x826>
 800e72c:	920a      	str	r2, [sp, #40]	; 0x28
 800e72e:	e7f3      	b.n	800e718 <_dtoa_r+0x828>
 800e730:	d081      	beq.n	800e636 <_dtoa_r+0x746>
 800e732:	4610      	mov	r0, r2
 800e734:	301c      	adds	r0, #28
 800e736:	e777      	b.n	800e628 <_dtoa_r+0x738>
 800e738:	f1b9 0f00 	cmp.w	r9, #0
 800e73c:	dc37      	bgt.n	800e7ae <_dtoa_r+0x8be>
 800e73e:	9b07      	ldr	r3, [sp, #28]
 800e740:	2b02      	cmp	r3, #2
 800e742:	dd34      	ble.n	800e7ae <_dtoa_r+0x8be>
 800e744:	46ca      	mov	sl, r9
 800e746:	f1ba 0f00 	cmp.w	sl, #0
 800e74a:	d10d      	bne.n	800e768 <_dtoa_r+0x878>
 800e74c:	4621      	mov	r1, r4
 800e74e:	4653      	mov	r3, sl
 800e750:	2205      	movs	r2, #5
 800e752:	4630      	mov	r0, r6
 800e754:	f000 f9c0 	bl	800ead8 <__multadd>
 800e758:	4601      	mov	r1, r0
 800e75a:	4604      	mov	r4, r0
 800e75c:	4628      	mov	r0, r5
 800e75e:	f000 fbd7 	bl	800ef10 <__mcmp>
 800e762:	2800      	cmp	r0, #0
 800e764:	f73f adde 	bgt.w	800e324 <_dtoa_r+0x434>
 800e768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e76a:	f8dd 8000 	ldr.w	r8, [sp]
 800e76e:	ea6f 0b03 	mvn.w	fp, r3
 800e772:	f04f 0900 	mov.w	r9, #0
 800e776:	4621      	mov	r1, r4
 800e778:	4630      	mov	r0, r6
 800e77a:	f000 f98b 	bl	800ea94 <_Bfree>
 800e77e:	2f00      	cmp	r7, #0
 800e780:	f43f aea7 	beq.w	800e4d2 <_dtoa_r+0x5e2>
 800e784:	f1b9 0f00 	cmp.w	r9, #0
 800e788:	d005      	beq.n	800e796 <_dtoa_r+0x8a6>
 800e78a:	45b9      	cmp	r9, r7
 800e78c:	d003      	beq.n	800e796 <_dtoa_r+0x8a6>
 800e78e:	4649      	mov	r1, r9
 800e790:	4630      	mov	r0, r6
 800e792:	f000 f97f 	bl	800ea94 <_Bfree>
 800e796:	4639      	mov	r1, r7
 800e798:	4630      	mov	r0, r6
 800e79a:	f000 f97b 	bl	800ea94 <_Bfree>
 800e79e:	e698      	b.n	800e4d2 <_dtoa_r+0x5e2>
 800e7a0:	2400      	movs	r4, #0
 800e7a2:	4627      	mov	r7, r4
 800e7a4:	e7e0      	b.n	800e768 <_dtoa_r+0x878>
 800e7a6:	46bb      	mov	fp, r7
 800e7a8:	4604      	mov	r4, r0
 800e7aa:	4607      	mov	r7, r0
 800e7ac:	e5ba      	b.n	800e324 <_dtoa_r+0x434>
 800e7ae:	9b08      	ldr	r3, [sp, #32]
 800e7b0:	46ca      	mov	sl, r9
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	f000 8100 	beq.w	800e9b8 <_dtoa_r+0xac8>
 800e7b8:	f1b8 0f00 	cmp.w	r8, #0
 800e7bc:	dd05      	ble.n	800e7ca <_dtoa_r+0x8da>
 800e7be:	4639      	mov	r1, r7
 800e7c0:	4642      	mov	r2, r8
 800e7c2:	4630      	mov	r0, r6
 800e7c4:	f000 fb38 	bl	800ee38 <__lshift>
 800e7c8:	4607      	mov	r7, r0
 800e7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d05d      	beq.n	800e88c <_dtoa_r+0x99c>
 800e7d0:	6879      	ldr	r1, [r7, #4]
 800e7d2:	4630      	mov	r0, r6
 800e7d4:	f000 f91e 	bl	800ea14 <_Balloc>
 800e7d8:	4680      	mov	r8, r0
 800e7da:	b928      	cbnz	r0, 800e7e8 <_dtoa_r+0x8f8>
 800e7dc:	4b82      	ldr	r3, [pc, #520]	; (800e9e8 <_dtoa_r+0xaf8>)
 800e7de:	4602      	mov	r2, r0
 800e7e0:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e7e4:	f7ff bb9a 	b.w	800df1c <_dtoa_r+0x2c>
 800e7e8:	693a      	ldr	r2, [r7, #16]
 800e7ea:	3202      	adds	r2, #2
 800e7ec:	0092      	lsls	r2, r2, #2
 800e7ee:	f107 010c 	add.w	r1, r7, #12
 800e7f2:	300c      	adds	r0, #12
 800e7f4:	f7fe fdbc 	bl	800d370 <memcpy>
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	4641      	mov	r1, r8
 800e7fc:	4630      	mov	r0, r6
 800e7fe:	f000 fb1b 	bl	800ee38 <__lshift>
 800e802:	9b00      	ldr	r3, [sp, #0]
 800e804:	3301      	adds	r3, #1
 800e806:	9305      	str	r3, [sp, #20]
 800e808:	9b00      	ldr	r3, [sp, #0]
 800e80a:	4453      	add	r3, sl
 800e80c:	9309      	str	r3, [sp, #36]	; 0x24
 800e80e:	9b02      	ldr	r3, [sp, #8]
 800e810:	f003 0301 	and.w	r3, r3, #1
 800e814:	46b9      	mov	r9, r7
 800e816:	9308      	str	r3, [sp, #32]
 800e818:	4607      	mov	r7, r0
 800e81a:	9b05      	ldr	r3, [sp, #20]
 800e81c:	4621      	mov	r1, r4
 800e81e:	3b01      	subs	r3, #1
 800e820:	4628      	mov	r0, r5
 800e822:	9302      	str	r3, [sp, #8]
 800e824:	f7ff fad6 	bl	800ddd4 <quorem>
 800e828:	4603      	mov	r3, r0
 800e82a:	3330      	adds	r3, #48	; 0x30
 800e82c:	9006      	str	r0, [sp, #24]
 800e82e:	4649      	mov	r1, r9
 800e830:	4628      	mov	r0, r5
 800e832:	930a      	str	r3, [sp, #40]	; 0x28
 800e834:	f000 fb6c 	bl	800ef10 <__mcmp>
 800e838:	463a      	mov	r2, r7
 800e83a:	4682      	mov	sl, r0
 800e83c:	4621      	mov	r1, r4
 800e83e:	4630      	mov	r0, r6
 800e840:	f000 fb82 	bl	800ef48 <__mdiff>
 800e844:	68c2      	ldr	r2, [r0, #12]
 800e846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e848:	4680      	mov	r8, r0
 800e84a:	bb0a      	cbnz	r2, 800e890 <_dtoa_r+0x9a0>
 800e84c:	4601      	mov	r1, r0
 800e84e:	4628      	mov	r0, r5
 800e850:	f000 fb5e 	bl	800ef10 <__mcmp>
 800e854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e856:	4602      	mov	r2, r0
 800e858:	4641      	mov	r1, r8
 800e85a:	4630      	mov	r0, r6
 800e85c:	920e      	str	r2, [sp, #56]	; 0x38
 800e85e:	930a      	str	r3, [sp, #40]	; 0x28
 800e860:	f000 f918 	bl	800ea94 <_Bfree>
 800e864:	9b07      	ldr	r3, [sp, #28]
 800e866:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e868:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e86c:	ea43 0102 	orr.w	r1, r3, r2
 800e870:	9b08      	ldr	r3, [sp, #32]
 800e872:	430b      	orrs	r3, r1
 800e874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e876:	d10d      	bne.n	800e894 <_dtoa_r+0x9a4>
 800e878:	2b39      	cmp	r3, #57	; 0x39
 800e87a:	d029      	beq.n	800e8d0 <_dtoa_r+0x9e0>
 800e87c:	f1ba 0f00 	cmp.w	sl, #0
 800e880:	dd01      	ble.n	800e886 <_dtoa_r+0x996>
 800e882:	9b06      	ldr	r3, [sp, #24]
 800e884:	3331      	adds	r3, #49	; 0x31
 800e886:	9a02      	ldr	r2, [sp, #8]
 800e888:	7013      	strb	r3, [r2, #0]
 800e88a:	e774      	b.n	800e776 <_dtoa_r+0x886>
 800e88c:	4638      	mov	r0, r7
 800e88e:	e7b8      	b.n	800e802 <_dtoa_r+0x912>
 800e890:	2201      	movs	r2, #1
 800e892:	e7e1      	b.n	800e858 <_dtoa_r+0x968>
 800e894:	f1ba 0f00 	cmp.w	sl, #0
 800e898:	db06      	blt.n	800e8a8 <_dtoa_r+0x9b8>
 800e89a:	9907      	ldr	r1, [sp, #28]
 800e89c:	ea41 0a0a 	orr.w	sl, r1, sl
 800e8a0:	9908      	ldr	r1, [sp, #32]
 800e8a2:	ea5a 0101 	orrs.w	r1, sl, r1
 800e8a6:	d120      	bne.n	800e8ea <_dtoa_r+0x9fa>
 800e8a8:	2a00      	cmp	r2, #0
 800e8aa:	ddec      	ble.n	800e886 <_dtoa_r+0x996>
 800e8ac:	4629      	mov	r1, r5
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	4630      	mov	r0, r6
 800e8b2:	9305      	str	r3, [sp, #20]
 800e8b4:	f000 fac0 	bl	800ee38 <__lshift>
 800e8b8:	4621      	mov	r1, r4
 800e8ba:	4605      	mov	r5, r0
 800e8bc:	f000 fb28 	bl	800ef10 <__mcmp>
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	9b05      	ldr	r3, [sp, #20]
 800e8c4:	dc02      	bgt.n	800e8cc <_dtoa_r+0x9dc>
 800e8c6:	d1de      	bne.n	800e886 <_dtoa_r+0x996>
 800e8c8:	07da      	lsls	r2, r3, #31
 800e8ca:	d5dc      	bpl.n	800e886 <_dtoa_r+0x996>
 800e8cc:	2b39      	cmp	r3, #57	; 0x39
 800e8ce:	d1d8      	bne.n	800e882 <_dtoa_r+0x992>
 800e8d0:	9a02      	ldr	r2, [sp, #8]
 800e8d2:	2339      	movs	r3, #57	; 0x39
 800e8d4:	7013      	strb	r3, [r2, #0]
 800e8d6:	4643      	mov	r3, r8
 800e8d8:	4698      	mov	r8, r3
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e8e0:	2a39      	cmp	r2, #57	; 0x39
 800e8e2:	d051      	beq.n	800e988 <_dtoa_r+0xa98>
 800e8e4:	3201      	adds	r2, #1
 800e8e6:	701a      	strb	r2, [r3, #0]
 800e8e8:	e745      	b.n	800e776 <_dtoa_r+0x886>
 800e8ea:	2a00      	cmp	r2, #0
 800e8ec:	dd03      	ble.n	800e8f6 <_dtoa_r+0xa06>
 800e8ee:	2b39      	cmp	r3, #57	; 0x39
 800e8f0:	d0ee      	beq.n	800e8d0 <_dtoa_r+0x9e0>
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	e7c7      	b.n	800e886 <_dtoa_r+0x996>
 800e8f6:	9a05      	ldr	r2, [sp, #20]
 800e8f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e8fa:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e8fe:	428a      	cmp	r2, r1
 800e900:	d02b      	beq.n	800e95a <_dtoa_r+0xa6a>
 800e902:	4629      	mov	r1, r5
 800e904:	2300      	movs	r3, #0
 800e906:	220a      	movs	r2, #10
 800e908:	4630      	mov	r0, r6
 800e90a:	f000 f8e5 	bl	800ead8 <__multadd>
 800e90e:	45b9      	cmp	r9, r7
 800e910:	4605      	mov	r5, r0
 800e912:	f04f 0300 	mov.w	r3, #0
 800e916:	f04f 020a 	mov.w	r2, #10
 800e91a:	4649      	mov	r1, r9
 800e91c:	4630      	mov	r0, r6
 800e91e:	d107      	bne.n	800e930 <_dtoa_r+0xa40>
 800e920:	f000 f8da 	bl	800ead8 <__multadd>
 800e924:	4681      	mov	r9, r0
 800e926:	4607      	mov	r7, r0
 800e928:	9b05      	ldr	r3, [sp, #20]
 800e92a:	3301      	adds	r3, #1
 800e92c:	9305      	str	r3, [sp, #20]
 800e92e:	e774      	b.n	800e81a <_dtoa_r+0x92a>
 800e930:	f000 f8d2 	bl	800ead8 <__multadd>
 800e934:	4639      	mov	r1, r7
 800e936:	4681      	mov	r9, r0
 800e938:	2300      	movs	r3, #0
 800e93a:	220a      	movs	r2, #10
 800e93c:	4630      	mov	r0, r6
 800e93e:	f000 f8cb 	bl	800ead8 <__multadd>
 800e942:	4607      	mov	r7, r0
 800e944:	e7f0      	b.n	800e928 <_dtoa_r+0xa38>
 800e946:	f1ba 0f00 	cmp.w	sl, #0
 800e94a:	9a00      	ldr	r2, [sp, #0]
 800e94c:	bfcc      	ite	gt
 800e94e:	46d0      	movgt	r8, sl
 800e950:	f04f 0801 	movle.w	r8, #1
 800e954:	4490      	add	r8, r2
 800e956:	f04f 0900 	mov.w	r9, #0
 800e95a:	4629      	mov	r1, r5
 800e95c:	2201      	movs	r2, #1
 800e95e:	4630      	mov	r0, r6
 800e960:	9302      	str	r3, [sp, #8]
 800e962:	f000 fa69 	bl	800ee38 <__lshift>
 800e966:	4621      	mov	r1, r4
 800e968:	4605      	mov	r5, r0
 800e96a:	f000 fad1 	bl	800ef10 <__mcmp>
 800e96e:	2800      	cmp	r0, #0
 800e970:	dcb1      	bgt.n	800e8d6 <_dtoa_r+0x9e6>
 800e972:	d102      	bne.n	800e97a <_dtoa_r+0xa8a>
 800e974:	9b02      	ldr	r3, [sp, #8]
 800e976:	07db      	lsls	r3, r3, #31
 800e978:	d4ad      	bmi.n	800e8d6 <_dtoa_r+0x9e6>
 800e97a:	4643      	mov	r3, r8
 800e97c:	4698      	mov	r8, r3
 800e97e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e982:	2a30      	cmp	r2, #48	; 0x30
 800e984:	d0fa      	beq.n	800e97c <_dtoa_r+0xa8c>
 800e986:	e6f6      	b.n	800e776 <_dtoa_r+0x886>
 800e988:	9a00      	ldr	r2, [sp, #0]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d1a4      	bne.n	800e8d8 <_dtoa_r+0x9e8>
 800e98e:	f10b 0b01 	add.w	fp, fp, #1
 800e992:	2331      	movs	r3, #49	; 0x31
 800e994:	e778      	b.n	800e888 <_dtoa_r+0x998>
 800e996:	4b15      	ldr	r3, [pc, #84]	; (800e9ec <_dtoa_r+0xafc>)
 800e998:	f7ff bb12 	b.w	800dfc0 <_dtoa_r+0xd0>
 800e99c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	f47f aaee 	bne.w	800df80 <_dtoa_r+0x90>
 800e9a4:	4b12      	ldr	r3, [pc, #72]	; (800e9f0 <_dtoa_r+0xb00>)
 800e9a6:	f7ff bb0b 	b.w	800dfc0 <_dtoa_r+0xd0>
 800e9aa:	f1ba 0f00 	cmp.w	sl, #0
 800e9ae:	dc03      	bgt.n	800e9b8 <_dtoa_r+0xac8>
 800e9b0:	9b07      	ldr	r3, [sp, #28]
 800e9b2:	2b02      	cmp	r3, #2
 800e9b4:	f73f aec7 	bgt.w	800e746 <_dtoa_r+0x856>
 800e9b8:	f8dd 8000 	ldr.w	r8, [sp]
 800e9bc:	4621      	mov	r1, r4
 800e9be:	4628      	mov	r0, r5
 800e9c0:	f7ff fa08 	bl	800ddd4 <quorem>
 800e9c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e9c8:	f808 3b01 	strb.w	r3, [r8], #1
 800e9cc:	9a00      	ldr	r2, [sp, #0]
 800e9ce:	eba8 0202 	sub.w	r2, r8, r2
 800e9d2:	4592      	cmp	sl, r2
 800e9d4:	ddb7      	ble.n	800e946 <_dtoa_r+0xa56>
 800e9d6:	4629      	mov	r1, r5
 800e9d8:	2300      	movs	r3, #0
 800e9da:	220a      	movs	r2, #10
 800e9dc:	4630      	mov	r0, r6
 800e9de:	f000 f87b 	bl	800ead8 <__multadd>
 800e9e2:	4605      	mov	r5, r0
 800e9e4:	e7ea      	b.n	800e9bc <_dtoa_r+0xacc>
 800e9e6:	bf00      	nop
 800e9e8:	0806ed6b 	.word	0x0806ed6b
 800e9ec:	0806ecc4 	.word	0x0806ecc4
 800e9f0:	0806ece8 	.word	0x0806ece8

0800e9f4 <_localeconv_r>:
 800e9f4:	4800      	ldr	r0, [pc, #0]	; (800e9f8 <_localeconv_r+0x4>)
 800e9f6:	4770      	bx	lr
 800e9f8:	24001e10 	.word	0x24001e10

0800e9fc <__malloc_lock>:
 800e9fc:	4801      	ldr	r0, [pc, #4]	; (800ea04 <__malloc_lock+0x8>)
 800e9fe:	f000 bd48 	b.w	800f492 <__retarget_lock_acquire_recursive>
 800ea02:	bf00      	nop
 800ea04:	2400c5f8 	.word	0x2400c5f8

0800ea08 <__malloc_unlock>:
 800ea08:	4801      	ldr	r0, [pc, #4]	; (800ea10 <__malloc_unlock+0x8>)
 800ea0a:	f000 bd43 	b.w	800f494 <__retarget_lock_release_recursive>
 800ea0e:	bf00      	nop
 800ea10:	2400c5f8 	.word	0x2400c5f8

0800ea14 <_Balloc>:
 800ea14:	b570      	push	{r4, r5, r6, lr}
 800ea16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea18:	4604      	mov	r4, r0
 800ea1a:	460d      	mov	r5, r1
 800ea1c:	b976      	cbnz	r6, 800ea3c <_Balloc+0x28>
 800ea1e:	2010      	movs	r0, #16
 800ea20:	f7fe fc9e 	bl	800d360 <malloc>
 800ea24:	4602      	mov	r2, r0
 800ea26:	6260      	str	r0, [r4, #36]	; 0x24
 800ea28:	b920      	cbnz	r0, 800ea34 <_Balloc+0x20>
 800ea2a:	4b18      	ldr	r3, [pc, #96]	; (800ea8c <_Balloc+0x78>)
 800ea2c:	4818      	ldr	r0, [pc, #96]	; (800ea90 <_Balloc+0x7c>)
 800ea2e:	2166      	movs	r1, #102	; 0x66
 800ea30:	f000 fcfe 	bl	800f430 <__assert_func>
 800ea34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea38:	6006      	str	r6, [r0, #0]
 800ea3a:	60c6      	str	r6, [r0, #12]
 800ea3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ea3e:	68f3      	ldr	r3, [r6, #12]
 800ea40:	b183      	cbz	r3, 800ea64 <_Balloc+0x50>
 800ea42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea4a:	b9b8      	cbnz	r0, 800ea7c <_Balloc+0x68>
 800ea4c:	2101      	movs	r1, #1
 800ea4e:	fa01 f605 	lsl.w	r6, r1, r5
 800ea52:	1d72      	adds	r2, r6, #5
 800ea54:	0092      	lsls	r2, r2, #2
 800ea56:	4620      	mov	r0, r4
 800ea58:	f000 fb5a 	bl	800f110 <_calloc_r>
 800ea5c:	b160      	cbz	r0, 800ea78 <_Balloc+0x64>
 800ea5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea62:	e00e      	b.n	800ea82 <_Balloc+0x6e>
 800ea64:	2221      	movs	r2, #33	; 0x21
 800ea66:	2104      	movs	r1, #4
 800ea68:	4620      	mov	r0, r4
 800ea6a:	f000 fb51 	bl	800f110 <_calloc_r>
 800ea6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea70:	60f0      	str	r0, [r6, #12]
 800ea72:	68db      	ldr	r3, [r3, #12]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d1e4      	bne.n	800ea42 <_Balloc+0x2e>
 800ea78:	2000      	movs	r0, #0
 800ea7a:	bd70      	pop	{r4, r5, r6, pc}
 800ea7c:	6802      	ldr	r2, [r0, #0]
 800ea7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea82:	2300      	movs	r3, #0
 800ea84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea88:	e7f7      	b.n	800ea7a <_Balloc+0x66>
 800ea8a:	bf00      	nop
 800ea8c:	0806ecf5 	.word	0x0806ecf5
 800ea90:	0806ed7c 	.word	0x0806ed7c

0800ea94 <_Bfree>:
 800ea94:	b570      	push	{r4, r5, r6, lr}
 800ea96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea98:	4605      	mov	r5, r0
 800ea9a:	460c      	mov	r4, r1
 800ea9c:	b976      	cbnz	r6, 800eabc <_Bfree+0x28>
 800ea9e:	2010      	movs	r0, #16
 800eaa0:	f7fe fc5e 	bl	800d360 <malloc>
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	6268      	str	r0, [r5, #36]	; 0x24
 800eaa8:	b920      	cbnz	r0, 800eab4 <_Bfree+0x20>
 800eaaa:	4b09      	ldr	r3, [pc, #36]	; (800ead0 <_Bfree+0x3c>)
 800eaac:	4809      	ldr	r0, [pc, #36]	; (800ead4 <_Bfree+0x40>)
 800eaae:	218a      	movs	r1, #138	; 0x8a
 800eab0:	f000 fcbe 	bl	800f430 <__assert_func>
 800eab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eab8:	6006      	str	r6, [r0, #0]
 800eaba:	60c6      	str	r6, [r0, #12]
 800eabc:	b13c      	cbz	r4, 800eace <_Bfree+0x3a>
 800eabe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eac0:	6862      	ldr	r2, [r4, #4]
 800eac2:	68db      	ldr	r3, [r3, #12]
 800eac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eac8:	6021      	str	r1, [r4, #0]
 800eaca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eace:	bd70      	pop	{r4, r5, r6, pc}
 800ead0:	0806ecf5 	.word	0x0806ecf5
 800ead4:	0806ed7c 	.word	0x0806ed7c

0800ead8 <__multadd>:
 800ead8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eadc:	690e      	ldr	r6, [r1, #16]
 800eade:	4607      	mov	r7, r0
 800eae0:	4698      	mov	r8, r3
 800eae2:	460c      	mov	r4, r1
 800eae4:	f101 0014 	add.w	r0, r1, #20
 800eae8:	2300      	movs	r3, #0
 800eaea:	6805      	ldr	r5, [r0, #0]
 800eaec:	b2a9      	uxth	r1, r5
 800eaee:	fb02 8101 	mla	r1, r2, r1, r8
 800eaf2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800eaf6:	0c2d      	lsrs	r5, r5, #16
 800eaf8:	fb02 c505 	mla	r5, r2, r5, ip
 800eafc:	b289      	uxth	r1, r1
 800eafe:	3301      	adds	r3, #1
 800eb00:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800eb04:	429e      	cmp	r6, r3
 800eb06:	f840 1b04 	str.w	r1, [r0], #4
 800eb0a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800eb0e:	dcec      	bgt.n	800eaea <__multadd+0x12>
 800eb10:	f1b8 0f00 	cmp.w	r8, #0
 800eb14:	d022      	beq.n	800eb5c <__multadd+0x84>
 800eb16:	68a3      	ldr	r3, [r4, #8]
 800eb18:	42b3      	cmp	r3, r6
 800eb1a:	dc19      	bgt.n	800eb50 <__multadd+0x78>
 800eb1c:	6861      	ldr	r1, [r4, #4]
 800eb1e:	4638      	mov	r0, r7
 800eb20:	3101      	adds	r1, #1
 800eb22:	f7ff ff77 	bl	800ea14 <_Balloc>
 800eb26:	4605      	mov	r5, r0
 800eb28:	b928      	cbnz	r0, 800eb36 <__multadd+0x5e>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	4b0d      	ldr	r3, [pc, #52]	; (800eb64 <__multadd+0x8c>)
 800eb2e:	480e      	ldr	r0, [pc, #56]	; (800eb68 <__multadd+0x90>)
 800eb30:	21b5      	movs	r1, #181	; 0xb5
 800eb32:	f000 fc7d 	bl	800f430 <__assert_func>
 800eb36:	6922      	ldr	r2, [r4, #16]
 800eb38:	3202      	adds	r2, #2
 800eb3a:	f104 010c 	add.w	r1, r4, #12
 800eb3e:	0092      	lsls	r2, r2, #2
 800eb40:	300c      	adds	r0, #12
 800eb42:	f7fe fc15 	bl	800d370 <memcpy>
 800eb46:	4621      	mov	r1, r4
 800eb48:	4638      	mov	r0, r7
 800eb4a:	f7ff ffa3 	bl	800ea94 <_Bfree>
 800eb4e:	462c      	mov	r4, r5
 800eb50:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800eb54:	3601      	adds	r6, #1
 800eb56:	f8c3 8014 	str.w	r8, [r3, #20]
 800eb5a:	6126      	str	r6, [r4, #16]
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb62:	bf00      	nop
 800eb64:	0806ed6b 	.word	0x0806ed6b
 800eb68:	0806ed7c 	.word	0x0806ed7c

0800eb6c <__hi0bits>:
 800eb6c:	0c03      	lsrs	r3, r0, #16
 800eb6e:	041b      	lsls	r3, r3, #16
 800eb70:	b9d3      	cbnz	r3, 800eba8 <__hi0bits+0x3c>
 800eb72:	0400      	lsls	r0, r0, #16
 800eb74:	2310      	movs	r3, #16
 800eb76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eb7a:	bf04      	itt	eq
 800eb7c:	0200      	lsleq	r0, r0, #8
 800eb7e:	3308      	addeq	r3, #8
 800eb80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eb84:	bf04      	itt	eq
 800eb86:	0100      	lsleq	r0, r0, #4
 800eb88:	3304      	addeq	r3, #4
 800eb8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eb8e:	bf04      	itt	eq
 800eb90:	0080      	lsleq	r0, r0, #2
 800eb92:	3302      	addeq	r3, #2
 800eb94:	2800      	cmp	r0, #0
 800eb96:	db05      	blt.n	800eba4 <__hi0bits+0x38>
 800eb98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eb9c:	f103 0301 	add.w	r3, r3, #1
 800eba0:	bf08      	it	eq
 800eba2:	2320      	moveq	r3, #32
 800eba4:	4618      	mov	r0, r3
 800eba6:	4770      	bx	lr
 800eba8:	2300      	movs	r3, #0
 800ebaa:	e7e4      	b.n	800eb76 <__hi0bits+0xa>

0800ebac <__lo0bits>:
 800ebac:	6803      	ldr	r3, [r0, #0]
 800ebae:	f013 0207 	ands.w	r2, r3, #7
 800ebb2:	4601      	mov	r1, r0
 800ebb4:	d00b      	beq.n	800ebce <__lo0bits+0x22>
 800ebb6:	07da      	lsls	r2, r3, #31
 800ebb8:	d424      	bmi.n	800ec04 <__lo0bits+0x58>
 800ebba:	0798      	lsls	r0, r3, #30
 800ebbc:	bf49      	itett	mi
 800ebbe:	085b      	lsrmi	r3, r3, #1
 800ebc0:	089b      	lsrpl	r3, r3, #2
 800ebc2:	2001      	movmi	r0, #1
 800ebc4:	600b      	strmi	r3, [r1, #0]
 800ebc6:	bf5c      	itt	pl
 800ebc8:	600b      	strpl	r3, [r1, #0]
 800ebca:	2002      	movpl	r0, #2
 800ebcc:	4770      	bx	lr
 800ebce:	b298      	uxth	r0, r3
 800ebd0:	b9b0      	cbnz	r0, 800ec00 <__lo0bits+0x54>
 800ebd2:	0c1b      	lsrs	r3, r3, #16
 800ebd4:	2010      	movs	r0, #16
 800ebd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ebda:	bf04      	itt	eq
 800ebdc:	0a1b      	lsreq	r3, r3, #8
 800ebde:	3008      	addeq	r0, #8
 800ebe0:	071a      	lsls	r2, r3, #28
 800ebe2:	bf04      	itt	eq
 800ebe4:	091b      	lsreq	r3, r3, #4
 800ebe6:	3004      	addeq	r0, #4
 800ebe8:	079a      	lsls	r2, r3, #30
 800ebea:	bf04      	itt	eq
 800ebec:	089b      	lsreq	r3, r3, #2
 800ebee:	3002      	addeq	r0, #2
 800ebf0:	07da      	lsls	r2, r3, #31
 800ebf2:	d403      	bmi.n	800ebfc <__lo0bits+0x50>
 800ebf4:	085b      	lsrs	r3, r3, #1
 800ebf6:	f100 0001 	add.w	r0, r0, #1
 800ebfa:	d005      	beq.n	800ec08 <__lo0bits+0x5c>
 800ebfc:	600b      	str	r3, [r1, #0]
 800ebfe:	4770      	bx	lr
 800ec00:	4610      	mov	r0, r2
 800ec02:	e7e8      	b.n	800ebd6 <__lo0bits+0x2a>
 800ec04:	2000      	movs	r0, #0
 800ec06:	4770      	bx	lr
 800ec08:	2020      	movs	r0, #32
 800ec0a:	4770      	bx	lr

0800ec0c <__i2b>:
 800ec0c:	b510      	push	{r4, lr}
 800ec0e:	460c      	mov	r4, r1
 800ec10:	2101      	movs	r1, #1
 800ec12:	f7ff feff 	bl	800ea14 <_Balloc>
 800ec16:	4602      	mov	r2, r0
 800ec18:	b928      	cbnz	r0, 800ec26 <__i2b+0x1a>
 800ec1a:	4b05      	ldr	r3, [pc, #20]	; (800ec30 <__i2b+0x24>)
 800ec1c:	4805      	ldr	r0, [pc, #20]	; (800ec34 <__i2b+0x28>)
 800ec1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ec22:	f000 fc05 	bl	800f430 <__assert_func>
 800ec26:	2301      	movs	r3, #1
 800ec28:	6144      	str	r4, [r0, #20]
 800ec2a:	6103      	str	r3, [r0, #16]
 800ec2c:	bd10      	pop	{r4, pc}
 800ec2e:	bf00      	nop
 800ec30:	0806ed6b 	.word	0x0806ed6b
 800ec34:	0806ed7c 	.word	0x0806ed7c

0800ec38 <__multiply>:
 800ec38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec3c:	4614      	mov	r4, r2
 800ec3e:	690a      	ldr	r2, [r1, #16]
 800ec40:	6923      	ldr	r3, [r4, #16]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	bfb8      	it	lt
 800ec46:	460b      	movlt	r3, r1
 800ec48:	460d      	mov	r5, r1
 800ec4a:	bfbc      	itt	lt
 800ec4c:	4625      	movlt	r5, r4
 800ec4e:	461c      	movlt	r4, r3
 800ec50:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ec54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ec58:	68ab      	ldr	r3, [r5, #8]
 800ec5a:	6869      	ldr	r1, [r5, #4]
 800ec5c:	eb0a 0709 	add.w	r7, sl, r9
 800ec60:	42bb      	cmp	r3, r7
 800ec62:	b085      	sub	sp, #20
 800ec64:	bfb8      	it	lt
 800ec66:	3101      	addlt	r1, #1
 800ec68:	f7ff fed4 	bl	800ea14 <_Balloc>
 800ec6c:	b930      	cbnz	r0, 800ec7c <__multiply+0x44>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	4b42      	ldr	r3, [pc, #264]	; (800ed7c <__multiply+0x144>)
 800ec72:	4843      	ldr	r0, [pc, #268]	; (800ed80 <__multiply+0x148>)
 800ec74:	f240 115d 	movw	r1, #349	; 0x15d
 800ec78:	f000 fbda 	bl	800f430 <__assert_func>
 800ec7c:	f100 0614 	add.w	r6, r0, #20
 800ec80:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ec84:	4633      	mov	r3, r6
 800ec86:	2200      	movs	r2, #0
 800ec88:	4543      	cmp	r3, r8
 800ec8a:	d31e      	bcc.n	800ecca <__multiply+0x92>
 800ec8c:	f105 0c14 	add.w	ip, r5, #20
 800ec90:	f104 0314 	add.w	r3, r4, #20
 800ec94:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ec98:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ec9c:	9202      	str	r2, [sp, #8]
 800ec9e:	ebac 0205 	sub.w	r2, ip, r5
 800eca2:	3a15      	subs	r2, #21
 800eca4:	f022 0203 	bic.w	r2, r2, #3
 800eca8:	3204      	adds	r2, #4
 800ecaa:	f105 0115 	add.w	r1, r5, #21
 800ecae:	458c      	cmp	ip, r1
 800ecb0:	bf38      	it	cc
 800ecb2:	2204      	movcc	r2, #4
 800ecb4:	9201      	str	r2, [sp, #4]
 800ecb6:	9a02      	ldr	r2, [sp, #8]
 800ecb8:	9303      	str	r3, [sp, #12]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d808      	bhi.n	800ecd0 <__multiply+0x98>
 800ecbe:	2f00      	cmp	r7, #0
 800ecc0:	dc55      	bgt.n	800ed6e <__multiply+0x136>
 800ecc2:	6107      	str	r7, [r0, #16]
 800ecc4:	b005      	add	sp, #20
 800ecc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecca:	f843 2b04 	str.w	r2, [r3], #4
 800ecce:	e7db      	b.n	800ec88 <__multiply+0x50>
 800ecd0:	f8b3 a000 	ldrh.w	sl, [r3]
 800ecd4:	f1ba 0f00 	cmp.w	sl, #0
 800ecd8:	d020      	beq.n	800ed1c <__multiply+0xe4>
 800ecda:	f105 0e14 	add.w	lr, r5, #20
 800ecde:	46b1      	mov	r9, r6
 800ece0:	2200      	movs	r2, #0
 800ece2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ece6:	f8d9 b000 	ldr.w	fp, [r9]
 800ecea:	b2a1      	uxth	r1, r4
 800ecec:	fa1f fb8b 	uxth.w	fp, fp
 800ecf0:	fb0a b101 	mla	r1, sl, r1, fp
 800ecf4:	4411      	add	r1, r2
 800ecf6:	f8d9 2000 	ldr.w	r2, [r9]
 800ecfa:	0c24      	lsrs	r4, r4, #16
 800ecfc:	0c12      	lsrs	r2, r2, #16
 800ecfe:	fb0a 2404 	mla	r4, sl, r4, r2
 800ed02:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ed06:	b289      	uxth	r1, r1
 800ed08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ed0c:	45f4      	cmp	ip, lr
 800ed0e:	f849 1b04 	str.w	r1, [r9], #4
 800ed12:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ed16:	d8e4      	bhi.n	800ece2 <__multiply+0xaa>
 800ed18:	9901      	ldr	r1, [sp, #4]
 800ed1a:	5072      	str	r2, [r6, r1]
 800ed1c:	9a03      	ldr	r2, [sp, #12]
 800ed1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ed22:	3304      	adds	r3, #4
 800ed24:	f1b9 0f00 	cmp.w	r9, #0
 800ed28:	d01f      	beq.n	800ed6a <__multiply+0x132>
 800ed2a:	6834      	ldr	r4, [r6, #0]
 800ed2c:	f105 0114 	add.w	r1, r5, #20
 800ed30:	46b6      	mov	lr, r6
 800ed32:	f04f 0a00 	mov.w	sl, #0
 800ed36:	880a      	ldrh	r2, [r1, #0]
 800ed38:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ed3c:	fb09 b202 	mla	r2, r9, r2, fp
 800ed40:	4492      	add	sl, r2
 800ed42:	b2a4      	uxth	r4, r4
 800ed44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ed48:	f84e 4b04 	str.w	r4, [lr], #4
 800ed4c:	f851 4b04 	ldr.w	r4, [r1], #4
 800ed50:	f8be 2000 	ldrh.w	r2, [lr]
 800ed54:	0c24      	lsrs	r4, r4, #16
 800ed56:	fb09 2404 	mla	r4, r9, r4, r2
 800ed5a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ed5e:	458c      	cmp	ip, r1
 800ed60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ed64:	d8e7      	bhi.n	800ed36 <__multiply+0xfe>
 800ed66:	9a01      	ldr	r2, [sp, #4]
 800ed68:	50b4      	str	r4, [r6, r2]
 800ed6a:	3604      	adds	r6, #4
 800ed6c:	e7a3      	b.n	800ecb6 <__multiply+0x7e>
 800ed6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d1a5      	bne.n	800ecc2 <__multiply+0x8a>
 800ed76:	3f01      	subs	r7, #1
 800ed78:	e7a1      	b.n	800ecbe <__multiply+0x86>
 800ed7a:	bf00      	nop
 800ed7c:	0806ed6b 	.word	0x0806ed6b
 800ed80:	0806ed7c 	.word	0x0806ed7c

0800ed84 <__pow5mult>:
 800ed84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed88:	4615      	mov	r5, r2
 800ed8a:	f012 0203 	ands.w	r2, r2, #3
 800ed8e:	4606      	mov	r6, r0
 800ed90:	460f      	mov	r7, r1
 800ed92:	d007      	beq.n	800eda4 <__pow5mult+0x20>
 800ed94:	4c25      	ldr	r4, [pc, #148]	; (800ee2c <__pow5mult+0xa8>)
 800ed96:	3a01      	subs	r2, #1
 800ed98:	2300      	movs	r3, #0
 800ed9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed9e:	f7ff fe9b 	bl	800ead8 <__multadd>
 800eda2:	4607      	mov	r7, r0
 800eda4:	10ad      	asrs	r5, r5, #2
 800eda6:	d03d      	beq.n	800ee24 <__pow5mult+0xa0>
 800eda8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800edaa:	b97c      	cbnz	r4, 800edcc <__pow5mult+0x48>
 800edac:	2010      	movs	r0, #16
 800edae:	f7fe fad7 	bl	800d360 <malloc>
 800edb2:	4602      	mov	r2, r0
 800edb4:	6270      	str	r0, [r6, #36]	; 0x24
 800edb6:	b928      	cbnz	r0, 800edc4 <__pow5mult+0x40>
 800edb8:	4b1d      	ldr	r3, [pc, #116]	; (800ee30 <__pow5mult+0xac>)
 800edba:	481e      	ldr	r0, [pc, #120]	; (800ee34 <__pow5mult+0xb0>)
 800edbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800edc0:	f000 fb36 	bl	800f430 <__assert_func>
 800edc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800edc8:	6004      	str	r4, [r0, #0]
 800edca:	60c4      	str	r4, [r0, #12]
 800edcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800edd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800edd4:	b94c      	cbnz	r4, 800edea <__pow5mult+0x66>
 800edd6:	f240 2171 	movw	r1, #625	; 0x271
 800edda:	4630      	mov	r0, r6
 800eddc:	f7ff ff16 	bl	800ec0c <__i2b>
 800ede0:	2300      	movs	r3, #0
 800ede2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ede6:	4604      	mov	r4, r0
 800ede8:	6003      	str	r3, [r0, #0]
 800edea:	f04f 0900 	mov.w	r9, #0
 800edee:	07eb      	lsls	r3, r5, #31
 800edf0:	d50a      	bpl.n	800ee08 <__pow5mult+0x84>
 800edf2:	4639      	mov	r1, r7
 800edf4:	4622      	mov	r2, r4
 800edf6:	4630      	mov	r0, r6
 800edf8:	f7ff ff1e 	bl	800ec38 <__multiply>
 800edfc:	4639      	mov	r1, r7
 800edfe:	4680      	mov	r8, r0
 800ee00:	4630      	mov	r0, r6
 800ee02:	f7ff fe47 	bl	800ea94 <_Bfree>
 800ee06:	4647      	mov	r7, r8
 800ee08:	106d      	asrs	r5, r5, #1
 800ee0a:	d00b      	beq.n	800ee24 <__pow5mult+0xa0>
 800ee0c:	6820      	ldr	r0, [r4, #0]
 800ee0e:	b938      	cbnz	r0, 800ee20 <__pow5mult+0x9c>
 800ee10:	4622      	mov	r2, r4
 800ee12:	4621      	mov	r1, r4
 800ee14:	4630      	mov	r0, r6
 800ee16:	f7ff ff0f 	bl	800ec38 <__multiply>
 800ee1a:	6020      	str	r0, [r4, #0]
 800ee1c:	f8c0 9000 	str.w	r9, [r0]
 800ee20:	4604      	mov	r4, r0
 800ee22:	e7e4      	b.n	800edee <__pow5mult+0x6a>
 800ee24:	4638      	mov	r0, r7
 800ee26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee2a:	bf00      	nop
 800ee2c:	0806eed0 	.word	0x0806eed0
 800ee30:	0806ecf5 	.word	0x0806ecf5
 800ee34:	0806ed7c 	.word	0x0806ed7c

0800ee38 <__lshift>:
 800ee38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee3c:	460c      	mov	r4, r1
 800ee3e:	6849      	ldr	r1, [r1, #4]
 800ee40:	6923      	ldr	r3, [r4, #16]
 800ee42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee46:	68a3      	ldr	r3, [r4, #8]
 800ee48:	4607      	mov	r7, r0
 800ee4a:	4691      	mov	r9, r2
 800ee4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee50:	f108 0601 	add.w	r6, r8, #1
 800ee54:	42b3      	cmp	r3, r6
 800ee56:	db0b      	blt.n	800ee70 <__lshift+0x38>
 800ee58:	4638      	mov	r0, r7
 800ee5a:	f7ff fddb 	bl	800ea14 <_Balloc>
 800ee5e:	4605      	mov	r5, r0
 800ee60:	b948      	cbnz	r0, 800ee76 <__lshift+0x3e>
 800ee62:	4602      	mov	r2, r0
 800ee64:	4b28      	ldr	r3, [pc, #160]	; (800ef08 <__lshift+0xd0>)
 800ee66:	4829      	ldr	r0, [pc, #164]	; (800ef0c <__lshift+0xd4>)
 800ee68:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ee6c:	f000 fae0 	bl	800f430 <__assert_func>
 800ee70:	3101      	adds	r1, #1
 800ee72:	005b      	lsls	r3, r3, #1
 800ee74:	e7ee      	b.n	800ee54 <__lshift+0x1c>
 800ee76:	2300      	movs	r3, #0
 800ee78:	f100 0114 	add.w	r1, r0, #20
 800ee7c:	f100 0210 	add.w	r2, r0, #16
 800ee80:	4618      	mov	r0, r3
 800ee82:	4553      	cmp	r3, sl
 800ee84:	db33      	blt.n	800eeee <__lshift+0xb6>
 800ee86:	6920      	ldr	r0, [r4, #16]
 800ee88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee8c:	f104 0314 	add.w	r3, r4, #20
 800ee90:	f019 091f 	ands.w	r9, r9, #31
 800ee94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ee9c:	d02b      	beq.n	800eef6 <__lshift+0xbe>
 800ee9e:	f1c9 0e20 	rsb	lr, r9, #32
 800eea2:	468a      	mov	sl, r1
 800eea4:	2200      	movs	r2, #0
 800eea6:	6818      	ldr	r0, [r3, #0]
 800eea8:	fa00 f009 	lsl.w	r0, r0, r9
 800eeac:	4302      	orrs	r2, r0
 800eeae:	f84a 2b04 	str.w	r2, [sl], #4
 800eeb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eeb6:	459c      	cmp	ip, r3
 800eeb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800eebc:	d8f3      	bhi.n	800eea6 <__lshift+0x6e>
 800eebe:	ebac 0304 	sub.w	r3, ip, r4
 800eec2:	3b15      	subs	r3, #21
 800eec4:	f023 0303 	bic.w	r3, r3, #3
 800eec8:	3304      	adds	r3, #4
 800eeca:	f104 0015 	add.w	r0, r4, #21
 800eece:	4584      	cmp	ip, r0
 800eed0:	bf38      	it	cc
 800eed2:	2304      	movcc	r3, #4
 800eed4:	50ca      	str	r2, [r1, r3]
 800eed6:	b10a      	cbz	r2, 800eedc <__lshift+0xa4>
 800eed8:	f108 0602 	add.w	r6, r8, #2
 800eedc:	3e01      	subs	r6, #1
 800eede:	4638      	mov	r0, r7
 800eee0:	612e      	str	r6, [r5, #16]
 800eee2:	4621      	mov	r1, r4
 800eee4:	f7ff fdd6 	bl	800ea94 <_Bfree>
 800eee8:	4628      	mov	r0, r5
 800eeea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeee:	f842 0f04 	str.w	r0, [r2, #4]!
 800eef2:	3301      	adds	r3, #1
 800eef4:	e7c5      	b.n	800ee82 <__lshift+0x4a>
 800eef6:	3904      	subs	r1, #4
 800eef8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eefc:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef00:	459c      	cmp	ip, r3
 800ef02:	d8f9      	bhi.n	800eef8 <__lshift+0xc0>
 800ef04:	e7ea      	b.n	800eedc <__lshift+0xa4>
 800ef06:	bf00      	nop
 800ef08:	0806ed6b 	.word	0x0806ed6b
 800ef0c:	0806ed7c 	.word	0x0806ed7c

0800ef10 <__mcmp>:
 800ef10:	b530      	push	{r4, r5, lr}
 800ef12:	6902      	ldr	r2, [r0, #16]
 800ef14:	690c      	ldr	r4, [r1, #16]
 800ef16:	1b12      	subs	r2, r2, r4
 800ef18:	d10e      	bne.n	800ef38 <__mcmp+0x28>
 800ef1a:	f100 0314 	add.w	r3, r0, #20
 800ef1e:	3114      	adds	r1, #20
 800ef20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ef24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ef28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ef2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ef30:	42a5      	cmp	r5, r4
 800ef32:	d003      	beq.n	800ef3c <__mcmp+0x2c>
 800ef34:	d305      	bcc.n	800ef42 <__mcmp+0x32>
 800ef36:	2201      	movs	r2, #1
 800ef38:	4610      	mov	r0, r2
 800ef3a:	bd30      	pop	{r4, r5, pc}
 800ef3c:	4283      	cmp	r3, r0
 800ef3e:	d3f3      	bcc.n	800ef28 <__mcmp+0x18>
 800ef40:	e7fa      	b.n	800ef38 <__mcmp+0x28>
 800ef42:	f04f 32ff 	mov.w	r2, #4294967295
 800ef46:	e7f7      	b.n	800ef38 <__mcmp+0x28>

0800ef48 <__mdiff>:
 800ef48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef4c:	460c      	mov	r4, r1
 800ef4e:	4606      	mov	r6, r0
 800ef50:	4611      	mov	r1, r2
 800ef52:	4620      	mov	r0, r4
 800ef54:	4617      	mov	r7, r2
 800ef56:	f7ff ffdb 	bl	800ef10 <__mcmp>
 800ef5a:	1e05      	subs	r5, r0, #0
 800ef5c:	d110      	bne.n	800ef80 <__mdiff+0x38>
 800ef5e:	4629      	mov	r1, r5
 800ef60:	4630      	mov	r0, r6
 800ef62:	f7ff fd57 	bl	800ea14 <_Balloc>
 800ef66:	b930      	cbnz	r0, 800ef76 <__mdiff+0x2e>
 800ef68:	4b39      	ldr	r3, [pc, #228]	; (800f050 <__mdiff+0x108>)
 800ef6a:	4602      	mov	r2, r0
 800ef6c:	f240 2132 	movw	r1, #562	; 0x232
 800ef70:	4838      	ldr	r0, [pc, #224]	; (800f054 <__mdiff+0x10c>)
 800ef72:	f000 fa5d 	bl	800f430 <__assert_func>
 800ef76:	2301      	movs	r3, #1
 800ef78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef80:	bfa4      	itt	ge
 800ef82:	463b      	movge	r3, r7
 800ef84:	4627      	movge	r7, r4
 800ef86:	4630      	mov	r0, r6
 800ef88:	6879      	ldr	r1, [r7, #4]
 800ef8a:	bfa6      	itte	ge
 800ef8c:	461c      	movge	r4, r3
 800ef8e:	2500      	movge	r5, #0
 800ef90:	2501      	movlt	r5, #1
 800ef92:	f7ff fd3f 	bl	800ea14 <_Balloc>
 800ef96:	b920      	cbnz	r0, 800efa2 <__mdiff+0x5a>
 800ef98:	4b2d      	ldr	r3, [pc, #180]	; (800f050 <__mdiff+0x108>)
 800ef9a:	4602      	mov	r2, r0
 800ef9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800efa0:	e7e6      	b.n	800ef70 <__mdiff+0x28>
 800efa2:	693e      	ldr	r6, [r7, #16]
 800efa4:	60c5      	str	r5, [r0, #12]
 800efa6:	6925      	ldr	r5, [r4, #16]
 800efa8:	f107 0114 	add.w	r1, r7, #20
 800efac:	f104 0914 	add.w	r9, r4, #20
 800efb0:	f100 0e14 	add.w	lr, r0, #20
 800efb4:	f107 0210 	add.w	r2, r7, #16
 800efb8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800efbc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800efc0:	46f2      	mov	sl, lr
 800efc2:	2700      	movs	r7, #0
 800efc4:	f859 3b04 	ldr.w	r3, [r9], #4
 800efc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800efcc:	fa1f f883 	uxth.w	r8, r3
 800efd0:	fa17 f78b 	uxtah	r7, r7, fp
 800efd4:	0c1b      	lsrs	r3, r3, #16
 800efd6:	eba7 0808 	sub.w	r8, r7, r8
 800efda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800efde:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800efe2:	fa1f f888 	uxth.w	r8, r8
 800efe6:	141f      	asrs	r7, r3, #16
 800efe8:	454d      	cmp	r5, r9
 800efea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800efee:	f84a 3b04 	str.w	r3, [sl], #4
 800eff2:	d8e7      	bhi.n	800efc4 <__mdiff+0x7c>
 800eff4:	1b2b      	subs	r3, r5, r4
 800eff6:	3b15      	subs	r3, #21
 800eff8:	f023 0303 	bic.w	r3, r3, #3
 800effc:	3304      	adds	r3, #4
 800effe:	3415      	adds	r4, #21
 800f000:	42a5      	cmp	r5, r4
 800f002:	bf38      	it	cc
 800f004:	2304      	movcc	r3, #4
 800f006:	4419      	add	r1, r3
 800f008:	4473      	add	r3, lr
 800f00a:	469e      	mov	lr, r3
 800f00c:	460d      	mov	r5, r1
 800f00e:	4565      	cmp	r5, ip
 800f010:	d30e      	bcc.n	800f030 <__mdiff+0xe8>
 800f012:	f10c 0203 	add.w	r2, ip, #3
 800f016:	1a52      	subs	r2, r2, r1
 800f018:	f022 0203 	bic.w	r2, r2, #3
 800f01c:	3903      	subs	r1, #3
 800f01e:	458c      	cmp	ip, r1
 800f020:	bf38      	it	cc
 800f022:	2200      	movcc	r2, #0
 800f024:	441a      	add	r2, r3
 800f026:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f02a:	b17b      	cbz	r3, 800f04c <__mdiff+0x104>
 800f02c:	6106      	str	r6, [r0, #16]
 800f02e:	e7a5      	b.n	800ef7c <__mdiff+0x34>
 800f030:	f855 8b04 	ldr.w	r8, [r5], #4
 800f034:	fa17 f488 	uxtah	r4, r7, r8
 800f038:	1422      	asrs	r2, r4, #16
 800f03a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f03e:	b2a4      	uxth	r4, r4
 800f040:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f044:	f84e 4b04 	str.w	r4, [lr], #4
 800f048:	1417      	asrs	r7, r2, #16
 800f04a:	e7e0      	b.n	800f00e <__mdiff+0xc6>
 800f04c:	3e01      	subs	r6, #1
 800f04e:	e7ea      	b.n	800f026 <__mdiff+0xde>
 800f050:	0806ed6b 	.word	0x0806ed6b
 800f054:	0806ed7c 	.word	0x0806ed7c

0800f058 <__d2b>:
 800f058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f05c:	4689      	mov	r9, r1
 800f05e:	2101      	movs	r1, #1
 800f060:	ec57 6b10 	vmov	r6, r7, d0
 800f064:	4690      	mov	r8, r2
 800f066:	f7ff fcd5 	bl	800ea14 <_Balloc>
 800f06a:	4604      	mov	r4, r0
 800f06c:	b930      	cbnz	r0, 800f07c <__d2b+0x24>
 800f06e:	4602      	mov	r2, r0
 800f070:	4b25      	ldr	r3, [pc, #148]	; (800f108 <__d2b+0xb0>)
 800f072:	4826      	ldr	r0, [pc, #152]	; (800f10c <__d2b+0xb4>)
 800f074:	f240 310a 	movw	r1, #778	; 0x30a
 800f078:	f000 f9da 	bl	800f430 <__assert_func>
 800f07c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f080:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f084:	bb35      	cbnz	r5, 800f0d4 <__d2b+0x7c>
 800f086:	2e00      	cmp	r6, #0
 800f088:	9301      	str	r3, [sp, #4]
 800f08a:	d028      	beq.n	800f0de <__d2b+0x86>
 800f08c:	4668      	mov	r0, sp
 800f08e:	9600      	str	r6, [sp, #0]
 800f090:	f7ff fd8c 	bl	800ebac <__lo0bits>
 800f094:	9900      	ldr	r1, [sp, #0]
 800f096:	b300      	cbz	r0, 800f0da <__d2b+0x82>
 800f098:	9a01      	ldr	r2, [sp, #4]
 800f09a:	f1c0 0320 	rsb	r3, r0, #32
 800f09e:	fa02 f303 	lsl.w	r3, r2, r3
 800f0a2:	430b      	orrs	r3, r1
 800f0a4:	40c2      	lsrs	r2, r0
 800f0a6:	6163      	str	r3, [r4, #20]
 800f0a8:	9201      	str	r2, [sp, #4]
 800f0aa:	9b01      	ldr	r3, [sp, #4]
 800f0ac:	61a3      	str	r3, [r4, #24]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	bf14      	ite	ne
 800f0b2:	2202      	movne	r2, #2
 800f0b4:	2201      	moveq	r2, #1
 800f0b6:	6122      	str	r2, [r4, #16]
 800f0b8:	b1d5      	cbz	r5, 800f0f0 <__d2b+0x98>
 800f0ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f0be:	4405      	add	r5, r0
 800f0c0:	f8c9 5000 	str.w	r5, [r9]
 800f0c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f0c8:	f8c8 0000 	str.w	r0, [r8]
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	b003      	add	sp, #12
 800f0d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f0d8:	e7d5      	b.n	800f086 <__d2b+0x2e>
 800f0da:	6161      	str	r1, [r4, #20]
 800f0dc:	e7e5      	b.n	800f0aa <__d2b+0x52>
 800f0de:	a801      	add	r0, sp, #4
 800f0e0:	f7ff fd64 	bl	800ebac <__lo0bits>
 800f0e4:	9b01      	ldr	r3, [sp, #4]
 800f0e6:	6163      	str	r3, [r4, #20]
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	6122      	str	r2, [r4, #16]
 800f0ec:	3020      	adds	r0, #32
 800f0ee:	e7e3      	b.n	800f0b8 <__d2b+0x60>
 800f0f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f0f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f0f8:	f8c9 0000 	str.w	r0, [r9]
 800f0fc:	6918      	ldr	r0, [r3, #16]
 800f0fe:	f7ff fd35 	bl	800eb6c <__hi0bits>
 800f102:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f106:	e7df      	b.n	800f0c8 <__d2b+0x70>
 800f108:	0806ed6b 	.word	0x0806ed6b
 800f10c:	0806ed7c 	.word	0x0806ed7c

0800f110 <_calloc_r>:
 800f110:	b513      	push	{r0, r1, r4, lr}
 800f112:	434a      	muls	r2, r1
 800f114:	4611      	mov	r1, r2
 800f116:	9201      	str	r2, [sp, #4]
 800f118:	f7fe f990 	bl	800d43c <_malloc_r>
 800f11c:	4604      	mov	r4, r0
 800f11e:	b118      	cbz	r0, 800f128 <_calloc_r+0x18>
 800f120:	9a01      	ldr	r2, [sp, #4]
 800f122:	2100      	movs	r1, #0
 800f124:	f7fe f932 	bl	800d38c <memset>
 800f128:	4620      	mov	r0, r4
 800f12a:	b002      	add	sp, #8
 800f12c:	bd10      	pop	{r4, pc}

0800f12e <_realloc_r>:
 800f12e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f130:	4607      	mov	r7, r0
 800f132:	4614      	mov	r4, r2
 800f134:	460e      	mov	r6, r1
 800f136:	b921      	cbnz	r1, 800f142 <_realloc_r+0x14>
 800f138:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f13c:	4611      	mov	r1, r2
 800f13e:	f7fe b97d 	b.w	800d43c <_malloc_r>
 800f142:	b922      	cbnz	r2, 800f14e <_realloc_r+0x20>
 800f144:	f7fe f92a 	bl	800d39c <_free_r>
 800f148:	4625      	mov	r5, r4
 800f14a:	4628      	mov	r0, r5
 800f14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f14e:	f000 f9ce 	bl	800f4ee <_malloc_usable_size_r>
 800f152:	42a0      	cmp	r0, r4
 800f154:	d20f      	bcs.n	800f176 <_realloc_r+0x48>
 800f156:	4621      	mov	r1, r4
 800f158:	4638      	mov	r0, r7
 800f15a:	f7fe f96f 	bl	800d43c <_malloc_r>
 800f15e:	4605      	mov	r5, r0
 800f160:	2800      	cmp	r0, #0
 800f162:	d0f2      	beq.n	800f14a <_realloc_r+0x1c>
 800f164:	4631      	mov	r1, r6
 800f166:	4622      	mov	r2, r4
 800f168:	f7fe f902 	bl	800d370 <memcpy>
 800f16c:	4631      	mov	r1, r6
 800f16e:	4638      	mov	r0, r7
 800f170:	f7fe f914 	bl	800d39c <_free_r>
 800f174:	e7e9      	b.n	800f14a <_realloc_r+0x1c>
 800f176:	4635      	mov	r5, r6
 800f178:	e7e7      	b.n	800f14a <_realloc_r+0x1c>

0800f17a <__ssputs_r>:
 800f17a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f17e:	688e      	ldr	r6, [r1, #8]
 800f180:	429e      	cmp	r6, r3
 800f182:	4682      	mov	sl, r0
 800f184:	460c      	mov	r4, r1
 800f186:	4690      	mov	r8, r2
 800f188:	461f      	mov	r7, r3
 800f18a:	d838      	bhi.n	800f1fe <__ssputs_r+0x84>
 800f18c:	898a      	ldrh	r2, [r1, #12]
 800f18e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f192:	d032      	beq.n	800f1fa <__ssputs_r+0x80>
 800f194:	6825      	ldr	r5, [r4, #0]
 800f196:	6909      	ldr	r1, [r1, #16]
 800f198:	eba5 0901 	sub.w	r9, r5, r1
 800f19c:	6965      	ldr	r5, [r4, #20]
 800f19e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	444b      	add	r3, r9
 800f1aa:	106d      	asrs	r5, r5, #1
 800f1ac:	429d      	cmp	r5, r3
 800f1ae:	bf38      	it	cc
 800f1b0:	461d      	movcc	r5, r3
 800f1b2:	0553      	lsls	r3, r2, #21
 800f1b4:	d531      	bpl.n	800f21a <__ssputs_r+0xa0>
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	f7fe f940 	bl	800d43c <_malloc_r>
 800f1bc:	4606      	mov	r6, r0
 800f1be:	b950      	cbnz	r0, 800f1d6 <__ssputs_r+0x5c>
 800f1c0:	230c      	movs	r3, #12
 800f1c2:	f8ca 3000 	str.w	r3, [sl]
 800f1c6:	89a3      	ldrh	r3, [r4, #12]
 800f1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1cc:	81a3      	strh	r3, [r4, #12]
 800f1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1d6:	6921      	ldr	r1, [r4, #16]
 800f1d8:	464a      	mov	r2, r9
 800f1da:	f7fe f8c9 	bl	800d370 <memcpy>
 800f1de:	89a3      	ldrh	r3, [r4, #12]
 800f1e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1e8:	81a3      	strh	r3, [r4, #12]
 800f1ea:	6126      	str	r6, [r4, #16]
 800f1ec:	6165      	str	r5, [r4, #20]
 800f1ee:	444e      	add	r6, r9
 800f1f0:	eba5 0509 	sub.w	r5, r5, r9
 800f1f4:	6026      	str	r6, [r4, #0]
 800f1f6:	60a5      	str	r5, [r4, #8]
 800f1f8:	463e      	mov	r6, r7
 800f1fa:	42be      	cmp	r6, r7
 800f1fc:	d900      	bls.n	800f200 <__ssputs_r+0x86>
 800f1fe:	463e      	mov	r6, r7
 800f200:	4632      	mov	r2, r6
 800f202:	6820      	ldr	r0, [r4, #0]
 800f204:	4641      	mov	r1, r8
 800f206:	f000 f958 	bl	800f4ba <memmove>
 800f20a:	68a3      	ldr	r3, [r4, #8]
 800f20c:	6822      	ldr	r2, [r4, #0]
 800f20e:	1b9b      	subs	r3, r3, r6
 800f210:	4432      	add	r2, r6
 800f212:	60a3      	str	r3, [r4, #8]
 800f214:	6022      	str	r2, [r4, #0]
 800f216:	2000      	movs	r0, #0
 800f218:	e7db      	b.n	800f1d2 <__ssputs_r+0x58>
 800f21a:	462a      	mov	r2, r5
 800f21c:	f7ff ff87 	bl	800f12e <_realloc_r>
 800f220:	4606      	mov	r6, r0
 800f222:	2800      	cmp	r0, #0
 800f224:	d1e1      	bne.n	800f1ea <__ssputs_r+0x70>
 800f226:	6921      	ldr	r1, [r4, #16]
 800f228:	4650      	mov	r0, sl
 800f22a:	f7fe f8b7 	bl	800d39c <_free_r>
 800f22e:	e7c7      	b.n	800f1c0 <__ssputs_r+0x46>

0800f230 <_svfiprintf_r>:
 800f230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f234:	4698      	mov	r8, r3
 800f236:	898b      	ldrh	r3, [r1, #12]
 800f238:	061b      	lsls	r3, r3, #24
 800f23a:	b09d      	sub	sp, #116	; 0x74
 800f23c:	4607      	mov	r7, r0
 800f23e:	460d      	mov	r5, r1
 800f240:	4614      	mov	r4, r2
 800f242:	d50e      	bpl.n	800f262 <_svfiprintf_r+0x32>
 800f244:	690b      	ldr	r3, [r1, #16]
 800f246:	b963      	cbnz	r3, 800f262 <_svfiprintf_r+0x32>
 800f248:	2140      	movs	r1, #64	; 0x40
 800f24a:	f7fe f8f7 	bl	800d43c <_malloc_r>
 800f24e:	6028      	str	r0, [r5, #0]
 800f250:	6128      	str	r0, [r5, #16]
 800f252:	b920      	cbnz	r0, 800f25e <_svfiprintf_r+0x2e>
 800f254:	230c      	movs	r3, #12
 800f256:	603b      	str	r3, [r7, #0]
 800f258:	f04f 30ff 	mov.w	r0, #4294967295
 800f25c:	e0d1      	b.n	800f402 <_svfiprintf_r+0x1d2>
 800f25e:	2340      	movs	r3, #64	; 0x40
 800f260:	616b      	str	r3, [r5, #20]
 800f262:	2300      	movs	r3, #0
 800f264:	9309      	str	r3, [sp, #36]	; 0x24
 800f266:	2320      	movs	r3, #32
 800f268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f26c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f270:	2330      	movs	r3, #48	; 0x30
 800f272:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f41c <_svfiprintf_r+0x1ec>
 800f276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f27a:	f04f 0901 	mov.w	r9, #1
 800f27e:	4623      	mov	r3, r4
 800f280:	469a      	mov	sl, r3
 800f282:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f286:	b10a      	cbz	r2, 800f28c <_svfiprintf_r+0x5c>
 800f288:	2a25      	cmp	r2, #37	; 0x25
 800f28a:	d1f9      	bne.n	800f280 <_svfiprintf_r+0x50>
 800f28c:	ebba 0b04 	subs.w	fp, sl, r4
 800f290:	d00b      	beq.n	800f2aa <_svfiprintf_r+0x7a>
 800f292:	465b      	mov	r3, fp
 800f294:	4622      	mov	r2, r4
 800f296:	4629      	mov	r1, r5
 800f298:	4638      	mov	r0, r7
 800f29a:	f7ff ff6e 	bl	800f17a <__ssputs_r>
 800f29e:	3001      	adds	r0, #1
 800f2a0:	f000 80aa 	beq.w	800f3f8 <_svfiprintf_r+0x1c8>
 800f2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2a6:	445a      	add	r2, fp
 800f2a8:	9209      	str	r2, [sp, #36]	; 0x24
 800f2aa:	f89a 3000 	ldrb.w	r3, [sl]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	f000 80a2 	beq.w	800f3f8 <_svfiprintf_r+0x1c8>
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2be:	f10a 0a01 	add.w	sl, sl, #1
 800f2c2:	9304      	str	r3, [sp, #16]
 800f2c4:	9307      	str	r3, [sp, #28]
 800f2c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2ca:	931a      	str	r3, [sp, #104]	; 0x68
 800f2cc:	4654      	mov	r4, sl
 800f2ce:	2205      	movs	r2, #5
 800f2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2d4:	4851      	ldr	r0, [pc, #324]	; (800f41c <_svfiprintf_r+0x1ec>)
 800f2d6:	f7f1 f813 	bl	8000300 <memchr>
 800f2da:	9a04      	ldr	r2, [sp, #16]
 800f2dc:	b9d8      	cbnz	r0, 800f316 <_svfiprintf_r+0xe6>
 800f2de:	06d0      	lsls	r0, r2, #27
 800f2e0:	bf44      	itt	mi
 800f2e2:	2320      	movmi	r3, #32
 800f2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2e8:	0711      	lsls	r1, r2, #28
 800f2ea:	bf44      	itt	mi
 800f2ec:	232b      	movmi	r3, #43	; 0x2b
 800f2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800f2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800f2f8:	d015      	beq.n	800f326 <_svfiprintf_r+0xf6>
 800f2fa:	9a07      	ldr	r2, [sp, #28]
 800f2fc:	4654      	mov	r4, sl
 800f2fe:	2000      	movs	r0, #0
 800f300:	f04f 0c0a 	mov.w	ip, #10
 800f304:	4621      	mov	r1, r4
 800f306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f30a:	3b30      	subs	r3, #48	; 0x30
 800f30c:	2b09      	cmp	r3, #9
 800f30e:	d94e      	bls.n	800f3ae <_svfiprintf_r+0x17e>
 800f310:	b1b0      	cbz	r0, 800f340 <_svfiprintf_r+0x110>
 800f312:	9207      	str	r2, [sp, #28]
 800f314:	e014      	b.n	800f340 <_svfiprintf_r+0x110>
 800f316:	eba0 0308 	sub.w	r3, r0, r8
 800f31a:	fa09 f303 	lsl.w	r3, r9, r3
 800f31e:	4313      	orrs	r3, r2
 800f320:	9304      	str	r3, [sp, #16]
 800f322:	46a2      	mov	sl, r4
 800f324:	e7d2      	b.n	800f2cc <_svfiprintf_r+0x9c>
 800f326:	9b03      	ldr	r3, [sp, #12]
 800f328:	1d19      	adds	r1, r3, #4
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	9103      	str	r1, [sp, #12]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	bfbb      	ittet	lt
 800f332:	425b      	neglt	r3, r3
 800f334:	f042 0202 	orrlt.w	r2, r2, #2
 800f338:	9307      	strge	r3, [sp, #28]
 800f33a:	9307      	strlt	r3, [sp, #28]
 800f33c:	bfb8      	it	lt
 800f33e:	9204      	strlt	r2, [sp, #16]
 800f340:	7823      	ldrb	r3, [r4, #0]
 800f342:	2b2e      	cmp	r3, #46	; 0x2e
 800f344:	d10c      	bne.n	800f360 <_svfiprintf_r+0x130>
 800f346:	7863      	ldrb	r3, [r4, #1]
 800f348:	2b2a      	cmp	r3, #42	; 0x2a
 800f34a:	d135      	bne.n	800f3b8 <_svfiprintf_r+0x188>
 800f34c:	9b03      	ldr	r3, [sp, #12]
 800f34e:	1d1a      	adds	r2, r3, #4
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	9203      	str	r2, [sp, #12]
 800f354:	2b00      	cmp	r3, #0
 800f356:	bfb8      	it	lt
 800f358:	f04f 33ff 	movlt.w	r3, #4294967295
 800f35c:	3402      	adds	r4, #2
 800f35e:	9305      	str	r3, [sp, #20]
 800f360:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f42c <_svfiprintf_r+0x1fc>
 800f364:	7821      	ldrb	r1, [r4, #0]
 800f366:	2203      	movs	r2, #3
 800f368:	4650      	mov	r0, sl
 800f36a:	f7f0 ffc9 	bl	8000300 <memchr>
 800f36e:	b140      	cbz	r0, 800f382 <_svfiprintf_r+0x152>
 800f370:	2340      	movs	r3, #64	; 0x40
 800f372:	eba0 000a 	sub.w	r0, r0, sl
 800f376:	fa03 f000 	lsl.w	r0, r3, r0
 800f37a:	9b04      	ldr	r3, [sp, #16]
 800f37c:	4303      	orrs	r3, r0
 800f37e:	3401      	adds	r4, #1
 800f380:	9304      	str	r3, [sp, #16]
 800f382:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f386:	4826      	ldr	r0, [pc, #152]	; (800f420 <_svfiprintf_r+0x1f0>)
 800f388:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f38c:	2206      	movs	r2, #6
 800f38e:	f7f0 ffb7 	bl	8000300 <memchr>
 800f392:	2800      	cmp	r0, #0
 800f394:	d038      	beq.n	800f408 <_svfiprintf_r+0x1d8>
 800f396:	4b23      	ldr	r3, [pc, #140]	; (800f424 <_svfiprintf_r+0x1f4>)
 800f398:	bb1b      	cbnz	r3, 800f3e2 <_svfiprintf_r+0x1b2>
 800f39a:	9b03      	ldr	r3, [sp, #12]
 800f39c:	3307      	adds	r3, #7
 800f39e:	f023 0307 	bic.w	r3, r3, #7
 800f3a2:	3308      	adds	r3, #8
 800f3a4:	9303      	str	r3, [sp, #12]
 800f3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3a8:	4433      	add	r3, r6
 800f3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800f3ac:	e767      	b.n	800f27e <_svfiprintf_r+0x4e>
 800f3ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3b2:	460c      	mov	r4, r1
 800f3b4:	2001      	movs	r0, #1
 800f3b6:	e7a5      	b.n	800f304 <_svfiprintf_r+0xd4>
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	3401      	adds	r4, #1
 800f3bc:	9305      	str	r3, [sp, #20]
 800f3be:	4619      	mov	r1, r3
 800f3c0:	f04f 0c0a 	mov.w	ip, #10
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3ca:	3a30      	subs	r2, #48	; 0x30
 800f3cc:	2a09      	cmp	r2, #9
 800f3ce:	d903      	bls.n	800f3d8 <_svfiprintf_r+0x1a8>
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d0c5      	beq.n	800f360 <_svfiprintf_r+0x130>
 800f3d4:	9105      	str	r1, [sp, #20]
 800f3d6:	e7c3      	b.n	800f360 <_svfiprintf_r+0x130>
 800f3d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3dc:	4604      	mov	r4, r0
 800f3de:	2301      	movs	r3, #1
 800f3e0:	e7f0      	b.n	800f3c4 <_svfiprintf_r+0x194>
 800f3e2:	ab03      	add	r3, sp, #12
 800f3e4:	9300      	str	r3, [sp, #0]
 800f3e6:	462a      	mov	r2, r5
 800f3e8:	4b0f      	ldr	r3, [pc, #60]	; (800f428 <_svfiprintf_r+0x1f8>)
 800f3ea:	a904      	add	r1, sp, #16
 800f3ec:	4638      	mov	r0, r7
 800f3ee:	f7fe f90f 	bl	800d610 <_printf_float>
 800f3f2:	1c42      	adds	r2, r0, #1
 800f3f4:	4606      	mov	r6, r0
 800f3f6:	d1d6      	bne.n	800f3a6 <_svfiprintf_r+0x176>
 800f3f8:	89ab      	ldrh	r3, [r5, #12]
 800f3fa:	065b      	lsls	r3, r3, #25
 800f3fc:	f53f af2c 	bmi.w	800f258 <_svfiprintf_r+0x28>
 800f400:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f402:	b01d      	add	sp, #116	; 0x74
 800f404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f408:	ab03      	add	r3, sp, #12
 800f40a:	9300      	str	r3, [sp, #0]
 800f40c:	462a      	mov	r2, r5
 800f40e:	4b06      	ldr	r3, [pc, #24]	; (800f428 <_svfiprintf_r+0x1f8>)
 800f410:	a904      	add	r1, sp, #16
 800f412:	4638      	mov	r0, r7
 800f414:	f7fe fb88 	bl	800db28 <_printf_i>
 800f418:	e7eb      	b.n	800f3f2 <_svfiprintf_r+0x1c2>
 800f41a:	bf00      	nop
 800f41c:	0806eedc 	.word	0x0806eedc
 800f420:	0806eee6 	.word	0x0806eee6
 800f424:	0800d611 	.word	0x0800d611
 800f428:	0800f17b 	.word	0x0800f17b
 800f42c:	0806eee2 	.word	0x0806eee2

0800f430 <__assert_func>:
 800f430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f432:	4614      	mov	r4, r2
 800f434:	461a      	mov	r2, r3
 800f436:	4b09      	ldr	r3, [pc, #36]	; (800f45c <__assert_func+0x2c>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	4605      	mov	r5, r0
 800f43c:	68d8      	ldr	r0, [r3, #12]
 800f43e:	b14c      	cbz	r4, 800f454 <__assert_func+0x24>
 800f440:	4b07      	ldr	r3, [pc, #28]	; (800f460 <__assert_func+0x30>)
 800f442:	9100      	str	r1, [sp, #0]
 800f444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f448:	4906      	ldr	r1, [pc, #24]	; (800f464 <__assert_func+0x34>)
 800f44a:	462b      	mov	r3, r5
 800f44c:	f000 f80e 	bl	800f46c <fiprintf>
 800f450:	f000 fa7c 	bl	800f94c <abort>
 800f454:	4b04      	ldr	r3, [pc, #16]	; (800f468 <__assert_func+0x38>)
 800f456:	461c      	mov	r4, r3
 800f458:	e7f3      	b.n	800f442 <__assert_func+0x12>
 800f45a:	bf00      	nop
 800f45c:	24001cbc 	.word	0x24001cbc
 800f460:	0806eeed 	.word	0x0806eeed
 800f464:	0806eefa 	.word	0x0806eefa
 800f468:	0806ef28 	.word	0x0806ef28

0800f46c <fiprintf>:
 800f46c:	b40e      	push	{r1, r2, r3}
 800f46e:	b503      	push	{r0, r1, lr}
 800f470:	4601      	mov	r1, r0
 800f472:	ab03      	add	r3, sp, #12
 800f474:	4805      	ldr	r0, [pc, #20]	; (800f48c <fiprintf+0x20>)
 800f476:	f853 2b04 	ldr.w	r2, [r3], #4
 800f47a:	6800      	ldr	r0, [r0, #0]
 800f47c:	9301      	str	r3, [sp, #4]
 800f47e:	f000 f867 	bl	800f550 <_vfiprintf_r>
 800f482:	b002      	add	sp, #8
 800f484:	f85d eb04 	ldr.w	lr, [sp], #4
 800f488:	b003      	add	sp, #12
 800f48a:	4770      	bx	lr
 800f48c:	24001cbc 	.word	0x24001cbc

0800f490 <__retarget_lock_init_recursive>:
 800f490:	4770      	bx	lr

0800f492 <__retarget_lock_acquire_recursive>:
 800f492:	4770      	bx	lr

0800f494 <__retarget_lock_release_recursive>:
 800f494:	4770      	bx	lr

0800f496 <__ascii_mbtowc>:
 800f496:	b082      	sub	sp, #8
 800f498:	b901      	cbnz	r1, 800f49c <__ascii_mbtowc+0x6>
 800f49a:	a901      	add	r1, sp, #4
 800f49c:	b142      	cbz	r2, 800f4b0 <__ascii_mbtowc+0x1a>
 800f49e:	b14b      	cbz	r3, 800f4b4 <__ascii_mbtowc+0x1e>
 800f4a0:	7813      	ldrb	r3, [r2, #0]
 800f4a2:	600b      	str	r3, [r1, #0]
 800f4a4:	7812      	ldrb	r2, [r2, #0]
 800f4a6:	1e10      	subs	r0, r2, #0
 800f4a8:	bf18      	it	ne
 800f4aa:	2001      	movne	r0, #1
 800f4ac:	b002      	add	sp, #8
 800f4ae:	4770      	bx	lr
 800f4b0:	4610      	mov	r0, r2
 800f4b2:	e7fb      	b.n	800f4ac <__ascii_mbtowc+0x16>
 800f4b4:	f06f 0001 	mvn.w	r0, #1
 800f4b8:	e7f8      	b.n	800f4ac <__ascii_mbtowc+0x16>

0800f4ba <memmove>:
 800f4ba:	4288      	cmp	r0, r1
 800f4bc:	b510      	push	{r4, lr}
 800f4be:	eb01 0402 	add.w	r4, r1, r2
 800f4c2:	d902      	bls.n	800f4ca <memmove+0x10>
 800f4c4:	4284      	cmp	r4, r0
 800f4c6:	4623      	mov	r3, r4
 800f4c8:	d807      	bhi.n	800f4da <memmove+0x20>
 800f4ca:	1e43      	subs	r3, r0, #1
 800f4cc:	42a1      	cmp	r1, r4
 800f4ce:	d008      	beq.n	800f4e2 <memmove+0x28>
 800f4d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f4d8:	e7f8      	b.n	800f4cc <memmove+0x12>
 800f4da:	4402      	add	r2, r0
 800f4dc:	4601      	mov	r1, r0
 800f4de:	428a      	cmp	r2, r1
 800f4e0:	d100      	bne.n	800f4e4 <memmove+0x2a>
 800f4e2:	bd10      	pop	{r4, pc}
 800f4e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f4e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f4ec:	e7f7      	b.n	800f4de <memmove+0x24>

0800f4ee <_malloc_usable_size_r>:
 800f4ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4f2:	1f18      	subs	r0, r3, #4
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	bfbc      	itt	lt
 800f4f8:	580b      	ldrlt	r3, [r1, r0]
 800f4fa:	18c0      	addlt	r0, r0, r3
 800f4fc:	4770      	bx	lr

0800f4fe <__sfputc_r>:
 800f4fe:	6893      	ldr	r3, [r2, #8]
 800f500:	3b01      	subs	r3, #1
 800f502:	2b00      	cmp	r3, #0
 800f504:	b410      	push	{r4}
 800f506:	6093      	str	r3, [r2, #8]
 800f508:	da08      	bge.n	800f51c <__sfputc_r+0x1e>
 800f50a:	6994      	ldr	r4, [r2, #24]
 800f50c:	42a3      	cmp	r3, r4
 800f50e:	db01      	blt.n	800f514 <__sfputc_r+0x16>
 800f510:	290a      	cmp	r1, #10
 800f512:	d103      	bne.n	800f51c <__sfputc_r+0x1e>
 800f514:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f518:	f000 b94a 	b.w	800f7b0 <__swbuf_r>
 800f51c:	6813      	ldr	r3, [r2, #0]
 800f51e:	1c58      	adds	r0, r3, #1
 800f520:	6010      	str	r0, [r2, #0]
 800f522:	7019      	strb	r1, [r3, #0]
 800f524:	4608      	mov	r0, r1
 800f526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f52a:	4770      	bx	lr

0800f52c <__sfputs_r>:
 800f52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f52e:	4606      	mov	r6, r0
 800f530:	460f      	mov	r7, r1
 800f532:	4614      	mov	r4, r2
 800f534:	18d5      	adds	r5, r2, r3
 800f536:	42ac      	cmp	r4, r5
 800f538:	d101      	bne.n	800f53e <__sfputs_r+0x12>
 800f53a:	2000      	movs	r0, #0
 800f53c:	e007      	b.n	800f54e <__sfputs_r+0x22>
 800f53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f542:	463a      	mov	r2, r7
 800f544:	4630      	mov	r0, r6
 800f546:	f7ff ffda 	bl	800f4fe <__sfputc_r>
 800f54a:	1c43      	adds	r3, r0, #1
 800f54c:	d1f3      	bne.n	800f536 <__sfputs_r+0xa>
 800f54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f550 <_vfiprintf_r>:
 800f550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f554:	460d      	mov	r5, r1
 800f556:	b09d      	sub	sp, #116	; 0x74
 800f558:	4614      	mov	r4, r2
 800f55a:	4698      	mov	r8, r3
 800f55c:	4606      	mov	r6, r0
 800f55e:	b118      	cbz	r0, 800f568 <_vfiprintf_r+0x18>
 800f560:	6983      	ldr	r3, [r0, #24]
 800f562:	b90b      	cbnz	r3, 800f568 <_vfiprintf_r+0x18>
 800f564:	f000 fb14 	bl	800fb90 <__sinit>
 800f568:	4b89      	ldr	r3, [pc, #548]	; (800f790 <_vfiprintf_r+0x240>)
 800f56a:	429d      	cmp	r5, r3
 800f56c:	d11b      	bne.n	800f5a6 <_vfiprintf_r+0x56>
 800f56e:	6875      	ldr	r5, [r6, #4]
 800f570:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f572:	07d9      	lsls	r1, r3, #31
 800f574:	d405      	bmi.n	800f582 <_vfiprintf_r+0x32>
 800f576:	89ab      	ldrh	r3, [r5, #12]
 800f578:	059a      	lsls	r2, r3, #22
 800f57a:	d402      	bmi.n	800f582 <_vfiprintf_r+0x32>
 800f57c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f57e:	f7ff ff88 	bl	800f492 <__retarget_lock_acquire_recursive>
 800f582:	89ab      	ldrh	r3, [r5, #12]
 800f584:	071b      	lsls	r3, r3, #28
 800f586:	d501      	bpl.n	800f58c <_vfiprintf_r+0x3c>
 800f588:	692b      	ldr	r3, [r5, #16]
 800f58a:	b9eb      	cbnz	r3, 800f5c8 <_vfiprintf_r+0x78>
 800f58c:	4629      	mov	r1, r5
 800f58e:	4630      	mov	r0, r6
 800f590:	f000 f96e 	bl	800f870 <__swsetup_r>
 800f594:	b1c0      	cbz	r0, 800f5c8 <_vfiprintf_r+0x78>
 800f596:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f598:	07dc      	lsls	r4, r3, #31
 800f59a:	d50e      	bpl.n	800f5ba <_vfiprintf_r+0x6a>
 800f59c:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a0:	b01d      	add	sp, #116	; 0x74
 800f5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5a6:	4b7b      	ldr	r3, [pc, #492]	; (800f794 <_vfiprintf_r+0x244>)
 800f5a8:	429d      	cmp	r5, r3
 800f5aa:	d101      	bne.n	800f5b0 <_vfiprintf_r+0x60>
 800f5ac:	68b5      	ldr	r5, [r6, #8]
 800f5ae:	e7df      	b.n	800f570 <_vfiprintf_r+0x20>
 800f5b0:	4b79      	ldr	r3, [pc, #484]	; (800f798 <_vfiprintf_r+0x248>)
 800f5b2:	429d      	cmp	r5, r3
 800f5b4:	bf08      	it	eq
 800f5b6:	68f5      	ldreq	r5, [r6, #12]
 800f5b8:	e7da      	b.n	800f570 <_vfiprintf_r+0x20>
 800f5ba:	89ab      	ldrh	r3, [r5, #12]
 800f5bc:	0598      	lsls	r0, r3, #22
 800f5be:	d4ed      	bmi.n	800f59c <_vfiprintf_r+0x4c>
 800f5c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5c2:	f7ff ff67 	bl	800f494 <__retarget_lock_release_recursive>
 800f5c6:	e7e9      	b.n	800f59c <_vfiprintf_r+0x4c>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	9309      	str	r3, [sp, #36]	; 0x24
 800f5cc:	2320      	movs	r3, #32
 800f5ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5d6:	2330      	movs	r3, #48	; 0x30
 800f5d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f79c <_vfiprintf_r+0x24c>
 800f5dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5e0:	f04f 0901 	mov.w	r9, #1
 800f5e4:	4623      	mov	r3, r4
 800f5e6:	469a      	mov	sl, r3
 800f5e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5ec:	b10a      	cbz	r2, 800f5f2 <_vfiprintf_r+0xa2>
 800f5ee:	2a25      	cmp	r2, #37	; 0x25
 800f5f0:	d1f9      	bne.n	800f5e6 <_vfiprintf_r+0x96>
 800f5f2:	ebba 0b04 	subs.w	fp, sl, r4
 800f5f6:	d00b      	beq.n	800f610 <_vfiprintf_r+0xc0>
 800f5f8:	465b      	mov	r3, fp
 800f5fa:	4622      	mov	r2, r4
 800f5fc:	4629      	mov	r1, r5
 800f5fe:	4630      	mov	r0, r6
 800f600:	f7ff ff94 	bl	800f52c <__sfputs_r>
 800f604:	3001      	adds	r0, #1
 800f606:	f000 80aa 	beq.w	800f75e <_vfiprintf_r+0x20e>
 800f60a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f60c:	445a      	add	r2, fp
 800f60e:	9209      	str	r2, [sp, #36]	; 0x24
 800f610:	f89a 3000 	ldrb.w	r3, [sl]
 800f614:	2b00      	cmp	r3, #0
 800f616:	f000 80a2 	beq.w	800f75e <_vfiprintf_r+0x20e>
 800f61a:	2300      	movs	r3, #0
 800f61c:	f04f 32ff 	mov.w	r2, #4294967295
 800f620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f624:	f10a 0a01 	add.w	sl, sl, #1
 800f628:	9304      	str	r3, [sp, #16]
 800f62a:	9307      	str	r3, [sp, #28]
 800f62c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f630:	931a      	str	r3, [sp, #104]	; 0x68
 800f632:	4654      	mov	r4, sl
 800f634:	2205      	movs	r2, #5
 800f636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f63a:	4858      	ldr	r0, [pc, #352]	; (800f79c <_vfiprintf_r+0x24c>)
 800f63c:	f7f0 fe60 	bl	8000300 <memchr>
 800f640:	9a04      	ldr	r2, [sp, #16]
 800f642:	b9d8      	cbnz	r0, 800f67c <_vfiprintf_r+0x12c>
 800f644:	06d1      	lsls	r1, r2, #27
 800f646:	bf44      	itt	mi
 800f648:	2320      	movmi	r3, #32
 800f64a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f64e:	0713      	lsls	r3, r2, #28
 800f650:	bf44      	itt	mi
 800f652:	232b      	movmi	r3, #43	; 0x2b
 800f654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f658:	f89a 3000 	ldrb.w	r3, [sl]
 800f65c:	2b2a      	cmp	r3, #42	; 0x2a
 800f65e:	d015      	beq.n	800f68c <_vfiprintf_r+0x13c>
 800f660:	9a07      	ldr	r2, [sp, #28]
 800f662:	4654      	mov	r4, sl
 800f664:	2000      	movs	r0, #0
 800f666:	f04f 0c0a 	mov.w	ip, #10
 800f66a:	4621      	mov	r1, r4
 800f66c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f670:	3b30      	subs	r3, #48	; 0x30
 800f672:	2b09      	cmp	r3, #9
 800f674:	d94e      	bls.n	800f714 <_vfiprintf_r+0x1c4>
 800f676:	b1b0      	cbz	r0, 800f6a6 <_vfiprintf_r+0x156>
 800f678:	9207      	str	r2, [sp, #28]
 800f67a:	e014      	b.n	800f6a6 <_vfiprintf_r+0x156>
 800f67c:	eba0 0308 	sub.w	r3, r0, r8
 800f680:	fa09 f303 	lsl.w	r3, r9, r3
 800f684:	4313      	orrs	r3, r2
 800f686:	9304      	str	r3, [sp, #16]
 800f688:	46a2      	mov	sl, r4
 800f68a:	e7d2      	b.n	800f632 <_vfiprintf_r+0xe2>
 800f68c:	9b03      	ldr	r3, [sp, #12]
 800f68e:	1d19      	adds	r1, r3, #4
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	9103      	str	r1, [sp, #12]
 800f694:	2b00      	cmp	r3, #0
 800f696:	bfbb      	ittet	lt
 800f698:	425b      	neglt	r3, r3
 800f69a:	f042 0202 	orrlt.w	r2, r2, #2
 800f69e:	9307      	strge	r3, [sp, #28]
 800f6a0:	9307      	strlt	r3, [sp, #28]
 800f6a2:	bfb8      	it	lt
 800f6a4:	9204      	strlt	r2, [sp, #16]
 800f6a6:	7823      	ldrb	r3, [r4, #0]
 800f6a8:	2b2e      	cmp	r3, #46	; 0x2e
 800f6aa:	d10c      	bne.n	800f6c6 <_vfiprintf_r+0x176>
 800f6ac:	7863      	ldrb	r3, [r4, #1]
 800f6ae:	2b2a      	cmp	r3, #42	; 0x2a
 800f6b0:	d135      	bne.n	800f71e <_vfiprintf_r+0x1ce>
 800f6b2:	9b03      	ldr	r3, [sp, #12]
 800f6b4:	1d1a      	adds	r2, r3, #4
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	9203      	str	r2, [sp, #12]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	bfb8      	it	lt
 800f6be:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6c2:	3402      	adds	r4, #2
 800f6c4:	9305      	str	r3, [sp, #20]
 800f6c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f7ac <_vfiprintf_r+0x25c>
 800f6ca:	7821      	ldrb	r1, [r4, #0]
 800f6cc:	2203      	movs	r2, #3
 800f6ce:	4650      	mov	r0, sl
 800f6d0:	f7f0 fe16 	bl	8000300 <memchr>
 800f6d4:	b140      	cbz	r0, 800f6e8 <_vfiprintf_r+0x198>
 800f6d6:	2340      	movs	r3, #64	; 0x40
 800f6d8:	eba0 000a 	sub.w	r0, r0, sl
 800f6dc:	fa03 f000 	lsl.w	r0, r3, r0
 800f6e0:	9b04      	ldr	r3, [sp, #16]
 800f6e2:	4303      	orrs	r3, r0
 800f6e4:	3401      	adds	r4, #1
 800f6e6:	9304      	str	r3, [sp, #16]
 800f6e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6ec:	482c      	ldr	r0, [pc, #176]	; (800f7a0 <_vfiprintf_r+0x250>)
 800f6ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6f2:	2206      	movs	r2, #6
 800f6f4:	f7f0 fe04 	bl	8000300 <memchr>
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	d03f      	beq.n	800f77c <_vfiprintf_r+0x22c>
 800f6fc:	4b29      	ldr	r3, [pc, #164]	; (800f7a4 <_vfiprintf_r+0x254>)
 800f6fe:	bb1b      	cbnz	r3, 800f748 <_vfiprintf_r+0x1f8>
 800f700:	9b03      	ldr	r3, [sp, #12]
 800f702:	3307      	adds	r3, #7
 800f704:	f023 0307 	bic.w	r3, r3, #7
 800f708:	3308      	adds	r3, #8
 800f70a:	9303      	str	r3, [sp, #12]
 800f70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f70e:	443b      	add	r3, r7
 800f710:	9309      	str	r3, [sp, #36]	; 0x24
 800f712:	e767      	b.n	800f5e4 <_vfiprintf_r+0x94>
 800f714:	fb0c 3202 	mla	r2, ip, r2, r3
 800f718:	460c      	mov	r4, r1
 800f71a:	2001      	movs	r0, #1
 800f71c:	e7a5      	b.n	800f66a <_vfiprintf_r+0x11a>
 800f71e:	2300      	movs	r3, #0
 800f720:	3401      	adds	r4, #1
 800f722:	9305      	str	r3, [sp, #20]
 800f724:	4619      	mov	r1, r3
 800f726:	f04f 0c0a 	mov.w	ip, #10
 800f72a:	4620      	mov	r0, r4
 800f72c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f730:	3a30      	subs	r2, #48	; 0x30
 800f732:	2a09      	cmp	r2, #9
 800f734:	d903      	bls.n	800f73e <_vfiprintf_r+0x1ee>
 800f736:	2b00      	cmp	r3, #0
 800f738:	d0c5      	beq.n	800f6c6 <_vfiprintf_r+0x176>
 800f73a:	9105      	str	r1, [sp, #20]
 800f73c:	e7c3      	b.n	800f6c6 <_vfiprintf_r+0x176>
 800f73e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f742:	4604      	mov	r4, r0
 800f744:	2301      	movs	r3, #1
 800f746:	e7f0      	b.n	800f72a <_vfiprintf_r+0x1da>
 800f748:	ab03      	add	r3, sp, #12
 800f74a:	9300      	str	r3, [sp, #0]
 800f74c:	462a      	mov	r2, r5
 800f74e:	4b16      	ldr	r3, [pc, #88]	; (800f7a8 <_vfiprintf_r+0x258>)
 800f750:	a904      	add	r1, sp, #16
 800f752:	4630      	mov	r0, r6
 800f754:	f7fd ff5c 	bl	800d610 <_printf_float>
 800f758:	4607      	mov	r7, r0
 800f75a:	1c78      	adds	r0, r7, #1
 800f75c:	d1d6      	bne.n	800f70c <_vfiprintf_r+0x1bc>
 800f75e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f760:	07d9      	lsls	r1, r3, #31
 800f762:	d405      	bmi.n	800f770 <_vfiprintf_r+0x220>
 800f764:	89ab      	ldrh	r3, [r5, #12]
 800f766:	059a      	lsls	r2, r3, #22
 800f768:	d402      	bmi.n	800f770 <_vfiprintf_r+0x220>
 800f76a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f76c:	f7ff fe92 	bl	800f494 <__retarget_lock_release_recursive>
 800f770:	89ab      	ldrh	r3, [r5, #12]
 800f772:	065b      	lsls	r3, r3, #25
 800f774:	f53f af12 	bmi.w	800f59c <_vfiprintf_r+0x4c>
 800f778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f77a:	e711      	b.n	800f5a0 <_vfiprintf_r+0x50>
 800f77c:	ab03      	add	r3, sp, #12
 800f77e:	9300      	str	r3, [sp, #0]
 800f780:	462a      	mov	r2, r5
 800f782:	4b09      	ldr	r3, [pc, #36]	; (800f7a8 <_vfiprintf_r+0x258>)
 800f784:	a904      	add	r1, sp, #16
 800f786:	4630      	mov	r0, r6
 800f788:	f7fe f9ce 	bl	800db28 <_printf_i>
 800f78c:	e7e4      	b.n	800f758 <_vfiprintf_r+0x208>
 800f78e:	bf00      	nop
 800f790:	0806f054 	.word	0x0806f054
 800f794:	0806f074 	.word	0x0806f074
 800f798:	0806f034 	.word	0x0806f034
 800f79c:	0806eedc 	.word	0x0806eedc
 800f7a0:	0806eee6 	.word	0x0806eee6
 800f7a4:	0800d611 	.word	0x0800d611
 800f7a8:	0800f52d 	.word	0x0800f52d
 800f7ac:	0806eee2 	.word	0x0806eee2

0800f7b0 <__swbuf_r>:
 800f7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7b2:	460e      	mov	r6, r1
 800f7b4:	4614      	mov	r4, r2
 800f7b6:	4605      	mov	r5, r0
 800f7b8:	b118      	cbz	r0, 800f7c2 <__swbuf_r+0x12>
 800f7ba:	6983      	ldr	r3, [r0, #24]
 800f7bc:	b90b      	cbnz	r3, 800f7c2 <__swbuf_r+0x12>
 800f7be:	f000 f9e7 	bl	800fb90 <__sinit>
 800f7c2:	4b21      	ldr	r3, [pc, #132]	; (800f848 <__swbuf_r+0x98>)
 800f7c4:	429c      	cmp	r4, r3
 800f7c6:	d12b      	bne.n	800f820 <__swbuf_r+0x70>
 800f7c8:	686c      	ldr	r4, [r5, #4]
 800f7ca:	69a3      	ldr	r3, [r4, #24]
 800f7cc:	60a3      	str	r3, [r4, #8]
 800f7ce:	89a3      	ldrh	r3, [r4, #12]
 800f7d0:	071a      	lsls	r2, r3, #28
 800f7d2:	d52f      	bpl.n	800f834 <__swbuf_r+0x84>
 800f7d4:	6923      	ldr	r3, [r4, #16]
 800f7d6:	b36b      	cbz	r3, 800f834 <__swbuf_r+0x84>
 800f7d8:	6923      	ldr	r3, [r4, #16]
 800f7da:	6820      	ldr	r0, [r4, #0]
 800f7dc:	1ac0      	subs	r0, r0, r3
 800f7de:	6963      	ldr	r3, [r4, #20]
 800f7e0:	b2f6      	uxtb	r6, r6
 800f7e2:	4283      	cmp	r3, r0
 800f7e4:	4637      	mov	r7, r6
 800f7e6:	dc04      	bgt.n	800f7f2 <__swbuf_r+0x42>
 800f7e8:	4621      	mov	r1, r4
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	f000 f93c 	bl	800fa68 <_fflush_r>
 800f7f0:	bb30      	cbnz	r0, 800f840 <__swbuf_r+0x90>
 800f7f2:	68a3      	ldr	r3, [r4, #8]
 800f7f4:	3b01      	subs	r3, #1
 800f7f6:	60a3      	str	r3, [r4, #8]
 800f7f8:	6823      	ldr	r3, [r4, #0]
 800f7fa:	1c5a      	adds	r2, r3, #1
 800f7fc:	6022      	str	r2, [r4, #0]
 800f7fe:	701e      	strb	r6, [r3, #0]
 800f800:	6963      	ldr	r3, [r4, #20]
 800f802:	3001      	adds	r0, #1
 800f804:	4283      	cmp	r3, r0
 800f806:	d004      	beq.n	800f812 <__swbuf_r+0x62>
 800f808:	89a3      	ldrh	r3, [r4, #12]
 800f80a:	07db      	lsls	r3, r3, #31
 800f80c:	d506      	bpl.n	800f81c <__swbuf_r+0x6c>
 800f80e:	2e0a      	cmp	r6, #10
 800f810:	d104      	bne.n	800f81c <__swbuf_r+0x6c>
 800f812:	4621      	mov	r1, r4
 800f814:	4628      	mov	r0, r5
 800f816:	f000 f927 	bl	800fa68 <_fflush_r>
 800f81a:	b988      	cbnz	r0, 800f840 <__swbuf_r+0x90>
 800f81c:	4638      	mov	r0, r7
 800f81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f820:	4b0a      	ldr	r3, [pc, #40]	; (800f84c <__swbuf_r+0x9c>)
 800f822:	429c      	cmp	r4, r3
 800f824:	d101      	bne.n	800f82a <__swbuf_r+0x7a>
 800f826:	68ac      	ldr	r4, [r5, #8]
 800f828:	e7cf      	b.n	800f7ca <__swbuf_r+0x1a>
 800f82a:	4b09      	ldr	r3, [pc, #36]	; (800f850 <__swbuf_r+0xa0>)
 800f82c:	429c      	cmp	r4, r3
 800f82e:	bf08      	it	eq
 800f830:	68ec      	ldreq	r4, [r5, #12]
 800f832:	e7ca      	b.n	800f7ca <__swbuf_r+0x1a>
 800f834:	4621      	mov	r1, r4
 800f836:	4628      	mov	r0, r5
 800f838:	f000 f81a 	bl	800f870 <__swsetup_r>
 800f83c:	2800      	cmp	r0, #0
 800f83e:	d0cb      	beq.n	800f7d8 <__swbuf_r+0x28>
 800f840:	f04f 37ff 	mov.w	r7, #4294967295
 800f844:	e7ea      	b.n	800f81c <__swbuf_r+0x6c>
 800f846:	bf00      	nop
 800f848:	0806f054 	.word	0x0806f054
 800f84c:	0806f074 	.word	0x0806f074
 800f850:	0806f034 	.word	0x0806f034

0800f854 <__ascii_wctomb>:
 800f854:	b149      	cbz	r1, 800f86a <__ascii_wctomb+0x16>
 800f856:	2aff      	cmp	r2, #255	; 0xff
 800f858:	bf85      	ittet	hi
 800f85a:	238a      	movhi	r3, #138	; 0x8a
 800f85c:	6003      	strhi	r3, [r0, #0]
 800f85e:	700a      	strbls	r2, [r1, #0]
 800f860:	f04f 30ff 	movhi.w	r0, #4294967295
 800f864:	bf98      	it	ls
 800f866:	2001      	movls	r0, #1
 800f868:	4770      	bx	lr
 800f86a:	4608      	mov	r0, r1
 800f86c:	4770      	bx	lr
	...

0800f870 <__swsetup_r>:
 800f870:	4b32      	ldr	r3, [pc, #200]	; (800f93c <__swsetup_r+0xcc>)
 800f872:	b570      	push	{r4, r5, r6, lr}
 800f874:	681d      	ldr	r5, [r3, #0]
 800f876:	4606      	mov	r6, r0
 800f878:	460c      	mov	r4, r1
 800f87a:	b125      	cbz	r5, 800f886 <__swsetup_r+0x16>
 800f87c:	69ab      	ldr	r3, [r5, #24]
 800f87e:	b913      	cbnz	r3, 800f886 <__swsetup_r+0x16>
 800f880:	4628      	mov	r0, r5
 800f882:	f000 f985 	bl	800fb90 <__sinit>
 800f886:	4b2e      	ldr	r3, [pc, #184]	; (800f940 <__swsetup_r+0xd0>)
 800f888:	429c      	cmp	r4, r3
 800f88a:	d10f      	bne.n	800f8ac <__swsetup_r+0x3c>
 800f88c:	686c      	ldr	r4, [r5, #4]
 800f88e:	89a3      	ldrh	r3, [r4, #12]
 800f890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f894:	0719      	lsls	r1, r3, #28
 800f896:	d42c      	bmi.n	800f8f2 <__swsetup_r+0x82>
 800f898:	06dd      	lsls	r5, r3, #27
 800f89a:	d411      	bmi.n	800f8c0 <__swsetup_r+0x50>
 800f89c:	2309      	movs	r3, #9
 800f89e:	6033      	str	r3, [r6, #0]
 800f8a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f8a4:	81a3      	strh	r3, [r4, #12]
 800f8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800f8aa:	e03e      	b.n	800f92a <__swsetup_r+0xba>
 800f8ac:	4b25      	ldr	r3, [pc, #148]	; (800f944 <__swsetup_r+0xd4>)
 800f8ae:	429c      	cmp	r4, r3
 800f8b0:	d101      	bne.n	800f8b6 <__swsetup_r+0x46>
 800f8b2:	68ac      	ldr	r4, [r5, #8]
 800f8b4:	e7eb      	b.n	800f88e <__swsetup_r+0x1e>
 800f8b6:	4b24      	ldr	r3, [pc, #144]	; (800f948 <__swsetup_r+0xd8>)
 800f8b8:	429c      	cmp	r4, r3
 800f8ba:	bf08      	it	eq
 800f8bc:	68ec      	ldreq	r4, [r5, #12]
 800f8be:	e7e6      	b.n	800f88e <__swsetup_r+0x1e>
 800f8c0:	0758      	lsls	r0, r3, #29
 800f8c2:	d512      	bpl.n	800f8ea <__swsetup_r+0x7a>
 800f8c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8c6:	b141      	cbz	r1, 800f8da <__swsetup_r+0x6a>
 800f8c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8cc:	4299      	cmp	r1, r3
 800f8ce:	d002      	beq.n	800f8d6 <__swsetup_r+0x66>
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	f7fd fd63 	bl	800d39c <_free_r>
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	6363      	str	r3, [r4, #52]	; 0x34
 800f8da:	89a3      	ldrh	r3, [r4, #12]
 800f8dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f8e0:	81a3      	strh	r3, [r4, #12]
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	6063      	str	r3, [r4, #4]
 800f8e6:	6923      	ldr	r3, [r4, #16]
 800f8e8:	6023      	str	r3, [r4, #0]
 800f8ea:	89a3      	ldrh	r3, [r4, #12]
 800f8ec:	f043 0308 	orr.w	r3, r3, #8
 800f8f0:	81a3      	strh	r3, [r4, #12]
 800f8f2:	6923      	ldr	r3, [r4, #16]
 800f8f4:	b94b      	cbnz	r3, 800f90a <__swsetup_r+0x9a>
 800f8f6:	89a3      	ldrh	r3, [r4, #12]
 800f8f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f8fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f900:	d003      	beq.n	800f90a <__swsetup_r+0x9a>
 800f902:	4621      	mov	r1, r4
 800f904:	4630      	mov	r0, r6
 800f906:	f000 fa05 	bl	800fd14 <__smakebuf_r>
 800f90a:	89a0      	ldrh	r0, [r4, #12]
 800f90c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f910:	f010 0301 	ands.w	r3, r0, #1
 800f914:	d00a      	beq.n	800f92c <__swsetup_r+0xbc>
 800f916:	2300      	movs	r3, #0
 800f918:	60a3      	str	r3, [r4, #8]
 800f91a:	6963      	ldr	r3, [r4, #20]
 800f91c:	425b      	negs	r3, r3
 800f91e:	61a3      	str	r3, [r4, #24]
 800f920:	6923      	ldr	r3, [r4, #16]
 800f922:	b943      	cbnz	r3, 800f936 <__swsetup_r+0xc6>
 800f924:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f928:	d1ba      	bne.n	800f8a0 <__swsetup_r+0x30>
 800f92a:	bd70      	pop	{r4, r5, r6, pc}
 800f92c:	0781      	lsls	r1, r0, #30
 800f92e:	bf58      	it	pl
 800f930:	6963      	ldrpl	r3, [r4, #20]
 800f932:	60a3      	str	r3, [r4, #8]
 800f934:	e7f4      	b.n	800f920 <__swsetup_r+0xb0>
 800f936:	2000      	movs	r0, #0
 800f938:	e7f7      	b.n	800f92a <__swsetup_r+0xba>
 800f93a:	bf00      	nop
 800f93c:	24001cbc 	.word	0x24001cbc
 800f940:	0806f054 	.word	0x0806f054
 800f944:	0806f074 	.word	0x0806f074
 800f948:	0806f034 	.word	0x0806f034

0800f94c <abort>:
 800f94c:	b508      	push	{r3, lr}
 800f94e:	2006      	movs	r0, #6
 800f950:	f000 fa48 	bl	800fde4 <raise>
 800f954:	2001      	movs	r0, #1
 800f956:	f000 fbeb 	bl	8010130 <_exit>
	...

0800f95c <__sflush_r>:
 800f95c:	898a      	ldrh	r2, [r1, #12]
 800f95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f962:	4605      	mov	r5, r0
 800f964:	0710      	lsls	r0, r2, #28
 800f966:	460c      	mov	r4, r1
 800f968:	d458      	bmi.n	800fa1c <__sflush_r+0xc0>
 800f96a:	684b      	ldr	r3, [r1, #4]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	dc05      	bgt.n	800f97c <__sflush_r+0x20>
 800f970:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f972:	2b00      	cmp	r3, #0
 800f974:	dc02      	bgt.n	800f97c <__sflush_r+0x20>
 800f976:	2000      	movs	r0, #0
 800f978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f97c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f97e:	2e00      	cmp	r6, #0
 800f980:	d0f9      	beq.n	800f976 <__sflush_r+0x1a>
 800f982:	2300      	movs	r3, #0
 800f984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f988:	682f      	ldr	r7, [r5, #0]
 800f98a:	602b      	str	r3, [r5, #0]
 800f98c:	d032      	beq.n	800f9f4 <__sflush_r+0x98>
 800f98e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f990:	89a3      	ldrh	r3, [r4, #12]
 800f992:	075a      	lsls	r2, r3, #29
 800f994:	d505      	bpl.n	800f9a2 <__sflush_r+0x46>
 800f996:	6863      	ldr	r3, [r4, #4]
 800f998:	1ac0      	subs	r0, r0, r3
 800f99a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f99c:	b10b      	cbz	r3, 800f9a2 <__sflush_r+0x46>
 800f99e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f9a0:	1ac0      	subs	r0, r0, r3
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f9a8:	6a21      	ldr	r1, [r4, #32]
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	47b0      	blx	r6
 800f9ae:	1c43      	adds	r3, r0, #1
 800f9b0:	89a3      	ldrh	r3, [r4, #12]
 800f9b2:	d106      	bne.n	800f9c2 <__sflush_r+0x66>
 800f9b4:	6829      	ldr	r1, [r5, #0]
 800f9b6:	291d      	cmp	r1, #29
 800f9b8:	d82c      	bhi.n	800fa14 <__sflush_r+0xb8>
 800f9ba:	4a2a      	ldr	r2, [pc, #168]	; (800fa64 <__sflush_r+0x108>)
 800f9bc:	40ca      	lsrs	r2, r1
 800f9be:	07d6      	lsls	r6, r2, #31
 800f9c0:	d528      	bpl.n	800fa14 <__sflush_r+0xb8>
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	6062      	str	r2, [r4, #4]
 800f9c6:	04d9      	lsls	r1, r3, #19
 800f9c8:	6922      	ldr	r2, [r4, #16]
 800f9ca:	6022      	str	r2, [r4, #0]
 800f9cc:	d504      	bpl.n	800f9d8 <__sflush_r+0x7c>
 800f9ce:	1c42      	adds	r2, r0, #1
 800f9d0:	d101      	bne.n	800f9d6 <__sflush_r+0x7a>
 800f9d2:	682b      	ldr	r3, [r5, #0]
 800f9d4:	b903      	cbnz	r3, 800f9d8 <__sflush_r+0x7c>
 800f9d6:	6560      	str	r0, [r4, #84]	; 0x54
 800f9d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9da:	602f      	str	r7, [r5, #0]
 800f9dc:	2900      	cmp	r1, #0
 800f9de:	d0ca      	beq.n	800f976 <__sflush_r+0x1a>
 800f9e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9e4:	4299      	cmp	r1, r3
 800f9e6:	d002      	beq.n	800f9ee <__sflush_r+0x92>
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	f7fd fcd7 	bl	800d39c <_free_r>
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	6360      	str	r0, [r4, #52]	; 0x34
 800f9f2:	e7c1      	b.n	800f978 <__sflush_r+0x1c>
 800f9f4:	6a21      	ldr	r1, [r4, #32]
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	47b0      	blx	r6
 800f9fc:	1c41      	adds	r1, r0, #1
 800f9fe:	d1c7      	bne.n	800f990 <__sflush_r+0x34>
 800fa00:	682b      	ldr	r3, [r5, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d0c4      	beq.n	800f990 <__sflush_r+0x34>
 800fa06:	2b1d      	cmp	r3, #29
 800fa08:	d001      	beq.n	800fa0e <__sflush_r+0xb2>
 800fa0a:	2b16      	cmp	r3, #22
 800fa0c:	d101      	bne.n	800fa12 <__sflush_r+0xb6>
 800fa0e:	602f      	str	r7, [r5, #0]
 800fa10:	e7b1      	b.n	800f976 <__sflush_r+0x1a>
 800fa12:	89a3      	ldrh	r3, [r4, #12]
 800fa14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa18:	81a3      	strh	r3, [r4, #12]
 800fa1a:	e7ad      	b.n	800f978 <__sflush_r+0x1c>
 800fa1c:	690f      	ldr	r7, [r1, #16]
 800fa1e:	2f00      	cmp	r7, #0
 800fa20:	d0a9      	beq.n	800f976 <__sflush_r+0x1a>
 800fa22:	0793      	lsls	r3, r2, #30
 800fa24:	680e      	ldr	r6, [r1, #0]
 800fa26:	bf08      	it	eq
 800fa28:	694b      	ldreq	r3, [r1, #20]
 800fa2a:	600f      	str	r7, [r1, #0]
 800fa2c:	bf18      	it	ne
 800fa2e:	2300      	movne	r3, #0
 800fa30:	eba6 0807 	sub.w	r8, r6, r7
 800fa34:	608b      	str	r3, [r1, #8]
 800fa36:	f1b8 0f00 	cmp.w	r8, #0
 800fa3a:	dd9c      	ble.n	800f976 <__sflush_r+0x1a>
 800fa3c:	6a21      	ldr	r1, [r4, #32]
 800fa3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fa40:	4643      	mov	r3, r8
 800fa42:	463a      	mov	r2, r7
 800fa44:	4628      	mov	r0, r5
 800fa46:	47b0      	blx	r6
 800fa48:	2800      	cmp	r0, #0
 800fa4a:	dc06      	bgt.n	800fa5a <__sflush_r+0xfe>
 800fa4c:	89a3      	ldrh	r3, [r4, #12]
 800fa4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa52:	81a3      	strh	r3, [r4, #12]
 800fa54:	f04f 30ff 	mov.w	r0, #4294967295
 800fa58:	e78e      	b.n	800f978 <__sflush_r+0x1c>
 800fa5a:	4407      	add	r7, r0
 800fa5c:	eba8 0800 	sub.w	r8, r8, r0
 800fa60:	e7e9      	b.n	800fa36 <__sflush_r+0xda>
 800fa62:	bf00      	nop
 800fa64:	20400001 	.word	0x20400001

0800fa68 <_fflush_r>:
 800fa68:	b538      	push	{r3, r4, r5, lr}
 800fa6a:	690b      	ldr	r3, [r1, #16]
 800fa6c:	4605      	mov	r5, r0
 800fa6e:	460c      	mov	r4, r1
 800fa70:	b913      	cbnz	r3, 800fa78 <_fflush_r+0x10>
 800fa72:	2500      	movs	r5, #0
 800fa74:	4628      	mov	r0, r5
 800fa76:	bd38      	pop	{r3, r4, r5, pc}
 800fa78:	b118      	cbz	r0, 800fa82 <_fflush_r+0x1a>
 800fa7a:	6983      	ldr	r3, [r0, #24]
 800fa7c:	b90b      	cbnz	r3, 800fa82 <_fflush_r+0x1a>
 800fa7e:	f000 f887 	bl	800fb90 <__sinit>
 800fa82:	4b14      	ldr	r3, [pc, #80]	; (800fad4 <_fflush_r+0x6c>)
 800fa84:	429c      	cmp	r4, r3
 800fa86:	d11b      	bne.n	800fac0 <_fflush_r+0x58>
 800fa88:	686c      	ldr	r4, [r5, #4]
 800fa8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d0ef      	beq.n	800fa72 <_fflush_r+0xa>
 800fa92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fa94:	07d0      	lsls	r0, r2, #31
 800fa96:	d404      	bmi.n	800faa2 <_fflush_r+0x3a>
 800fa98:	0599      	lsls	r1, r3, #22
 800fa9a:	d402      	bmi.n	800faa2 <_fflush_r+0x3a>
 800fa9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa9e:	f7ff fcf8 	bl	800f492 <__retarget_lock_acquire_recursive>
 800faa2:	4628      	mov	r0, r5
 800faa4:	4621      	mov	r1, r4
 800faa6:	f7ff ff59 	bl	800f95c <__sflush_r>
 800faaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800faac:	07da      	lsls	r2, r3, #31
 800faae:	4605      	mov	r5, r0
 800fab0:	d4e0      	bmi.n	800fa74 <_fflush_r+0xc>
 800fab2:	89a3      	ldrh	r3, [r4, #12]
 800fab4:	059b      	lsls	r3, r3, #22
 800fab6:	d4dd      	bmi.n	800fa74 <_fflush_r+0xc>
 800fab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800faba:	f7ff fceb 	bl	800f494 <__retarget_lock_release_recursive>
 800fabe:	e7d9      	b.n	800fa74 <_fflush_r+0xc>
 800fac0:	4b05      	ldr	r3, [pc, #20]	; (800fad8 <_fflush_r+0x70>)
 800fac2:	429c      	cmp	r4, r3
 800fac4:	d101      	bne.n	800faca <_fflush_r+0x62>
 800fac6:	68ac      	ldr	r4, [r5, #8]
 800fac8:	e7df      	b.n	800fa8a <_fflush_r+0x22>
 800faca:	4b04      	ldr	r3, [pc, #16]	; (800fadc <_fflush_r+0x74>)
 800facc:	429c      	cmp	r4, r3
 800face:	bf08      	it	eq
 800fad0:	68ec      	ldreq	r4, [r5, #12]
 800fad2:	e7da      	b.n	800fa8a <_fflush_r+0x22>
 800fad4:	0806f054 	.word	0x0806f054
 800fad8:	0806f074 	.word	0x0806f074
 800fadc:	0806f034 	.word	0x0806f034

0800fae0 <std>:
 800fae0:	2300      	movs	r3, #0
 800fae2:	b510      	push	{r4, lr}
 800fae4:	4604      	mov	r4, r0
 800fae6:	e9c0 3300 	strd	r3, r3, [r0]
 800faea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800faee:	6083      	str	r3, [r0, #8]
 800faf0:	8181      	strh	r1, [r0, #12]
 800faf2:	6643      	str	r3, [r0, #100]	; 0x64
 800faf4:	81c2      	strh	r2, [r0, #14]
 800faf6:	6183      	str	r3, [r0, #24]
 800faf8:	4619      	mov	r1, r3
 800fafa:	2208      	movs	r2, #8
 800fafc:	305c      	adds	r0, #92	; 0x5c
 800fafe:	f7fd fc45 	bl	800d38c <memset>
 800fb02:	4b05      	ldr	r3, [pc, #20]	; (800fb18 <std+0x38>)
 800fb04:	6263      	str	r3, [r4, #36]	; 0x24
 800fb06:	4b05      	ldr	r3, [pc, #20]	; (800fb1c <std+0x3c>)
 800fb08:	62a3      	str	r3, [r4, #40]	; 0x28
 800fb0a:	4b05      	ldr	r3, [pc, #20]	; (800fb20 <std+0x40>)
 800fb0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fb0e:	4b05      	ldr	r3, [pc, #20]	; (800fb24 <std+0x44>)
 800fb10:	6224      	str	r4, [r4, #32]
 800fb12:	6323      	str	r3, [r4, #48]	; 0x30
 800fb14:	bd10      	pop	{r4, pc}
 800fb16:	bf00      	nop
 800fb18:	0800fe1d 	.word	0x0800fe1d
 800fb1c:	0800fe3f 	.word	0x0800fe3f
 800fb20:	0800fe77 	.word	0x0800fe77
 800fb24:	0800fe9b 	.word	0x0800fe9b

0800fb28 <_cleanup_r>:
 800fb28:	4901      	ldr	r1, [pc, #4]	; (800fb30 <_cleanup_r+0x8>)
 800fb2a:	f000 b8af 	b.w	800fc8c <_fwalk_reent>
 800fb2e:	bf00      	nop
 800fb30:	0800fa69 	.word	0x0800fa69

0800fb34 <__sfmoreglue>:
 800fb34:	b570      	push	{r4, r5, r6, lr}
 800fb36:	1e4a      	subs	r2, r1, #1
 800fb38:	2568      	movs	r5, #104	; 0x68
 800fb3a:	4355      	muls	r5, r2
 800fb3c:	460e      	mov	r6, r1
 800fb3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fb42:	f7fd fc7b 	bl	800d43c <_malloc_r>
 800fb46:	4604      	mov	r4, r0
 800fb48:	b140      	cbz	r0, 800fb5c <__sfmoreglue+0x28>
 800fb4a:	2100      	movs	r1, #0
 800fb4c:	e9c0 1600 	strd	r1, r6, [r0]
 800fb50:	300c      	adds	r0, #12
 800fb52:	60a0      	str	r0, [r4, #8]
 800fb54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fb58:	f7fd fc18 	bl	800d38c <memset>
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	bd70      	pop	{r4, r5, r6, pc}

0800fb60 <__sfp_lock_acquire>:
 800fb60:	4801      	ldr	r0, [pc, #4]	; (800fb68 <__sfp_lock_acquire+0x8>)
 800fb62:	f7ff bc96 	b.w	800f492 <__retarget_lock_acquire_recursive>
 800fb66:	bf00      	nop
 800fb68:	2400c5fc 	.word	0x2400c5fc

0800fb6c <__sfp_lock_release>:
 800fb6c:	4801      	ldr	r0, [pc, #4]	; (800fb74 <__sfp_lock_release+0x8>)
 800fb6e:	f7ff bc91 	b.w	800f494 <__retarget_lock_release_recursive>
 800fb72:	bf00      	nop
 800fb74:	2400c5fc 	.word	0x2400c5fc

0800fb78 <__sinit_lock_acquire>:
 800fb78:	4801      	ldr	r0, [pc, #4]	; (800fb80 <__sinit_lock_acquire+0x8>)
 800fb7a:	f7ff bc8a 	b.w	800f492 <__retarget_lock_acquire_recursive>
 800fb7e:	bf00      	nop
 800fb80:	2400c5f7 	.word	0x2400c5f7

0800fb84 <__sinit_lock_release>:
 800fb84:	4801      	ldr	r0, [pc, #4]	; (800fb8c <__sinit_lock_release+0x8>)
 800fb86:	f7ff bc85 	b.w	800f494 <__retarget_lock_release_recursive>
 800fb8a:	bf00      	nop
 800fb8c:	2400c5f7 	.word	0x2400c5f7

0800fb90 <__sinit>:
 800fb90:	b510      	push	{r4, lr}
 800fb92:	4604      	mov	r4, r0
 800fb94:	f7ff fff0 	bl	800fb78 <__sinit_lock_acquire>
 800fb98:	69a3      	ldr	r3, [r4, #24]
 800fb9a:	b11b      	cbz	r3, 800fba4 <__sinit+0x14>
 800fb9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fba0:	f7ff bff0 	b.w	800fb84 <__sinit_lock_release>
 800fba4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fba8:	6523      	str	r3, [r4, #80]	; 0x50
 800fbaa:	4b13      	ldr	r3, [pc, #76]	; (800fbf8 <__sinit+0x68>)
 800fbac:	4a13      	ldr	r2, [pc, #76]	; (800fbfc <__sinit+0x6c>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	62a2      	str	r2, [r4, #40]	; 0x28
 800fbb2:	42a3      	cmp	r3, r4
 800fbb4:	bf04      	itt	eq
 800fbb6:	2301      	moveq	r3, #1
 800fbb8:	61a3      	streq	r3, [r4, #24]
 800fbba:	4620      	mov	r0, r4
 800fbbc:	f000 f820 	bl	800fc00 <__sfp>
 800fbc0:	6060      	str	r0, [r4, #4]
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f000 f81c 	bl	800fc00 <__sfp>
 800fbc8:	60a0      	str	r0, [r4, #8]
 800fbca:	4620      	mov	r0, r4
 800fbcc:	f000 f818 	bl	800fc00 <__sfp>
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	60e0      	str	r0, [r4, #12]
 800fbd4:	2104      	movs	r1, #4
 800fbd6:	6860      	ldr	r0, [r4, #4]
 800fbd8:	f7ff ff82 	bl	800fae0 <std>
 800fbdc:	68a0      	ldr	r0, [r4, #8]
 800fbde:	2201      	movs	r2, #1
 800fbe0:	2109      	movs	r1, #9
 800fbe2:	f7ff ff7d 	bl	800fae0 <std>
 800fbe6:	68e0      	ldr	r0, [r4, #12]
 800fbe8:	2202      	movs	r2, #2
 800fbea:	2112      	movs	r1, #18
 800fbec:	f7ff ff78 	bl	800fae0 <std>
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	61a3      	str	r3, [r4, #24]
 800fbf4:	e7d2      	b.n	800fb9c <__sinit+0xc>
 800fbf6:	bf00      	nop
 800fbf8:	0806ecb0 	.word	0x0806ecb0
 800fbfc:	0800fb29 	.word	0x0800fb29

0800fc00 <__sfp>:
 800fc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc02:	4607      	mov	r7, r0
 800fc04:	f7ff ffac 	bl	800fb60 <__sfp_lock_acquire>
 800fc08:	4b1e      	ldr	r3, [pc, #120]	; (800fc84 <__sfp+0x84>)
 800fc0a:	681e      	ldr	r6, [r3, #0]
 800fc0c:	69b3      	ldr	r3, [r6, #24]
 800fc0e:	b913      	cbnz	r3, 800fc16 <__sfp+0x16>
 800fc10:	4630      	mov	r0, r6
 800fc12:	f7ff ffbd 	bl	800fb90 <__sinit>
 800fc16:	3648      	adds	r6, #72	; 0x48
 800fc18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fc1c:	3b01      	subs	r3, #1
 800fc1e:	d503      	bpl.n	800fc28 <__sfp+0x28>
 800fc20:	6833      	ldr	r3, [r6, #0]
 800fc22:	b30b      	cbz	r3, 800fc68 <__sfp+0x68>
 800fc24:	6836      	ldr	r6, [r6, #0]
 800fc26:	e7f7      	b.n	800fc18 <__sfp+0x18>
 800fc28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fc2c:	b9d5      	cbnz	r5, 800fc64 <__sfp+0x64>
 800fc2e:	4b16      	ldr	r3, [pc, #88]	; (800fc88 <__sfp+0x88>)
 800fc30:	60e3      	str	r3, [r4, #12]
 800fc32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fc36:	6665      	str	r5, [r4, #100]	; 0x64
 800fc38:	f7ff fc2a 	bl	800f490 <__retarget_lock_init_recursive>
 800fc3c:	f7ff ff96 	bl	800fb6c <__sfp_lock_release>
 800fc40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fc44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fc48:	6025      	str	r5, [r4, #0]
 800fc4a:	61a5      	str	r5, [r4, #24]
 800fc4c:	2208      	movs	r2, #8
 800fc4e:	4629      	mov	r1, r5
 800fc50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fc54:	f7fd fb9a 	bl	800d38c <memset>
 800fc58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fc5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fc60:	4620      	mov	r0, r4
 800fc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc64:	3468      	adds	r4, #104	; 0x68
 800fc66:	e7d9      	b.n	800fc1c <__sfp+0x1c>
 800fc68:	2104      	movs	r1, #4
 800fc6a:	4638      	mov	r0, r7
 800fc6c:	f7ff ff62 	bl	800fb34 <__sfmoreglue>
 800fc70:	4604      	mov	r4, r0
 800fc72:	6030      	str	r0, [r6, #0]
 800fc74:	2800      	cmp	r0, #0
 800fc76:	d1d5      	bne.n	800fc24 <__sfp+0x24>
 800fc78:	f7ff ff78 	bl	800fb6c <__sfp_lock_release>
 800fc7c:	230c      	movs	r3, #12
 800fc7e:	603b      	str	r3, [r7, #0]
 800fc80:	e7ee      	b.n	800fc60 <__sfp+0x60>
 800fc82:	bf00      	nop
 800fc84:	0806ecb0 	.word	0x0806ecb0
 800fc88:	ffff0001 	.word	0xffff0001

0800fc8c <_fwalk_reent>:
 800fc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc90:	4606      	mov	r6, r0
 800fc92:	4688      	mov	r8, r1
 800fc94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fc98:	2700      	movs	r7, #0
 800fc9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fc9e:	f1b9 0901 	subs.w	r9, r9, #1
 800fca2:	d505      	bpl.n	800fcb0 <_fwalk_reent+0x24>
 800fca4:	6824      	ldr	r4, [r4, #0]
 800fca6:	2c00      	cmp	r4, #0
 800fca8:	d1f7      	bne.n	800fc9a <_fwalk_reent+0xe>
 800fcaa:	4638      	mov	r0, r7
 800fcac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcb0:	89ab      	ldrh	r3, [r5, #12]
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d907      	bls.n	800fcc6 <_fwalk_reent+0x3a>
 800fcb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fcba:	3301      	adds	r3, #1
 800fcbc:	d003      	beq.n	800fcc6 <_fwalk_reent+0x3a>
 800fcbe:	4629      	mov	r1, r5
 800fcc0:	4630      	mov	r0, r6
 800fcc2:	47c0      	blx	r8
 800fcc4:	4307      	orrs	r7, r0
 800fcc6:	3568      	adds	r5, #104	; 0x68
 800fcc8:	e7e9      	b.n	800fc9e <_fwalk_reent+0x12>

0800fcca <__swhatbuf_r>:
 800fcca:	b570      	push	{r4, r5, r6, lr}
 800fccc:	460e      	mov	r6, r1
 800fcce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcd2:	2900      	cmp	r1, #0
 800fcd4:	b096      	sub	sp, #88	; 0x58
 800fcd6:	4614      	mov	r4, r2
 800fcd8:	461d      	mov	r5, r3
 800fcda:	da07      	bge.n	800fcec <__swhatbuf_r+0x22>
 800fcdc:	2300      	movs	r3, #0
 800fcde:	602b      	str	r3, [r5, #0]
 800fce0:	89b3      	ldrh	r3, [r6, #12]
 800fce2:	061a      	lsls	r2, r3, #24
 800fce4:	d410      	bmi.n	800fd08 <__swhatbuf_r+0x3e>
 800fce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fcea:	e00e      	b.n	800fd0a <__swhatbuf_r+0x40>
 800fcec:	466a      	mov	r2, sp
 800fcee:	f000 f8fb 	bl	800fee8 <_fstat_r>
 800fcf2:	2800      	cmp	r0, #0
 800fcf4:	dbf2      	blt.n	800fcdc <__swhatbuf_r+0x12>
 800fcf6:	9a01      	ldr	r2, [sp, #4]
 800fcf8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fcfc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fd00:	425a      	negs	r2, r3
 800fd02:	415a      	adcs	r2, r3
 800fd04:	602a      	str	r2, [r5, #0]
 800fd06:	e7ee      	b.n	800fce6 <__swhatbuf_r+0x1c>
 800fd08:	2340      	movs	r3, #64	; 0x40
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	6023      	str	r3, [r4, #0]
 800fd0e:	b016      	add	sp, #88	; 0x58
 800fd10:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fd14 <__smakebuf_r>:
 800fd14:	898b      	ldrh	r3, [r1, #12]
 800fd16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd18:	079d      	lsls	r5, r3, #30
 800fd1a:	4606      	mov	r6, r0
 800fd1c:	460c      	mov	r4, r1
 800fd1e:	d507      	bpl.n	800fd30 <__smakebuf_r+0x1c>
 800fd20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fd24:	6023      	str	r3, [r4, #0]
 800fd26:	6123      	str	r3, [r4, #16]
 800fd28:	2301      	movs	r3, #1
 800fd2a:	6163      	str	r3, [r4, #20]
 800fd2c:	b002      	add	sp, #8
 800fd2e:	bd70      	pop	{r4, r5, r6, pc}
 800fd30:	ab01      	add	r3, sp, #4
 800fd32:	466a      	mov	r2, sp
 800fd34:	f7ff ffc9 	bl	800fcca <__swhatbuf_r>
 800fd38:	9900      	ldr	r1, [sp, #0]
 800fd3a:	4605      	mov	r5, r0
 800fd3c:	4630      	mov	r0, r6
 800fd3e:	f7fd fb7d 	bl	800d43c <_malloc_r>
 800fd42:	b948      	cbnz	r0, 800fd58 <__smakebuf_r+0x44>
 800fd44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd48:	059a      	lsls	r2, r3, #22
 800fd4a:	d4ef      	bmi.n	800fd2c <__smakebuf_r+0x18>
 800fd4c:	f023 0303 	bic.w	r3, r3, #3
 800fd50:	f043 0302 	orr.w	r3, r3, #2
 800fd54:	81a3      	strh	r3, [r4, #12]
 800fd56:	e7e3      	b.n	800fd20 <__smakebuf_r+0xc>
 800fd58:	4b0d      	ldr	r3, [pc, #52]	; (800fd90 <__smakebuf_r+0x7c>)
 800fd5a:	62b3      	str	r3, [r6, #40]	; 0x28
 800fd5c:	89a3      	ldrh	r3, [r4, #12]
 800fd5e:	6020      	str	r0, [r4, #0]
 800fd60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd64:	81a3      	strh	r3, [r4, #12]
 800fd66:	9b00      	ldr	r3, [sp, #0]
 800fd68:	6163      	str	r3, [r4, #20]
 800fd6a:	9b01      	ldr	r3, [sp, #4]
 800fd6c:	6120      	str	r0, [r4, #16]
 800fd6e:	b15b      	cbz	r3, 800fd88 <__smakebuf_r+0x74>
 800fd70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd74:	4630      	mov	r0, r6
 800fd76:	f000 f8c9 	bl	800ff0c <_isatty_r>
 800fd7a:	b128      	cbz	r0, 800fd88 <__smakebuf_r+0x74>
 800fd7c:	89a3      	ldrh	r3, [r4, #12]
 800fd7e:	f023 0303 	bic.w	r3, r3, #3
 800fd82:	f043 0301 	orr.w	r3, r3, #1
 800fd86:	81a3      	strh	r3, [r4, #12]
 800fd88:	89a0      	ldrh	r0, [r4, #12]
 800fd8a:	4305      	orrs	r5, r0
 800fd8c:	81a5      	strh	r5, [r4, #12]
 800fd8e:	e7cd      	b.n	800fd2c <__smakebuf_r+0x18>
 800fd90:	0800fb29 	.word	0x0800fb29

0800fd94 <_raise_r>:
 800fd94:	291f      	cmp	r1, #31
 800fd96:	b538      	push	{r3, r4, r5, lr}
 800fd98:	4604      	mov	r4, r0
 800fd9a:	460d      	mov	r5, r1
 800fd9c:	d904      	bls.n	800fda8 <_raise_r+0x14>
 800fd9e:	2316      	movs	r3, #22
 800fda0:	6003      	str	r3, [r0, #0]
 800fda2:	f04f 30ff 	mov.w	r0, #4294967295
 800fda6:	bd38      	pop	{r3, r4, r5, pc}
 800fda8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fdaa:	b112      	cbz	r2, 800fdb2 <_raise_r+0x1e>
 800fdac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fdb0:	b94b      	cbnz	r3, 800fdc6 <_raise_r+0x32>
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	f000 f830 	bl	800fe18 <_getpid_r>
 800fdb8:	462a      	mov	r2, r5
 800fdba:	4601      	mov	r1, r0
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdc2:	f000 b817 	b.w	800fdf4 <_kill_r>
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d00a      	beq.n	800fde0 <_raise_r+0x4c>
 800fdca:	1c59      	adds	r1, r3, #1
 800fdcc:	d103      	bne.n	800fdd6 <_raise_r+0x42>
 800fdce:	2316      	movs	r3, #22
 800fdd0:	6003      	str	r3, [r0, #0]
 800fdd2:	2001      	movs	r0, #1
 800fdd4:	e7e7      	b.n	800fda6 <_raise_r+0x12>
 800fdd6:	2400      	movs	r4, #0
 800fdd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fddc:	4628      	mov	r0, r5
 800fdde:	4798      	blx	r3
 800fde0:	2000      	movs	r0, #0
 800fde2:	e7e0      	b.n	800fda6 <_raise_r+0x12>

0800fde4 <raise>:
 800fde4:	4b02      	ldr	r3, [pc, #8]	; (800fdf0 <raise+0xc>)
 800fde6:	4601      	mov	r1, r0
 800fde8:	6818      	ldr	r0, [r3, #0]
 800fdea:	f7ff bfd3 	b.w	800fd94 <_raise_r>
 800fdee:	bf00      	nop
 800fdf0:	24001cbc 	.word	0x24001cbc

0800fdf4 <_kill_r>:
 800fdf4:	b538      	push	{r3, r4, r5, lr}
 800fdf6:	4d07      	ldr	r5, [pc, #28]	; (800fe14 <_kill_r+0x20>)
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	4604      	mov	r4, r0
 800fdfc:	4608      	mov	r0, r1
 800fdfe:	4611      	mov	r1, r2
 800fe00:	602b      	str	r3, [r5, #0]
 800fe02:	f000 f975 	bl	80100f0 <_kill>
 800fe06:	1c43      	adds	r3, r0, #1
 800fe08:	d102      	bne.n	800fe10 <_kill_r+0x1c>
 800fe0a:	682b      	ldr	r3, [r5, #0]
 800fe0c:	b103      	cbz	r3, 800fe10 <_kill_r+0x1c>
 800fe0e:	6023      	str	r3, [r4, #0]
 800fe10:	bd38      	pop	{r3, r4, r5, pc}
 800fe12:	bf00      	nop
 800fe14:	2400c5f0 	.word	0x2400c5f0

0800fe18 <_getpid_r>:
 800fe18:	f000 b95a 	b.w	80100d0 <_getpid>

0800fe1c <__sread>:
 800fe1c:	b510      	push	{r4, lr}
 800fe1e:	460c      	mov	r4, r1
 800fe20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe24:	f000 f894 	bl	800ff50 <_read_r>
 800fe28:	2800      	cmp	r0, #0
 800fe2a:	bfab      	itete	ge
 800fe2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe2e:	89a3      	ldrhlt	r3, [r4, #12]
 800fe30:	181b      	addge	r3, r3, r0
 800fe32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe36:	bfac      	ite	ge
 800fe38:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe3a:	81a3      	strhlt	r3, [r4, #12]
 800fe3c:	bd10      	pop	{r4, pc}

0800fe3e <__swrite>:
 800fe3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe42:	461f      	mov	r7, r3
 800fe44:	898b      	ldrh	r3, [r1, #12]
 800fe46:	05db      	lsls	r3, r3, #23
 800fe48:	4605      	mov	r5, r0
 800fe4a:	460c      	mov	r4, r1
 800fe4c:	4616      	mov	r6, r2
 800fe4e:	d505      	bpl.n	800fe5c <__swrite+0x1e>
 800fe50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe54:	2302      	movs	r3, #2
 800fe56:	2200      	movs	r2, #0
 800fe58:	f000 f868 	bl	800ff2c <_lseek_r>
 800fe5c:	89a3      	ldrh	r3, [r4, #12]
 800fe5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe66:	81a3      	strh	r3, [r4, #12]
 800fe68:	4632      	mov	r2, r6
 800fe6a:	463b      	mov	r3, r7
 800fe6c:	4628      	mov	r0, r5
 800fe6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe72:	f000 b817 	b.w	800fea4 <_write_r>

0800fe76 <__sseek>:
 800fe76:	b510      	push	{r4, lr}
 800fe78:	460c      	mov	r4, r1
 800fe7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe7e:	f000 f855 	bl	800ff2c <_lseek_r>
 800fe82:	1c43      	adds	r3, r0, #1
 800fe84:	89a3      	ldrh	r3, [r4, #12]
 800fe86:	bf15      	itete	ne
 800fe88:	6560      	strne	r0, [r4, #84]	; 0x54
 800fe8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fe8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fe92:	81a3      	strheq	r3, [r4, #12]
 800fe94:	bf18      	it	ne
 800fe96:	81a3      	strhne	r3, [r4, #12]
 800fe98:	bd10      	pop	{r4, pc}

0800fe9a <__sclose>:
 800fe9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe9e:	f000 b813 	b.w	800fec8 <_close_r>
	...

0800fea4 <_write_r>:
 800fea4:	b538      	push	{r3, r4, r5, lr}
 800fea6:	4d07      	ldr	r5, [pc, #28]	; (800fec4 <_write_r+0x20>)
 800fea8:	4604      	mov	r4, r0
 800feaa:	4608      	mov	r0, r1
 800feac:	4611      	mov	r1, r2
 800feae:	2200      	movs	r2, #0
 800feb0:	602a      	str	r2, [r5, #0]
 800feb2:	461a      	mov	r2, r3
 800feb4:	f000 f934 	bl	8010120 <_write>
 800feb8:	1c43      	adds	r3, r0, #1
 800feba:	d102      	bne.n	800fec2 <_write_r+0x1e>
 800febc:	682b      	ldr	r3, [r5, #0]
 800febe:	b103      	cbz	r3, 800fec2 <_write_r+0x1e>
 800fec0:	6023      	str	r3, [r4, #0]
 800fec2:	bd38      	pop	{r3, r4, r5, pc}
 800fec4:	2400c5f0 	.word	0x2400c5f0

0800fec8 <_close_r>:
 800fec8:	b538      	push	{r3, r4, r5, lr}
 800feca:	4d06      	ldr	r5, [pc, #24]	; (800fee4 <_close_r+0x1c>)
 800fecc:	2300      	movs	r3, #0
 800fece:	4604      	mov	r4, r0
 800fed0:	4608      	mov	r0, r1
 800fed2:	602b      	str	r3, [r5, #0]
 800fed4:	f000 f8ec 	bl	80100b0 <_close>
 800fed8:	1c43      	adds	r3, r0, #1
 800feda:	d102      	bne.n	800fee2 <_close_r+0x1a>
 800fedc:	682b      	ldr	r3, [r5, #0]
 800fede:	b103      	cbz	r3, 800fee2 <_close_r+0x1a>
 800fee0:	6023      	str	r3, [r4, #0]
 800fee2:	bd38      	pop	{r3, r4, r5, pc}
 800fee4:	2400c5f0 	.word	0x2400c5f0

0800fee8 <_fstat_r>:
 800fee8:	b538      	push	{r3, r4, r5, lr}
 800feea:	4d07      	ldr	r5, [pc, #28]	; (800ff08 <_fstat_r+0x20>)
 800feec:	2300      	movs	r3, #0
 800feee:	4604      	mov	r4, r0
 800fef0:	4608      	mov	r0, r1
 800fef2:	4611      	mov	r1, r2
 800fef4:	602b      	str	r3, [r5, #0]
 800fef6:	f000 f8e3 	bl	80100c0 <_fstat>
 800fefa:	1c43      	adds	r3, r0, #1
 800fefc:	d102      	bne.n	800ff04 <_fstat_r+0x1c>
 800fefe:	682b      	ldr	r3, [r5, #0]
 800ff00:	b103      	cbz	r3, 800ff04 <_fstat_r+0x1c>
 800ff02:	6023      	str	r3, [r4, #0]
 800ff04:	bd38      	pop	{r3, r4, r5, pc}
 800ff06:	bf00      	nop
 800ff08:	2400c5f0 	.word	0x2400c5f0

0800ff0c <_isatty_r>:
 800ff0c:	b538      	push	{r3, r4, r5, lr}
 800ff0e:	4d06      	ldr	r5, [pc, #24]	; (800ff28 <_isatty_r+0x1c>)
 800ff10:	2300      	movs	r3, #0
 800ff12:	4604      	mov	r4, r0
 800ff14:	4608      	mov	r0, r1
 800ff16:	602b      	str	r3, [r5, #0]
 800ff18:	f000 f8e2 	bl	80100e0 <_isatty>
 800ff1c:	1c43      	adds	r3, r0, #1
 800ff1e:	d102      	bne.n	800ff26 <_isatty_r+0x1a>
 800ff20:	682b      	ldr	r3, [r5, #0]
 800ff22:	b103      	cbz	r3, 800ff26 <_isatty_r+0x1a>
 800ff24:	6023      	str	r3, [r4, #0]
 800ff26:	bd38      	pop	{r3, r4, r5, pc}
 800ff28:	2400c5f0 	.word	0x2400c5f0

0800ff2c <_lseek_r>:
 800ff2c:	b538      	push	{r3, r4, r5, lr}
 800ff2e:	4d07      	ldr	r5, [pc, #28]	; (800ff4c <_lseek_r+0x20>)
 800ff30:	4604      	mov	r4, r0
 800ff32:	4608      	mov	r0, r1
 800ff34:	4611      	mov	r1, r2
 800ff36:	2200      	movs	r2, #0
 800ff38:	602a      	str	r2, [r5, #0]
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	f000 f8e0 	bl	8010100 <_lseek>
 800ff40:	1c43      	adds	r3, r0, #1
 800ff42:	d102      	bne.n	800ff4a <_lseek_r+0x1e>
 800ff44:	682b      	ldr	r3, [r5, #0]
 800ff46:	b103      	cbz	r3, 800ff4a <_lseek_r+0x1e>
 800ff48:	6023      	str	r3, [r4, #0]
 800ff4a:	bd38      	pop	{r3, r4, r5, pc}
 800ff4c:	2400c5f0 	.word	0x2400c5f0

0800ff50 <_read_r>:
 800ff50:	b538      	push	{r3, r4, r5, lr}
 800ff52:	4d07      	ldr	r5, [pc, #28]	; (800ff70 <_read_r+0x20>)
 800ff54:	4604      	mov	r4, r0
 800ff56:	4608      	mov	r0, r1
 800ff58:	4611      	mov	r1, r2
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	602a      	str	r2, [r5, #0]
 800ff5e:	461a      	mov	r2, r3
 800ff60:	f000 f8d6 	bl	8010110 <_read>
 800ff64:	1c43      	adds	r3, r0, #1
 800ff66:	d102      	bne.n	800ff6e <_read_r+0x1e>
 800ff68:	682b      	ldr	r3, [r5, #0]
 800ff6a:	b103      	cbz	r3, 800ff6e <_read_r+0x1e>
 800ff6c:	6023      	str	r3, [r4, #0]
 800ff6e:	bd38      	pop	{r3, r4, r5, pc}
 800ff70:	2400c5f0 	.word	0x2400c5f0

0800ff74 <expf>:
 800ff74:	ee10 2a10 	vmov	r2, s0
 800ff78:	b470      	push	{r4, r5, r6}
 800ff7a:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800ff7e:	f240 442a 	movw	r4, #1066	; 0x42a
 800ff82:	42a3      	cmp	r3, r4
 800ff84:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800ff88:	d92a      	bls.n	800ffe0 <expf+0x6c>
 800ff8a:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800ff8e:	d059      	beq.n	8010044 <expf+0xd0>
 800ff90:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800ff94:	d303      	bcc.n	800ff9e <expf+0x2a>
 800ff96:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ff9a:	bc70      	pop	{r4, r5, r6}
 800ff9c:	4770      	bx	lr
 800ff9e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801004c <expf+0xd8>
 800ffa2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ffa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffaa:	dd03      	ble.n	800ffb4 <expf+0x40>
 800ffac:	bc70      	pop	{r4, r5, r6}
 800ffae:	2000      	movs	r0, #0
 800ffb0:	f000 b878 	b.w	80100a4 <__math_oflowf>
 800ffb4:	eddf 7a26 	vldr	s15, [pc, #152]	; 8010050 <expf+0xdc>
 800ffb8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ffbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffc0:	d503      	bpl.n	800ffca <expf+0x56>
 800ffc2:	bc70      	pop	{r4, r5, r6}
 800ffc4:	2000      	movs	r0, #0
 800ffc6:	f000 b861 	b.w	801008c <__math_uflowf>
 800ffca:	eddf 7a22 	vldr	s15, [pc, #136]	; 8010054 <expf+0xe0>
 800ffce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ffd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffd6:	d503      	bpl.n	800ffe0 <expf+0x6c>
 800ffd8:	bc70      	pop	{r4, r5, r6}
 800ffda:	2000      	movs	r0, #0
 800ffdc:	f000 b85c 	b.w	8010098 <__math_may_uflowf>
 800ffe0:	4b1d      	ldr	r3, [pc, #116]	; (8010058 <expf+0xe4>)
 800ffe2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ffe6:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800ffea:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800ffee:	eeb0 7b44 	vmov.f64	d7, d4
 800fff2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800fff6:	ee17 5a10 	vmov	r5, s14
 800fffa:	ee37 7b44 	vsub.f64	d7, d7, d4
 800fffe:	f005 021f 	and.w	r2, r5, #31
 8010002:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010006:	e9d2 4600 	ldrd	r4, r6, [r2]
 801000a:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801000e:	ed93 4b50 	vldr	d4, [r3, #320]	; 0x140
 8010012:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8010016:	eea4 0b07 	vfma.f64	d0, d4, d7
 801001a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801001e:	2300      	movs	r3, #0
 8010020:	1918      	adds	r0, r3, r4
 8010022:	ea4f 32c5 	mov.w	r2, r5, lsl #15
 8010026:	eb42 0106 	adc.w	r1, r2, r6
 801002a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801002e:	ee27 5b07 	vmul.f64	d5, d7, d7
 8010032:	ec41 0b17 	vmov	d7, r0, r1
 8010036:	eea6 0b05 	vfma.f64	d0, d6, d5
 801003a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801003e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010042:	e7aa      	b.n	800ff9a <expf+0x26>
 8010044:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801005c <expf+0xe8>
 8010048:	e7a7      	b.n	800ff9a <expf+0x26>
 801004a:	bf00      	nop
 801004c:	42b17217 	.word	0x42b17217
 8010050:	c2cff1b4 	.word	0xc2cff1b4
 8010054:	c2ce8ecf 	.word	0xc2ce8ecf
 8010058:	0806f098 	.word	0x0806f098
 801005c:	00000000 	.word	0x00000000

08010060 <with_errnof>:
 8010060:	b513      	push	{r0, r1, r4, lr}
 8010062:	4604      	mov	r4, r0
 8010064:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010068:	f7fd f950 	bl	800d30c <__errno>
 801006c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010070:	6004      	str	r4, [r0, #0]
 8010072:	b002      	add	sp, #8
 8010074:	bd10      	pop	{r4, pc}

08010076 <xflowf>:
 8010076:	b130      	cbz	r0, 8010086 <xflowf+0x10>
 8010078:	eef1 7a40 	vneg.f32	s15, s0
 801007c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010080:	2022      	movs	r0, #34	; 0x22
 8010082:	f7ff bfed 	b.w	8010060 <with_errnof>
 8010086:	eef0 7a40 	vmov.f32	s15, s0
 801008a:	e7f7      	b.n	801007c <xflowf+0x6>

0801008c <__math_uflowf>:
 801008c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010094 <__math_uflowf+0x8>
 8010090:	f7ff bff1 	b.w	8010076 <xflowf>
 8010094:	10000000 	.word	0x10000000

08010098 <__math_may_uflowf>:
 8010098:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80100a0 <__math_may_uflowf+0x8>
 801009c:	f7ff bfeb 	b.w	8010076 <xflowf>
 80100a0:	1a200000 	.word	0x1a200000

080100a4 <__math_oflowf>:
 80100a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80100ac <__math_oflowf+0x8>
 80100a8:	f7ff bfe5 	b.w	8010076 <xflowf>
 80100ac:	70000000 	.word	0x70000000

080100b0 <_close>:
 80100b0:	4b02      	ldr	r3, [pc, #8]	; (80100bc <_close+0xc>)
 80100b2:	2258      	movs	r2, #88	; 0x58
 80100b4:	601a      	str	r2, [r3, #0]
 80100b6:	f04f 30ff 	mov.w	r0, #4294967295
 80100ba:	4770      	bx	lr
 80100bc:	2400c5f0 	.word	0x2400c5f0

080100c0 <_fstat>:
 80100c0:	4b02      	ldr	r3, [pc, #8]	; (80100cc <_fstat+0xc>)
 80100c2:	2258      	movs	r2, #88	; 0x58
 80100c4:	601a      	str	r2, [r3, #0]
 80100c6:	f04f 30ff 	mov.w	r0, #4294967295
 80100ca:	4770      	bx	lr
 80100cc:	2400c5f0 	.word	0x2400c5f0

080100d0 <_getpid>:
 80100d0:	4b02      	ldr	r3, [pc, #8]	; (80100dc <_getpid+0xc>)
 80100d2:	2258      	movs	r2, #88	; 0x58
 80100d4:	601a      	str	r2, [r3, #0]
 80100d6:	f04f 30ff 	mov.w	r0, #4294967295
 80100da:	4770      	bx	lr
 80100dc:	2400c5f0 	.word	0x2400c5f0

080100e0 <_isatty>:
 80100e0:	4b02      	ldr	r3, [pc, #8]	; (80100ec <_isatty+0xc>)
 80100e2:	2258      	movs	r2, #88	; 0x58
 80100e4:	601a      	str	r2, [r3, #0]
 80100e6:	2000      	movs	r0, #0
 80100e8:	4770      	bx	lr
 80100ea:	bf00      	nop
 80100ec:	2400c5f0 	.word	0x2400c5f0

080100f0 <_kill>:
 80100f0:	4b02      	ldr	r3, [pc, #8]	; (80100fc <_kill+0xc>)
 80100f2:	2258      	movs	r2, #88	; 0x58
 80100f4:	601a      	str	r2, [r3, #0]
 80100f6:	f04f 30ff 	mov.w	r0, #4294967295
 80100fa:	4770      	bx	lr
 80100fc:	2400c5f0 	.word	0x2400c5f0

08010100 <_lseek>:
 8010100:	4b02      	ldr	r3, [pc, #8]	; (801010c <_lseek+0xc>)
 8010102:	2258      	movs	r2, #88	; 0x58
 8010104:	601a      	str	r2, [r3, #0]
 8010106:	f04f 30ff 	mov.w	r0, #4294967295
 801010a:	4770      	bx	lr
 801010c:	2400c5f0 	.word	0x2400c5f0

08010110 <_read>:
 8010110:	4b02      	ldr	r3, [pc, #8]	; (801011c <_read+0xc>)
 8010112:	2258      	movs	r2, #88	; 0x58
 8010114:	601a      	str	r2, [r3, #0]
 8010116:	f04f 30ff 	mov.w	r0, #4294967295
 801011a:	4770      	bx	lr
 801011c:	2400c5f0 	.word	0x2400c5f0

08010120 <_write>:
 8010120:	4b02      	ldr	r3, [pc, #8]	; (801012c <_write+0xc>)
 8010122:	2258      	movs	r2, #88	; 0x58
 8010124:	601a      	str	r2, [r3, #0]
 8010126:	f04f 30ff 	mov.w	r0, #4294967295
 801012a:	4770      	bx	lr
 801012c:	2400c5f0 	.word	0x2400c5f0

08010130 <_exit>:
 8010130:	e7fe      	b.n	8010130 <_exit>
	...

08010134 <_init>:
 8010134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010136:	bf00      	nop
 8010138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801013a:	bc08      	pop	{r3}
 801013c:	469e      	mov	lr, r3
 801013e:	4770      	bx	lr

08010140 <_fini>:
 8010140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010142:	bf00      	nop
 8010144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010146:	bc08      	pop	{r3}
 8010148:	469e      	mov	lr, r3
 801014a:	4770      	bx	lr
