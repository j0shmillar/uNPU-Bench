
resnet_stm32h.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ba4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005f0e0  08010e60  08010e60  00020e60  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0806ff40  0806ff40  0007ff40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0806ff48  0806ff48  0007ff48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0806ff4c  0806ff4c  0007ff4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000020e0  24000000  0806ff50  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000eb00  240020e0  08072030  000820e0  2**5
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  00090000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000820e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e2ee  00000000  00000000  0008210e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032f4  00000000  00000000  000a03fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000be0  00000000  00000000  000a36f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ae0  00000000  00000000  000a42d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000316dd  00000000  00000000  000a4db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011072  00000000  00000000  000d648d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001405d5  00000000  00000000  000e74ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000a3  00000000  00000000  00227ad4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000040f0  00000000  00000000  00227b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000cc  00000000  00000000  0022bc68  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001b9  00000000  00000000  0022bd34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240020e0 	.word	0x240020e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08010e3c 	.word	0x08010e3c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240020e4 	.word	0x240020e4
 80002ec:	08010e3c 	.word	0x08010e3c

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b9a2 	b.w	80006fc <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f83a 	bl	8000438 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__aeabi_f2lz>:
 80003d0:	ee07 0a90 	vmov	s15, r0
 80003d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003dc:	d401      	bmi.n	80003e2 <__aeabi_f2lz+0x12>
 80003de:	f000 b80b 	b.w	80003f8 <__aeabi_f2ulz>
 80003e2:	eef1 7a67 	vneg.f32	s15, s15
 80003e6:	b508      	push	{r3, lr}
 80003e8:	ee17 0a90 	vmov	r0, s15
 80003ec:	f000 f804 	bl	80003f8 <__aeabi_f2ulz>
 80003f0:	4240      	negs	r0, r0
 80003f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f6:	bd08      	pop	{r3, pc}

080003f8 <__aeabi_f2ulz>:
 80003f8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000428 <__aeabi_f2ulz+0x30>
 80003fc:	ee07 0a90 	vmov	s15, r0
 8000400:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000430 <__aeabi_f2ulz+0x38>
 8000404:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000408:	ee27 6b06 	vmul.f64	d6, d7, d6
 800040c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000410:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000414:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000418:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800041c:	ee16 1a10 	vmov	r1, s12
 8000420:	ee17 0a90 	vmov	r0, s15
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	00000000 	.word	0x00000000
 800042c:	3df00000 	.word	0x3df00000
 8000430:	00000000 	.word	0x00000000
 8000434:	41f00000 	.word	0x41f00000

08000438 <__udivmoddi4>:
 8000438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800043c:	9d08      	ldr	r5, [sp, #32]
 800043e:	4604      	mov	r4, r0
 8000440:	468c      	mov	ip, r1
 8000442:	2b00      	cmp	r3, #0
 8000444:	f040 8083 	bne.w	800054e <__udivmoddi4+0x116>
 8000448:	428a      	cmp	r2, r1
 800044a:	4617      	mov	r7, r2
 800044c:	d947      	bls.n	80004de <__udivmoddi4+0xa6>
 800044e:	fab2 f282 	clz	r2, r2
 8000452:	b142      	cbz	r2, 8000466 <__udivmoddi4+0x2e>
 8000454:	f1c2 0020 	rsb	r0, r2, #32
 8000458:	fa24 f000 	lsr.w	r0, r4, r0
 800045c:	4091      	lsls	r1, r2
 800045e:	4097      	lsls	r7, r2
 8000460:	ea40 0c01 	orr.w	ip, r0, r1
 8000464:	4094      	lsls	r4, r2
 8000466:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800046a:	0c23      	lsrs	r3, r4, #16
 800046c:	fbbc f6f8 	udiv	r6, ip, r8
 8000470:	fa1f fe87 	uxth.w	lr, r7
 8000474:	fb08 c116 	mls	r1, r8, r6, ip
 8000478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047c:	fb06 f10e 	mul.w	r1, r6, lr
 8000480:	4299      	cmp	r1, r3
 8000482:	d909      	bls.n	8000498 <__udivmoddi4+0x60>
 8000484:	18fb      	adds	r3, r7, r3
 8000486:	f106 30ff 	add.w	r0, r6, #4294967295
 800048a:	f080 8119 	bcs.w	80006c0 <__udivmoddi4+0x288>
 800048e:	4299      	cmp	r1, r3
 8000490:	f240 8116 	bls.w	80006c0 <__udivmoddi4+0x288>
 8000494:	3e02      	subs	r6, #2
 8000496:	443b      	add	r3, r7
 8000498:	1a5b      	subs	r3, r3, r1
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a0:	fb08 3310 	mls	r3, r8, r0, r3
 80004a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	45a6      	cmp	lr, r4
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x8c>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b6:	f080 8105 	bcs.w	80006c4 <__udivmoddi4+0x28c>
 80004ba:	45a6      	cmp	lr, r4
 80004bc:	f240 8102 	bls.w	80006c4 <__udivmoddi4+0x28c>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004c8:	eba4 040e 	sub.w	r4, r4, lr
 80004cc:	2600      	movs	r6, #0
 80004ce:	b11d      	cbz	r5, 80004d8 <__udivmoddi4+0xa0>
 80004d0:	40d4      	lsrs	r4, r2
 80004d2:	2300      	movs	r3, #0
 80004d4:	e9c5 4300 	strd	r4, r3, [r5]
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	b902      	cbnz	r2, 80004e2 <__udivmoddi4+0xaa>
 80004e0:	deff      	udf	#255	; 0xff
 80004e2:	fab2 f282 	clz	r2, r2
 80004e6:	2a00      	cmp	r2, #0
 80004e8:	d150      	bne.n	800058c <__udivmoddi4+0x154>
 80004ea:	1bcb      	subs	r3, r1, r7
 80004ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f0:	fa1f f887 	uxth.w	r8, r7
 80004f4:	2601      	movs	r6, #1
 80004f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80004fa:	0c21      	lsrs	r1, r4, #16
 80004fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb08 f30c 	mul.w	r3, r8, ip
 8000508:	428b      	cmp	r3, r1
 800050a:	d907      	bls.n	800051c <__udivmoddi4+0xe4>
 800050c:	1879      	adds	r1, r7, r1
 800050e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0xe2>
 8000514:	428b      	cmp	r3, r1
 8000516:	f200 80e9 	bhi.w	80006ec <__udivmoddi4+0x2b4>
 800051a:	4684      	mov	ip, r0
 800051c:	1ac9      	subs	r1, r1, r3
 800051e:	b2a3      	uxth	r3, r4
 8000520:	fbb1 f0fe 	udiv	r0, r1, lr
 8000524:	fb0e 1110 	mls	r1, lr, r0, r1
 8000528:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800052c:	fb08 f800 	mul.w	r8, r8, r0
 8000530:	45a0      	cmp	r8, r4
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x10c>
 8000534:	193c      	adds	r4, r7, r4
 8000536:	f100 33ff 	add.w	r3, r0, #4294967295
 800053a:	d202      	bcs.n	8000542 <__udivmoddi4+0x10a>
 800053c:	45a0      	cmp	r8, r4
 800053e:	f200 80d9 	bhi.w	80006f4 <__udivmoddi4+0x2bc>
 8000542:	4618      	mov	r0, r3
 8000544:	eba4 0408 	sub.w	r4, r4, r8
 8000548:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800054c:	e7bf      	b.n	80004ce <__udivmoddi4+0x96>
 800054e:	428b      	cmp	r3, r1
 8000550:	d909      	bls.n	8000566 <__udivmoddi4+0x12e>
 8000552:	2d00      	cmp	r5, #0
 8000554:	f000 80b1 	beq.w	80006ba <__udivmoddi4+0x282>
 8000558:	2600      	movs	r6, #0
 800055a:	e9c5 0100 	strd	r0, r1, [r5]
 800055e:	4630      	mov	r0, r6
 8000560:	4631      	mov	r1, r6
 8000562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000566:	fab3 f683 	clz	r6, r3
 800056a:	2e00      	cmp	r6, #0
 800056c:	d14a      	bne.n	8000604 <__udivmoddi4+0x1cc>
 800056e:	428b      	cmp	r3, r1
 8000570:	d302      	bcc.n	8000578 <__udivmoddi4+0x140>
 8000572:	4282      	cmp	r2, r0
 8000574:	f200 80b8 	bhi.w	80006e8 <__udivmoddi4+0x2b0>
 8000578:	1a84      	subs	r4, r0, r2
 800057a:	eb61 0103 	sbc.w	r1, r1, r3
 800057e:	2001      	movs	r0, #1
 8000580:	468c      	mov	ip, r1
 8000582:	2d00      	cmp	r5, #0
 8000584:	d0a8      	beq.n	80004d8 <__udivmoddi4+0xa0>
 8000586:	e9c5 4c00 	strd	r4, ip, [r5]
 800058a:	e7a5      	b.n	80004d8 <__udivmoddi4+0xa0>
 800058c:	f1c2 0320 	rsb	r3, r2, #32
 8000590:	fa20 f603 	lsr.w	r6, r0, r3
 8000594:	4097      	lsls	r7, r2
 8000596:	fa01 f002 	lsl.w	r0, r1, r2
 800059a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800059e:	40d9      	lsrs	r1, r3
 80005a0:	4330      	orrs	r0, r6
 80005a2:	0c03      	lsrs	r3, r0, #16
 80005a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80005a8:	fa1f f887 	uxth.w	r8, r7
 80005ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80005b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b4:	fb06 f108 	mul.w	r1, r6, r8
 80005b8:	4299      	cmp	r1, r3
 80005ba:	fa04 f402 	lsl.w	r4, r4, r2
 80005be:	d909      	bls.n	80005d4 <__udivmoddi4+0x19c>
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80005c6:	f080 808d 	bcs.w	80006e4 <__udivmoddi4+0x2ac>
 80005ca:	4299      	cmp	r1, r3
 80005cc:	f240 808a 	bls.w	80006e4 <__udivmoddi4+0x2ac>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	443b      	add	r3, r7
 80005d4:	1a5b      	subs	r3, r3, r1
 80005d6:	b281      	uxth	r1, r0
 80005d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80005dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80005e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005e4:	fb00 f308 	mul.w	r3, r0, r8
 80005e8:	428b      	cmp	r3, r1
 80005ea:	d907      	bls.n	80005fc <__udivmoddi4+0x1c4>
 80005ec:	1879      	adds	r1, r7, r1
 80005ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80005f2:	d273      	bcs.n	80006dc <__udivmoddi4+0x2a4>
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d971      	bls.n	80006dc <__udivmoddi4+0x2a4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4439      	add	r1, r7
 80005fc:	1acb      	subs	r3, r1, r3
 80005fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000602:	e778      	b.n	80004f6 <__udivmoddi4+0xbe>
 8000604:	f1c6 0c20 	rsb	ip, r6, #32
 8000608:	fa03 f406 	lsl.w	r4, r3, r6
 800060c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000610:	431c      	orrs	r4, r3
 8000612:	fa20 f70c 	lsr.w	r7, r0, ip
 8000616:	fa01 f306 	lsl.w	r3, r1, r6
 800061a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800061e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000622:	431f      	orrs	r7, r3
 8000624:	0c3b      	lsrs	r3, r7, #16
 8000626:	fbb1 f9fe 	udiv	r9, r1, lr
 800062a:	fa1f f884 	uxth.w	r8, r4
 800062e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000632:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000636:	fb09 fa08 	mul.w	sl, r9, r8
 800063a:	458a      	cmp	sl, r1
 800063c:	fa02 f206 	lsl.w	r2, r2, r6
 8000640:	fa00 f306 	lsl.w	r3, r0, r6
 8000644:	d908      	bls.n	8000658 <__udivmoddi4+0x220>
 8000646:	1861      	adds	r1, r4, r1
 8000648:	f109 30ff 	add.w	r0, r9, #4294967295
 800064c:	d248      	bcs.n	80006e0 <__udivmoddi4+0x2a8>
 800064e:	458a      	cmp	sl, r1
 8000650:	d946      	bls.n	80006e0 <__udivmoddi4+0x2a8>
 8000652:	f1a9 0902 	sub.w	r9, r9, #2
 8000656:	4421      	add	r1, r4
 8000658:	eba1 010a 	sub.w	r1, r1, sl
 800065c:	b2bf      	uxth	r7, r7
 800065e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000662:	fb0e 1110 	mls	r1, lr, r0, r1
 8000666:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800066a:	fb00 f808 	mul.w	r8, r0, r8
 800066e:	45b8      	cmp	r8, r7
 8000670:	d907      	bls.n	8000682 <__udivmoddi4+0x24a>
 8000672:	19e7      	adds	r7, r4, r7
 8000674:	f100 31ff 	add.w	r1, r0, #4294967295
 8000678:	d22e      	bcs.n	80006d8 <__udivmoddi4+0x2a0>
 800067a:	45b8      	cmp	r8, r7
 800067c:	d92c      	bls.n	80006d8 <__udivmoddi4+0x2a0>
 800067e:	3802      	subs	r0, #2
 8000680:	4427      	add	r7, r4
 8000682:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000686:	eba7 0708 	sub.w	r7, r7, r8
 800068a:	fba0 8902 	umull	r8, r9, r0, r2
 800068e:	454f      	cmp	r7, r9
 8000690:	46c6      	mov	lr, r8
 8000692:	4649      	mov	r1, r9
 8000694:	d31a      	bcc.n	80006cc <__udivmoddi4+0x294>
 8000696:	d017      	beq.n	80006c8 <__udivmoddi4+0x290>
 8000698:	b15d      	cbz	r5, 80006b2 <__udivmoddi4+0x27a>
 800069a:	ebb3 020e 	subs.w	r2, r3, lr
 800069e:	eb67 0701 	sbc.w	r7, r7, r1
 80006a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80006a6:	40f2      	lsrs	r2, r6
 80006a8:	ea4c 0202 	orr.w	r2, ip, r2
 80006ac:	40f7      	lsrs	r7, r6
 80006ae:	e9c5 2700 	strd	r2, r7, [r5]
 80006b2:	2600      	movs	r6, #0
 80006b4:	4631      	mov	r1, r6
 80006b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ba:	462e      	mov	r6, r5
 80006bc:	4628      	mov	r0, r5
 80006be:	e70b      	b.n	80004d8 <__udivmoddi4+0xa0>
 80006c0:	4606      	mov	r6, r0
 80006c2:	e6e9      	b.n	8000498 <__udivmoddi4+0x60>
 80006c4:	4618      	mov	r0, r3
 80006c6:	e6fd      	b.n	80004c4 <__udivmoddi4+0x8c>
 80006c8:	4543      	cmp	r3, r8
 80006ca:	d2e5      	bcs.n	8000698 <__udivmoddi4+0x260>
 80006cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80006d0:	eb69 0104 	sbc.w	r1, r9, r4
 80006d4:	3801      	subs	r0, #1
 80006d6:	e7df      	b.n	8000698 <__udivmoddi4+0x260>
 80006d8:	4608      	mov	r0, r1
 80006da:	e7d2      	b.n	8000682 <__udivmoddi4+0x24a>
 80006dc:	4660      	mov	r0, ip
 80006de:	e78d      	b.n	80005fc <__udivmoddi4+0x1c4>
 80006e0:	4681      	mov	r9, r0
 80006e2:	e7b9      	b.n	8000658 <__udivmoddi4+0x220>
 80006e4:	4666      	mov	r6, ip
 80006e6:	e775      	b.n	80005d4 <__udivmoddi4+0x19c>
 80006e8:	4630      	mov	r0, r6
 80006ea:	e74a      	b.n	8000582 <__udivmoddi4+0x14a>
 80006ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80006f0:	4439      	add	r1, r7
 80006f2:	e713      	b.n	800051c <__udivmoddi4+0xe4>
 80006f4:	3802      	subs	r0, #2
 80006f6:	443c      	add	r4, r7
 80006f8:	e724      	b.n	8000544 <__udivmoddi4+0x10c>
 80006fa:	bf00      	nop

080006fc <__aeabi_idiv0>:
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop

08000700 <acquire_and_process_data>:
/* Define global variables */
char buf[50]; // Define printf
int buf_len = 0;
ai_error err;
//
int acquire_and_process_data(const void *in_data){
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

//	AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
//	AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

	for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e009      	b.n	8000722 <acquire_and_process_data+0x22>
	{
		((ai_float *)in_data)[i] = (ai_float)2.0f;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800071a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3301      	adds	r3, #1
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000728:	d3f1      	bcc.n	800070e <acquire_and_process_data+0xe>
	}

	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <aiInit>:
int aiInit(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
//  ai_error err;

  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <aiInit+0x74>)
 8000740:	607b      	str	r3, [r7, #4]
  err = ai_network_create_and_init(&network, acts, NULL);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	4619      	mov	r1, r3
 8000748:	4819      	ldr	r0, [pc, #100]	; (80007b0 <aiInit+0x78>)
 800074a:	f005 fb0d 	bl	8005d68 <ai_network_create_and_init>
 800074e:	4603      	mov	r3, r0
 8000750:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <aiInit+0x7c>)
 8000752:	6013      	str	r3, [r2, #0]
  if (err.type != AI_ERROR_NONE) {
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <aiInit+0x7c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00f      	beq.n	800077c <aiInit+0x44>
	  buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 800075c:	4916      	ldr	r1, [pc, #88]	; (80007b8 <aiInit+0x80>)
 800075e:	4817      	ldr	r0, [pc, #92]	; (80007bc <aiInit+0x84>)
 8000760:	f00e f99c 	bl	800ea9c <siprintf>
 8000764:	4603      	mov	r3, r0
 8000766:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <aiInit+0x88>)
 8000768:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <aiInit+0x88>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	b29a      	uxth	r2, r3
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	4912      	ldr	r1, [pc, #72]	; (80007bc <aiInit+0x84>)
 8000774:	4813      	ldr	r0, [pc, #76]	; (80007c4 <aiInit+0x8c>)
 8000776:	f003 fca1 	bl	80040bc <HAL_UART_Transmit>
	  while(1);
 800077a:	e7fe      	b.n	800077a <aiInit+0x42>
 };

  /* Reteive pointers to the model's input/output tensors */
  ai_input = ai_network_inputs_get(network, NULL);
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <aiInit+0x78>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f005 fb64 	bl	8005e50 <ai_network_inputs_get>
 8000788:	4603      	mov	r3, r0
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <aiInit+0x90>)
 800078c:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <aiInit+0x78>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f005 fb75 	bl	8005e84 <ai_network_outputs_get>
 800079a:	4603      	mov	r3, r0
 800079c:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <aiInit+0x94>)
 800079e:	6013      	str	r3, [r2, #0]

  return 0;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	24002100 	.word	0x24002100
 80007b0:	240020fc 	.word	0x240020fc
 80007b4:	24010b94 	.word	0x24010b94
 80007b8:	08010e60 	.word	0x08010e60
 80007bc:	24010b98 	.word	0x24010b98
 80007c0:	240109b8 	.word	0x240109b8
 80007c4:	24010ae0 	.word	0x24010ae0
 80007c8:	240109b0 	.word	0x240109b0
 80007cc:	240109b4 	.word	0x240109b4

080007d0 <aiRun>:

int aiRun(const void *in_data, void *out_data) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  ai_i32 n_batch;
//  ai_error err;

  /* 1 - Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <aiRun+0x6c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <aiRun+0x70>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	605a      	str	r2, [r3, #4]

  /* 2 - Perform the inference */
  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <aiRun+0x74>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <aiRun+0x6c>)
 80007f0:	6811      	ldr	r1, [r2, #0]
 80007f2:	4a13      	ldr	r2, [pc, #76]	; (8000840 <aiRun+0x70>)
 80007f4:	6812      	ldr	r2, [r2, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 fb9a 	bl	8005f30 <ai_network_run>
 80007fc:	60f8      	str	r0, [r7, #12]
  if (n_batch != 1) {
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d016      	beq.n	8000832 <aiRun+0x62>
      err = ai_network_get_error(network);
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <aiRun+0x74>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f005 fa8b 	bl	8005d24 <ai_network_get_error>
 800080e:	4603      	mov	r3, r0
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <aiRun+0x78>)
 8000812:	6013      	str	r3, [r2, #0]
	  buf_len = sprintf(buf, "Error: could not run inference \r\n");
 8000814:	490d      	ldr	r1, [pc, #52]	; (800084c <aiRun+0x7c>)
 8000816:	480e      	ldr	r0, [pc, #56]	; (8000850 <aiRun+0x80>)
 8000818:	f00e f940 	bl	800ea9c <siprintf>
 800081c:	4603      	mov	r3, r0
 800081e:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <aiRun+0x84>)
 8000820:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <aiRun+0x84>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	b29a      	uxth	r2, r3
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	4909      	ldr	r1, [pc, #36]	; (8000850 <aiRun+0x80>)
 800082c:	480a      	ldr	r0, [pc, #40]	; (8000858 <aiRun+0x88>)
 800082e:	f003 fc45 	bl	80040bc <HAL_UART_Transmit>

  };

  return 0;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240109b0 	.word	0x240109b0
 8000840:	240109b4 	.word	0x240109b4
 8000844:	240020fc 	.word	0x240020fc
 8000848:	24010b94 	.word	0x24010b94
 800084c:	08010e88 	.word	0x08010e88
 8000850:	24010b98 	.word	0x24010b98
 8000854:	240109b8 	.word	0x240109b8
 8000858:	24010ae0 	.word	0x24010ae0

0800085c <softmax_process>:

	return 0;
}

int softmax_process(void *out_data)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
    float *logits = (float *)out_data;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	60bb      	str	r3, [r7, #8]

    float max_val = logits[0];
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	61fb      	str	r3, [r7, #28]
    for (int i = 1; i < AI_NETWORK_OUT_1_SIZE; i++)
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
 8000872:	e015      	b.n	80008a0 <softmax_process+0x44>
    {
        if (logits[i] > max_val)
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	4413      	add	r3, r2
 800087c:	edd3 7a00 	vldr	s15, [r3]
 8000880:	ed97 7a07 	vldr	s14, [r7, #28]
 8000884:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800088c:	d505      	bpl.n	800089a <softmax_process+0x3e>
        {
            max_val = logits[i];
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	4413      	add	r3, r2
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	61fb      	str	r3, [r7, #28]
    for (int i = 1; i < AI_NETWORK_OUT_1_SIZE; i++)
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	3301      	adds	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	2b63      	cmp	r3, #99	; 0x63
 80008a4:	dde6      	ble.n	8000874 <softmax_process+0x18>
        }
    }

    float sum_exp = 0.0f;
 80008a6:	f04f 0300 	mov.w	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	e024      	b.n	80008fc <softmax_process+0xa0>
    {
        logits[i] = expf(logits[i] - max_val);
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	4413      	add	r3, r2
 80008ba:	ed93 7a00 	vldr	s14, [r3]
 80008be:	edd7 7a07 	vldr	s15, [r7, #28]
 80008c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	18d4      	adds	r4, r2, r3
 80008ce:	eeb0 0a67 	vmov.f32	s0, s15
 80008d2:	f010 f9d3 	bl	8010c7c <expf>
 80008d6:	eef0 7a40 	vmov.f32	s15, s0
 80008da:	edc4 7a00 	vstr	s15, [r4]
        sum_exp += logits[i];
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	4413      	add	r3, r2
 80008e6:	edd3 7a00 	vldr	s15, [r3]
 80008ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80008ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f2:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	3301      	adds	r3, #1
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	2b63      	cmp	r3, #99	; 0x63
 8000900:	ddd7      	ble.n	80008b2 <softmax_process+0x56>
    }

    for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	e012      	b.n	800092e <softmax_process+0xd2>
    {
        logits[i] /= sum_exp;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	4413      	add	r3, r2
 8000910:	edd3 6a00 	vldr	s13, [r3]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	4413      	add	r3, r2
 800091c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000924:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3301      	adds	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b63      	cmp	r3, #99	; 0x63
 8000932:	dde9      	ble.n	8000908 <softmax_process+0xac>
    }

//    buf_len = sprintf(buf, "Output[0] = %f\r\n", logits[0]);
//    HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);

    return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3724      	adds	r7, #36	; 0x24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd90      	pop	{r4, r7, pc}
	...

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0ae      	sub	sp, #184	; 0xb8
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/* USER CODE BEGIN 1 */

	__HAL_RCC_CRC_CLK_ENABLE();
 8000946:	4ba9      	ldr	r3, [pc, #676]	; (8000bec <main+0x2ac>)
 8000948:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800094c:	4aa7      	ldr	r2, [pc, #668]	; (8000bec <main+0x2ac>)
 800094e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000952:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000956:	4ba5      	ldr	r3, [pc, #660]	; (8000bec <main+0x2ac>)
 8000958:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800095c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000960:	663b      	str	r3, [r7, #96]	; 0x60
 8000962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000964:	4ba2      	ldr	r3, [pc, #648]	; (8000bf0 <main+0x2b0>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096c:	2b00      	cmp	r3, #0
 800096e:	d11b      	bne.n	80009a8 <main+0x68>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000970:	f3bf 8f4f 	dsb	sy
}
 8000974:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000976:	f3bf 8f6f 	isb	sy
}
 800097a:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800097c:	4b9c      	ldr	r3, [pc, #624]	; (8000bf0 <main+0x2b0>)
 800097e:	2200      	movs	r2, #0
 8000980:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000984:	f3bf 8f4f 	dsb	sy
}
 8000988:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800098a:	f3bf 8f6f 	isb	sy
}
 800098e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000990:	4b97      	ldr	r3, [pc, #604]	; (8000bf0 <main+0x2b0>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	4a96      	ldr	r2, [pc, #600]	; (8000bf0 <main+0x2b0>)
 8000996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800099c:	f3bf 8f4f 	dsb	sy
}
 80009a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009a2:	f3bf 8f6f 	isb	sy
}
 80009a6:	e000      	b.n	80009aa <main+0x6a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009a8:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009aa:	4b91      	ldr	r3, [pc, #580]	; (8000bf0 <main+0x2b0>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d138      	bne.n	8000a28 <main+0xe8>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80009b6:	4b8e      	ldr	r3, [pc, #568]	; (8000bf0 <main+0x2b0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009be:	f3bf 8f4f 	dsb	sy
}
 80009c2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009c4:	4b8a      	ldr	r3, [pc, #552]	; (8000bf0 <main+0x2b0>)
 80009c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009ca:	66fb      	str	r3, [r7, #108]	; 0x6c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ce:	0b5b      	lsrs	r3, r3, #13
 80009d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009d4:	66bb      	str	r3, [r7, #104]	; 0x68
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009d8:	08db      	lsrs	r3, r3, #3
 80009da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009de:	667b      	str	r3, [r7, #100]	; 0x64
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009e2:	015a      	lsls	r2, r3, #5
 80009e4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009e8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009ec:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009ee:	4980      	ldr	r1, [pc, #512]	; (8000bf0 <main+0x2b0>)
 80009f0:	4313      	orrs	r3, r2
 80009f2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009f8:	1e5a      	subs	r2, r3, #1
 80009fa:	667a      	str	r2, [r7, #100]	; 0x64
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1ef      	bne.n	80009e0 <main+0xa0>
    } while(sets-- != 0U);
 8000a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a02:	1e5a      	subs	r2, r3, #1
 8000a04:	66ba      	str	r2, [r7, #104]	; 0x68
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1e5      	bne.n	80009d6 <main+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a0a:	f3bf 8f4f 	dsb	sy
}
 8000a0e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a10:	4b77      	ldr	r3, [pc, #476]	; (8000bf0 <main+0x2b0>)
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	4a76      	ldr	r2, [pc, #472]	; (8000bf0 <main+0x2b0>)
 8000a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a1a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a1c:	f3bf 8f4f 	dsb	sy
}
 8000a20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a22:	f3bf 8f6f 	isb	sy
}
 8000a26:	e000      	b.n	8000a2a <main+0xea>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a28:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2a:	f000 fbab 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2e:	f000 f8f5 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a32:	f000 f9d3 	bl	8000ddc <MX_GPIO_Init>
  MX_CRC_Init();
 8000a36:	f000 f963 	bl	8000d00 <MX_CRC_Init>
  MX_USART3_UART_Init();
 8000a3a:	f000 f983 	bl	8000d44 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */

  HAL_UART_Init(&huart3);
 8000a3e:	486d      	ldr	r0, [pc, #436]	; (8000bf4 <main+0x2b4>)
 8000a40:	f003 faec 	bl	800401c <HAL_UART_Init>
  // Greetings
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8000a44:	496c      	ldr	r1, [pc, #432]	; (8000bf8 <main+0x2b8>)
 8000a46:	486d      	ldr	r0, [pc, #436]	; (8000bfc <main+0x2bc>)
 8000a48:	f00e f828 	bl	800ea9c <siprintf>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4a6c      	ldr	r2, [pc, #432]	; (8000c00 <main+0x2c0>)
 8000a50:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000a52:	4b6b      	ldr	r3, [pc, #428]	; (8000c00 <main+0x2c0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	2364      	movs	r3, #100	; 0x64
 8000a5a:	4968      	ldr	r1, [pc, #416]	; (8000bfc <main+0x2bc>)
 8000a5c:	4865      	ldr	r0, [pc, #404]	; (8000bf4 <main+0x2b4>)
 8000a5e:	f003 fb2d 	bl	80040bc <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */
	    /* USER CODE END WHILE */
		  /* 1 - Acquire, pre-process and fill the input buffers */
		  uint32_t start_time_init = HAL_GetTick(); // time start
 8000a62:	f000 fc15 	bl	8001290 <HAL_GetTick>
 8000a66:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
		  for (int i = 0; i < 1000; i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000a70:	e009      	b.n	8000a86 <main+0x146>
		  {
			  aiInit();
 8000a72:	f7ff fe61 	bl	8000738 <aiInit>
			  acquire_and_process_data(in_data);
 8000a76:	4863      	ldr	r0, [pc, #396]	; (8000c04 <main+0x2c4>)
 8000a78:	f7ff fe42 	bl	8000700 <acquire_and_process_data>
		  for (int i = 0; i < 1000; i++)
 8000a7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000a80:	3301      	adds	r3, #1
 8000a82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a8e:	dbf0      	blt.n	8000a72 <main+0x132>
		  }
		  uint32_t end_time_init = HAL_GetTick(); // time end
 8000a90:	f000 fbfe 	bl	8001290 <HAL_GetTick>
 8000a94:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  uint32_t total_time_init = end_time_init - start_time_init;
 8000a98:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000a9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		  float average_time_init = (float)total_time_init / 1000; // ms
 8000aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000aaa:	ee07 3a90 	vmov	s15, r3
 8000aae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ab2:	eddf 6a55 	vldr	s13, [pc, #340]	; 8000c08 <main+0x2c8>
 8000ab6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aba:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		  char buf_init[32];
		  int buf_len_init = sprintf(buf_init, "Init Time: %.3f ms\r\n", average_time_init);
 8000abe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8000ac2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac6:	4638      	mov	r0, r7
 8000ac8:	ec53 2b17 	vmov	r2, r3, d7
 8000acc:	494f      	ldr	r1, [pc, #316]	; (8000c0c <main+0x2cc>)
 8000ace:	f00d ffe5 	bl	800ea9c <siprintf>
 8000ad2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		  HAL_UART_Transmit(&huart3, (uint8_t *)buf_init, buf_len_init, HAL_MAX_DELAY);
 8000ad6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	4639      	mov	r1, r7
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	4844      	ldr	r0, [pc, #272]	; (8000bf4 <main+0x2b4>)
 8000ae4:	f003 faea 	bl	80040bc <HAL_UART_Transmit>


		  /* 2 - Call inference engine */
		  uint32_t start_time_inf = HAL_GetTick(); // time start
 8000ae8:	f000 fbd2 	bl	8001290 <HAL_GetTick>
 8000aec:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

		  for (int i = 0; i < 1; i++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000af6:	e008      	b.n	8000b0a <main+0x1ca>
		  {
			  aiRun(in_data, out_data);
 8000af8:	4945      	ldr	r1, [pc, #276]	; (8000c10 <main+0x2d0>)
 8000afa:	4842      	ldr	r0, [pc, #264]	; (8000c04 <main+0x2c4>)
 8000afc:	f7ff fe68 	bl	80007d0 <aiRun>
		  for (int i = 0; i < 1; i++)
 8000b00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b04:	3301      	adds	r3, #1
 8000b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000b0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	ddf2      	ble.n	8000af8 <main+0x1b8>
		  }

		  uint32_t end_time_inf = HAL_GetTick(); // time end
 8000b12:	f000 fbbd 	bl	8001290 <HAL_GetTick>
 8000b16:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		  uint32_t total_time_inf = end_time_inf - start_time_inf;
 8000b1a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000b1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  float average_time_inf = (float)total_time_inf / 1; // ms
 8000b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b2c:	ee07 3a90 	vmov	s15, r3
 8000b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b34:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		  char buf_inf[32];
		  int buf_len_inf = sprintf(buf_inf, "CNN Time: %.3f ms\r\n", average_time_inf);
 8000b38:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000b3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b40:	f107 0020 	add.w	r0, r7, #32
 8000b44:	ec53 2b17 	vmov	r2, r3, d7
 8000b48:	4932      	ldr	r1, [pc, #200]	; (8000c14 <main+0x2d4>)
 8000b4a:	f00d ffa7 	bl	800ea9c <siprintf>
 8000b4e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		  HAL_UART_Transmit(&huart3, (uint8_t *)buf_inf, buf_len_inf, HAL_MAX_DELAY);
 8000b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	f107 0120 	add.w	r1, r7, #32
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b60:	4824      	ldr	r0, [pc, #144]	; (8000bf4 <main+0x2b4>)
 8000b62:	f003 faab 	bl	80040bc <HAL_UART_Transmit>

		  /* 3 - Post-process the predictions */
	//	  post_process(out_data);
		  uint32_t start_time_sm = HAL_GetTick(); // time start
 8000b66:	f000 fb93 	bl	8001290 <HAL_GetTick>
 8000b6a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		  for (int i = 0; i < 1000; i++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000b74:	e007      	b.n	8000b86 <main+0x246>
		  {
		      softmax_process(out_data);
 8000b76:	4826      	ldr	r0, [pc, #152]	; (8000c10 <main+0x2d0>)
 8000b78:	f7ff fe70 	bl	800085c <softmax_process>
		  for (int i = 0; i < 1000; i++)
 8000b7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b80:	3301      	adds	r3, #1
 8000b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b8e:	dbf2      	blt.n	8000b76 <main+0x236>
		  }
		  uint32_t end_time_sm = HAL_GetTick(); // time end
 8000b90:	f000 fb7e 	bl	8001290 <HAL_GetTick>
 8000b94:	67f8      	str	r0, [r7, #124]	; 0x7c
		  uint32_t total_time_sm = end_time_sm - start_time_sm;
 8000b96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000b98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	67bb      	str	r3, [r7, #120]	; 0x78
		  float average_time_sm = (float)total_time_sm / 1000; // ms
 8000ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ba2:	ee07 3a90 	vmov	s15, r3
 8000ba6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000baa:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000c08 <main+0x2c8>
 8000bae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bb2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		  char buf_sm[32];
		  int buf_len_sm = sprintf(buf_sm, "Softmax Time: %.3f ms\r\n", average_time_sm);
 8000bb6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8000bba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bbe:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000bc2:	ec53 2b17 	vmov	r2, r3, d7
 8000bc6:	4914      	ldr	r1, [pc, #80]	; (8000c18 <main+0x2d8>)
 8000bc8:	f00d ff68 	bl	800ea9c <siprintf>
 8000bcc:	6738      	str	r0, [r7, #112]	; 0x70
		  HAL_UART_Transmit(&huart3, (uint8_t *)buf_sm, buf_len_sm, HAL_MAX_DELAY);
 8000bce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <main+0x2b4>)
 8000bdc:	f003 fa6e 	bl	80040bc <HAL_UART_Transmit>


		  /* USER CODE END WHILE */
		  HAL_Delay(500);
 8000be0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be4:	f000 fb60 	bl	80012a8 <HAL_Delay>
  {
 8000be8:	e73b      	b.n	8000a62 <main+0x122>
 8000bea:	bf00      	nop
 8000bec:	58024400 	.word	0x58024400
 8000bf0:	e000ed00 	.word	0xe000ed00
 8000bf4:	24010ae0 	.word	0x24010ae0
 8000bf8:	08010eb8 	.word	0x08010eb8
 8000bfc:	24010b98 	.word	0x24010b98
 8000c00:	240109b8 	.word	0x240109b8
 8000c04:	2400d820 	.word	0x2400d820
 8000c08:	447a0000 	.word	0x447a0000
 8000c0c:	08010ed4 	.word	0x08010ed4
 8000c10:	24010820 	.word	0x24010820
 8000c14:	08010eec 	.word	0x08010eec
 8000c18:	08010f00 	.word	0x08010f00

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b09c      	sub	sp, #112	; 0x70
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	224c      	movs	r2, #76	; 0x4c
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f00d fa30 	bl	800e090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2220      	movs	r2, #32
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f00d fa2a 	bl	800e090 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c3c:	2004      	movs	r0, #4
 8000c3e:	f000 fed5 	bl	80019ec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <SystemClock_Config+0xe0>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c4e:	4a2b      	ldr	r2, [pc, #172]	; (8000cfc <SystemClock_Config+0xe0>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <SystemClock_Config+0xe0>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c62:	bf00      	nop
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <SystemClock_Config+0xe0>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c70:	d1f8      	bne.n	8000c64 <SystemClock_Config+0x48>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c72:	2302      	movs	r3, #2
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7a:	2340      	movs	r3, #64	; 0x40
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c82:	2300      	movs	r3, #0
 8000c84:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c86:	2304      	movs	r3, #4
 8000c88:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 fef7 	bl	8001aa0 <HAL_RCC_OscConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000cb8:	f000 f8ba 	bl	8000e30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbc:	233f      	movs	r3, #63	; 0x3f
 8000cbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ccc:	2340      	movs	r3, #64	; 0x40
 8000cce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cd0:	2340      	movs	r3, #64	; 0x40
 8000cd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cda:	2340      	movs	r3, #64	; 0x40
 8000cdc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 fae0 	bl	80022a8 <HAL_RCC_ClockConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000cee:	f000 f89f 	bl	8000e30 <Error_Handler>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3770      	adds	r7, #112	; 0x70
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	58024800 	.word	0x58024800

08000d00 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <MX_CRC_Init+0x3c>)
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <MX_CRC_Init+0x40>)
 8000d08:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_CRC_Init+0x3c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_CRC_Init+0x3c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_CRC_Init+0x3c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_CRC_Init+0x3c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_CRC_Init+0x3c>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_CRC_Init+0x3c>)
 8000d2a:	f000 fbc5 	bl	80014b8 <HAL_CRC_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d34:	f000 f87c 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	24010b70 	.word	0x24010b70
 8000d40:	40023000 	.word	0x40023000

08000d44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d48:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d4a:	4a23      	ldr	r2, [pc, #140]	; (8000dd8 <MX_USART3_UART_Init+0x94>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d8c:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d8e:	f003 f945 	bl	800401c <HAL_UART_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d98:	f000 f84a 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000da0:	f004 fa6e 	bl	8005280 <HAL_UARTEx_SetTxFifoThreshold>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000daa:	f000 f841 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000db2:	f004 faa3 	bl	80052fc <HAL_UARTEx_SetRxFifoThreshold>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dbc:	f000 f838 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000dc2:	f004 fa24 	bl	800520e <HAL_UARTEx_DisableFifoMode>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dcc:	f000 f830 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	24010ae0 	.word	0x24010ae0
 8000dd8:	40004800 	.word	0x40004800

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_GPIO_Init+0x50>)
 8000de4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000de8:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <MX_GPIO_Init+0x50>)
 8000dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_GPIO_Init+0x50>)
 8000df4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_GPIO_Init+0x50>)
 8000e02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <MX_GPIO_Init+0x50>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_GPIO_Init+0x50>)
 8000e12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]

}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	58024400 	.word	0x58024400

08000e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <Error_Handler+0x8>
	...

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_MspInit+0x30>)
 8000e44:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e48:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HAL_MspInit+0x30>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_MspInit+0x30>)
 8000e54:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	58024400 	.word	0x58024400

08000e70 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <HAL_CRC_MspInit+0x3c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d10e      	bne.n	8000ea0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_CRC_MspInit+0x40>)
 8000e84:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e88:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <HAL_CRC_MspInit+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <HAL_CRC_MspInit+0x40>)
 8000e94:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	40023000 	.word	0x40023000
 8000eb0:	58024400 	.word	0x58024400

08000eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0b8      	sub	sp, #224	; 0xe0
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	22b8      	movs	r2, #184	; 0xb8
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f00d f8db 	bl	800e090 <memset>
  if(huart->Instance==USART3)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <HAL_UART_MspInit+0xc0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d142      	bne.n	8000f6a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 fd64 	bl	80029c0 <HAL_RCCEx_PeriphCLKConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000efe:	f7ff ff97 	bl	8000e30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f04:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f0e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f14:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f26:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_UART_MspInit+0xc4>)
 8000f32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <HAL_UART_MspInit+0xc8>)
 8000f66:	f000 fb91 	bl	800168c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	37e0      	adds	r7, #224	; 0xe0
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40004800 	.word	0x40004800
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	58020c00 	.word	0x58020c00

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <NMI_Handler+0x4>

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <MemManage_Handler+0x4>

08000f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <UsageFault_Handler+0x4>

08000f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fcc:	f000 f94c 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f00d f804 	bl	800e010 <__errno>
 8001008:	4603      	mov	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20020000 	.word	0x20020000
 8001034:	00000800 	.word	0x00000800
 8001038:	240109bc 	.word	0x240109bc
 800103c:	20000000 	.word	0x20000000

08001040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001044:	4b32      	ldr	r3, [pc, #200]	; (8001110 <SystemInit+0xd0>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104a:	4a31      	ldr	r2, [pc, #196]	; (8001110 <SystemInit+0xd0>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001054:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <SystemInit+0xd4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 030f 	and.w	r3, r3, #15
 800105c:	2b02      	cmp	r3, #2
 800105e:	d807      	bhi.n	8001070 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001060:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <SystemInit+0xd4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f023 030f 	bic.w	r3, r3, #15
 8001068:	4a2a      	ldr	r2, [pc, #168]	; (8001114 <SystemInit+0xd4>)
 800106a:	f043 0303 	orr.w	r3, r3, #3
 800106e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001070:	4b29      	ldr	r3, [pc, #164]	; (8001118 <SystemInit+0xd8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a28      	ldr	r2, [pc, #160]	; (8001118 <SystemInit+0xd8>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <SystemInit+0xd8>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <SystemInit+0xd8>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4924      	ldr	r1, [pc, #144]	; (8001118 <SystemInit+0xd8>)
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <SystemInit+0xdc>)
 800108a:	4013      	ands	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <SystemInit+0xd4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <SystemInit+0xd4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 030f 	bic.w	r3, r3, #15
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <SystemInit+0xd4>)
 80010a4:	f043 0303 	orr.w	r3, r3, #3
 80010a8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <SystemInit+0xd8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <SystemInit+0xd8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <SystemInit+0xd8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <SystemInit+0xd8>)
 80010be:	4a18      	ldr	r2, [pc, #96]	; (8001120 <SystemInit+0xe0>)
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <SystemInit+0xd8>)
 80010c4:	4a17      	ldr	r2, [pc, #92]	; (8001124 <SystemInit+0xe4>)
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <SystemInit+0xd8>)
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <SystemInit+0xe8>)
 80010cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <SystemInit+0xd8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <SystemInit+0xd8>)
 80010d6:	4a14      	ldr	r2, [pc, #80]	; (8001128 <SystemInit+0xe8>)
 80010d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <SystemInit+0xd8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <SystemInit+0xd8>)
 80010e2:	4a11      	ldr	r2, [pc, #68]	; (8001128 <SystemInit+0xe8>)
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <SystemInit+0xd8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <SystemInit+0xd8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a09      	ldr	r2, [pc, #36]	; (8001118 <SystemInit+0xd8>)
 80010f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <SystemInit+0xd8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <SystemInit+0xec>)
 8001100:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001104:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00
 8001114:	52002000 	.word	0x52002000
 8001118:	58024400 	.word	0x58024400
 800111c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001120:	02020200 	.word	0x02020200
 8001124:	01ff0000 	.word	0x01ff0000
 8001128:	01010280 	.word	0x01010280
 800112c:	52004000 	.word	0x52004000

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001168 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001134:	f7ff ff84 	bl	8001040 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113a:	490d      	ldr	r1, [pc, #52]	; (8001170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001150:	4c0a      	ldr	r4, [pc, #40]	; (800117c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800115e:	f00c ff5d 	bl	800e01c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff fbed 	bl	8000940 <main>
  bx  lr
 8001166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800116c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001170:	240020e0 	.word	0x240020e0
  ldr r2, =_sidata
 8001174:	0806ff50 	.word	0x0806ff50
  ldr r2, =_sbss
 8001178:	240020e0 	.word	0x240020e0
  ldr r4, =_ebss
 800117c:	24010be0 	.word	0x24010be0

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118a:	2003      	movs	r0, #3
 800118c:	f000 f962 	bl	8001454 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001190:	f001 fa40 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8001194:	4602      	mov	r2, r0
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_Init+0x68>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	4913      	ldr	r1, [pc, #76]	; (80011f0 <HAL_Init+0x6c>)
 80011a2:	5ccb      	ldrb	r3, [r1, r3]
 80011a4:	f003 031f 	and.w	r3, r3, #31
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_Init+0x68>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_Init+0x6c>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	fa22 f303 	lsr.w	r3, r2, r3
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <HAL_Init+0x70>)
 80011c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011c8:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <HAL_Init+0x74>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ce:	2000      	movs	r0, #0
 80011d0:	f000 f814 	bl	80011fc <HAL_InitTick>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e002      	b.n	80011e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011de:	f7ff fe2d 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	58024400 	.word	0x58024400
 80011f0:	08010f48 	.word	0x08010f48
 80011f4:	24000004 	.word	0x24000004
 80011f8:	24000000 	.word	0x24000000

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_InitTick+0x60>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e021      	b.n	8001254 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <HAL_InitTick+0x64>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_InitTick+0x60>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f939 	bl	800149e <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 f911 	bl	800146a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x68>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2400000c 	.word	0x2400000c
 8001260:	24000000 	.word	0x24000000
 8001264:	24000008 	.word	0x24000008

08001268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	2400000c 	.word	0x2400000c
 800128c:	24010bcc 	.word	0x24010bcc

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	24010bcc 	.word	0x24010bcc

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffee 	bl	8001290 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffde 	bl	8001290 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2400000c 	.word	0x2400000c

080012f0 <__NVIC_SetPriorityGrouping>:
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <__NVIC_SetPriorityGrouping+0x40>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	4313      	orrs	r3, r2
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	; (8001330 <__NVIC_SetPriorityGrouping+0x40>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00
 8001334:	05fa0000 	.word	0x05fa0000

08001338 <__NVIC_GetPriorityGrouping>:
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_SetPriority>:
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001364:	2b00      	cmp	r3, #0
 8001366:	db0a      	blt.n	800137e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	490c      	ldr	r1, [pc, #48]	; (80013a0 <__NVIC_SetPriority+0x4c>)
 800136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	440b      	add	r3, r1
 8001378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800137c:	e00a      	b.n	8001394 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <__NVIC_SetPriority+0x50>)
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	3b04      	subs	r3, #4
 800138c:	0112      	lsls	r2, r2, #4
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	440b      	add	r3, r1
 8001392:	761a      	strb	r2, [r3, #24]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000e100 	.word	0xe000e100
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <NVIC_EncodePriority>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f1c3 0307 	rsb	r3, r3, #7
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	bf28      	it	cs
 80013c6:	2304      	movcs	r3, #4
 80013c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3304      	adds	r3, #4
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d902      	bls.n	80013d8 <NVIC_EncodePriority+0x30>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3b03      	subs	r3, #3
 80013d6:	e000      	b.n	80013da <NVIC_EncodePriority+0x32>
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f0:	f04f 31ff 	mov.w	r1, #4294967295
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	4313      	orrs	r3, r2
}
 8001402:	4618      	mov	r0, r3
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001420:	d301      	bcc.n	8001426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <SysTick_Config+0x40>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142e:	210f      	movs	r1, #15
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f7ff ff8e 	bl	8001354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SysTick_Config+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SysTick_Config+0x40>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff47 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff5e 	bl	8001338 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff90 	bl	80013a8 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5f 	bl	8001354 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffb2 	bl	8001410 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e054      	b.n	8001574 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7f5b      	ldrb	r3, [r3, #29]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d105      	bne.n	80014e0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fcc8 	bl	8000e70 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2202      	movs	r2, #2
 80014e4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	791b      	ldrb	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10c      	bne.n	8001508 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a22      	ldr	r2, [pc, #136]	; (800157c <HAL_CRC_Init+0xc4>)
 80014f4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0218 	bic.w	r2, r2, #24
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	e00c      	b.n	8001522 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6899      	ldr	r1, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	461a      	mov	r2, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f834 	bl	8001580 <HAL_CRCEx_Polynomial_Set>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e028      	b.n	8001574 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	795b      	ldrb	r3, [r3, #5]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f04f 32ff 	mov.w	r2, #4294967295
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	e004      	b.n	8001540 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6912      	ldr	r2, [r2, #16]
 800153e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699a      	ldr	r2, [r3, #24]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	04c11db7 	.word	0x04c11db7

08001580 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001590:	231f      	movs	r3, #31
 8001592:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001594:	bf00      	nop
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1e5a      	subs	r2, r3, #1
 800159a:	613a      	str	r2, [r7, #16]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d009      	beq.n	80015b4 <HAL_CRCEx_Polynomial_Set+0x34>
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	f003 031f 	and.w	r3, r3, #31
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_CRCEx_Polynomial_Set+0x16>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b18      	cmp	r3, #24
 80015b8:	d846      	bhi.n	8001648 <HAL_CRCEx_Polynomial_Set+0xc8>
 80015ba:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	0800164f 	.word	0x0800164f
 80015c4:	08001649 	.word	0x08001649
 80015c8:	08001649 	.word	0x08001649
 80015cc:	08001649 	.word	0x08001649
 80015d0:	08001649 	.word	0x08001649
 80015d4:	08001649 	.word	0x08001649
 80015d8:	08001649 	.word	0x08001649
 80015dc:	08001649 	.word	0x08001649
 80015e0:	0800163d 	.word	0x0800163d
 80015e4:	08001649 	.word	0x08001649
 80015e8:	08001649 	.word	0x08001649
 80015ec:	08001649 	.word	0x08001649
 80015f0:	08001649 	.word	0x08001649
 80015f4:	08001649 	.word	0x08001649
 80015f8:	08001649 	.word	0x08001649
 80015fc:	08001649 	.word	0x08001649
 8001600:	08001631 	.word	0x08001631
 8001604:	08001649 	.word	0x08001649
 8001608:	08001649 	.word	0x08001649
 800160c:	08001649 	.word	0x08001649
 8001610:	08001649 	.word	0x08001649
 8001614:	08001649 	.word	0x08001649
 8001618:	08001649 	.word	0x08001649
 800161c:	08001649 	.word	0x08001649
 8001620:	08001625 	.word	0x08001625
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	2b06      	cmp	r3, #6
 8001628:	d913      	bls.n	8001652 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800162e:	e010      	b.n	8001652 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	2b07      	cmp	r3, #7
 8001634:	d90f      	bls.n	8001656 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800163a:	e00c      	b.n	8001656 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	2b0f      	cmp	r3, #15
 8001640:	d90b      	bls.n	800165a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001646:	e008      	b.n	800165a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	75fb      	strb	r3, [r7, #23]
      break;
 800164c:	e006      	b.n	800165c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800164e:	bf00      	nop
 8001650:	e004      	b.n	800165c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001652:	bf00      	nop
 8001654:	e002      	b.n	800165c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001656:	bf00      	nop
 8001658:	e000      	b.n	800165c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800165a:	bf00      	nop
  }
  if (status == HAL_OK)
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10d      	bne.n	800167e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 0118 	bic.w	r1, r3, #24
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	430a      	orrs	r2, r1
 800167c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800167e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001680:	4618      	mov	r0, r3
 8001682:	371c      	adds	r7, #28
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800169a:	4b89      	ldr	r3, [pc, #548]	; (80018c0 <HAL_GPIO_Init+0x234>)
 800169c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800169e:	e194      	b.n	80019ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8186 	beq.w	80019c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d005      	beq.n	80016d0 <HAL_GPIO_Init+0x44>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d130      	bne.n	8001732 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001706:	2201      	movs	r2, #1
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	091b      	lsrs	r3, r3, #4
 800171c:	f003 0201 	and.w	r2, r3, #1
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	2b03      	cmp	r3, #3
 800173c:	d017      	beq.n	800176e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d123      	bne.n	80017c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	08da      	lsrs	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3208      	adds	r2, #8
 8001782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	220f      	movs	r2, #15
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	691a      	ldr	r2, [r3, #16]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	69b9      	ldr	r1, [r7, #24]
 80017be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	2203      	movs	r2, #3
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0203 	and.w	r2, r3, #3
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80e0 	beq.w	80019c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001804:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <HAL_GPIO_Init+0x238>)
 8001806:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800180a:	4a2e      	ldr	r2, [pc, #184]	; (80018c4 <HAL_GPIO_Init+0x238>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001814:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <HAL_GPIO_Init+0x238>)
 8001816:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001822:	4a29      	ldr	r2, [pc, #164]	; (80018c8 <HAL_GPIO_Init+0x23c>)
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a20      	ldr	r2, [pc, #128]	; (80018cc <HAL_GPIO_Init+0x240>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d052      	beq.n	80018f4 <HAL_GPIO_Init+0x268>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a1f      	ldr	r2, [pc, #124]	; (80018d0 <HAL_GPIO_Init+0x244>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d031      	beq.n	80018ba <HAL_GPIO_Init+0x22e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <HAL_GPIO_Init+0x248>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d02b      	beq.n	80018b6 <HAL_GPIO_Init+0x22a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <HAL_GPIO_Init+0x24c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d025      	beq.n	80018b2 <HAL_GPIO_Init+0x226>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a1c      	ldr	r2, [pc, #112]	; (80018dc <HAL_GPIO_Init+0x250>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d01f      	beq.n	80018ae <HAL_GPIO_Init+0x222>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <HAL_GPIO_Init+0x254>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d019      	beq.n	80018aa <HAL_GPIO_Init+0x21e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a1a      	ldr	r2, [pc, #104]	; (80018e4 <HAL_GPIO_Init+0x258>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_GPIO_Init+0x21a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_GPIO_Init+0x25c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00d      	beq.n	80018a2 <HAL_GPIO_Init+0x216>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a18      	ldr	r2, [pc, #96]	; (80018ec <HAL_GPIO_Init+0x260>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d007      	beq.n	800189e <HAL_GPIO_Init+0x212>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_GPIO_Init+0x264>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d101      	bne.n	800189a <HAL_GPIO_Init+0x20e>
 8001896:	2309      	movs	r3, #9
 8001898:	e02d      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 800189a:	230a      	movs	r3, #10
 800189c:	e02b      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 800189e:	2308      	movs	r3, #8
 80018a0:	e029      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018a2:	2307      	movs	r3, #7
 80018a4:	e027      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018a6:	2306      	movs	r3, #6
 80018a8:	e025      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018aa:	2305      	movs	r3, #5
 80018ac:	e023      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018ae:	2304      	movs	r3, #4
 80018b0:	e021      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018b2:	2303      	movs	r3, #3
 80018b4:	e01f      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e01d      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e01b      	b.n	80018f6 <HAL_GPIO_Init+0x26a>
 80018be:	bf00      	nop
 80018c0:	58000080 	.word	0x58000080
 80018c4:	58024400 	.word	0x58024400
 80018c8:	58000400 	.word	0x58000400
 80018cc:	58020000 	.word	0x58020000
 80018d0:	58020400 	.word	0x58020400
 80018d4:	58020800 	.word	0x58020800
 80018d8:	58020c00 	.word	0x58020c00
 80018dc:	58021000 	.word	0x58021000
 80018e0:	58021400 	.word	0x58021400
 80018e4:	58021800 	.word	0x58021800
 80018e8:	58021c00 	.word	0x58021c00
 80018ec:	58022000 	.word	0x58022000
 80018f0:	58022400 	.word	0x58022400
 80018f4:	2300      	movs	r3, #0
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	f002 0203 	and.w	r2, r2, #3
 80018fc:	0092      	lsls	r2, r2, #2
 80018fe:	4093      	lsls	r3, r2
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001906:	4938      	ldr	r1, [pc, #224]	; (80019e8 <HAL_GPIO_Init+0x35c>)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800193a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	3301      	adds	r3, #1
 80019c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f47f ae63 	bne.w	80016a0 <HAL_GPIO_Init+0x14>
  }
}
 80019da:	bf00      	nop
 80019dc:	bf00      	nop
 80019de:	3724      	adds	r7, #36	; 0x24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	58000400 	.word	0x58000400

080019ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80019f4:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <HAL_PWREx_ConfigSupply+0xb0>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	2b06      	cmp	r3, #6
 80019fe:	d00a      	beq.n	8001a16 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a00:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d001      	beq.n	8001a12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e040      	b.n	8001a94 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e03e      	b.n	8001a94 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a16:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001a1e:	491f      	ldr	r1, [pc, #124]	; (8001a9c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a26:	f7ff fc33 	bl	8001290 <HAL_GetTick>
 8001a2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a2c:	e009      	b.n	8001a42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a2e:	f7ff fc2f 	bl	8001290 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a3c:	d901      	bls.n	8001a42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e028      	b.n	8001a94 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a4e:	d1ee      	bne.n	8001a2e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b1e      	cmp	r3, #30
 8001a54:	d008      	beq.n	8001a68 <HAL_PWREx_ConfigSupply+0x7c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b2e      	cmp	r3, #46	; 0x2e
 8001a5a:	d005      	beq.n	8001a68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b1d      	cmp	r3, #29
 8001a60:	d002      	beq.n	8001a68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b2d      	cmp	r3, #45	; 0x2d
 8001a66:	d114      	bne.n	8001a92 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a68:	f7ff fc12 	bl	8001290 <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a6e:	e009      	b.n	8001a84 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a70:	f7ff fc0e 	bl	8001290 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a7e:	d901      	bls.n	8001a84 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e007      	b.n	8001a94 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a90:	d1ee      	bne.n	8001a70 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	58024800 	.word	0x58024800

08001aa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e3f3      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 80b3 	beq.w	8001c26 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac0:	4b9e      	ldr	r3, [pc, #632]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001aca:	4b9c      	ldr	r3, [pc, #624]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad2:	2b10      	cmp	r3, #16
 8001ad4:	d007      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x46>
 8001ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad8:	2b18      	cmp	r3, #24
 8001ada:	d112      	bne.n	8001b02 <HAL_RCC_OscConfig+0x62>
 8001adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d10d      	bne.n	8001b02 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae6:	4b95      	ldr	r3, [pc, #596]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 8098 	beq.w	8001c24 <HAL_RCC_OscConfig+0x184>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f040 8093 	bne.w	8001c24 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e3cb      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x7a>
 8001b0c:	4b8b      	ldr	r3, [pc, #556]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a8a      	ldr	r2, [pc, #552]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e058      	b.n	8001bcc <HAL_RCC_OscConfig+0x12c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d112      	bne.n	8001b48 <HAL_RCC_OscConfig+0xa8>
 8001b22:	4b86      	ldr	r3, [pc, #536]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a85      	ldr	r2, [pc, #532]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b83      	ldr	r3, [pc, #524]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a82      	ldr	r2, [pc, #520]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b80      	ldr	r3, [pc, #512]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7f      	ldr	r2, [pc, #508]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e041      	b.n	8001bcc <HAL_RCC_OscConfig+0x12c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b50:	d112      	bne.n	8001b78 <HAL_RCC_OscConfig+0xd8>
 8001b52:	4b7a      	ldr	r3, [pc, #488]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a79      	ldr	r2, [pc, #484]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b77      	ldr	r3, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a76      	ldr	r2, [pc, #472]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b74      	ldr	r3, [pc, #464]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a73      	ldr	r2, [pc, #460]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e029      	b.n	8001bcc <HAL_RCC_OscConfig+0x12c>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001b80:	d112      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x108>
 8001b82:	4b6e      	ldr	r3, [pc, #440]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6d      	ldr	r2, [pc, #436]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a6a      	ldr	r2, [pc, #424]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b68      	ldr	r3, [pc, #416]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a67      	ldr	r2, [pc, #412]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e011      	b.n	8001bcc <HAL_RCC_OscConfig+0x12c>
 8001ba8:	4b64      	ldr	r3, [pc, #400]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a63      	ldr	r2, [pc, #396]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b61      	ldr	r3, [pc, #388]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a60      	ldr	r2, [pc, #384]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b5e      	ldr	r3, [pc, #376]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a5d      	ldr	r2, [pc, #372]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001bc6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fb5c 	bl	8001290 <HAL_GetTick>
 8001bd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fb58 	bl	8001290 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e355      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bee:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x13c>
 8001bfa:	e014      	b.n	8001c26 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fb48 	bl	8001290 <HAL_GetTick>
 8001c00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fb44 	bl	8001290 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e341      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c16:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x164>
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 808c 	beq.w	8001d4c <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c34:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1ba>
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	2b18      	cmp	r3, #24
 8001c4e:	d137      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x220>
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d132      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1d2>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e313      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 0219 	bic.w	r2, r3, #25
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	492f      	ldr	r1, [pc, #188]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c84:	f7ff fb04 	bl	8001290 <HAL_GetTick>
 8001c88:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fb00 	bl	8001290 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e2fd      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c9e:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	061b      	lsls	r3, r3, #24
 8001cb8:	4920      	ldr	r1, [pc, #128]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cbe:	e045      	b.n	8001d4c <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d026      	beq.n	8001d16 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 0219 	bic.w	r2, r3, #25
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4919      	ldr	r1, [pc, #100]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7ff fad9 	bl	8001290 <HAL_GetTick>
 8001cde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7ff fad5 	bl	8001290 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e2d2      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	061b      	lsls	r3, r3, #24
 8001d0e:	490b      	ldr	r1, [pc, #44]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
 8001d14:	e01a      	b.n	8001d4c <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7ff fab5 	bl	8001290 <HAL_GetTick>
 8001d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2a:	f7ff fab1 	bl	8001290 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d903      	bls.n	8001d40 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e2ae      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
 8001d3c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d40:	4b99      	ldr	r3, [pc, #612]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ee      	bne.n	8001d2a <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d06a      	beq.n	8001e2e <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d58:	4b93      	ldr	r3, [pc, #588]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d60:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d62:	4b91      	ldr	r3, [pc, #580]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d007      	beq.n	8001d7e <HAL_RCC_OscConfig+0x2de>
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b18      	cmp	r3, #24
 8001d72:	d11b      	bne.n	8001dac <HAL_RCC_OscConfig+0x30c>
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d116      	bne.n	8001dac <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d7e:	4b8a      	ldr	r3, [pc, #552]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2f6>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	2b80      	cmp	r3, #128	; 0x80
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e281      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d96:	4b84      	ldr	r3, [pc, #528]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	061b      	lsls	r3, r3, #24
 8001da4:	4980      	ldr	r1, [pc, #512]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001daa:	e040      	b.n	8001e2e <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d023      	beq.n	8001dfc <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001db4:	4b7c      	ldr	r3, [pc, #496]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a7b      	ldr	r2, [pc, #492]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fa66 	bl	8001290 <HAL_GetTick>
 8001dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fa62 	bl	8001290 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e25f      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dda:	4b73      	ldr	r3, [pc, #460]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001de6:	4b70      	ldr	r3, [pc, #448]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	061b      	lsls	r3, r3, #24
 8001df4:	496c      	ldr	r1, [pc, #432]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60cb      	str	r3, [r1, #12]
 8001dfa:	e018      	b.n	8001e2e <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001dfc:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a69      	ldr	r2, [pc, #420]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff fa42 	bl	8001290 <HAL_GetTick>
 8001e0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e10:	f7ff fa3e 	bl	8001290 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e23b      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e22:	4b61      	ldr	r3, [pc, #388]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d036      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d019      	beq.n	8001e76 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e46:	4a58      	ldr	r2, [pc, #352]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4e:	f7ff fa1f 	bl	8001290 <HAL_GetTick>
 8001e52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e56:	f7ff fa1b 	bl	8001290 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e218      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e68:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x3b6>
 8001e74:	e018      	b.n	8001ea8 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e76:	4b4c      	ldr	r3, [pc, #304]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e7a:	4a4b      	ldr	r2, [pc, #300]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7ff fa05 	bl	8001290 <HAL_GetTick>
 8001e86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8a:	f7ff fa01 	bl	8001290 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e1fe      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e9c:	4b42      	ldr	r3, [pc, #264]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d036      	beq.n	8001f22 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d019      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ebc:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a39      	ldr	r2, [pc, #228]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001ec2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ec6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ec8:	f7ff f9e2 	bl	8001290 <HAL_GetTick>
 8001ecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ed0:	f7ff f9de 	bl	8001290 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e1db      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ee2:	4b31      	ldr	r3, [pc, #196]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x430>
 8001eee:	e018      	b.n	8001f22 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001ef6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001efc:	f7ff f9c8 	bl	8001290 <HAL_GetTick>
 8001f00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f04:	f7ff f9c4 	bl	8001290 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1c1      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80af 	beq.w	800208e <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_RCC_OscConfig+0x50c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <HAL_RCC_OscConfig+0x50c>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f3c:	f7ff f9a8 	bl	8001290 <HAL_GetTick>
 8001f40:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f44:	f7ff f9a4 	bl	8001290 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1a1      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_RCC_OscConfig+0x50c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d106      	bne.n	8001f78 <HAL_RCC_OscConfig+0x4d8>
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6713      	str	r3, [r2, #112]	; 0x70
 8001f76:	e05b      	b.n	8002030 <HAL_RCC_OscConfig+0x590>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d117      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x510>
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f86:	f023 0301 	bic.w	r3, r3, #1
 8001f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f90:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f96:	6713      	str	r3, [r2, #112]	; 0x70
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	4a02      	ldr	r2, [pc, #8]	; (8001fa8 <HAL_RCC_OscConfig+0x508>)
 8001f9e:	f023 0304 	bic.w	r3, r3, #4
 8001fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa4:	e044      	b.n	8002030 <HAL_RCC_OscConfig+0x590>
 8001fa6:	bf00      	nop
 8001fa8:	58024400 	.word	0x58024400
 8001fac:	58024800 	.word	0x58024800
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d112      	bne.n	8001fde <HAL_RCC_OscConfig+0x53e>
 8001fb8:	4b95      	ldr	r3, [pc, #596]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbc:	4a94      	ldr	r2, [pc, #592]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc4:	4b92      	ldr	r3, [pc, #584]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	4a91      	ldr	r2, [pc, #580]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fce:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd0:	4b8f      	ldr	r3, [pc, #572]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4a8e      	ldr	r2, [pc, #568]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70
 8001fdc:	e028      	b.n	8002030 <HAL_RCC_OscConfig+0x590>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b85      	cmp	r3, #133	; 0x85
 8001fe4:	d112      	bne.n	800200c <HAL_RCC_OscConfig+0x56c>
 8001fe6:	4b8a      	ldr	r3, [pc, #552]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4a89      	ldr	r2, [pc, #548]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff2:	4b87      	ldr	r3, [pc, #540]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a86      	ldr	r2, [pc, #536]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8001ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	4b84      	ldr	r3, [pc, #528]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	4a83      	ldr	r2, [pc, #524]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6713      	str	r3, [r2, #112]	; 0x70
 800200a:	e011      	b.n	8002030 <HAL_RCC_OscConfig+0x590>
 800200c:	4b80      	ldr	r3, [pc, #512]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a7f      	ldr	r2, [pc, #508]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
 8002018:	4b7d      	ldr	r3, [pc, #500]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	4a7c      	ldr	r2, [pc, #496]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800201e:	f023 0304 	bic.w	r3, r3, #4
 8002022:	6713      	str	r3, [r2, #112]	; 0x70
 8002024:	4b7a      	ldr	r3, [pc, #488]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	4a79      	ldr	r2, [pc, #484]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800202a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800202e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d015      	beq.n	8002064 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff f92a 	bl	8001290 <HAL_GetTick>
 800203c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7ff f926 	bl	8001290 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e121      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002056:	4b6e      	ldr	r3, [pc, #440]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0ee      	beq.n	8002040 <HAL_RCC_OscConfig+0x5a0>
 8002062:	e014      	b.n	800208e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002064:	f7ff f914 	bl	8001290 <HAL_GetTick>
 8002068:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800206a:	e00a      	b.n	8002082 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f7ff f910 	bl	8001290 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e10b      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002082:	4b63      	ldr	r3, [pc, #396]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1ee      	bne.n	800206c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8100 	beq.w	8002298 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002098:	4b5d      	ldr	r3, [pc, #372]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020a0:	2b18      	cmp	r3, #24
 80020a2:	f000 80bb 	beq.w	800221c <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	f040 8095 	bne.w	80021da <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b0:	4b57      	ldr	r3, [pc, #348]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a56      	ldr	r2, [pc, #344]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80020b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff f8e8 	bl	8001290 <HAL_GetTick>
 80020c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c4:	f7ff f8e4 	bl	8001290 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e0e1      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020d6:	4b4e      	ldr	r3, [pc, #312]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e2:	4b4b      	ldr	r3, [pc, #300]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80020e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e6:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <HAL_RCC_OscConfig+0x774>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	430a      	orrs	r2, r1
 80020f6:	4946      	ldr	r1, [pc, #280]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	628b      	str	r3, [r1, #40]	; 0x28
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	3b01      	subs	r3, #1
 8002102:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210a:	3b01      	subs	r3, #1
 800210c:	025b      	lsls	r3, r3, #9
 800210e:	b29b      	uxth	r3, r3
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002116:	3b01      	subs	r3, #1
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	3b01      	subs	r3, #1
 8002126:	061b      	lsls	r3, r3, #24
 8002128:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800212c:	4938      	ldr	r1, [pc, #224]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800212e:	4313      	orrs	r3, r2
 8002130:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002132:	4b37      	ldr	r3, [pc, #220]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	4a36      	ldr	r2, [pc, #216]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800213e:	4b34      	ldr	r3, [pc, #208]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002142:	4b35      	ldr	r3, [pc, #212]	; (8002218 <HAL_RCC_OscConfig+0x778>)
 8002144:	4013      	ands	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800214a:	00d2      	lsls	r2, r2, #3
 800214c:	4930      	ldr	r1, [pc, #192]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800214e:	4313      	orrs	r3, r2
 8002150:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002152:	4b2f      	ldr	r3, [pc, #188]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	f023 020c 	bic.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	492c      	ldr	r1, [pc, #176]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002160:	4313      	orrs	r3, r2
 8002162:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002164:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	f023 0202 	bic.w	r2, r3, #2
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	4927      	ldr	r1, [pc, #156]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002172:	4313      	orrs	r3, r2
 8002174:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002176:	4b26      	ldr	r3, [pc, #152]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	4a25      	ldr	r2, [pc, #148]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002182:	4b23      	ldr	r3, [pc, #140]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	4a22      	ldr	r2, [pc, #136]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002198:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219e:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a6:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a19      	ldr	r2, [pc, #100]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80021ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7ff f86d 	bl	8001290 <HAL_GetTick>
 80021b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ba:	f7ff f869 	bl	8001290 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e066      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x71a>
 80021d8:	e05e      	b.n	8002298 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 80021e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7ff f853 	bl	8001290 <HAL_GetTick>
 80021ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ee:	f7ff f84f 	bl	8001290 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e04c      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_RCC_OscConfig+0x770>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f0      	bne.n	80021ee <HAL_RCC_OscConfig+0x74e>
 800220c:	e044      	b.n	8002298 <HAL_RCC_OscConfig+0x7f8>
 800220e:	bf00      	nop
 8002210:	58024400 	.word	0x58024400
 8002214:	fffffc0c 	.word	0xfffffc0c
 8002218:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <HAL_RCC_OscConfig+0x804>)
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_RCC_OscConfig+0x804>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	2b01      	cmp	r3, #1
 800222e:	d031      	beq.n	8002294 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f003 0203 	and.w	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d12a      	bne.n	8002294 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d122      	bne.n	8002294 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d11a      	bne.n	8002294 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	0a5b      	lsrs	r3, r3, #9
 8002262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d111      	bne.n	8002294 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	0c1b      	lsrs	r3, r3, #16
 8002274:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d108      	bne.n	8002294 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	0e1b      	lsrs	r3, r3, #24
 8002286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3730      	adds	r7, #48	; 0x30
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	58024400 	.word	0x58024400

080022a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e19c      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b8a      	ldr	r3, [pc, #552]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d910      	bls.n	80022ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b87      	ldr	r3, [pc, #540]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 020f 	bic.w	r2, r3, #15
 80022d2:	4985      	ldr	r1, [pc, #532]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b83      	ldr	r3, [pc, #524]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e184      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d010      	beq.n	800231a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	4b7b      	ldr	r3, [pc, #492]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002304:	429a      	cmp	r2, r3
 8002306:	d908      	bls.n	800231a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002308:	4b78      	ldr	r3, [pc, #480]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	4975      	ldr	r1, [pc, #468]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002316:	4313      	orrs	r3, r2
 8002318:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d010      	beq.n	8002348 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	4b70      	ldr	r3, [pc, #448]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002332:	429a      	cmp	r2, r3
 8002334:	d908      	bls.n	8002348 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002336:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	496a      	ldr	r1, [pc, #424]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002344:	4313      	orrs	r3, r2
 8002346:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	4b64      	ldr	r3, [pc, #400]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002360:	429a      	cmp	r2, r3
 8002362:	d908      	bls.n	8002376 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002364:	4b61      	ldr	r3, [pc, #388]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	495e      	ldr	r1, [pc, #376]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002372:	4313      	orrs	r3, r2
 8002374:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d010      	beq.n	80023a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	4b59      	ldr	r3, [pc, #356]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800238e:	429a      	cmp	r2, r3
 8002390:	d908      	bls.n	80023a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002392:	4b56      	ldr	r3, [pc, #344]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4953      	ldr	r1, [pc, #332]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d010      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	429a      	cmp	r2, r3
 80023be:	d908      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c0:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f023 020f 	bic.w	r2, r3, #15
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4947      	ldr	r1, [pc, #284]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d055      	beq.n	800248a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023de:	4b43      	ldr	r3, [pc, #268]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4940      	ldr	r1, [pc, #256]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023f8:	4b3c      	ldr	r3, [pc, #240]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d121      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0f6      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d107      	bne.n	8002420 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002410:	4b36      	ldr	r3, [pc, #216]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d115      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0ea      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002428:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d109      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0de      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002438:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0d6      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002448:	4b28      	ldr	r3, [pc, #160]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f023 0207 	bic.w	r2, r3, #7
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4925      	ldr	r1, [pc, #148]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002456:	4313      	orrs	r3, r2
 8002458:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245a:	f7fe ff19 	bl	8001290 <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002460:	e00a      	b.n	8002478 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002462:	f7fe ff15 	bl	8001290 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0be      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	429a      	cmp	r2, r3
 8002488:	d1eb      	bne.n	8002462 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d010      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d208      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f023 020f 	bic.w	r2, r3, #15
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	490e      	ldr	r1, [pc, #56]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d214      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 020f 	bic.w	r2, r3, #15
 80024ce:	4906      	ldr	r1, [pc, #24]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e086      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
 80024e8:	52002000 	.word	0x52002000
 80024ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d010      	beq.n	800251e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	4b3f      	ldr	r3, [pc, #252]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002508:	429a      	cmp	r2, r3
 800250a:	d208      	bcs.n	800251e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800250c:	4b3c      	ldr	r3, [pc, #240]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	4939      	ldr	r1, [pc, #228]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800251a:	4313      	orrs	r3, r2
 800251c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d010      	beq.n	800254c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	4b34      	ldr	r3, [pc, #208]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002536:	429a      	cmp	r2, r3
 8002538:	d208      	bcs.n	800254c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800253a:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	492e      	ldr	r1, [pc, #184]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002548:	4313      	orrs	r3, r2
 800254a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d010      	beq.n	800257a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	4b28      	ldr	r3, [pc, #160]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002564:	429a      	cmp	r2, r3
 8002566:	d208      	bcs.n	800257a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002568:	4b25      	ldr	r3, [pc, #148]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4922      	ldr	r1, [pc, #136]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002576:	4313      	orrs	r3, r2
 8002578:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b00      	cmp	r3, #0
 8002584:	d010      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002592:	429a      	cmp	r2, r3
 8002594:	d208      	bcs.n	80025a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4917      	ldr	r1, [pc, #92]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80025a8:	f000 f834 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	4912      	ldr	r1, [pc, #72]	; (8002604 <HAL_RCC_ClockConfig+0x35c>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
 80025c4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <HAL_RCC_ClockConfig+0x35c>)
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x360>)
 80025de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025e0:	4a0a      	ldr	r2, [pc, #40]	; (800260c <HAL_RCC_ClockConfig+0x364>)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_RCC_ClockConfig+0x368>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fe06 	bl	80011fc <HAL_InitTick>
 80025f0:	4603      	mov	r3, r0
 80025f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	58024400 	.word	0x58024400
 8002604:	08010f48 	.word	0x08010f48
 8002608:	24000004 	.word	0x24000004
 800260c:	24000000 	.word	0x24000000
 8002610:	24000008 	.word	0x24000008

08002614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800261a:	4bb3      	ldr	r3, [pc, #716]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002622:	2b18      	cmp	r3, #24
 8002624:	f200 8155 	bhi.w	80028d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <HAL_RCC_GetSysClockFreq+0x1c>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002695 	.word	0x08002695
 8002634:	080028d3 	.word	0x080028d3
 8002638:	080028d3 	.word	0x080028d3
 800263c:	080028d3 	.word	0x080028d3
 8002640:	080028d3 	.word	0x080028d3
 8002644:	080028d3 	.word	0x080028d3
 8002648:	080028d3 	.word	0x080028d3
 800264c:	080028d3 	.word	0x080028d3
 8002650:	080026bb 	.word	0x080026bb
 8002654:	080028d3 	.word	0x080028d3
 8002658:	080028d3 	.word	0x080028d3
 800265c:	080028d3 	.word	0x080028d3
 8002660:	080028d3 	.word	0x080028d3
 8002664:	080028d3 	.word	0x080028d3
 8002668:	080028d3 	.word	0x080028d3
 800266c:	080028d3 	.word	0x080028d3
 8002670:	080026c1 	.word	0x080026c1
 8002674:	080028d3 	.word	0x080028d3
 8002678:	080028d3 	.word	0x080028d3
 800267c:	080028d3 	.word	0x080028d3
 8002680:	080028d3 	.word	0x080028d3
 8002684:	080028d3 	.word	0x080028d3
 8002688:	080028d3 	.word	0x080028d3
 800268c:	080028d3 	.word	0x080028d3
 8002690:	080026c7 	.word	0x080026c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002694:	4b94      	ldr	r3, [pc, #592]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d009      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80026a0:	4b91      	ldr	r3, [pc, #580]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	4a90      	ldr	r2, [pc, #576]	; (80028ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80026b2:	e111      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026b4:	4b8d      	ldr	r3, [pc, #564]	; (80028ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026b6:	61bb      	str	r3, [r7, #24]
    break;
 80026b8:	e10e      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80026ba:	4b8d      	ldr	r3, [pc, #564]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026bc:	61bb      	str	r3, [r7, #24]
    break;
 80026be:	e10b      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80026c0:	4b8c      	ldr	r3, [pc, #560]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026c2:	61bb      	str	r3, [r7, #24]
    break;
 80026c4:	e108      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026c6:	4b88      	ldr	r3, [pc, #544]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80026d0:	4b85      	ldr	r3, [pc, #532]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026dc:	4b82      	ldr	r3, [pc, #520]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026e6:	4b80      	ldr	r3, [pc, #512]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ea:	08db      	lsrs	r3, r3, #3
 80026ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	ee07 3a90 	vmov	s15, r3
 80026fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80e1 	beq.w	80028cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b02      	cmp	r3, #2
 800270e:	f000 8083 	beq.w	8002818 <HAL_RCC_GetSysClockFreq+0x204>
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b02      	cmp	r3, #2
 8002716:	f200 80a1 	bhi.w	800285c <HAL_RCC_GetSysClockFreq+0x248>
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x114>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d056      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002726:	e099      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002728:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d02d      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002734:	4b6c      	ldr	r3, [pc, #432]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	08db      	lsrs	r3, r3, #3
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	4a6b      	ldr	r2, [pc, #428]	; (80028ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800275a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800275e:	4b62      	ldr	r3, [pc, #392]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800276e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002772:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800277a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800277e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800278e:	e087      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800279e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a2:	4b51      	ldr	r3, [pc, #324]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027d2:	e065      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002900 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e6:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800280a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002816:	e043      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002822:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002904 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800282a:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800283a:	ed97 6a02 	vldr	s12, [r7, #8]
 800283e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800284a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800284e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800285a:	e021      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002866:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002900 <HAL_RCC_GetSysClockFreq+0x2ec>
 800286a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800286e:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800287e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002882:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800288a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800288e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800289e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	0a5b      	lsrs	r3, r3, #9
 80028a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028aa:	3301      	adds	r3, #1
 80028ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80028bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028c4:	ee17 3a90 	vmov	r3, s15
 80028c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80028ca:	e005      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
    break;
 80028d0:	e002      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028d4:	61bb      	str	r3, [r7, #24]
    break;
 80028d6:	bf00      	nop
  }

  return sysclockfreq;
 80028d8:	69bb      	ldr	r3, [r7, #24]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	58024400 	.word	0x58024400
 80028ec:	03d09000 	.word	0x03d09000
 80028f0:	003d0900 	.word	0x003d0900
 80028f4:	007a1200 	.word	0x007a1200
 80028f8:	46000000 	.word	0x46000000
 80028fc:	4c742400 	.word	0x4c742400
 8002900:	4a742400 	.word	0x4a742400
 8002904:	4af42400 	.word	0x4af42400

08002908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800290e:	f7ff fe81 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_RCC_GetHCLKFreq+0x50>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	490f      	ldr	r1, [pc, #60]	; (800295c <HAL_RCC_GetHCLKFreq+0x54>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	f003 031f 	and.w	r3, r3, #31
 8002926:	fa22 f303 	lsr.w	r3, r2, r3
 800292a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_GetHCLKFreq+0x50>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_RCC_GetHCLKFreq+0x54>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	fa22 f303 	lsr.w	r3, r2, r3
 8002942:	4a07      	ldr	r2, [pc, #28]	; (8002960 <HAL_RCC_GetHCLKFreq+0x58>)
 8002944:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002946:	4a07      	ldr	r2, [pc, #28]	; (8002964 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <HAL_RCC_GetHCLKFreq+0x58>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	58024400 	.word	0x58024400
 800295c:	08010f48 	.word	0x08010f48
 8002960:	24000004 	.word	0x24000004
 8002964:	24000000 	.word	0x24000000

08002968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800296c:	f7ff ffcc 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4904      	ldr	r1, [pc, #16]	; (8002990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	58024400 	.word	0x58024400
 8002990:	08010f48 	.word	0x08010f48

08002994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002998:	f7ff ffb6 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4904      	ldr	r1, [pc, #16]	; (80029bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	58024400 	.word	0x58024400
 80029bc:	08010f48 	.word	0x08010f48

080029c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029c8:	2300      	movs	r3, #0
 80029ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029cc:	2300      	movs	r3, #0
 80029ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d03f      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029e4:	d02a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029ea:	d824      	bhi.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029f0:	d018      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029f6:	d81e      	bhi.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a00:	d007      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a02:	e018      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a04:	4ba6      	ldr	r3, [pc, #664]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	4aa5      	ldr	r2, [pc, #660]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a10:	e015      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	2102      	movs	r1, #2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f001 f99b 	bl	8003d54 <RCCEx_PLL2_Config>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a22:	e00c      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3324      	adds	r3, #36	; 0x24
 8002a28:	2102      	movs	r1, #2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f001 fa44 	bl	8003eb8 <RCCEx_PLL3_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a34:	e003      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	75fb      	strb	r3, [r7, #23]
      break;
 8002a3a:	e000      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d109      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a44:	4b96      	ldr	r3, [pc, #600]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a50:	4993      	ldr	r1, [pc, #588]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	650b      	str	r3, [r1, #80]	; 0x50
 8002a56:	e001      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
 8002a5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d03d      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d826      	bhi.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a70:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002a8d 	.word	0x08002a8d
 8002a7c:	08002a9b 	.word	0x08002a9b
 8002a80:	08002aad 	.word	0x08002aad
 8002a84:	08002ac5 	.word	0x08002ac5
 8002a88:	08002ac5 	.word	0x08002ac5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a8c:	4b84      	ldr	r3, [pc, #528]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	4a83      	ldr	r2, [pc, #524]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a98:	e015      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 f957 	bl	8003d54 <RCCEx_PLL2_Config>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002aaa:	e00c      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3324      	adds	r3, #36	; 0x24
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 fa00 	bl	8003eb8 <RCCEx_PLL3_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002abc:	e003      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d109      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002acc:	4b74      	ldr	r3, [pc, #464]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad0:	f023 0207 	bic.w	r2, r3, #7
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	4971      	ldr	r1, [pc, #452]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	650b      	str	r3, [r1, #80]	; 0x50
 8002ade:	e001      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae0:	7dfb      	ldrb	r3, [r7, #23]
 8002ae2:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d04a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002af8:	d031      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8002afa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002afe:	d82b      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b04:	d02d      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0a:	d825      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b0c:	2bc0      	cmp	r3, #192	; 0xc0
 8002b0e:	d02a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002b10:	2bc0      	cmp	r3, #192	; 0xc0
 8002b12:	d821      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b14:	2b80      	cmp	r3, #128	; 0x80
 8002b16:	d016      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002b18:	2b80      	cmp	r3, #128	; 0x80
 8002b1a:	d81d      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002b20:	2b40      	cmp	r3, #64	; 0x40
 8002b22:	d007      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002b24:	e018      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b26:	4b5e      	ldr	r3, [pc, #376]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	4a5d      	ldr	r2, [pc, #372]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002b32:	e019      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3304      	adds	r3, #4
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 f90a 	bl	8003d54 <RCCEx_PLL2_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002b44:	e010      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3324      	adds	r3, #36	; 0x24
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 f9b3 	bl	8003eb8 <RCCEx_PLL3_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002b56:	e007      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b5c:	e004      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e002      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002b62:	bf00      	nop
 8002b64:	e000      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002b6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b72:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	4949      	ldr	r1, [pc, #292]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	650b      	str	r3, [r1, #80]	; 0x50
 8002b80:	e001      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d04f      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002b9a:	d036      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002b9c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002ba0:	d830      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba6:	d032      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bac:	d82a      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002bae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002bb2:	d02e      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002bb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002bb8:	d824      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d018      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc4:	d81e      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bce:	d007      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002bd0:	e018      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bd2:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	4a32      	ldr	r2, [pc, #200]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002bde:	e019      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3304      	adds	r3, #4
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 f8b4 	bl	8003d54 <RCCEx_PLL2_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002bf0:	e010      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3324      	adds	r3, #36	; 0x24
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f001 f95d 	bl	8003eb8 <RCCEx_PLL3_Config>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002c02:	e007      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	75fb      	strb	r3, [r7, #23]
      break;
 8002c08:	e004      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002c0a:	bf00      	nop
 8002c0c:	e002      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002c0e:	bf00      	nop
 8002c10:	e000      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002c1a:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c26:	491e      	ldr	r1, [pc, #120]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	650b      	str	r3, [r1, #80]	; 0x50
 8002c2c:	e001      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
 8002c30:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d034      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c42:	2b30      	cmp	r3, #48	; 0x30
 8002c44:	d01c      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002c46:	2b30      	cmp	r3, #48	; 0x30
 8002c48:	d817      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d00c      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d813      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d016      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d10f      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c5a:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	4a10      	ldr	r2, [pc, #64]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002c66:	e00e      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 f870 	bl	8003d54 <RCCEx_PLL2_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002c78:	e005      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c7e:	e002      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002c80:	bf00      	nop
 8002c82:	e000      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002c84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c98:	4901      	ldr	r1, [pc, #4]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c9e:	e003      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002ca0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d047      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cbc:	d030      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cc2:	d82a      	bhi.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002cc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cc8:	d02c      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002cca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cce:	d824      	bhi.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd4:	d018      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cda:	d81e      	bhi.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce4:	d007      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002ce6:	e018      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce8:	4bb0      	ldr	r3, [pc, #704]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	4aaf      	ldr	r2, [pc, #700]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cf4:	e017      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 f829 	bl	8003d54 <RCCEx_PLL2_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d06:	e00e      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3324      	adds	r3, #36	; 0x24
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f001 f8d2 	bl	8003eb8 <RCCEx_PLL3_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d18:	e005      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d1e:	e002      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002d20:	bf00      	nop
 8002d22:	e000      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d2c:	4b9f      	ldr	r3, [pc, #636]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d30:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d38:	499c      	ldr	r1, [pc, #624]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	650b      	str	r3, [r1, #80]	; 0x50
 8002d3e:	e001      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d049      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d58:	d02e      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d5e:	d828      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002d60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d64:	d02a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002d66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d6a:	d822      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002d6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d70:	d026      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002d72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d76:	d81c      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002d7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d82:	d816      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01d      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8c:	d111      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3304      	adds	r3, #4
 8002d92:	2101      	movs	r1, #1
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 ffdd 	bl	8003d54 <RCCEx_PLL2_Config>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d9e:	e012      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3324      	adds	r3, #36	; 0x24
 8002da4:	2101      	movs	r1, #1
 8002da6:	4618      	mov	r0, r3
 8002da8:	f001 f886 	bl	8003eb8 <RCCEx_PLL3_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002db0:	e009      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	75fb      	strb	r3, [r7, #23]
      break;
 8002db6:	e006      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002db8:	bf00      	nop
 8002dba:	e004      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002dbc:	bf00      	nop
 8002dbe:	e002      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002dc0:	bf00      	nop
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002dc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002dcc:	4b77      	ldr	r3, [pc, #476]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd8:	4974      	ldr	r1, [pc, #464]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	650b      	str	r3, [r1, #80]	; 0x50
 8002dde:	e001      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d053      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002df6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002dfa:	d034      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002dfc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002e00:	d82e      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e06:	d030      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e0c:	d828      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e12:	d02c      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d822      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002e1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e1e:	d028      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002e20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e24:	d81c      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002e26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e2a:	d010      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e30:	d816      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01f      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e3a:	d111      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	2101      	movs	r1, #1
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 ff86 	bl	8003d54 <RCCEx_PLL2_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e4c:	e014      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3324      	adds	r3, #36	; 0x24
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 f82f 	bl	8003eb8 <RCCEx_PLL3_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	75fb      	strb	r3, [r7, #23]
      break;
 8002e64:	e008      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002e66:	bf00      	nop
 8002e68:	e006      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002e6a:	bf00      	nop
 8002e6c:	e004      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002e6e:	bf00      	nop
 8002e70:	e002      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002e72:	bf00      	nop
 8002e74:	e000      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10a      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e7e:	4b4b      	ldr	r3, [pc, #300]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e8c:	4947      	ldr	r1, [pc, #284]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	658b      	str	r3, [r1, #88]	; 0x58
 8002e92:	e001      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d02f      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eac:	d00e      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb2:	d814      	bhi.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d015      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ebc:	d10f      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	4a3a      	ldr	r2, [pc, #232]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002eca:	e00c      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 ff3e 	bl	8003d54 <RCCEx_PLL2_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002edc:	e003      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002eec:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef8:	492c      	ldr	r1, [pc, #176]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	650b      	str	r3, [r1, #80]	; 0x50
 8002efe:	e001      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d032      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d81b      	bhi.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002f18:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1e:	bf00      	nop
 8002f20:	08002f57 	.word	0x08002f57
 8002f24:	08002f31 	.word	0x08002f31
 8002f28:	08002f3f 	.word	0x08002f3f
 8002f2c:	08002f57 	.word	0x08002f57
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f30:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	4a1d      	ldr	r2, [pc, #116]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f3c:	e00c      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2102      	movs	r1, #2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 ff05 	bl	8003d54 <RCCEx_PLL2_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f4e:	e003      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	75fb      	strb	r3, [r7, #23]
      break;
 8002f54:	e000      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f5e:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	f023 0203 	bic.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	4910      	ldr	r1, [pc, #64]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f70:	e001      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 808a 	beq.w	8003098 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f90:	f7fe f97e 	bl	8001290 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f96:	e00d      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f98:	f7fe f97a 	bl	8001290 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d906      	bls.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	75fb      	strb	r3, [r7, #23]
        break;
 8002faa:	e009      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002fac:	58024400 	.word	0x58024400
 8002fb0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fb4:	4bba      	ldr	r3, [pc, #744]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0eb      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d166      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002fc6:	4bb7      	ldr	r3, [pc, #732]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fd0:	4053      	eors	r3, r2
 8002fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d013      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fda:	4bb2      	ldr	r3, [pc, #712]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fe4:	4baf      	ldr	r3, [pc, #700]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4aae      	ldr	r2, [pc, #696]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff0:	4bac      	ldr	r3, [pc, #688]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	4aab      	ldr	r2, [pc, #684]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ffa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ffc:	4aa9      	ldr	r2, [pc, #676]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300c:	d115      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe f93f 	bl	8001290 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003014:	e00b      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe f93b 	bl	8001290 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	; 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d902      	bls.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	75fb      	strb	r3, [r7, #23]
            break;
 800302c:	e005      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800302e:	4b9d      	ldr	r3, [pc, #628]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0ed      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d126      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800304e:	d10d      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003050:	4b94      	ldr	r3, [pc, #592]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800305e:	0919      	lsrs	r1, r3, #4
 8003060:	4b91      	ldr	r3, [pc, #580]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003062:	400b      	ands	r3, r1
 8003064:	498f      	ldr	r1, [pc, #572]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003066:	4313      	orrs	r3, r2
 8003068:	610b      	str	r3, [r1, #16]
 800306a:	e005      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800306c:	4b8d      	ldr	r3, [pc, #564]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	4a8c      	ldr	r2, [pc, #560]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003072:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003076:	6113      	str	r3, [r2, #16]
 8003078:	4b8a      	ldr	r3, [pc, #552]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800307a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003086:	4987      	ldr	r1, [pc, #540]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003088:	4313      	orrs	r3, r2
 800308a:	670b      	str	r3, [r1, #112]	; 0x70
 800308c:	e004      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800308e:	7dfb      	ldrb	r3, [r7, #23]
 8003090:	75bb      	strb	r3, [r7, #22]
 8003092:	e001      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d07f      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030aa:	2b28      	cmp	r3, #40	; 0x28
 80030ac:	d866      	bhi.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80030ae:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80030b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b4:	08003183 	.word	0x08003183
 80030b8:	0800317d 	.word	0x0800317d
 80030bc:	0800317d 	.word	0x0800317d
 80030c0:	0800317d 	.word	0x0800317d
 80030c4:	0800317d 	.word	0x0800317d
 80030c8:	0800317d 	.word	0x0800317d
 80030cc:	0800317d 	.word	0x0800317d
 80030d0:	0800317d 	.word	0x0800317d
 80030d4:	08003159 	.word	0x08003159
 80030d8:	0800317d 	.word	0x0800317d
 80030dc:	0800317d 	.word	0x0800317d
 80030e0:	0800317d 	.word	0x0800317d
 80030e4:	0800317d 	.word	0x0800317d
 80030e8:	0800317d 	.word	0x0800317d
 80030ec:	0800317d 	.word	0x0800317d
 80030f0:	0800317d 	.word	0x0800317d
 80030f4:	0800316b 	.word	0x0800316b
 80030f8:	0800317d 	.word	0x0800317d
 80030fc:	0800317d 	.word	0x0800317d
 8003100:	0800317d 	.word	0x0800317d
 8003104:	0800317d 	.word	0x0800317d
 8003108:	0800317d 	.word	0x0800317d
 800310c:	0800317d 	.word	0x0800317d
 8003110:	0800317d 	.word	0x0800317d
 8003114:	08003183 	.word	0x08003183
 8003118:	0800317d 	.word	0x0800317d
 800311c:	0800317d 	.word	0x0800317d
 8003120:	0800317d 	.word	0x0800317d
 8003124:	0800317d 	.word	0x0800317d
 8003128:	0800317d 	.word	0x0800317d
 800312c:	0800317d 	.word	0x0800317d
 8003130:	0800317d 	.word	0x0800317d
 8003134:	08003183 	.word	0x08003183
 8003138:	0800317d 	.word	0x0800317d
 800313c:	0800317d 	.word	0x0800317d
 8003140:	0800317d 	.word	0x0800317d
 8003144:	0800317d 	.word	0x0800317d
 8003148:	0800317d 	.word	0x0800317d
 800314c:	0800317d 	.word	0x0800317d
 8003150:	0800317d 	.word	0x0800317d
 8003154:	08003183 	.word	0x08003183
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3304      	adds	r3, #4
 800315c:	2101      	movs	r1, #1
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fdf8 	bl	8003d54 <RCCEx_PLL2_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003168:	e00c      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3324      	adds	r3, #36	; 0x24
 800316e:	2101      	movs	r1, #1
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fea1 	bl	8003eb8 <RCCEx_PLL3_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800317a:	e003      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	75fb      	strb	r3, [r7, #23]
      break;
 8003180:	e000      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800318a:	4b46      	ldr	r3, [pc, #280]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003198:	4942      	ldr	r1, [pc, #264]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800319a:	4313      	orrs	r3, r2
 800319c:	654b      	str	r3, [r1, #84]	; 0x54
 800319e:	e001      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d038      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d821      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80031b8:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80031ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	08003203 	.word	0x08003203
 80031c4:	080031d9 	.word	0x080031d9
 80031c8:	080031eb 	.word	0x080031eb
 80031cc:	08003203 	.word	0x08003203
 80031d0:	08003203 	.word	0x08003203
 80031d4:	08003203 	.word	0x08003203
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3304      	adds	r3, #4
 80031dc:	2101      	movs	r1, #1
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fdb8 	bl	8003d54 <RCCEx_PLL2_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031e8:	e00c      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3324      	adds	r3, #36	; 0x24
 80031ee:	2101      	movs	r1, #1
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fe61 	bl	8003eb8 <RCCEx_PLL3_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031fa:	e003      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003200:	e000      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003204:	7dfb      	ldrb	r3, [r7, #23]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800320a:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800320c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320e:	f023 0207 	bic.w	r2, r3, #7
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003216:	4923      	ldr	r1, [pc, #140]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003218:	4313      	orrs	r3, r2
 800321a:	654b      	str	r3, [r1, #84]	; 0x54
 800321c:	e001      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321e:	7dfb      	ldrb	r3, [r7, #23]
 8003220:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d040      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003234:	2b05      	cmp	r3, #5
 8003236:	d821      	bhi.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003238:	a201      	add	r2, pc, #4	; (adr r2, 8003240 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323e:	bf00      	nop
 8003240:	08003283 	.word	0x08003283
 8003244:	08003259 	.word	0x08003259
 8003248:	0800326b 	.word	0x0800326b
 800324c:	08003283 	.word	0x08003283
 8003250:	08003283 	.word	0x08003283
 8003254:	08003283 	.word	0x08003283
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3304      	adds	r3, #4
 800325c:	2101      	movs	r1, #1
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fd78 	bl	8003d54 <RCCEx_PLL2_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003268:	e00c      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3324      	adds	r3, #36	; 0x24
 800326e:	2101      	movs	r1, #1
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fe21 	bl	8003eb8 <RCCEx_PLL3_Config>
 8003276:	4603      	mov	r3, r0
 8003278:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800327a:	e003      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	75fb      	strb	r3, [r7, #23]
      break;
 8003280:	e000      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d110      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	f023 0207 	bic.w	r2, r3, #7
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003298:	4902      	ldr	r1, [pc, #8]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800329a:	4313      	orrs	r3, r2
 800329c:	658b      	str	r3, [r1, #88]	; 0x58
 800329e:	e007      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80032a0:	58024800 	.word	0x58024800
 80032a4:	58024400 	.word	0x58024400
 80032a8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
 80032ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d04b      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c6:	d02e      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80032c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032cc:	d828      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d2:	d02a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d8:	d822      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80032da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032de:	d026      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80032e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032e4:	d81c      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80032e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ea:	d010      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80032ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f0:	d816      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01d      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80032f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032fa:	d111      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3304      	adds	r3, #4
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fd26 	bl	8003d54 <RCCEx_PLL2_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800330c:	e012      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3324      	adds	r3, #36	; 0x24
 8003312:	2102      	movs	r1, #2
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fdcf 	bl	8003eb8 <RCCEx_PLL3_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800331e:	e009      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
      break;
 8003324:	e006      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003326:	bf00      	nop
 8003328:	e004      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800332a:	bf00      	nop
 800332c:	e002      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800332e:	bf00      	nop
 8003330:	e000      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800333a:	4bb3      	ldr	r3, [pc, #716]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003348:	49af      	ldr	r1, [pc, #700]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800334a:	4313      	orrs	r3, r2
 800334c:	654b      	str	r3, [r1, #84]	; 0x54
 800334e:	e001      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d04b      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003366:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800336a:	d02e      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800336c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003370:	d828      	bhi.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003376:	d02a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337c:	d822      	bhi.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800337e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003382:	d026      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003388:	d81c      	bhi.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800338a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338e:	d010      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003394:	d816      	bhi.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01d      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339e:	d111      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fcd4 	bl	8003d54 <RCCEx_PLL2_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80033b0:	e012      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3324      	adds	r3, #36	; 0x24
 80033b6:	2102      	movs	r1, #2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fd7d 	bl	8003eb8 <RCCEx_PLL3_Config>
 80033be:	4603      	mov	r3, r0
 80033c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80033c2:	e009      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	75fb      	strb	r3, [r7, #23]
      break;
 80033c8:	e006      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80033ca:	bf00      	nop
 80033cc:	e004      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80033ce:	bf00      	nop
 80033d0:	e002      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80033d2:	bf00      	nop
 80033d4:	e000      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80033d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033de:	4b8a      	ldr	r3, [pc, #552]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033ec:	4986      	ldr	r1, [pc, #536]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	658b      	str	r3, [r1, #88]	; 0x58
 80033f2:	e001      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
 80033f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003400:	2b00      	cmp	r3, #0
 8003402:	d04b      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800340a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800340e:	d02e      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003410:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003414:	d828      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341a:	d02a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800341c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003420:	d822      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003422:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003426:	d026      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003428:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800342c:	d81c      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800342e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003432:	d010      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003438:	d816      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d01d      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800343e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003442:	d111      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fc82 	bl	8003d54 <RCCEx_PLL2_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003454:	e012      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3324      	adds	r3, #36	; 0x24
 800345a:	2102      	movs	r1, #2
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fd2b 	bl	8003eb8 <RCCEx_PLL3_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003466:	e009      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
      break;
 800346c:	e006      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800346e:	bf00      	nop
 8003470:	e004      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003472:	bf00      	nop
 8003474:	e002      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003476:	bf00      	nop
 8003478:	e000      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800347a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003482:	4b61      	ldr	r3, [pc, #388]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003490:	495d      	ldr	r1, [pc, #372]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003492:	4313      	orrs	r3, r2
 8003494:	658b      	str	r3, [r1, #88]	; 0x58
 8003496:	e001      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b2:	d10a      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3324      	adds	r3, #36	; 0x24
 80034b8:	2102      	movs	r1, #2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fcfc 	bl	8003eb8 <RCCEx_PLL3_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80034ca:	4b4f      	ldr	r3, [pc, #316]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	494b      	ldr	r1, [pc, #300]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d01a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f4:	d10a      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3324      	adds	r3, #36	; 0x24
 80034fa:	2102      	movs	r1, #2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fcdb 	bl	8003eb8 <RCCEx_PLL3_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800350c:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800351a:	493b      	ldr	r1, [pc, #236]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800351c:	4313      	orrs	r3, r2
 800351e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d034      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003536:	d01d      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800353c:	d817      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003546:	d009      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003548:	e011      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fbff 	bl	8003d54 <RCCEx_PLL2_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800355a:	e00c      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3324      	adds	r3, #36	; 0x24
 8003560:	2102      	movs	r1, #2
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fca8 	bl	8003eb8 <RCCEx_PLL3_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800356c:	e003      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	75fb      	strb	r3, [r7, #23]
      break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800357c:	4b22      	ldr	r3, [pc, #136]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800358a:	491f      	ldr	r1, [pc, #124]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800358c:	4313      	orrs	r3, r2
 800358e:	658b      	str	r3, [r1, #88]	; 0x58
 8003590:	e001      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	7dfb      	ldrb	r3, [r7, #23]
 8003594:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d036      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035ac:	d01c      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80035ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035b2:	d816      	bhi.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80035b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035b8:	d003      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80035ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035be:	d007      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80035c0:	e00f      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	4a10      	ldr	r2, [pc, #64]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80035c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80035ce:	e00c      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3324      	adds	r3, #36	; 0x24
 80035d4:	2101      	movs	r1, #1
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fc6e 	bl	8003eb8 <RCCEx_PLL3_Config>
 80035dc:	4603      	mov	r3, r0
 80035de:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80035e0:	e003      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	75fb      	strb	r3, [r7, #23]
      break;
 80035e6:	e000      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80035e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10d      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035fe:	4902      	ldr	r1, [pc, #8]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003600:	4313      	orrs	r3, r2
 8003602:	654b      	str	r3, [r1, #84]	; 0x54
 8003604:	e004      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8003606:	bf00      	nop
 8003608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d029      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003628:	d007      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800362a:	e00f      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362c:	4b69      	ldr	r3, [pc, #420]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	4a68      	ldr	r2, [pc, #416]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003636:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003638:	e00b      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	2102      	movs	r1, #2
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fb87 	bl	8003d54 <RCCEx_PLL2_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800364a:	e002      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]
      break;
 8003650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003658:	4b5e      	ldr	r3, [pc, #376]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800365a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003664:	495b      	ldr	r1, [pc, #364]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003666:	4313      	orrs	r3, r2
 8003668:	64cb      	str	r3, [r1, #76]	; 0x4c
 800366a:	e001      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3324      	adds	r3, #36	; 0x24
 8003680:	2102      	movs	r1, #2
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fc18 	bl	8003eb8 <RCCEx_PLL3_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d032      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a8:	d017      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 80036aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ae:	d811      	bhi.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80036b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b4:	d013      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 80036b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ba:	d80b      	bhi.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d010      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 80036c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c4:	d106      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c6:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	4a42      	ldr	r2, [pc, #264]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80036d2:	e007      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	75fb      	strb	r3, [r7, #23]
      break;
 80036d8:	e004      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80036da:	bf00      	nop
 80036dc:	e002      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80036de:	bf00      	nop
 80036e0:	e000      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80036e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10a      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036ea:	4b3a      	ldr	r3, [pc, #232]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f8:	4936      	ldr	r1, [pc, #216]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	654b      	str	r3, [r1, #84]	; 0x54
 80036fe:	e001      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003710:	4b30      	ldr	r3, [pc, #192]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800371c:	492d      	ldr	r1, [pc, #180]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800371e:	4313      	orrs	r3, r2
 8003720:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800372e:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003732:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800373a:	4926      	ldr	r1, [pc, #152]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800373c:	4313      	orrs	r3, r2
 800373e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	491e      	ldr	r1, [pc, #120]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800375a:	4313      	orrs	r3, r2
 800375c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00d      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	4a19      	ldr	r2, [pc, #100]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003770:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003774:	6113      	str	r3, [r2, #16]
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003780:	4914      	ldr	r1, [pc, #80]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003782:	4313      	orrs	r3, r2
 8003784:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	da08      	bge.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003792:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379a:	490e      	ldr	r1, [pc, #56]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800379c:	4313      	orrs	r3, r2
 800379e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d009      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80037ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	4906      	ldr	r1, [pc, #24]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80037c0:	7dbb      	ldrb	r3, [r7, #22]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	58024400 	.word	0x58024400

080037d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80037dc:	f7ff f894 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 80037e0:	4602      	mov	r2, r0
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	4904      	ldr	r1, [pc, #16]	; (8003800 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80037ee:	5ccb      	ldrb	r3, [r1, r3]
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	58024400 	.word	0x58024400
 8003800:	08010f48 	.word	0x08010f48

08003804 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800380c:	4ba1      	ldr	r3, [pc, #644]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003816:	4b9f      	ldr	r3, [pc, #636]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	0b1b      	lsrs	r3, r3, #12
 800381c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003820:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003822:	4b9c      	ldr	r3, [pc, #624]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800382e:	4b99      	ldr	r3, [pc, #612]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	08db      	lsrs	r3, r3, #3
 8003834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003846:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8111 	beq.w	8003a74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	2b02      	cmp	r3, #2
 8003856:	f000 8083 	beq.w	8003960 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b02      	cmp	r3, #2
 800385e:	f200 80a1 	bhi.w	80039a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d056      	beq.n	800391c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800386e:	e099      	b.n	80039a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003870:	4b88      	ldr	r3, [pc, #544]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d02d      	beq.n	80038d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800387c:	4b85      	ldr	r3, [pc, #532]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	08db      	lsrs	r3, r3, #3
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	4a84      	ldr	r2, [pc, #528]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
 800388c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	ee07 3a90 	vmov	s15, r3
 8003894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a6:	4b7b      	ldr	r3, [pc, #492]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80038d6:	e087      	b.n	80039e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80038e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ea:	4b6a      	ldr	r3, [pc, #424]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80038fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800390e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003916:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800391a:	e065      	b.n	80039e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003926:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800392a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800392e:	4b59      	ldr	r3, [pc, #356]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800393e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003942:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800394a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800394e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800395e:	e043      	b.n	80039e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800396e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003972:	4b48      	ldr	r3, [pc, #288]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003982:	ed97 6a03 	vldr	s12, [r7, #12]
 8003986:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800398a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039a2:	e021      	b.n	80039e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	ee07 3a90 	vmov	s15, r3
 80039aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b6:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80039e8:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	0a5b      	lsrs	r3, r3, #9
 80039ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a0e:	ee17 2a90 	vmov	r2, s15
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003a16:	4b1f      	ldr	r3, [pc, #124]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	0c1b      	lsrs	r3, r3, #16
 8003a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a20:	ee07 3a90 	vmov	s15, r3
 8003a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a3c:	ee17 2a90 	vmov	r2, s15
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003a44:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	0e1b      	lsrs	r3, r3, #24
 8003a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a6a:	ee17 2a90 	vmov	r2, s15
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a72:	e008      	b.n	8003a86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
}
 8003a86:	bf00      	nop
 8003a88:	3724      	adds	r7, #36	; 0x24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	58024400 	.word	0x58024400
 8003a98:	03d09000 	.word	0x03d09000
 8003a9c:	46000000 	.word	0x46000000
 8003aa0:	4c742400 	.word	0x4c742400
 8003aa4:	4a742400 	.word	0x4a742400
 8003aa8:	4af42400 	.word	0x4af42400

08003aac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b089      	sub	sp, #36	; 0x24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ab4:	4ba1      	ldr	r3, [pc, #644]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003abe:	4b9f      	ldr	r3, [pc, #636]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	0d1b      	lsrs	r3, r3, #20
 8003ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ac8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003aca:	4b9c      	ldr	r3, [pc, #624]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003ad6:	4b99      	ldr	r3, [pc, #612]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	08db      	lsrs	r3, r3, #3
 8003adc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8111 	beq.w	8003d1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	f000 8083 	beq.w	8003c08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	f200 80a1 	bhi.w	8003c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d056      	beq.n	8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003b16:	e099      	b.n	8003c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b18:	4b88      	ldr	r3, [pc, #544]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d02d      	beq.n	8003b80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b24:	4b85      	ldr	r3, [pc, #532]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	08db      	lsrs	r3, r3, #3
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	4a84      	ldr	r2, [pc, #528]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
 8003b34:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	ee07 3a90 	vmov	s15, r3
 8003b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4e:	4b7b      	ldr	r3, [pc, #492]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b7e:	e087      	b.n	8003c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b92:	4b6a      	ldr	r3, [pc, #424]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ba6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bc2:	e065      	b.n	8003c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd6:	4b59      	ldr	r3, [pc, #356]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c06:	e043      	b.n	8003c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	ee07 3a90 	vmov	s15, r3
 8003c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c1a:	4b48      	ldr	r3, [pc, #288]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c4a:	e021      	b.n	8003c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c5e:	4b37      	ldr	r3, [pc, #220]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003c90:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	0a5b      	lsrs	r3, r3, #9
 8003c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cb6:	ee17 2a90 	vmov	r2, s15
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003cbe:	4b1f      	ldr	r3, [pc, #124]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	0c1b      	lsrs	r3, r3, #16
 8003cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cc8:	ee07 3a90 	vmov	s15, r3
 8003ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce4:	ee17 2a90 	vmov	r2, s15
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003cec:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	0e1b      	lsrs	r3, r3, #24
 8003cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d12:	ee17 2a90 	vmov	r2, s15
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d1a:	e008      	b.n	8003d2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	609a      	str	r2, [r3, #8]
}
 8003d2e:	bf00      	nop
 8003d30:	3724      	adds	r7, #36	; 0x24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	03d09000 	.word	0x03d09000
 8003d44:	46000000 	.word	0x46000000
 8003d48:	4c742400 	.word	0x4c742400
 8003d4c:	4a742400 	.word	0x4a742400
 8003d50:	4af42400 	.word	0x4af42400

08003d54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d62:	4b53      	ldr	r3, [pc, #332]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d101      	bne.n	8003d72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e099      	b.n	8003ea6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d72:	4b4f      	ldr	r3, [pc, #316]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a4e      	ldr	r2, [pc, #312]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003d78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7e:	f7fd fa87 	bl	8001290 <HAL_GetTick>
 8003d82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d84:	e008      	b.n	8003d98 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d86:	f7fd fa83 	bl	8001290 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e086      	b.n	8003ea6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d98:	4b45      	ldr	r3, [pc, #276]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f0      	bne.n	8003d86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003da4:	4b42      	ldr	r3, [pc, #264]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	031b      	lsls	r3, r3, #12
 8003db2:	493f      	ldr	r1, [pc, #252]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	628b      	str	r3, [r1, #40]	; 0x28
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	025b      	lsls	r3, r3, #9
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	061b      	lsls	r3, r3, #24
 8003de4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003de8:	4931      	ldr	r1, [pc, #196]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003dee:	4b30      	ldr	r3, [pc, #192]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	492d      	ldr	r1, [pc, #180]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e00:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	f023 0220 	bic.w	r2, r3, #32
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	4928      	ldr	r1, [pc, #160]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e12:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	4a26      	ldr	r2, [pc, #152]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e18:	f023 0310 	bic.w	r3, r3, #16
 8003e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e1e:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e22:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <RCCEx_PLL2_Config+0x160>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	69d2      	ldr	r2, [r2, #28]
 8003e2a:	00d2      	lsls	r2, r2, #3
 8003e2c:	4920      	ldr	r1, [pc, #128]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e32:	4b1f      	ldr	r3, [pc, #124]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	4a1e      	ldr	r2, [pc, #120]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e38:	f043 0310 	orr.w	r3, r3, #16
 8003e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e44:	4b1a      	ldr	r3, [pc, #104]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	4a19      	ldr	r2, [pc, #100]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e50:	e00f      	b.n	8003e72 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d106      	bne.n	8003e66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e58:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	4a14      	ldr	r2, [pc, #80]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e64:	e005      	b.n	8003e72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e66:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	4a11      	ldr	r2, [pc, #68]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e72:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a0e      	ldr	r2, [pc, #56]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7e:	f7fd fa07 	bl	8001290 <HAL_GetTick>
 8003e82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e84:	e008      	b.n	8003e98 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e86:	f7fd fa03 	bl	8001290 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e006      	b.n	8003ea6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <RCCEx_PLL2_Config+0x15c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	58024400 	.word	0x58024400
 8003eb4:	ffff0007 	.word	0xffff0007

08003eb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ec6:	4b53      	ldr	r3, [pc, #332]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d101      	bne.n	8003ed6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e099      	b.n	800400a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003ed6:	4b4f      	ldr	r3, [pc, #316]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a4e      	ldr	r2, [pc, #312]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee2:	f7fd f9d5 	bl	8001290 <HAL_GetTick>
 8003ee6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ee8:	e008      	b.n	8003efc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003eea:	f7fd f9d1 	bl	8001290 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e086      	b.n	800400a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003efc:	4b45      	ldr	r3, [pc, #276]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1f0      	bne.n	8003eea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f08:	4b42      	ldr	r3, [pc, #264]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	051b      	lsls	r3, r3, #20
 8003f16:	493f      	ldr	r1, [pc, #252]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	628b      	str	r3, [r1, #40]	; 0x28
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	025b      	lsls	r3, r3, #9
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	041b      	lsls	r3, r3, #16
 8003f3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	061b      	lsls	r3, r3, #24
 8003f48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f4c:	4931      	ldr	r1, [pc, #196]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f52:	4b30      	ldr	r3, [pc, #192]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	492d      	ldr	r1, [pc, #180]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f64:	4b2b      	ldr	r3, [pc, #172]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	4928      	ldr	r1, [pc, #160]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f76:	4b27      	ldr	r3, [pc, #156]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	4a26      	ldr	r2, [pc, #152]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f86:	4b24      	ldr	r3, [pc, #144]	; (8004018 <RCCEx_PLL3_Config+0x160>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	69d2      	ldr	r2, [r2, #28]
 8003f8e:	00d2      	lsls	r2, r2, #3
 8003f90:	4920      	ldr	r1, [pc, #128]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f96:	4b1f      	ldr	r3, [pc, #124]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	4a1e      	ldr	r2, [pc, #120]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	4a19      	ldr	r2, [pc, #100]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003fae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fb4:	e00f      	b.n	8003fd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d106      	bne.n	8003fca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003fbc:	4b15      	ldr	r3, [pc, #84]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	4a14      	ldr	r2, [pc, #80]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003fc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fc8:	e005      	b.n	8003fd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003fca:	4b12      	ldr	r3, [pc, #72]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	4a11      	ldr	r2, [pc, #68]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a0e      	ldr	r2, [pc, #56]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe2:	f7fd f955 	bl	8001290 <HAL_GetTick>
 8003fe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fe8:	e008      	b.n	8003ffc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003fea:	f7fd f951 	bl	8001290 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e006      	b.n	800400a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <RCCEx_PLL3_Config+0x15c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004008:	7bfb      	ldrb	r3, [r7, #15]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	58024400 	.word	0x58024400
 8004018:	ffff0007 	.word	0xffff0007

0800401c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e042      	b.n	80040b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fc ff37 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2224      	movs	r2, #36	; 0x24
 800404a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8c2 	bl	80041e8 <UART_SetConfig>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e022      	b.n	80040b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 ff14 	bl	8004ea4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800408a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800409a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 ff9b 	bl	8004fe8 <UART_CheckIdleState>
 80040b2:	4603      	mov	r3, r0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08a      	sub	sp, #40	; 0x28
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	f040 8083 	bne.w	80041de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_UART_Transmit+0x28>
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e07b      	b.n	80041e0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Transmit+0x3a>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e074      	b.n	80041e0 <HAL_UART_Transmit+0x124>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2221      	movs	r2, #33	; 0x21
 800410a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800410e:	f7fd f8bf 	bl	8001290 <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	88fa      	ldrh	r2, [r7, #6]
 8004120:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412c:	d108      	bne.n	8004140 <HAL_UART_Transmit+0x84>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d104      	bne.n	8004140 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	e003      	b.n	8004148 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004144:	2300      	movs	r3, #0
 8004146:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004150:	e02c      	b.n	80041ac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2200      	movs	r2, #0
 800415a:	2180      	movs	r1, #128	; 0x80
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 ff8e 	bl	800507e <UART_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e039      	b.n	80041e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10b      	bne.n	800418a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004180:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	3302      	adds	r3, #2
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	e007      	b.n	800419a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	3301      	adds	r3, #1
 8004198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1cc      	bne.n	8004152 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2200      	movs	r2, #0
 80041c0:	2140      	movs	r1, #64	; 0x40
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 ff5b 	bl	800507e <UART_WaitOnFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e006      	b.n	80041e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e000      	b.n	80041e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80041de:	2302      	movs	r3, #2
  }
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e8:	b5b0      	push	{r4, r5, r7, lr}
 80041ea:	b08e      	sub	sp, #56	; 0x38
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4313      	orrs	r3, r2
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4bbf      	ldr	r3, [pc, #764]	; (8004514 <UART_SetConfig+0x32c>)
 8004216:	4013      	ands	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800421e:	430b      	orrs	r3, r1
 8004220:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4ab5      	ldr	r2, [pc, #724]	; (8004518 <UART_SetConfig+0x330>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d004      	beq.n	8004252 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800424e:	4313      	orrs	r3, r2
 8004250:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	4bb0      	ldr	r3, [pc, #704]	; (800451c <UART_SetConfig+0x334>)
 800425a:	4013      	ands	r3, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004262:	430b      	orrs	r3, r1
 8004264:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	f023 010f 	bic.w	r1, r3, #15
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4aa7      	ldr	r2, [pc, #668]	; (8004520 <UART_SetConfig+0x338>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d176      	bne.n	8004374 <UART_SetConfig+0x18c>
 8004286:	4ba7      	ldr	r3, [pc, #668]	; (8004524 <UART_SetConfig+0x33c>)
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800428e:	2b28      	cmp	r3, #40	; 0x28
 8004290:	d86c      	bhi.n	800436c <UART_SetConfig+0x184>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <UART_SetConfig+0xb0>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	0800433d 	.word	0x0800433d
 800429c:	0800436d 	.word	0x0800436d
 80042a0:	0800436d 	.word	0x0800436d
 80042a4:	0800436d 	.word	0x0800436d
 80042a8:	0800436d 	.word	0x0800436d
 80042ac:	0800436d 	.word	0x0800436d
 80042b0:	0800436d 	.word	0x0800436d
 80042b4:	0800436d 	.word	0x0800436d
 80042b8:	08004345 	.word	0x08004345
 80042bc:	0800436d 	.word	0x0800436d
 80042c0:	0800436d 	.word	0x0800436d
 80042c4:	0800436d 	.word	0x0800436d
 80042c8:	0800436d 	.word	0x0800436d
 80042cc:	0800436d 	.word	0x0800436d
 80042d0:	0800436d 	.word	0x0800436d
 80042d4:	0800436d 	.word	0x0800436d
 80042d8:	0800434d 	.word	0x0800434d
 80042dc:	0800436d 	.word	0x0800436d
 80042e0:	0800436d 	.word	0x0800436d
 80042e4:	0800436d 	.word	0x0800436d
 80042e8:	0800436d 	.word	0x0800436d
 80042ec:	0800436d 	.word	0x0800436d
 80042f0:	0800436d 	.word	0x0800436d
 80042f4:	0800436d 	.word	0x0800436d
 80042f8:	08004355 	.word	0x08004355
 80042fc:	0800436d 	.word	0x0800436d
 8004300:	0800436d 	.word	0x0800436d
 8004304:	0800436d 	.word	0x0800436d
 8004308:	0800436d 	.word	0x0800436d
 800430c:	0800436d 	.word	0x0800436d
 8004310:	0800436d 	.word	0x0800436d
 8004314:	0800436d 	.word	0x0800436d
 8004318:	0800435d 	.word	0x0800435d
 800431c:	0800436d 	.word	0x0800436d
 8004320:	0800436d 	.word	0x0800436d
 8004324:	0800436d 	.word	0x0800436d
 8004328:	0800436d 	.word	0x0800436d
 800432c:	0800436d 	.word	0x0800436d
 8004330:	0800436d 	.word	0x0800436d
 8004334:	0800436d 	.word	0x0800436d
 8004338:	08004365 	.word	0x08004365
 800433c:	2301      	movs	r3, #1
 800433e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004342:	e326      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004344:	2304      	movs	r3, #4
 8004346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800434a:	e322      	b.n	8004992 <UART_SetConfig+0x7aa>
 800434c:	2308      	movs	r3, #8
 800434e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004352:	e31e      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004354:	2310      	movs	r3, #16
 8004356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800435a:	e31a      	b.n	8004992 <UART_SetConfig+0x7aa>
 800435c:	2320      	movs	r3, #32
 800435e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004362:	e316      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004364:	2340      	movs	r3, #64	; 0x40
 8004366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800436a:	e312      	b.n	8004992 <UART_SetConfig+0x7aa>
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004372:	e30e      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a6b      	ldr	r2, [pc, #428]	; (8004528 <UART_SetConfig+0x340>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d130      	bne.n	80043e0 <UART_SetConfig+0x1f8>
 800437e:	4b69      	ldr	r3, [pc, #420]	; (8004524 <UART_SetConfig+0x33c>)
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	2b05      	cmp	r3, #5
 8004388:	d826      	bhi.n	80043d8 <UART_SetConfig+0x1f0>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <UART_SetConfig+0x1a8>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043a9 	.word	0x080043a9
 8004394:	080043b1 	.word	0x080043b1
 8004398:	080043b9 	.word	0x080043b9
 800439c:	080043c1 	.word	0x080043c1
 80043a0:	080043c9 	.word	0x080043c9
 80043a4:	080043d1 	.word	0x080043d1
 80043a8:	2300      	movs	r3, #0
 80043aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ae:	e2f0      	b.n	8004992 <UART_SetConfig+0x7aa>
 80043b0:	2304      	movs	r3, #4
 80043b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043b6:	e2ec      	b.n	8004992 <UART_SetConfig+0x7aa>
 80043b8:	2308      	movs	r3, #8
 80043ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043be:	e2e8      	b.n	8004992 <UART_SetConfig+0x7aa>
 80043c0:	2310      	movs	r3, #16
 80043c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043c6:	e2e4      	b.n	8004992 <UART_SetConfig+0x7aa>
 80043c8:	2320      	movs	r3, #32
 80043ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ce:	e2e0      	b.n	8004992 <UART_SetConfig+0x7aa>
 80043d0:	2340      	movs	r3, #64	; 0x40
 80043d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043d6:	e2dc      	b.n	8004992 <UART_SetConfig+0x7aa>
 80043d8:	2380      	movs	r3, #128	; 0x80
 80043da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043de:	e2d8      	b.n	8004992 <UART_SetConfig+0x7aa>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a51      	ldr	r2, [pc, #324]	; (800452c <UART_SetConfig+0x344>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d130      	bne.n	800444c <UART_SetConfig+0x264>
 80043ea:	4b4e      	ldr	r3, [pc, #312]	; (8004524 <UART_SetConfig+0x33c>)
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	d826      	bhi.n	8004444 <UART_SetConfig+0x25c>
 80043f6:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <UART_SetConfig+0x214>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	08004415 	.word	0x08004415
 8004400:	0800441d 	.word	0x0800441d
 8004404:	08004425 	.word	0x08004425
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004435 	.word	0x08004435
 8004410:	0800443d 	.word	0x0800443d
 8004414:	2300      	movs	r3, #0
 8004416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800441a:	e2ba      	b.n	8004992 <UART_SetConfig+0x7aa>
 800441c:	2304      	movs	r3, #4
 800441e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004422:	e2b6      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004424:	2308      	movs	r3, #8
 8004426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800442a:	e2b2      	b.n	8004992 <UART_SetConfig+0x7aa>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004432:	e2ae      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004434:	2320      	movs	r3, #32
 8004436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800443a:	e2aa      	b.n	8004992 <UART_SetConfig+0x7aa>
 800443c:	2340      	movs	r3, #64	; 0x40
 800443e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004442:	e2a6      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800444a:	e2a2      	b.n	8004992 <UART_SetConfig+0x7aa>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a37      	ldr	r2, [pc, #220]	; (8004530 <UART_SetConfig+0x348>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d130      	bne.n	80044b8 <UART_SetConfig+0x2d0>
 8004456:	4b33      	ldr	r3, [pc, #204]	; (8004524 <UART_SetConfig+0x33c>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b05      	cmp	r3, #5
 8004460:	d826      	bhi.n	80044b0 <UART_SetConfig+0x2c8>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <UART_SetConfig+0x280>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	08004481 	.word	0x08004481
 800446c:	08004489 	.word	0x08004489
 8004470:	08004491 	.word	0x08004491
 8004474:	08004499 	.word	0x08004499
 8004478:	080044a1 	.word	0x080044a1
 800447c:	080044a9 	.word	0x080044a9
 8004480:	2300      	movs	r3, #0
 8004482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004486:	e284      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004488:	2304      	movs	r3, #4
 800448a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800448e:	e280      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004490:	2308      	movs	r3, #8
 8004492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004496:	e27c      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004498:	2310      	movs	r3, #16
 800449a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800449e:	e278      	b.n	8004992 <UART_SetConfig+0x7aa>
 80044a0:	2320      	movs	r3, #32
 80044a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044a6:	e274      	b.n	8004992 <UART_SetConfig+0x7aa>
 80044a8:	2340      	movs	r3, #64	; 0x40
 80044aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044ae:	e270      	b.n	8004992 <UART_SetConfig+0x7aa>
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044b6:	e26c      	b.n	8004992 <UART_SetConfig+0x7aa>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1d      	ldr	r2, [pc, #116]	; (8004534 <UART_SetConfig+0x34c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d142      	bne.n	8004548 <UART_SetConfig+0x360>
 80044c2:	4b18      	ldr	r3, [pc, #96]	; (8004524 <UART_SetConfig+0x33c>)
 80044c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	2b05      	cmp	r3, #5
 80044cc:	d838      	bhi.n	8004540 <UART_SetConfig+0x358>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <UART_SetConfig+0x2ec>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	080044ed 	.word	0x080044ed
 80044d8:	080044f5 	.word	0x080044f5
 80044dc:	080044fd 	.word	0x080044fd
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004539 	.word	0x08004539
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044f2:	e24e      	b.n	8004992 <UART_SetConfig+0x7aa>
 80044f4:	2304      	movs	r3, #4
 80044f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044fa:	e24a      	b.n	8004992 <UART_SetConfig+0x7aa>
 80044fc:	2308      	movs	r3, #8
 80044fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004502:	e246      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004504:	2310      	movs	r3, #16
 8004506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800450a:	e242      	b.n	8004992 <UART_SetConfig+0x7aa>
 800450c:	2320      	movs	r3, #32
 800450e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004512:	e23e      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004514:	cfff69f3 	.word	0xcfff69f3
 8004518:	58000c00 	.word	0x58000c00
 800451c:	11fff4ff 	.word	0x11fff4ff
 8004520:	40011000 	.word	0x40011000
 8004524:	58024400 	.word	0x58024400
 8004528:	40004400 	.word	0x40004400
 800452c:	40004800 	.word	0x40004800
 8004530:	40004c00 	.word	0x40004c00
 8004534:	40005000 	.word	0x40005000
 8004538:	2340      	movs	r3, #64	; 0x40
 800453a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800453e:	e228      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004546:	e224      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4ab1      	ldr	r2, [pc, #708]	; (8004814 <UART_SetConfig+0x62c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d176      	bne.n	8004640 <UART_SetConfig+0x458>
 8004552:	4bb1      	ldr	r3, [pc, #708]	; (8004818 <UART_SetConfig+0x630>)
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800455a:	2b28      	cmp	r3, #40	; 0x28
 800455c:	d86c      	bhi.n	8004638 <UART_SetConfig+0x450>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0x37c>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004609 	.word	0x08004609
 8004568:	08004639 	.word	0x08004639
 800456c:	08004639 	.word	0x08004639
 8004570:	08004639 	.word	0x08004639
 8004574:	08004639 	.word	0x08004639
 8004578:	08004639 	.word	0x08004639
 800457c:	08004639 	.word	0x08004639
 8004580:	08004639 	.word	0x08004639
 8004584:	08004611 	.word	0x08004611
 8004588:	08004639 	.word	0x08004639
 800458c:	08004639 	.word	0x08004639
 8004590:	08004639 	.word	0x08004639
 8004594:	08004639 	.word	0x08004639
 8004598:	08004639 	.word	0x08004639
 800459c:	08004639 	.word	0x08004639
 80045a0:	08004639 	.word	0x08004639
 80045a4:	08004619 	.word	0x08004619
 80045a8:	08004639 	.word	0x08004639
 80045ac:	08004639 	.word	0x08004639
 80045b0:	08004639 	.word	0x08004639
 80045b4:	08004639 	.word	0x08004639
 80045b8:	08004639 	.word	0x08004639
 80045bc:	08004639 	.word	0x08004639
 80045c0:	08004639 	.word	0x08004639
 80045c4:	08004621 	.word	0x08004621
 80045c8:	08004639 	.word	0x08004639
 80045cc:	08004639 	.word	0x08004639
 80045d0:	08004639 	.word	0x08004639
 80045d4:	08004639 	.word	0x08004639
 80045d8:	08004639 	.word	0x08004639
 80045dc:	08004639 	.word	0x08004639
 80045e0:	08004639 	.word	0x08004639
 80045e4:	08004629 	.word	0x08004629
 80045e8:	08004639 	.word	0x08004639
 80045ec:	08004639 	.word	0x08004639
 80045f0:	08004639 	.word	0x08004639
 80045f4:	08004639 	.word	0x08004639
 80045f8:	08004639 	.word	0x08004639
 80045fc:	08004639 	.word	0x08004639
 8004600:	08004639 	.word	0x08004639
 8004604:	08004631 	.word	0x08004631
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800460e:	e1c0      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004610:	2304      	movs	r3, #4
 8004612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004616:	e1bc      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004618:	2308      	movs	r3, #8
 800461a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800461e:	e1b8      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004620:	2310      	movs	r3, #16
 8004622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004626:	e1b4      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004628:	2320      	movs	r3, #32
 800462a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800462e:	e1b0      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004630:	2340      	movs	r3, #64	; 0x40
 8004632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004636:	e1ac      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004638:	2380      	movs	r3, #128	; 0x80
 800463a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800463e:	e1a8      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a75      	ldr	r2, [pc, #468]	; (800481c <UART_SetConfig+0x634>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d130      	bne.n	80046ac <UART_SetConfig+0x4c4>
 800464a:	4b73      	ldr	r3, [pc, #460]	; (8004818 <UART_SetConfig+0x630>)
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	2b05      	cmp	r3, #5
 8004654:	d826      	bhi.n	80046a4 <UART_SetConfig+0x4bc>
 8004656:	a201      	add	r2, pc, #4	; (adr r2, 800465c <UART_SetConfig+0x474>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	08004675 	.word	0x08004675
 8004660:	0800467d 	.word	0x0800467d
 8004664:	08004685 	.word	0x08004685
 8004668:	0800468d 	.word	0x0800468d
 800466c:	08004695 	.word	0x08004695
 8004670:	0800469d 	.word	0x0800469d
 8004674:	2300      	movs	r3, #0
 8004676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800467a:	e18a      	b.n	8004992 <UART_SetConfig+0x7aa>
 800467c:	2304      	movs	r3, #4
 800467e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004682:	e186      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004684:	2308      	movs	r3, #8
 8004686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800468a:	e182      	b.n	8004992 <UART_SetConfig+0x7aa>
 800468c:	2310      	movs	r3, #16
 800468e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004692:	e17e      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004694:	2320      	movs	r3, #32
 8004696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800469a:	e17a      	b.n	8004992 <UART_SetConfig+0x7aa>
 800469c:	2340      	movs	r3, #64	; 0x40
 800469e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046a2:	e176      	b.n	8004992 <UART_SetConfig+0x7aa>
 80046a4:	2380      	movs	r3, #128	; 0x80
 80046a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046aa:	e172      	b.n	8004992 <UART_SetConfig+0x7aa>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a5b      	ldr	r2, [pc, #364]	; (8004820 <UART_SetConfig+0x638>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d130      	bne.n	8004718 <UART_SetConfig+0x530>
 80046b6:	4b58      	ldr	r3, [pc, #352]	; (8004818 <UART_SetConfig+0x630>)
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d826      	bhi.n	8004710 <UART_SetConfig+0x528>
 80046c2:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <UART_SetConfig+0x4e0>)
 80046c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c8:	080046e1 	.word	0x080046e1
 80046cc:	080046e9 	.word	0x080046e9
 80046d0:	080046f1 	.word	0x080046f1
 80046d4:	080046f9 	.word	0x080046f9
 80046d8:	08004701 	.word	0x08004701
 80046dc:	08004709 	.word	0x08004709
 80046e0:	2300      	movs	r3, #0
 80046e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046e6:	e154      	b.n	8004992 <UART_SetConfig+0x7aa>
 80046e8:	2304      	movs	r3, #4
 80046ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ee:	e150      	b.n	8004992 <UART_SetConfig+0x7aa>
 80046f0:	2308      	movs	r3, #8
 80046f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046f6:	e14c      	b.n	8004992 <UART_SetConfig+0x7aa>
 80046f8:	2310      	movs	r3, #16
 80046fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046fe:	e148      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004700:	2320      	movs	r3, #32
 8004702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004706:	e144      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004708:	2340      	movs	r3, #64	; 0x40
 800470a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800470e:	e140      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004716:	e13c      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a41      	ldr	r2, [pc, #260]	; (8004824 <UART_SetConfig+0x63c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	f040 8082 	bne.w	8004828 <UART_SetConfig+0x640>
 8004724:	4b3c      	ldr	r3, [pc, #240]	; (8004818 <UART_SetConfig+0x630>)
 8004726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004728:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800472c:	2b28      	cmp	r3, #40	; 0x28
 800472e:	d86d      	bhi.n	800480c <UART_SetConfig+0x624>
 8004730:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <UART_SetConfig+0x550>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	080047dd 	.word	0x080047dd
 800473c:	0800480d 	.word	0x0800480d
 8004740:	0800480d 	.word	0x0800480d
 8004744:	0800480d 	.word	0x0800480d
 8004748:	0800480d 	.word	0x0800480d
 800474c:	0800480d 	.word	0x0800480d
 8004750:	0800480d 	.word	0x0800480d
 8004754:	0800480d 	.word	0x0800480d
 8004758:	080047e5 	.word	0x080047e5
 800475c:	0800480d 	.word	0x0800480d
 8004760:	0800480d 	.word	0x0800480d
 8004764:	0800480d 	.word	0x0800480d
 8004768:	0800480d 	.word	0x0800480d
 800476c:	0800480d 	.word	0x0800480d
 8004770:	0800480d 	.word	0x0800480d
 8004774:	0800480d 	.word	0x0800480d
 8004778:	080047ed 	.word	0x080047ed
 800477c:	0800480d 	.word	0x0800480d
 8004780:	0800480d 	.word	0x0800480d
 8004784:	0800480d 	.word	0x0800480d
 8004788:	0800480d 	.word	0x0800480d
 800478c:	0800480d 	.word	0x0800480d
 8004790:	0800480d 	.word	0x0800480d
 8004794:	0800480d 	.word	0x0800480d
 8004798:	080047f5 	.word	0x080047f5
 800479c:	0800480d 	.word	0x0800480d
 80047a0:	0800480d 	.word	0x0800480d
 80047a4:	0800480d 	.word	0x0800480d
 80047a8:	0800480d 	.word	0x0800480d
 80047ac:	0800480d 	.word	0x0800480d
 80047b0:	0800480d 	.word	0x0800480d
 80047b4:	0800480d 	.word	0x0800480d
 80047b8:	080047fd 	.word	0x080047fd
 80047bc:	0800480d 	.word	0x0800480d
 80047c0:	0800480d 	.word	0x0800480d
 80047c4:	0800480d 	.word	0x0800480d
 80047c8:	0800480d 	.word	0x0800480d
 80047cc:	0800480d 	.word	0x0800480d
 80047d0:	0800480d 	.word	0x0800480d
 80047d4:	0800480d 	.word	0x0800480d
 80047d8:	08004805 	.word	0x08004805
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047e2:	e0d6      	b.n	8004992 <UART_SetConfig+0x7aa>
 80047e4:	2304      	movs	r3, #4
 80047e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ea:	e0d2      	b.n	8004992 <UART_SetConfig+0x7aa>
 80047ec:	2308      	movs	r3, #8
 80047ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047f2:	e0ce      	b.n	8004992 <UART_SetConfig+0x7aa>
 80047f4:	2310      	movs	r3, #16
 80047f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047fa:	e0ca      	b.n	8004992 <UART_SetConfig+0x7aa>
 80047fc:	2320      	movs	r3, #32
 80047fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004802:	e0c6      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004804:	2340      	movs	r3, #64	; 0x40
 8004806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800480a:	e0c2      	b.n	8004992 <UART_SetConfig+0x7aa>
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004812:	e0be      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004814:	40011400 	.word	0x40011400
 8004818:	58024400 	.word	0x58024400
 800481c:	40007800 	.word	0x40007800
 8004820:	40007c00 	.word	0x40007c00
 8004824:	40011800 	.word	0x40011800
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4aad      	ldr	r2, [pc, #692]	; (8004ae4 <UART_SetConfig+0x8fc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d176      	bne.n	8004920 <UART_SetConfig+0x738>
 8004832:	4bad      	ldr	r3, [pc, #692]	; (8004ae8 <UART_SetConfig+0x900>)
 8004834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800483a:	2b28      	cmp	r3, #40	; 0x28
 800483c:	d86c      	bhi.n	8004918 <UART_SetConfig+0x730>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <UART_SetConfig+0x65c>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	080048e9 	.word	0x080048e9
 8004848:	08004919 	.word	0x08004919
 800484c:	08004919 	.word	0x08004919
 8004850:	08004919 	.word	0x08004919
 8004854:	08004919 	.word	0x08004919
 8004858:	08004919 	.word	0x08004919
 800485c:	08004919 	.word	0x08004919
 8004860:	08004919 	.word	0x08004919
 8004864:	080048f1 	.word	0x080048f1
 8004868:	08004919 	.word	0x08004919
 800486c:	08004919 	.word	0x08004919
 8004870:	08004919 	.word	0x08004919
 8004874:	08004919 	.word	0x08004919
 8004878:	08004919 	.word	0x08004919
 800487c:	08004919 	.word	0x08004919
 8004880:	08004919 	.word	0x08004919
 8004884:	080048f9 	.word	0x080048f9
 8004888:	08004919 	.word	0x08004919
 800488c:	08004919 	.word	0x08004919
 8004890:	08004919 	.word	0x08004919
 8004894:	08004919 	.word	0x08004919
 8004898:	08004919 	.word	0x08004919
 800489c:	08004919 	.word	0x08004919
 80048a0:	08004919 	.word	0x08004919
 80048a4:	08004901 	.word	0x08004901
 80048a8:	08004919 	.word	0x08004919
 80048ac:	08004919 	.word	0x08004919
 80048b0:	08004919 	.word	0x08004919
 80048b4:	08004919 	.word	0x08004919
 80048b8:	08004919 	.word	0x08004919
 80048bc:	08004919 	.word	0x08004919
 80048c0:	08004919 	.word	0x08004919
 80048c4:	08004909 	.word	0x08004909
 80048c8:	08004919 	.word	0x08004919
 80048cc:	08004919 	.word	0x08004919
 80048d0:	08004919 	.word	0x08004919
 80048d4:	08004919 	.word	0x08004919
 80048d8:	08004919 	.word	0x08004919
 80048dc:	08004919 	.word	0x08004919
 80048e0:	08004919 	.word	0x08004919
 80048e4:	08004911 	.word	0x08004911
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ee:	e050      	b.n	8004992 <UART_SetConfig+0x7aa>
 80048f0:	2304      	movs	r3, #4
 80048f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048f6:	e04c      	b.n	8004992 <UART_SetConfig+0x7aa>
 80048f8:	2308      	movs	r3, #8
 80048fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048fe:	e048      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004900:	2310      	movs	r3, #16
 8004902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004906:	e044      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004908:	2320      	movs	r3, #32
 800490a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800490e:	e040      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004910:	2340      	movs	r3, #64	; 0x40
 8004912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004916:	e03c      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004918:	2380      	movs	r3, #128	; 0x80
 800491a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800491e:	e038      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a71      	ldr	r2, [pc, #452]	; (8004aec <UART_SetConfig+0x904>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d130      	bne.n	800498c <UART_SetConfig+0x7a4>
 800492a:	4b6f      	ldr	r3, [pc, #444]	; (8004ae8 <UART_SetConfig+0x900>)
 800492c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	2b05      	cmp	r3, #5
 8004934:	d826      	bhi.n	8004984 <UART_SetConfig+0x79c>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <UART_SetConfig+0x754>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004955 	.word	0x08004955
 8004940:	0800495d 	.word	0x0800495d
 8004944:	08004965 	.word	0x08004965
 8004948:	0800496d 	.word	0x0800496d
 800494c:	08004975 	.word	0x08004975
 8004950:	0800497d 	.word	0x0800497d
 8004954:	2302      	movs	r3, #2
 8004956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800495a:	e01a      	b.n	8004992 <UART_SetConfig+0x7aa>
 800495c:	2304      	movs	r3, #4
 800495e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004962:	e016      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004964:	2308      	movs	r3, #8
 8004966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800496a:	e012      	b.n	8004992 <UART_SetConfig+0x7aa>
 800496c:	2310      	movs	r3, #16
 800496e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004972:	e00e      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004974:	2320      	movs	r3, #32
 8004976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800497a:	e00a      	b.n	8004992 <UART_SetConfig+0x7aa>
 800497c:	2340      	movs	r3, #64	; 0x40
 800497e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004982:	e006      	b.n	8004992 <UART_SetConfig+0x7aa>
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800498a:	e002      	b.n	8004992 <UART_SetConfig+0x7aa>
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a55      	ldr	r2, [pc, #340]	; (8004aec <UART_SetConfig+0x904>)
 8004998:	4293      	cmp	r3, r2
 800499a:	f040 80f0 	bne.w	8004b7e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800499e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	dc46      	bgt.n	8004a34 <UART_SetConfig+0x84c>
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	db75      	blt.n	8004a96 <UART_SetConfig+0x8ae>
 80049aa:	3b02      	subs	r3, #2
 80049ac:	2b1e      	cmp	r3, #30
 80049ae:	d872      	bhi.n	8004a96 <UART_SetConfig+0x8ae>
 80049b0:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <UART_SetConfig+0x7d0>)
 80049b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b6:	bf00      	nop
 80049b8:	08004a3b 	.word	0x08004a3b
 80049bc:	08004a97 	.word	0x08004a97
 80049c0:	08004a43 	.word	0x08004a43
 80049c4:	08004a97 	.word	0x08004a97
 80049c8:	08004a97 	.word	0x08004a97
 80049cc:	08004a97 	.word	0x08004a97
 80049d0:	08004a53 	.word	0x08004a53
 80049d4:	08004a97 	.word	0x08004a97
 80049d8:	08004a97 	.word	0x08004a97
 80049dc:	08004a97 	.word	0x08004a97
 80049e0:	08004a97 	.word	0x08004a97
 80049e4:	08004a97 	.word	0x08004a97
 80049e8:	08004a97 	.word	0x08004a97
 80049ec:	08004a97 	.word	0x08004a97
 80049f0:	08004a63 	.word	0x08004a63
 80049f4:	08004a97 	.word	0x08004a97
 80049f8:	08004a97 	.word	0x08004a97
 80049fc:	08004a97 	.word	0x08004a97
 8004a00:	08004a97 	.word	0x08004a97
 8004a04:	08004a97 	.word	0x08004a97
 8004a08:	08004a97 	.word	0x08004a97
 8004a0c:	08004a97 	.word	0x08004a97
 8004a10:	08004a97 	.word	0x08004a97
 8004a14:	08004a97 	.word	0x08004a97
 8004a18:	08004a97 	.word	0x08004a97
 8004a1c:	08004a97 	.word	0x08004a97
 8004a20:	08004a97 	.word	0x08004a97
 8004a24:	08004a97 	.word	0x08004a97
 8004a28:	08004a97 	.word	0x08004a97
 8004a2c:	08004a97 	.word	0x08004a97
 8004a30:	08004a89 	.word	0x08004a89
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d02a      	beq.n	8004a8e <UART_SetConfig+0x8a6>
 8004a38:	e02d      	b.n	8004a96 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004a3a:	f7fe fecd 	bl	80037d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004a3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004a40:	e02f      	b.n	8004aa2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a42:	f107 0314 	add.w	r3, r7, #20
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe fedc 	bl	8003804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a50:	e027      	b.n	8004aa2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a52:	f107 0308 	add.w	r3, r7, #8
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff f828 	bl	8003aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a60:	e01f      	b.n	8004aa2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a62:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <UART_SetConfig+0x900>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <UART_SetConfig+0x900>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	08db      	lsrs	r3, r3, #3
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <UART_SetConfig+0x908>)
 8004a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a80:	e00f      	b.n	8004aa2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004a82:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <UART_SetConfig+0x908>)
 8004a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a86:	e00c      	b.n	8004aa2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a88:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <UART_SetConfig+0x90c>)
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a8c:	e009      	b.n	8004aa2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a94:	e005      	b.n	8004aa2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004aa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 81e6 	beq.w	8004e76 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <UART_SetConfig+0x910>)
 8004ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004abc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	4413      	add	r3, r2
 8004ac8:	6a3a      	ldr	r2, [r7, #32]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d305      	bcc.n	8004ada <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ad4:	6a3a      	ldr	r2, [r7, #32]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d910      	bls.n	8004afc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004ae0:	e1c9      	b.n	8004e76 <UART_SetConfig+0xc8e>
 8004ae2:	bf00      	nop
 8004ae4:	40011c00 	.word	0x40011c00
 8004ae8:	58024400 	.word	0x58024400
 8004aec:	58000c00 	.word	0x58000c00
 8004af0:	03d09000 	.word	0x03d09000
 8004af4:	003d0900 	.word	0x003d0900
 8004af8:	08010f58 	.word	0x08010f58
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	4618      	mov	r0, r3
 8004b00:	f04f 0100 	mov.w	r1, #0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	4ac1      	ldr	r2, [pc, #772]	; (8004e10 <UART_SetConfig+0xc28>)
 8004b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	f7fb fc44 	bl	80003a0 <__aeabi_uldivmod>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	020b      	lsls	r3, r1, #8
 8004b2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b2e:	0202      	lsls	r2, r0, #8
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	6849      	ldr	r1, [r1, #4]
 8004b34:	0849      	lsrs	r1, r1, #1
 8004b36:	4608      	mov	r0, r1
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	1814      	adds	r4, r2, r0
 8004b3e:	eb43 0501 	adc.w	r5, r3, r1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	4629      	mov	r1, r5
 8004b50:	f7fb fc26 	bl	80003a0 <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4613      	mov	r3, r2
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b62:	d308      	bcc.n	8004b76 <UART_SetConfig+0x98e>
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b6a:	d204      	bcs.n	8004b76 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b72:	60da      	str	r2, [r3, #12]
 8004b74:	e17f      	b.n	8004e76 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004b7c:	e17b      	b.n	8004e76 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b86:	f040 80bd 	bne.w	8004d04 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8004b8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	dc48      	bgt.n	8004c24 <UART_SetConfig+0xa3c>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	db7b      	blt.n	8004c8e <UART_SetConfig+0xaa6>
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d879      	bhi.n	8004c8e <UART_SetConfig+0xaa6>
 8004b9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <UART_SetConfig+0x9b8>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004c2b 	.word	0x08004c2b
 8004ba4:	08004c33 	.word	0x08004c33
 8004ba8:	08004c8f 	.word	0x08004c8f
 8004bac:	08004c8f 	.word	0x08004c8f
 8004bb0:	08004c3b 	.word	0x08004c3b
 8004bb4:	08004c8f 	.word	0x08004c8f
 8004bb8:	08004c8f 	.word	0x08004c8f
 8004bbc:	08004c8f 	.word	0x08004c8f
 8004bc0:	08004c4b 	.word	0x08004c4b
 8004bc4:	08004c8f 	.word	0x08004c8f
 8004bc8:	08004c8f 	.word	0x08004c8f
 8004bcc:	08004c8f 	.word	0x08004c8f
 8004bd0:	08004c8f 	.word	0x08004c8f
 8004bd4:	08004c8f 	.word	0x08004c8f
 8004bd8:	08004c8f 	.word	0x08004c8f
 8004bdc:	08004c8f 	.word	0x08004c8f
 8004be0:	08004c5b 	.word	0x08004c5b
 8004be4:	08004c8f 	.word	0x08004c8f
 8004be8:	08004c8f 	.word	0x08004c8f
 8004bec:	08004c8f 	.word	0x08004c8f
 8004bf0:	08004c8f 	.word	0x08004c8f
 8004bf4:	08004c8f 	.word	0x08004c8f
 8004bf8:	08004c8f 	.word	0x08004c8f
 8004bfc:	08004c8f 	.word	0x08004c8f
 8004c00:	08004c8f 	.word	0x08004c8f
 8004c04:	08004c8f 	.word	0x08004c8f
 8004c08:	08004c8f 	.word	0x08004c8f
 8004c0c:	08004c8f 	.word	0x08004c8f
 8004c10:	08004c8f 	.word	0x08004c8f
 8004c14:	08004c8f 	.word	0x08004c8f
 8004c18:	08004c8f 	.word	0x08004c8f
 8004c1c:	08004c8f 	.word	0x08004c8f
 8004c20:	08004c81 	.word	0x08004c81
 8004c24:	2b40      	cmp	r3, #64	; 0x40
 8004c26:	d02e      	beq.n	8004c86 <UART_SetConfig+0xa9e>
 8004c28:	e031      	b.n	8004c8e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c2a:	f7fd fe9d 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8004c2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004c30:	e033      	b.n	8004c9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c32:	f7fd feaf 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8004c36:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004c38:	e02f      	b.n	8004c9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c3a:	f107 0314 	add.w	r3, r7, #20
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fde0 	bl	8003804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c48:	e027      	b.n	8004c9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c4a:	f107 0308 	add.w	r3, r7, #8
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe ff2c 	bl	8003aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c58:	e01f      	b.n	8004c9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c5a:	4b6e      	ldr	r3, [pc, #440]	; (8004e14 <UART_SetConfig+0xc2c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c66:	4b6b      	ldr	r3, [pc, #428]	; (8004e14 <UART_SetConfig+0xc2c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	08db      	lsrs	r3, r3, #3
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	4a69      	ldr	r2, [pc, #420]	; (8004e18 <UART_SetConfig+0xc30>)
 8004c72:	fa22 f303 	lsr.w	r3, r2, r3
 8004c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c78:	e00f      	b.n	8004c9a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8004c7a:	4b67      	ldr	r3, [pc, #412]	; (8004e18 <UART_SetConfig+0xc30>)
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c7e:	e00c      	b.n	8004c9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c80:	4b66      	ldr	r3, [pc, #408]	; (8004e1c <UART_SetConfig+0xc34>)
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c84:	e009      	b.n	8004c9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c8c:	e005      	b.n	8004c9a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004c98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80ea 	beq.w	8004e76 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	4a5a      	ldr	r2, [pc, #360]	; (8004e10 <UART_SetConfig+0xc28>)
 8004ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cac:	461a      	mov	r2, r3
 8004cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cb4:	005a      	lsls	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	441a      	add	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	2b0f      	cmp	r3, #15
 8004ccc:	d916      	bls.n	8004cfc <UART_SetConfig+0xb14>
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd4:	d212      	bcs.n	8004cfc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f023 030f 	bic.w	r3, r3, #15
 8004cde:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004cf8:	60da      	str	r2, [r3, #12]
 8004cfa:	e0bc      	b.n	8004e76 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004d02:	e0b8      	b.n	8004e76 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	dc4b      	bgt.n	8004da4 <UART_SetConfig+0xbbc>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f2c0 8087 	blt.w	8004e20 <UART_SetConfig+0xc38>
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	f200 8084 	bhi.w	8004e20 <UART_SetConfig+0xc38>
 8004d18:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <UART_SetConfig+0xb38>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004dab 	.word	0x08004dab
 8004d24:	08004db3 	.word	0x08004db3
 8004d28:	08004e21 	.word	0x08004e21
 8004d2c:	08004e21 	.word	0x08004e21
 8004d30:	08004dbb 	.word	0x08004dbb
 8004d34:	08004e21 	.word	0x08004e21
 8004d38:	08004e21 	.word	0x08004e21
 8004d3c:	08004e21 	.word	0x08004e21
 8004d40:	08004dcb 	.word	0x08004dcb
 8004d44:	08004e21 	.word	0x08004e21
 8004d48:	08004e21 	.word	0x08004e21
 8004d4c:	08004e21 	.word	0x08004e21
 8004d50:	08004e21 	.word	0x08004e21
 8004d54:	08004e21 	.word	0x08004e21
 8004d58:	08004e21 	.word	0x08004e21
 8004d5c:	08004e21 	.word	0x08004e21
 8004d60:	08004ddb 	.word	0x08004ddb
 8004d64:	08004e21 	.word	0x08004e21
 8004d68:	08004e21 	.word	0x08004e21
 8004d6c:	08004e21 	.word	0x08004e21
 8004d70:	08004e21 	.word	0x08004e21
 8004d74:	08004e21 	.word	0x08004e21
 8004d78:	08004e21 	.word	0x08004e21
 8004d7c:	08004e21 	.word	0x08004e21
 8004d80:	08004e21 	.word	0x08004e21
 8004d84:	08004e21 	.word	0x08004e21
 8004d88:	08004e21 	.word	0x08004e21
 8004d8c:	08004e21 	.word	0x08004e21
 8004d90:	08004e21 	.word	0x08004e21
 8004d94:	08004e21 	.word	0x08004e21
 8004d98:	08004e21 	.word	0x08004e21
 8004d9c:	08004e21 	.word	0x08004e21
 8004da0:	08004e01 	.word	0x08004e01
 8004da4:	2b40      	cmp	r3, #64	; 0x40
 8004da6:	d02e      	beq.n	8004e06 <UART_SetConfig+0xc1e>
 8004da8:	e03a      	b.n	8004e20 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004daa:	f7fd fddd 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8004dae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004db0:	e03c      	b.n	8004e2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db2:	f7fd fdef 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8004db6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004db8:	e038      	b.n	8004e2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dba:	f107 0314 	add.w	r3, r7, #20
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fe fd20 	bl	8003804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dc8:	e030      	b.n	8004e2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dca:	f107 0308 	add.w	r3, r7, #8
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fe6c 	bl	8003aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dd8:	e028      	b.n	8004e2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dda:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <UART_SetConfig+0xc2c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004de6:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <UART_SetConfig+0xc2c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	08db      	lsrs	r3, r3, #3
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	4a09      	ldr	r2, [pc, #36]	; (8004e18 <UART_SetConfig+0xc30>)
 8004df2:	fa22 f303 	lsr.w	r3, r2, r3
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004df8:	e018      	b.n	8004e2c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <UART_SetConfig+0xc30>)
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dfe:	e015      	b.n	8004e2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e00:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <UART_SetConfig+0xc34>)
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e04:	e012      	b.n	8004e2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e0c:	e00e      	b.n	8004e2c <UART_SetConfig+0xc44>
 8004e0e:	bf00      	nop
 8004e10:	08010f58 	.word	0x08010f58
 8004e14:	58024400 	.word	0x58024400
 8004e18:	03d09000 	.word	0x03d09000
 8004e1c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004e2a:	bf00      	nop
    }

    if (pclk != 0U)
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d021      	beq.n	8004e76 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	4a1a      	ldr	r2, [pc, #104]	; (8004ea0 <UART_SetConfig+0xcb8>)
 8004e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	441a      	add	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	2b0f      	cmp	r3, #15
 8004e5a:	d909      	bls.n	8004e70 <UART_SetConfig+0xc88>
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e62:	d205      	bcs.n	8004e70 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	e002      	b.n	8004e76 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004e92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3738      	adds	r7, #56	; 0x38
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	08010f58 	.word	0x08010f58

08004ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01a      	beq.n	8004fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa2:	d10a      	bne.n	8004fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]
  }
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ff8:	f7fc f94a 	bl	8001290 <HAL_GetTick>
 8004ffc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b08      	cmp	r3, #8
 800500a:	d10e      	bne.n	800502a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800500c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f82f 	bl	800507e <UART_WaitOnFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e025      	b.n	8005076 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b04      	cmp	r3, #4
 8005036:	d10e      	bne.n	8005056 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f819 	bl	800507e <UART_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e00f      	b.n	8005076 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b09c      	sub	sp, #112	; 0x70
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	4613      	mov	r3, r2
 800508c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508e:	e0a9      	b.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	f000 80a5 	beq.w	80051e4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509a:	f7fc f8f9 	bl	8001290 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d302      	bcc.n	80050b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80050aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d140      	bne.n	8005132 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b8:	e853 3f00 	ldrex	r3, [r3]
 80050bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050c4:	667b      	str	r3, [r7, #100]	; 0x64
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e6      	bne.n	80050b0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3308      	adds	r3, #8
 80050e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	663b      	str	r3, [r7, #96]	; 0x60
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3308      	adds	r3, #8
 8005100:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005102:	64ba      	str	r2, [r7, #72]	; 0x48
 8005104:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e5      	bne.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2220      	movs	r2, #32
 8005122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e069      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d051      	beq.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800514a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514e:	d149      	bne.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005158:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800516e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
 800517a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800517e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e6      	bne.n	800515a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3308      	adds	r3, #8
 8005192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	613b      	str	r3, [r7, #16]
   return(result);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3308      	adds	r3, #8
 80051aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051ac:	623a      	str	r2, [r7, #32]
 80051ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	69f9      	ldr	r1, [r7, #28]
 80051b2:	6a3a      	ldr	r2, [r7, #32]
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e5      	bne.n	800518c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e010      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4013      	ands	r3, r2
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	429a      	cmp	r2, r3
 8005200:	f43f af46 	beq.w	8005090 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3770      	adds	r7, #112	; 0x70
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800520e:	b480      	push	{r7}
 8005210:	b085      	sub	sp, #20
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_UARTEx_DisableFifoMode+0x16>
 8005220:	2302      	movs	r3, #2
 8005222:	e027      	b.n	8005274 <HAL_UARTEx_DisableFifoMode+0x66>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2224      	movs	r2, #36	; 0x24
 8005230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005252:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005294:	2302      	movs	r3, #2
 8005296:	e02d      	b.n	80052f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2224      	movs	r2, #36	; 0x24
 80052a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0201 	bic.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f84f 	bl	8005378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005310:	2302      	movs	r3, #2
 8005312:	e02d      	b.n	8005370 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2224      	movs	r2, #36	; 0x24
 8005320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0201 	bic.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f811 	bl	8005378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2220      	movs	r2, #32
 8005362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005384:	2b00      	cmp	r3, #0
 8005386:	d108      	bne.n	800539a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005398:	e031      	b.n	80053fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800539a:	2310      	movs	r3, #16
 800539c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800539e:	2310      	movs	r3, #16
 80053a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	0e5b      	lsrs	r3, r3, #25
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	0f5b      	lsrs	r3, r3, #29
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053c2:	7bbb      	ldrb	r3, [r7, #14]
 80053c4:	7b3a      	ldrb	r2, [r7, #12]
 80053c6:	4911      	ldr	r1, [pc, #68]	; (800540c <UARTEx_SetNbDataToProcess+0x94>)
 80053c8:	5c8a      	ldrb	r2, [r1, r2]
 80053ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053ce:	7b3a      	ldrb	r2, [r7, #12]
 80053d0:	490f      	ldr	r1, [pc, #60]	; (8005410 <UARTEx_SetNbDataToProcess+0x98>)
 80053d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80053d8:	b29a      	uxth	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	7b7a      	ldrb	r2, [r7, #13]
 80053e4:	4909      	ldr	r1, [pc, #36]	; (800540c <UARTEx_SetNbDataToProcess+0x94>)
 80053e6:	5c8a      	ldrb	r2, [r1, r2]
 80053e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053ec:	7b7a      	ldrb	r2, [r7, #13]
 80053ee:	4908      	ldr	r1, [pc, #32]	; (8005410 <UARTEx_SetNbDataToProcess+0x98>)
 80053f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80053fe:	bf00      	nop
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	08010f70 	.word	0x08010f70
 8005410:	08010f78 	.word	0x08010f78

08005414 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	2101      	movs	r1, #1
 8005422:	4897      	ldr	r0, [pc, #604]	; (8005680 <network_configure_activations+0x26c>)
 8005424:	f000 fe66 	bl	80060f4 <ai_platform_get_activations_map>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 81dc 	beq.w	80057e8 <network_configure_activations+0x3d4>
    /* Updating activations (byte) offsets */
    
    serving_default_input0_output_array.data = AI_PTR(g_network_activations_map[0] + 21660);
 8005430:	4b93      	ldr	r3, [pc, #588]	; (8005680 <network_configure_activations+0x26c>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	f245 439c 	movw	r3, #21660	; 0x549c
 8005438:	4413      	add	r3, r2
 800543a:	4a92      	ldr	r2, [pc, #584]	; (8005684 <network_configure_activations+0x270>)
 800543c:	6093      	str	r3, [r2, #8]
    serving_default_input0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 21660);
 800543e:	4b90      	ldr	r3, [pc, #576]	; (8005680 <network_configure_activations+0x26c>)
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	f245 439c 	movw	r3, #21660	; 0x549c
 8005446:	4413      	add	r3, r2
 8005448:	4a8e      	ldr	r2, [pc, #568]	; (8005684 <network_configure_activations+0x270>)
 800544a:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 20624);
 800544c:	4b8c      	ldr	r3, [pc, #560]	; (8005680 <network_configure_activations+0x26c>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	f245 0390 	movw	r3, #20624	; 0x5090
 8005454:	4413      	add	r3, r2
 8005456:	4a8c      	ldr	r2, [pc, #560]	; (8005688 <network_configure_activations+0x274>)
 8005458:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 20624);
 800545a:	4b89      	ldr	r3, [pc, #548]	; (8005680 <network_configure_activations+0x26c>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	f245 0390 	movw	r3, #20624	; 0x5090
 8005462:	4413      	add	r3, r2
 8005464:	4a88      	ldr	r2, [pc, #544]	; (8005688 <network_configure_activations+0x274>)
 8005466:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_output_array.data = AI_PTR(g_network_activations_map[0] + 4240);
 8005468:	4b85      	ldr	r3, [pc, #532]	; (8005680 <network_configure_activations+0x26c>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	f241 0390 	movw	r3, #4240	; 0x1090
 8005470:	4413      	add	r3, r2
 8005472:	4a86      	ldr	r2, [pc, #536]	; (800568c <network_configure_activations+0x278>)
 8005474:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4240);
 8005476:	4b82      	ldr	r3, [pc, #520]	; (8005680 <network_configure_activations+0x26c>)
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	f241 0390 	movw	r3, #4240	; 0x1090
 800547e:	4413      	add	r3, r2
 8005480:	4a82      	ldr	r2, [pc, #520]	; (800568c <network_configure_activations+0x278>)
 8005482:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 20624);
 8005484:	4b7e      	ldr	r3, [pc, #504]	; (8005680 <network_configure_activations+0x26c>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	f245 0390 	movw	r3, #20624	; 0x5090
 800548c:	4413      	add	r3, r2
 800548e:	4a80      	ldr	r2, [pc, #512]	; (8005690 <network_configure_activations+0x27c>)
 8005490:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 20624);
 8005492:	4b7b      	ldr	r3, [pc, #492]	; (8005680 <network_configure_activations+0x26c>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	f245 0390 	movw	r3, #20624	; 0x5090
 800549a:	4413      	add	r3, r2
 800549c:	4a7c      	ldr	r2, [pc, #496]	; (8005690 <network_configure_activations+0x27c>)
 800549e:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 26400);
 80054a0:	4b77      	ldr	r3, [pc, #476]	; (8005680 <network_configure_activations+0x26c>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	f246 7320 	movw	r3, #26400	; 0x6720
 80054a8:	4413      	add	r3, r2
 80054aa:	4a7a      	ldr	r2, [pc, #488]	; (8005694 <network_configure_activations+0x280>)
 80054ac:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 26400);
 80054ae:	4b74      	ldr	r3, [pc, #464]	; (8005680 <network_configure_activations+0x26c>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	f246 7320 	movw	r3, #26400	; 0x6720
 80054b6:	4413      	add	r3, r2
 80054b8:	4a76      	ldr	r2, [pc, #472]	; (8005694 <network_configure_activations+0x280>)
 80054ba:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 20480);
 80054bc:	4b70      	ldr	r3, [pc, #448]	; (8005680 <network_configure_activations+0x26c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80054c4:	4a74      	ldr	r2, [pc, #464]	; (8005698 <network_configure_activations+0x284>)
 80054c6:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 20480);
 80054c8:	4b6d      	ldr	r3, [pc, #436]	; (8005680 <network_configure_activations+0x26c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80054d0:	4a71      	ldr	r2, [pc, #452]	; (8005698 <network_configure_activations+0x284>)
 80054d2:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80054d4:	4b6a      	ldr	r3, [pc, #424]	; (8005680 <network_configure_activations+0x26c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a70      	ldr	r2, [pc, #448]	; (800569c <network_configure_activations+0x288>)
 80054da:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80054dc:	4b68      	ldr	r3, [pc, #416]	; (8005680 <network_configure_activations+0x26c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a6e      	ldr	r2, [pc, #440]	; (800569c <network_configure_activations+0x288>)
 80054e2:	60d3      	str	r3, [r2, #12]
    
    eltwise_3_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80054e4:	4b66      	ldr	r3, [pc, #408]	; (8005680 <network_configure_activations+0x26c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a6d      	ldr	r2, [pc, #436]	; (80056a0 <network_configure_activations+0x28c>)
 80054ea:	6093      	str	r3, [r2, #8]
    eltwise_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80054ec:	4b64      	ldr	r3, [pc, #400]	; (8005680 <network_configure_activations+0x26c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a6b      	ldr	r2, [pc, #428]	; (80056a0 <network_configure_activations+0x28c>)
 80054f2:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 20480);
 80054f4:	4b62      	ldr	r3, [pc, #392]	; (8005680 <network_configure_activations+0x26c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80054fc:	4a69      	ldr	r2, [pc, #420]	; (80056a4 <network_configure_activations+0x290>)
 80054fe:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 20480);
 8005500:	4b5f      	ldr	r3, [pc, #380]	; (8005680 <network_configure_activations+0x26c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8005508:	4a66      	ldr	r2, [pc, #408]	; (80056a4 <network_configure_activations+0x290>)
 800550a:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 26400);
 800550c:	4b5c      	ldr	r3, [pc, #368]	; (8005680 <network_configure_activations+0x26c>)
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	f246 7320 	movw	r3, #26400	; 0x6720
 8005514:	4413      	add	r3, r2
 8005516:	4a64      	ldr	r2, [pc, #400]	; (80056a8 <network_configure_activations+0x294>)
 8005518:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 26400);
 800551a:	4b59      	ldr	r3, [pc, #356]	; (8005680 <network_configure_activations+0x26c>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	f246 7320 	movw	r3, #26400	; 0x6720
 8005522:	4413      	add	r3, r2
 8005524:	4a60      	ldr	r2, [pc, #384]	; (80056a8 <network_configure_activations+0x294>)
 8005526:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_output_array.data = AI_PTR(g_network_activations_map[0] + 27680);
 8005528:	4b55      	ldr	r3, [pc, #340]	; (8005680 <network_configure_activations+0x26c>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	f646 4320 	movw	r3, #27680	; 0x6c20
 8005530:	4413      	add	r3, r2
 8005532:	4a5e      	ldr	r2, [pc, #376]	; (80056ac <network_configure_activations+0x298>)
 8005534:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 27680);
 8005536:	4b52      	ldr	r3, [pc, #328]	; (8005680 <network_configure_activations+0x26c>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	f646 4320 	movw	r3, #27680	; 0x6c20
 800553e:	4413      	add	r3, r2
 8005540:	4a5a      	ldr	r2, [pc, #360]	; (80056ac <network_configure_activations+0x298>)
 8005542:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005544:	4b4e      	ldr	r3, [pc, #312]	; (8005680 <network_configure_activations+0x26c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a59      	ldr	r2, [pc, #356]	; (80056b0 <network_configure_activations+0x29c>)
 800554a:	6093      	str	r3, [r2, #8]
    conv2d_6_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800554c:	4b4c      	ldr	r3, [pc, #304]	; (8005680 <network_configure_activations+0x26c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a57      	ldr	r2, [pc, #348]	; (80056b0 <network_configure_activations+0x29c>)
 8005552:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_output_array.data = AI_PTR(g_network_activations_map[0] + 5920);
 8005554:	4b4a      	ldr	r3, [pc, #296]	; (8005680 <network_configure_activations+0x26c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f503 53b9 	add.w	r3, r3, #5920	; 0x1720
 800555c:	4a55      	ldr	r2, [pc, #340]	; (80056b4 <network_configure_activations+0x2a0>)
 800555e:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 5920);
 8005560:	4b47      	ldr	r3, [pc, #284]	; (8005680 <network_configure_activations+0x26c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f503 53b9 	add.w	r3, r3, #5920	; 0x1720
 8005568:	4a52      	ldr	r2, [pc, #328]	; (80056b4 <network_configure_activations+0x2a0>)
 800556a:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800556c:	4b44      	ldr	r3, [pc, #272]	; (8005680 <network_configure_activations+0x26c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a51      	ldr	r2, [pc, #324]	; (80056b8 <network_configure_activations+0x2a4>)
 8005572:	6093      	str	r3, [r2, #8]
    conv2d_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005574:	4b42      	ldr	r3, [pc, #264]	; (8005680 <network_configure_activations+0x26c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a4f      	ldr	r2, [pc, #316]	; (80056b8 <network_configure_activations+0x2a4>)
 800557a:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[0] + 11040);
 800557c:	4b40      	ldr	r3, [pc, #256]	; (8005680 <network_configure_activations+0x26c>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	f642 3320 	movw	r3, #11040	; 0x2b20
 8005584:	4413      	add	r3, r2
 8005586:	4a4d      	ldr	r2, [pc, #308]	; (80056bc <network_configure_activations+0x2a8>)
 8005588:	6093      	str	r3, [r2, #8]
    conv2d_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 11040);
 800558a:	4b3d      	ldr	r3, [pc, #244]	; (8005680 <network_configure_activations+0x26c>)
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	f642 3320 	movw	r3, #11040	; 0x2b20
 8005592:	4413      	add	r3, r2
 8005594:	4a49      	ldr	r2, [pc, #292]	; (80056bc <network_configure_activations+0x2a8>)
 8005596:	60d3      	str	r3, [r2, #12]
    
    eltwise_8_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005598:	4b39      	ldr	r3, [pc, #228]	; (8005680 <network_configure_activations+0x26c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a48      	ldr	r2, [pc, #288]	; (80056c0 <network_configure_activations+0x2ac>)
 800559e:	6093      	str	r3, [r2, #8]
    eltwise_8_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80055a0:	4b37      	ldr	r3, [pc, #220]	; (8005680 <network_configure_activations+0x26c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a46      	ldr	r2, [pc, #280]	; (80056c0 <network_configure_activations+0x2ac>)
 80055a6:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 5120);
 80055a8:	4b35      	ldr	r3, [pc, #212]	; (8005680 <network_configure_activations+0x26c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80055b0:	4a44      	ldr	r2, [pc, #272]	; (80056c4 <network_configure_activations+0x2b0>)
 80055b2:	6093      	str	r3, [r2, #8]
    conv2d_9_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 5120);
 80055b4:	4b32      	ldr	r3, [pc, #200]	; (8005680 <network_configure_activations+0x26c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80055bc:	4a41      	ldr	r2, [pc, #260]	; (80056c4 <network_configure_activations+0x2b0>)
 80055be:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 11136);
 80055c0:	4b2f      	ldr	r3, [pc, #188]	; (8005680 <network_configure_activations+0x26c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f503 532e 	add.w	r3, r3, #11136	; 0x2b80
 80055c8:	4a3f      	ldr	r2, [pc, #252]	; (80056c8 <network_configure_activations+0x2b4>)
 80055ca:	6093      	str	r3, [r2, #8]
    conv2d_9_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 11136);
 80055cc:	4b2c      	ldr	r3, [pc, #176]	; (8005680 <network_configure_activations+0x26c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f503 532e 	add.w	r3, r3, #11136	; 0x2b80
 80055d4:	4a3c      	ldr	r2, [pc, #240]	; (80056c8 <network_configure_activations+0x2b4>)
 80055d6:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_output_array.data = AI_PTR(g_network_activations_map[0] + 12544);
 80055d8:	4b29      	ldr	r3, [pc, #164]	; (8005680 <network_configure_activations+0x26c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 80055e0:	4a3a      	ldr	r2, [pc, #232]	; (80056cc <network_configure_activations+0x2b8>)
 80055e2:	6093      	str	r3, [r2, #8]
    conv2d_9_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12544);
 80055e4:	4b26      	ldr	r3, [pc, #152]	; (8005680 <network_configure_activations+0x26c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 80055ec:	4a37      	ldr	r2, [pc, #220]	; (80056cc <network_configure_activations+0x2b8>)
 80055ee:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80055f0:	4b23      	ldr	r3, [pc, #140]	; (8005680 <network_configure_activations+0x26c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a36      	ldr	r2, [pc, #216]	; (80056d0 <network_configure_activations+0x2bc>)
 80055f6:	6093      	str	r3, [r2, #8]
    conv2d_11_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80055f8:	4b21      	ldr	r3, [pc, #132]	; (8005680 <network_configure_activations+0x26c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a34      	ldr	r2, [pc, #208]	; (80056d0 <network_configure_activations+0x2bc>)
 80055fe:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_output_array.data = AI_PTR(g_network_activations_map[0] + 6896);
 8005600:	4b1f      	ldr	r3, [pc, #124]	; (8005680 <network_configure_activations+0x26c>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	f641 23f0 	movw	r3, #6896	; 0x1af0
 8005608:	4413      	add	r3, r2
 800560a:	4a32      	ldr	r2, [pc, #200]	; (80056d4 <network_configure_activations+0x2c0>)
 800560c:	6093      	str	r3, [r2, #8]
    conv2d_11_output_array.data_start = AI_PTR(g_network_activations_map[0] + 6896);
 800560e:	4b1c      	ldr	r3, [pc, #112]	; (8005680 <network_configure_activations+0x26c>)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	f641 23f0 	movw	r3, #6896	; 0x1af0
 8005616:	4413      	add	r3, r2
 8005618:	4a2e      	ldr	r2, [pc, #184]	; (80056d4 <network_configure_activations+0x2c0>)
 800561a:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 9968);
 800561c:	4b18      	ldr	r3, [pc, #96]	; (8005680 <network_configure_activations+0x26c>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	f242 63f0 	movw	r3, #9968	; 0x26f0
 8005624:	4413      	add	r3, r2
 8005626:	4a2c      	ldr	r2, [pc, #176]	; (80056d8 <network_configure_activations+0x2c4>)
 8005628:	6093      	str	r3, [r2, #8]
    conv2d_12_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 9968);
 800562a:	4b15      	ldr	r3, [pc, #84]	; (8005680 <network_configure_activations+0x26c>)
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	f242 63f0 	movw	r3, #9968	; 0x26f0
 8005632:	4413      	add	r3, r2
 8005634:	4a28      	ldr	r2, [pc, #160]	; (80056d8 <network_configure_activations+0x2c4>)
 8005636:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005638:	4b11      	ldr	r3, [pc, #68]	; (8005680 <network_configure_activations+0x26c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a27      	ldr	r2, [pc, #156]	; (80056dc <network_configure_activations+0x2c8>)
 800563e:	6093      	str	r3, [r2, #8]
    conv2d_12_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005640:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <network_configure_activations+0x26c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a25      	ldr	r2, [pc, #148]	; (80056dc <network_configure_activations+0x2c8>)
 8005646:	60d3      	str	r3, [r2, #12]
    
    eltwise_13_output_array.data = AI_PTR(g_network_activations_map[0] + 3072);
 8005648:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <network_configure_activations+0x26c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005650:	4a23      	ldr	r2, [pc, #140]	; (80056e0 <network_configure_activations+0x2cc>)
 8005652:	6093      	str	r3, [r2, #8]
    eltwise_13_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3072);
 8005654:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <network_configure_activations+0x26c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800565c:	4a20      	ldr	r2, [pc, #128]	; (80056e0 <network_configure_activations+0x2cc>)
 800565e:	60d3      	str	r3, [r2, #12]
    
    pool_14_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <network_configure_activations+0x26c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1f      	ldr	r2, [pc, #124]	; (80056e4 <network_configure_activations+0x2d0>)
 8005666:	6093      	str	r3, [r2, #8]
    pool_14_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005668:	4b05      	ldr	r3, [pc, #20]	; (8005680 <network_configure_activations+0x26c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1d      	ldr	r2, [pc, #116]	; (80056e4 <network_configure_activations+0x2d0>)
 800566e:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 768);
 8005670:	4b03      	ldr	r3, [pc, #12]	; (8005680 <network_configure_activations+0x26c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005678:	4a1b      	ldr	r2, [pc, #108]	; (80056e8 <network_configure_activations+0x2d4>)
 800567a:	6093      	str	r3, [r2, #8]
 800567c:	e036      	b.n	80056ec <network_configure_activations+0x2d8>
 800567e:	bf00      	nop
 8005680:	240109c0 	.word	0x240109c0
 8005684:	24000220 	.word	0x24000220
 8005688:	240000a0 	.word	0x240000a0
 800568c:	24000240 	.word	0x24000240
 8005690:	240000b0 	.word	0x240000b0
 8005694:	24000260 	.word	0x24000260
 8005698:	240000c0 	.word	0x240000c0
 800569c:	24000280 	.word	0x24000280
 80056a0:	240002a0 	.word	0x240002a0
 80056a4:	240000e0 	.word	0x240000e0
 80056a8:	24000100 	.word	0x24000100
 80056ac:	240002b0 	.word	0x240002b0
 80056b0:	24000120 	.word	0x24000120
 80056b4:	240002d0 	.word	0x240002d0
 80056b8:	24000140 	.word	0x24000140
 80056bc:	240002f0 	.word	0x240002f0
 80056c0:	24000310 	.word	0x24000310
 80056c4:	24000170 	.word	0x24000170
 80056c8:	24000190 	.word	0x24000190
 80056cc:	24000330 	.word	0x24000330
 80056d0:	240001b0 	.word	0x240001b0
 80056d4:	24000350 	.word	0x24000350
 80056d8:	240001d0 	.word	0x240001d0
 80056dc:	24000370 	.word	0x24000370
 80056e0:	24000390 	.word	0x24000390
 80056e4:	240003a0 	.word	0x240003a0
 80056e8:	24000200 	.word	0x24000200
    conv2d_15_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 768);
 80056ec:	4b43      	ldr	r3, [pc, #268]	; (80057fc <network_configure_activations+0x3e8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80056f4:	4a42      	ldr	r2, [pc, #264]	; (8005800 <network_configure_activations+0x3ec>)
 80056f6:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 8000);
 80056f8:	4b40      	ldr	r3, [pc, #256]	; (80057fc <network_configure_activations+0x3e8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8005700:	4a40      	ldr	r2, [pc, #256]	; (8005804 <network_configure_activations+0x3f0>)
 8005702:	6093      	str	r3, [r2, #8]
    conv2d_15_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 8000);
 8005704:	4b3d      	ldr	r3, [pc, #244]	; (80057fc <network_configure_activations+0x3e8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 800570c:	4a3d      	ldr	r2, [pc, #244]	; (8005804 <network_configure_activations+0x3f0>)
 800570e:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_output_array.data = AI_PTR(g_network_activations_map[0] + 8768);
 8005710:	4b3a      	ldr	r3, [pc, #232]	; (80057fc <network_configure_activations+0x3e8>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8005718:	4a3b      	ldr	r2, [pc, #236]	; (8005808 <network_configure_activations+0x3f4>)
 800571a:	6093      	str	r3, [r2, #8]
    conv2d_15_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8768);
 800571c:	4b37      	ldr	r3, [pc, #220]	; (80057fc <network_configure_activations+0x3e8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8005724:	4a38      	ldr	r2, [pc, #224]	; (8005808 <network_configure_activations+0x3f4>)
 8005726:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005728:	4b34      	ldr	r3, [pc, #208]	; (80057fc <network_configure_activations+0x3e8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a37      	ldr	r2, [pc, #220]	; (800580c <network_configure_activations+0x3f8>)
 800572e:	6093      	str	r3, [r2, #8]
    conv2d_17_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005730:	4b32      	ldr	r3, [pc, #200]	; (80057fc <network_configure_activations+0x3e8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a35      	ldr	r2, [pc, #212]	; (800580c <network_configure_activations+0x3f8>)
 8005736:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_output_array.data = AI_PTR(g_network_activations_map[0] + 384);
 8005738:	4b30      	ldr	r3, [pc, #192]	; (80057fc <network_configure_activations+0x3e8>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005740:	4a33      	ldr	r2, [pc, #204]	; (8005810 <network_configure_activations+0x3fc>)
 8005742:	6093      	str	r3, [r2, #8]
    conv2d_17_output_array.data_start = AI_PTR(g_network_activations_map[0] + 384);
 8005744:	4b2d      	ldr	r3, [pc, #180]	; (80057fc <network_configure_activations+0x3e8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800574c:	4a30      	ldr	r2, [pc, #192]	; (8005810 <network_configure_activations+0x3fc>)
 800574e:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 2432);
 8005750:	4b2a      	ldr	r3, [pc, #168]	; (80057fc <network_configure_activations+0x3e8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 8005758:	4a2e      	ldr	r2, [pc, #184]	; (8005814 <network_configure_activations+0x400>)
 800575a:	6093      	str	r3, [r2, #8]
    conv2d_18_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 2432);
 800575c:	4b27      	ldr	r3, [pc, #156]	; (80057fc <network_configure_activations+0x3e8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 8005764:	4a2b      	ldr	r2, [pc, #172]	; (8005814 <network_configure_activations+0x400>)
 8005766:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_output_array.data = AI_PTR(g_network_activations_map[0] + 4480);
 8005768:	4b24      	ldr	r3, [pc, #144]	; (80057fc <network_configure_activations+0x3e8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8005770:	4a29      	ldr	r2, [pc, #164]	; (8005818 <network_configure_activations+0x404>)
 8005772:	6093      	str	r3, [r2, #8]
    conv2d_18_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4480);
 8005774:	4b21      	ldr	r3, [pc, #132]	; (80057fc <network_configure_activations+0x3e8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 800577c:	4a26      	ldr	r2, [pc, #152]	; (8005818 <network_configure_activations+0x404>)
 800577e:	60d3      	str	r3, [r2, #12]
    
    pool_19_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005780:	4b1e      	ldr	r3, [pc, #120]	; (80057fc <network_configure_activations+0x3e8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a25      	ldr	r2, [pc, #148]	; (800581c <network_configure_activations+0x408>)
 8005786:	6093      	str	r3, [r2, #8]
    pool_19_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005788:	4b1c      	ldr	r3, [pc, #112]	; (80057fc <network_configure_activations+0x3e8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a23      	ldr	r2, [pc, #140]	; (800581c <network_configure_activations+0x408>)
 800578e:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 128);
 8005790:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <network_configure_activations+0x3e8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3380      	adds	r3, #128	; 0x80
 8005796:	4a22      	ldr	r2, [pc, #136]	; (8005820 <network_configure_activations+0x40c>)
 8005798:	6093      	str	r3, [r2, #8]
    conv2d_20_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 128);
 800579a:	4b18      	ldr	r3, [pc, #96]	; (80057fc <network_configure_activations+0x3e8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3380      	adds	r3, #128	; 0x80
 80057a0:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <network_configure_activations+0x40c>)
 80057a2:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_output_array.data = AI_PTR(g_network_activations_map[0] + 10368);
 80057a4:	4b15      	ldr	r3, [pc, #84]	; (80057fc <network_configure_activations+0x3e8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80057ac:	4a1d      	ldr	r2, [pc, #116]	; (8005824 <network_configure_activations+0x410>)
 80057ae:	6093      	str	r3, [r2, #8]
    conv2d_20_output_array.data_start = AI_PTR(g_network_activations_map[0] + 10368);
 80057b0:	4b12      	ldr	r3, [pc, #72]	; (80057fc <network_configure_activations+0x3e8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80057b8:	4a1a      	ldr	r2, [pc, #104]	; (8005824 <network_configure_activations+0x410>)
 80057ba:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80057bc:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <network_configure_activations+0x3e8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a19      	ldr	r2, [pc, #100]	; (8005828 <network_configure_activations+0x414>)
 80057c2:	6093      	str	r3, [r2, #8]
    conv2d_21_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80057c4:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <network_configure_activations+0x3e8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a17      	ldr	r2, [pc, #92]	; (8005828 <network_configure_activations+0x414>)
 80057ca:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 80057cc:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <network_configure_activations+0x3e8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80057d4:	4a15      	ldr	r2, [pc, #84]	; (800582c <network_configure_activations+0x418>)
 80057d6:	6093      	str	r3, [r2, #8]
    conv2d_21_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 80057d8:	4b08      	ldr	r3, [pc, #32]	; (80057fc <network_configure_activations+0x3e8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80057e0:	4a12      	ldr	r2, [pc, #72]	; (800582c <network_configure_activations+0x418>)
 80057e2:	60d3      	str	r3, [r2, #12]
    
    return true;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e005      	b.n	80057f4 <network_configure_activations+0x3e0>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80057e8:	2213      	movs	r2, #19
 80057ea:	2130      	movs	r1, #48	; 0x30
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fdff 	bl	80063f0 <ai_platform_network_set_error>
  return false;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	240109c0 	.word	0x240109c0
 8005800:	24000200 	.word	0x24000200
 8005804:	24000230 	.word	0x24000230
 8005808:	240003c0 	.word	0x240003c0
 800580c:	24000270 	.word	0x24000270
 8005810:	240003d0 	.word	0x240003d0
 8005814:	240002e0 	.word	0x240002e0
 8005818:	240003f0 	.word	0x240003f0
 800581c:	24000400 	.word	0x24000400
 8005820:	24000320 	.word	0x24000320
 8005824:	24000010 	.word	0x24000010
 8005828:	24000360 	.word	0x24000360
 800582c:	24000020 	.word	0x24000020

08005830 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	2101      	movs	r1, #1
 800583e:	4892      	ldr	r0, [pc, #584]	; (8005a88 <network_configure_weights+0x258>)
 8005840:	f000 fc00 	bl	8006044 <ai_platform_get_weights_map>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 8230 	beq.w	8005cac <network_configure_weights+0x47c>
    /* Updating weights (byte) offsets */
    
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800584c:	4b8f      	ldr	r3, [pc, #572]	; (8005a8c <network_configure_weights+0x25c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005854:	4a8d      	ldr	r2, [pc, #564]	; (8005a8c <network_configure_weights+0x25c>)
 8005856:	6013      	str	r3, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8005858:	4b8b      	ldr	r3, [pc, #556]	; (8005a88 <network_configure_weights+0x258>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a8b      	ldr	r2, [pc, #556]	; (8005a8c <network_configure_weights+0x25c>)
 800585e:	6093      	str	r3, [r2, #8]
    conv2d_17_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8005860:	4b89      	ldr	r3, [pc, #548]	; (8005a88 <network_configure_weights+0x258>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a89      	ldr	r2, [pc, #548]	; (8005a8c <network_configure_weights+0x25c>)
 8005866:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 8005868:	4b89      	ldr	r3, [pc, #548]	; (8005a90 <network_configure_weights+0x260>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005870:	4a87      	ldr	r2, [pc, #540]	; (8005a90 <network_configure_weights+0x260>)
 8005872:	6013      	str	r3, [r2, #0]
    conv2d_18_weights_array.data = AI_PTR(g_network_weights_map[0] + 2048);
 8005874:	4b84      	ldr	r3, [pc, #528]	; (8005a88 <network_configure_weights+0x258>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587c:	4a84      	ldr	r2, [pc, #528]	; (8005a90 <network_configure_weights+0x260>)
 800587e:	6093      	str	r3, [r2, #8]
    conv2d_18_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2048);
 8005880:	4b81      	ldr	r3, [pc, #516]	; (8005a88 <network_configure_weights+0x258>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005888:	4a81      	ldr	r2, [pc, #516]	; (8005a90 <network_configure_weights+0x260>)
 800588a:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 800588c:	4b81      	ldr	r3, [pc, #516]	; (8005a94 <network_configure_weights+0x264>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005894:	4a7f      	ldr	r2, [pc, #508]	; (8005a94 <network_configure_weights+0x264>)
 8005896:	6013      	str	r3, [r2, #0]
    conv2d_18_bias_array.data = AI_PTR(g_network_weights_map[0] + 67584);
 8005898:	4b7b      	ldr	r3, [pc, #492]	; (8005a88 <network_configure_weights+0x258>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80058a0:	4a7c      	ldr	r2, [pc, #496]	; (8005a94 <network_configure_weights+0x264>)
 80058a2:	6093      	str	r3, [r2, #8]
    conv2d_18_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 67584);
 80058a4:	4b78      	ldr	r3, [pc, #480]	; (8005a88 <network_configure_weights+0x258>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80058ac:	4a79      	ldr	r2, [pc, #484]	; (8005a94 <network_configure_weights+0x264>)
 80058ae:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 80058b0:	4b79      	ldr	r3, [pc, #484]	; (8005a98 <network_configure_weights+0x268>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058b8:	4a77      	ldr	r2, [pc, #476]	; (8005a98 <network_configure_weights+0x268>)
 80058ba:	6013      	str	r3, [r2, #0]
    conv2d_20_weights_array.data = AI_PTR(g_network_weights_map[0] + 68096);
 80058bc:	4b72      	ldr	r3, [pc, #456]	; (8005a88 <network_configure_weights+0x258>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f503 3385 	add.w	r3, r3, #68096	; 0x10a00
 80058c4:	4a74      	ldr	r2, [pc, #464]	; (8005a98 <network_configure_weights+0x268>)
 80058c6:	6093      	str	r3, [r2, #8]
    conv2d_20_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 68096);
 80058c8:	4b6f      	ldr	r3, [pc, #444]	; (8005a88 <network_configure_weights+0x258>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f503 3385 	add.w	r3, r3, #68096	; 0x10a00
 80058d0:	4a71      	ldr	r2, [pc, #452]	; (8005a98 <network_configure_weights+0x268>)
 80058d2:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 80058d4:	4b71      	ldr	r3, [pc, #452]	; (8005a9c <network_configure_weights+0x26c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058dc:	4a6f      	ldr	r2, [pc, #444]	; (8005a9c <network_configure_weights+0x26c>)
 80058de:	6013      	str	r3, [r2, #0]
    conv2d_20_bias_array.data = AI_PTR(g_network_weights_map[0] + 215552);
 80058e0:	4b69      	ldr	r3, [pc, #420]	; (8005a88 <network_configure_weights+0x258>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	4b6e      	ldr	r3, [pc, #440]	; (8005aa0 <network_configure_weights+0x270>)
 80058e6:	4413      	add	r3, r2
 80058e8:	4a6c      	ldr	r2, [pc, #432]	; (8005a9c <network_configure_weights+0x26c>)
 80058ea:	6093      	str	r3, [r2, #8]
    conv2d_20_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 215552);
 80058ec:	4b66      	ldr	r3, [pc, #408]	; (8005a88 <network_configure_weights+0x258>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	4b6b      	ldr	r3, [pc, #428]	; (8005aa0 <network_configure_weights+0x270>)
 80058f2:	4413      	add	r3, r2
 80058f4:	4a69      	ldr	r2, [pc, #420]	; (8005a9c <network_configure_weights+0x26c>)
 80058f6:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 80058f8:	4b6a      	ldr	r3, [pc, #424]	; (8005aa4 <network_configure_weights+0x274>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005900:	4a68      	ldr	r2, [pc, #416]	; (8005aa4 <network_configure_weights+0x274>)
 8005902:	6013      	str	r3, [r2, #0]
    conv2d_21_weights_array.data = AI_PTR(g_network_weights_map[0] + 216064);
 8005904:	4b60      	ldr	r3, [pc, #384]	; (8005a88 <network_configure_weights+0x258>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
 800590c:	4a65      	ldr	r2, [pc, #404]	; (8005aa4 <network_configure_weights+0x274>)
 800590e:	6093      	str	r3, [r2, #8]
    conv2d_21_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 216064);
 8005910:	4b5d      	ldr	r3, [pc, #372]	; (8005a88 <network_configure_weights+0x258>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
 8005918:	4a62      	ldr	r2, [pc, #392]	; (8005aa4 <network_configure_weights+0x274>)
 800591a:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 800591c:	4b62      	ldr	r3, [pc, #392]	; (8005aa8 <network_configure_weights+0x278>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005924:	4a60      	ldr	r2, [pc, #384]	; (8005aa8 <network_configure_weights+0x278>)
 8005926:	6013      	str	r3, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(g_network_weights_map[0] + 228864);
 8005928:	4b57      	ldr	r3, [pc, #348]	; (8005a88 <network_configure_weights+0x258>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	4b5f      	ldr	r3, [pc, #380]	; (8005aac <network_configure_weights+0x27c>)
 800592e:	4413      	add	r3, r2
 8005930:	4a5d      	ldr	r2, [pc, #372]	; (8005aa8 <network_configure_weights+0x278>)
 8005932:	6093      	str	r3, [r2, #8]
    conv2d_21_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 228864);
 8005934:	4b54      	ldr	r3, [pc, #336]	; (8005a88 <network_configure_weights+0x258>)
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	4b5c      	ldr	r3, [pc, #368]	; (8005aac <network_configure_weights+0x27c>)
 800593a:	4413      	add	r3, r2
 800593c:	4a5a      	ldr	r2, [pc, #360]	; (8005aa8 <network_configure_weights+0x278>)
 800593e:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005940:	4b5b      	ldr	r3, [pc, #364]	; (8005ab0 <network_configure_weights+0x280>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005948:	4a59      	ldr	r2, [pc, #356]	; (8005ab0 <network_configure_weights+0x280>)
 800594a:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 229264);
 800594c:	4b4e      	ldr	r3, [pc, #312]	; (8005a88 <network_configure_weights+0x258>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	4b58      	ldr	r3, [pc, #352]	; (8005ab4 <network_configure_weights+0x284>)
 8005952:	4413      	add	r3, r2
 8005954:	4a56      	ldr	r2, [pc, #344]	; (8005ab0 <network_configure_weights+0x280>)
 8005956:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 229264);
 8005958:	4b4b      	ldr	r3, [pc, #300]	; (8005a88 <network_configure_weights+0x258>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	4b55      	ldr	r3, [pc, #340]	; (8005ab4 <network_configure_weights+0x284>)
 800595e:	4413      	add	r3, r2
 8005960:	4a53      	ldr	r2, [pc, #332]	; (8005ab0 <network_configure_weights+0x280>)
 8005962:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005964:	4b54      	ldr	r3, [pc, #336]	; (8005ab8 <network_configure_weights+0x288>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800596c:	4a52      	ldr	r2, [pc, #328]	; (8005ab8 <network_configure_weights+0x288>)
 800596e:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 229696);
 8005970:	4b45      	ldr	r3, [pc, #276]	; (8005a88 <network_configure_weights+0x258>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	4b51      	ldr	r3, [pc, #324]	; (8005abc <network_configure_weights+0x28c>)
 8005976:	4413      	add	r3, r2
 8005978:	4a4f      	ldr	r2, [pc, #316]	; (8005ab8 <network_configure_weights+0x288>)
 800597a:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 229696);
 800597c:	4b42      	ldr	r3, [pc, #264]	; (8005a88 <network_configure_weights+0x258>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	4b4e      	ldr	r3, [pc, #312]	; (8005abc <network_configure_weights+0x28c>)
 8005982:	4413      	add	r3, r2
 8005984:	4a4c      	ldr	r2, [pc, #304]	; (8005ab8 <network_configure_weights+0x288>)
 8005986:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005988:	4b4d      	ldr	r3, [pc, #308]	; (8005ac0 <network_configure_weights+0x290>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005990:	4a4b      	ldr	r2, [pc, #300]	; (8005ac0 <network_configure_weights+0x290>)
 8005992:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 229760);
 8005994:	4b3c      	ldr	r3, [pc, #240]	; (8005a88 <network_configure_weights+0x258>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	4b4a      	ldr	r3, [pc, #296]	; (8005ac4 <network_configure_weights+0x294>)
 800599a:	4413      	add	r3, r2
 800599c:	4a48      	ldr	r2, [pc, #288]	; (8005ac0 <network_configure_weights+0x290>)
 800599e:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 229760);
 80059a0:	4b39      	ldr	r3, [pc, #228]	; (8005a88 <network_configure_weights+0x258>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	4b47      	ldr	r3, [pc, #284]	; (8005ac4 <network_configure_weights+0x294>)
 80059a6:	4413      	add	r3, r2
 80059a8:	4a45      	ldr	r2, [pc, #276]	; (8005ac0 <network_configure_weights+0x290>)
 80059aa:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80059ac:	4b46      	ldr	r3, [pc, #280]	; (8005ac8 <network_configure_weights+0x298>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059b4:	4a44      	ldr	r2, [pc, #272]	; (8005ac8 <network_configure_weights+0x298>)
 80059b6:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 232640);
 80059b8:	4b33      	ldr	r3, [pc, #204]	; (8005a88 <network_configure_weights+0x258>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	4b43      	ldr	r3, [pc, #268]	; (8005acc <network_configure_weights+0x29c>)
 80059be:	4413      	add	r3, r2
 80059c0:	4a41      	ldr	r2, [pc, #260]	; (8005ac8 <network_configure_weights+0x298>)
 80059c2:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 232640);
 80059c4:	4b30      	ldr	r3, [pc, #192]	; (8005a88 <network_configure_weights+0x258>)
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	4b40      	ldr	r3, [pc, #256]	; (8005acc <network_configure_weights+0x29c>)
 80059ca:	4413      	add	r3, r2
 80059cc:	4a3e      	ldr	r2, [pc, #248]	; (8005ac8 <network_configure_weights+0x298>)
 80059ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80059d0:	4b3f      	ldr	r3, [pc, #252]	; (8005ad0 <network_configure_weights+0x2a0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059d8:	4a3d      	ldr	r2, [pc, #244]	; (8005ad0 <network_configure_weights+0x2a0>)
 80059da:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 232720);
 80059dc:	4b2a      	ldr	r3, [pc, #168]	; (8005a88 <network_configure_weights+0x258>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	4b3c      	ldr	r3, [pc, #240]	; (8005ad4 <network_configure_weights+0x2a4>)
 80059e2:	4413      	add	r3, r2
 80059e4:	4a3a      	ldr	r2, [pc, #232]	; (8005ad0 <network_configure_weights+0x2a0>)
 80059e6:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 232720);
 80059e8:	4b27      	ldr	r3, [pc, #156]	; (8005a88 <network_configure_weights+0x258>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4b39      	ldr	r3, [pc, #228]	; (8005ad4 <network_configure_weights+0x2a4>)
 80059ee:	4413      	add	r3, r2
 80059f0:	4a37      	ldr	r2, [pc, #220]	; (8005ad0 <network_configure_weights+0x2a0>)
 80059f2:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80059f4:	4b38      	ldr	r3, [pc, #224]	; (8005ad8 <network_configure_weights+0x2a8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059fc:	4a36      	ldr	r2, [pc, #216]	; (8005ad8 <network_configure_weights+0x2a8>)
 80059fe:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 236320);
 8005a00:	4b21      	ldr	r3, [pc, #132]	; (8005a88 <network_configure_weights+0x258>)
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	4b35      	ldr	r3, [pc, #212]	; (8005adc <network_configure_weights+0x2ac>)
 8005a06:	4413      	add	r3, r2
 8005a08:	4a33      	ldr	r2, [pc, #204]	; (8005ad8 <network_configure_weights+0x2a8>)
 8005a0a:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 236320);
 8005a0c:	4b1e      	ldr	r3, [pc, #120]	; (8005a88 <network_configure_weights+0x258>)
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	4b32      	ldr	r3, [pc, #200]	; (8005adc <network_configure_weights+0x2ac>)
 8005a12:	4413      	add	r3, r2
 8005a14:	4a30      	ldr	r2, [pc, #192]	; (8005ad8 <network_configure_weights+0x2a8>)
 8005a16:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a18:	4b31      	ldr	r3, [pc, #196]	; (8005ae0 <network_configure_weights+0x2b0>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a20:	4a2f      	ldr	r2, [pc, #188]	; (8005ae0 <network_configure_weights+0x2b0>)
 8005a22:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 236400);
 8005a24:	4b18      	ldr	r3, [pc, #96]	; (8005a88 <network_configure_weights+0x258>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	4b2e      	ldr	r3, [pc, #184]	; (8005ae4 <network_configure_weights+0x2b4>)
 8005a2a:	4413      	add	r3, r2
 8005a2c:	4a2c      	ldr	r2, [pc, #176]	; (8005ae0 <network_configure_weights+0x2b0>)
 8005a2e:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 236400);
 8005a30:	4b15      	ldr	r3, [pc, #84]	; (8005a88 <network_configure_weights+0x258>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	4b2b      	ldr	r3, [pc, #172]	; (8005ae4 <network_configure_weights+0x2b4>)
 8005a36:	4413      	add	r3, r2
 8005a38:	4a29      	ldr	r2, [pc, #164]	; (8005ae0 <network_configure_weights+0x2b0>)
 8005a3a:	60d3      	str	r3, [r2, #12]
    
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ae8 <network_configure_weights+0x2b8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a44:	4a28      	ldr	r2, [pc, #160]	; (8005ae8 <network_configure_weights+0x2b8>)
 8005a46:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 240000);
 8005a48:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <network_configure_weights+0x258>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4b27      	ldr	r3, [pc, #156]	; (8005aec <network_configure_weights+0x2bc>)
 8005a4e:	4413      	add	r3, r2
 8005a50:	4a25      	ldr	r2, [pc, #148]	; (8005ae8 <network_configure_weights+0x2b8>)
 8005a52:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 240000);
 8005a54:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <network_configure_weights+0x258>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	4b24      	ldr	r3, [pc, #144]	; (8005aec <network_configure_weights+0x2bc>)
 8005a5a:	4413      	add	r3, r2
 8005a5c:	4a22      	ldr	r2, [pc, #136]	; (8005ae8 <network_configure_weights+0x2b8>)
 8005a5e:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a60:	4b23      	ldr	r3, [pc, #140]	; (8005af0 <network_configure_weights+0x2c0>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a68:	4a21      	ldr	r2, [pc, #132]	; (8005af0 <network_configure_weights+0x2c0>)
 8005a6a:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_network_weights_map[0] + 240080);
 8005a6c:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <network_configure_weights+0x258>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	4b20      	ldr	r3, [pc, #128]	; (8005af4 <network_configure_weights+0x2c4>)
 8005a72:	4413      	add	r3, r2
 8005a74:	4a1e      	ldr	r2, [pc, #120]	; (8005af0 <network_configure_weights+0x2c0>)
 8005a76:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 240080);
 8005a78:	4b03      	ldr	r3, [pc, #12]	; (8005a88 <network_configure_weights+0x258>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <network_configure_weights+0x2c4>)
 8005a7e:	4413      	add	r3, r2
 8005a80:	4a1b      	ldr	r2, [pc, #108]	; (8005af0 <network_configure_weights+0x2c0>)
 8005a82:	60d3      	str	r3, [r2, #12]
 8005a84:	e038      	b.n	8005af8 <network_configure_weights+0x2c8>
 8005a86:	bf00      	nop
 8005a88:	240109c4 	.word	0x240109c4
 8005a8c:	24000030 	.word	0x24000030
 8005a90:	24000040 	.word	0x24000040
 8005a94:	24000050 	.word	0x24000050
 8005a98:	24000060 	.word	0x24000060
 8005a9c:	24000070 	.word	0x24000070
 8005aa0:	00034a00 	.word	0x00034a00
 8005aa4:	24000080 	.word	0x24000080
 8005aa8:	24000090 	.word	0x24000090
 8005aac:	00037e00 	.word	0x00037e00
 8005ab0:	240000d0 	.word	0x240000d0
 8005ab4:	00037f90 	.word	0x00037f90
 8005ab8:	240000f0 	.word	0x240000f0
 8005abc:	00038140 	.word	0x00038140
 8005ac0:	24000110 	.word	0x24000110
 8005ac4:	00038180 	.word	0x00038180
 8005ac8:	24000130 	.word	0x24000130
 8005acc:	00038cc0 	.word	0x00038cc0
 8005ad0:	24000150 	.word	0x24000150
 8005ad4:	00038d10 	.word	0x00038d10
 8005ad8:	24000160 	.word	0x24000160
 8005adc:	00039b20 	.word	0x00039b20
 8005ae0:	24000180 	.word	0x24000180
 8005ae4:	00039b70 	.word	0x00039b70
 8005ae8:	240001a0 	.word	0x240001a0
 8005aec:	0003a980 	.word	0x0003a980
 8005af0:	240001c0 	.word	0x240001c0
 8005af4:	0003a9d0 	.word	0x0003a9d0
    
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8005af8:	4b71      	ldr	r3, [pc, #452]	; (8005cc0 <network_configure_weights+0x490>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b00:	4a6f      	ldr	r2, [pc, #444]	; (8005cc0 <network_configure_weights+0x490>)
 8005b02:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_network_weights_map[0] + 243680);
 8005b04:	4b6f      	ldr	r3, [pc, #444]	; (8005cc4 <network_configure_weights+0x494>)
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	4b6f      	ldr	r3, [pc, #444]	; (8005cc8 <network_configure_weights+0x498>)
 8005b0a:	4413      	add	r3, r2
 8005b0c:	4a6c      	ldr	r2, [pc, #432]	; (8005cc0 <network_configure_weights+0x490>)
 8005b0e:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 243680);
 8005b10:	4b6c      	ldr	r3, [pc, #432]	; (8005cc4 <network_configure_weights+0x494>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	4b6c      	ldr	r3, [pc, #432]	; (8005cc8 <network_configure_weights+0x498>)
 8005b16:	4413      	add	r3, r2
 8005b18:	4a69      	ldr	r2, [pc, #420]	; (8005cc0 <network_configure_weights+0x490>)
 8005b1a:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b1c:	4b6b      	ldr	r3, [pc, #428]	; (8005ccc <network_configure_weights+0x49c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b24:	4a69      	ldr	r2, [pc, #420]	; (8005ccc <network_configure_weights+0x49c>)
 8005b26:	6013      	str	r3, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 243760);
 8005b28:	4b66      	ldr	r3, [pc, #408]	; (8005cc4 <network_configure_weights+0x494>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4b68      	ldr	r3, [pc, #416]	; (8005cd0 <network_configure_weights+0x4a0>)
 8005b2e:	4413      	add	r3, r2
 8005b30:	4a66      	ldr	r2, [pc, #408]	; (8005ccc <network_configure_weights+0x49c>)
 8005b32:	6093      	str	r3, [r2, #8]
    conv2d_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 243760);
 8005b34:	4b63      	ldr	r3, [pc, #396]	; (8005cc4 <network_configure_weights+0x494>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	4b65      	ldr	r3, [pc, #404]	; (8005cd0 <network_configure_weights+0x4a0>)
 8005b3a:	4413      	add	r3, r2
 8005b3c:	4a63      	ldr	r2, [pc, #396]	; (8005ccc <network_configure_weights+0x49c>)
 8005b3e:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b40:	4b64      	ldr	r3, [pc, #400]	; (8005cd4 <network_configure_weights+0x4a4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b48:	4a62      	ldr	r2, [pc, #392]	; (8005cd4 <network_configure_weights+0x4a4>)
 8005b4a:	6013      	str	r3, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 247360);
 8005b4c:	4b5d      	ldr	r3, [pc, #372]	; (8005cc4 <network_configure_weights+0x494>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	4b61      	ldr	r3, [pc, #388]	; (8005cd8 <network_configure_weights+0x4a8>)
 8005b52:	4413      	add	r3, r2
 8005b54:	4a5f      	ldr	r2, [pc, #380]	; (8005cd4 <network_configure_weights+0x4a4>)
 8005b56:	6093      	str	r3, [r2, #8]
    conv2d_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 247360);
 8005b58:	4b5a      	ldr	r3, [pc, #360]	; (8005cc4 <network_configure_weights+0x494>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	4b5e      	ldr	r3, [pc, #376]	; (8005cd8 <network_configure_weights+0x4a8>)
 8005b5e:	4413      	add	r3, r2
 8005b60:	4a5c      	ldr	r2, [pc, #368]	; (8005cd4 <network_configure_weights+0x4a4>)
 8005b62:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b64:	4b5d      	ldr	r3, [pc, #372]	; (8005cdc <network_configure_weights+0x4ac>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b6c:	4a5b      	ldr	r2, [pc, #364]	; (8005cdc <network_configure_weights+0x4ac>)
 8005b6e:	6013      	str	r3, [r2, #0]
    conv2d_9_weights_array.data = AI_PTR(g_network_weights_map[0] + 247440);
 8005b70:	4b54      	ldr	r3, [pc, #336]	; (8005cc4 <network_configure_weights+0x494>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4b5a      	ldr	r3, [pc, #360]	; (8005ce0 <network_configure_weights+0x4b0>)
 8005b76:	4413      	add	r3, r2
 8005b78:	4a58      	ldr	r2, [pc, #352]	; (8005cdc <network_configure_weights+0x4ac>)
 8005b7a:	6093      	str	r3, [r2, #8]
    conv2d_9_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 247440);
 8005b7c:	4b51      	ldr	r3, [pc, #324]	; (8005cc4 <network_configure_weights+0x494>)
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	4b57      	ldr	r3, [pc, #348]	; (8005ce0 <network_configure_weights+0x4b0>)
 8005b82:	4413      	add	r3, r2
 8005b84:	4a55      	ldr	r2, [pc, #340]	; (8005cdc <network_configure_weights+0x4ac>)
 8005b86:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b88:	4b56      	ldr	r3, [pc, #344]	; (8005ce4 <network_configure_weights+0x4b4>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b90:	4a54      	ldr	r2, [pc, #336]	; (8005ce4 <network_configure_weights+0x4b4>)
 8005b92:	6013      	str	r3, [r2, #0]
    conv2d_9_bias_array.data = AI_PTR(g_network_weights_map[0] + 255360);
 8005b94:	4b4b      	ldr	r3, [pc, #300]	; (8005cc4 <network_configure_weights+0x494>)
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	4b53      	ldr	r3, [pc, #332]	; (8005ce8 <network_configure_weights+0x4b8>)
 8005b9a:	4413      	add	r3, r2
 8005b9c:	4a51      	ldr	r2, [pc, #324]	; (8005ce4 <network_configure_weights+0x4b4>)
 8005b9e:	6093      	str	r3, [r2, #8]
    conv2d_9_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 255360);
 8005ba0:	4b48      	ldr	r3, [pc, #288]	; (8005cc4 <network_configure_weights+0x494>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	4b50      	ldr	r3, [pc, #320]	; (8005ce8 <network_configure_weights+0x4b8>)
 8005ba6:	4413      	add	r3, r2
 8005ba8:	4a4e      	ldr	r2, [pc, #312]	; (8005ce4 <network_configure_weights+0x4b4>)
 8005baa:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bac:	4b4f      	ldr	r3, [pc, #316]	; (8005cec <network_configure_weights+0x4bc>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bb4:	4a4d      	ldr	r2, [pc, #308]	; (8005cec <network_configure_weights+0x4bc>)
 8005bb6:	6013      	str	r3, [r2, #0]
    conv2d_11_weights_array.data = AI_PTR(g_network_weights_map[0] + 255536);
 8005bb8:	4b42      	ldr	r3, [pc, #264]	; (8005cc4 <network_configure_weights+0x494>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	4b4c      	ldr	r3, [pc, #304]	; (8005cf0 <network_configure_weights+0x4c0>)
 8005bbe:	4413      	add	r3, r2
 8005bc0:	4a4a      	ldr	r2, [pc, #296]	; (8005cec <network_configure_weights+0x4bc>)
 8005bc2:	6093      	str	r3, [r2, #8]
    conv2d_11_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 255536);
 8005bc4:	4b3f      	ldr	r3, [pc, #252]	; (8005cc4 <network_configure_weights+0x494>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	4b49      	ldr	r3, [pc, #292]	; (8005cf0 <network_configure_weights+0x4c0>)
 8005bca:	4413      	add	r3, r2
 8005bcc:	4a47      	ldr	r2, [pc, #284]	; (8005cec <network_configure_weights+0x4bc>)
 8005bce:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bd0:	4b48      	ldr	r3, [pc, #288]	; (8005cf4 <network_configure_weights+0x4c4>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bd8:	4a46      	ldr	r2, [pc, #280]	; (8005cf4 <network_configure_weights+0x4c4>)
 8005bda:	6013      	str	r3, [r2, #0]
    conv2d_11_bias_array.data = AI_PTR(g_network_weights_map[0] + 274544);
 8005bdc:	4b39      	ldr	r3, [pc, #228]	; (8005cc4 <network_configure_weights+0x494>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	4b45      	ldr	r3, [pc, #276]	; (8005cf8 <network_configure_weights+0x4c8>)
 8005be2:	4413      	add	r3, r2
 8005be4:	4a43      	ldr	r2, [pc, #268]	; (8005cf4 <network_configure_weights+0x4c4>)
 8005be6:	6093      	str	r3, [r2, #8]
    conv2d_11_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 274544);
 8005be8:	4b36      	ldr	r3, [pc, #216]	; (8005cc4 <network_configure_weights+0x494>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	4b42      	ldr	r3, [pc, #264]	; (8005cf8 <network_configure_weights+0x4c8>)
 8005bee:	4413      	add	r3, r2
 8005bf0:	4a40      	ldr	r2, [pc, #256]	; (8005cf4 <network_configure_weights+0x4c4>)
 8005bf2:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bf4:	4b41      	ldr	r3, [pc, #260]	; (8005cfc <network_configure_weights+0x4cc>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bfc:	4a3f      	ldr	r2, [pc, #252]	; (8005cfc <network_configure_weights+0x4cc>)
 8005bfe:	6013      	str	r3, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_network_weights_map[0] + 274736);
 8005c00:	4b30      	ldr	r3, [pc, #192]	; (8005cc4 <network_configure_weights+0x494>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	4b3e      	ldr	r3, [pc, #248]	; (8005d00 <network_configure_weights+0x4d0>)
 8005c06:	4413      	add	r3, r2
 8005c08:	4a3c      	ldr	r2, [pc, #240]	; (8005cfc <network_configure_weights+0x4cc>)
 8005c0a:	6093      	str	r3, [r2, #8]
    conv2d_12_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 274736);
 8005c0c:	4b2d      	ldr	r3, [pc, #180]	; (8005cc4 <network_configure_weights+0x494>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	4b3b      	ldr	r3, [pc, #236]	; (8005d00 <network_configure_weights+0x4d0>)
 8005c12:	4413      	add	r3, r2
 8005c14:	4a39      	ldr	r2, [pc, #228]	; (8005cfc <network_configure_weights+0x4cc>)
 8005c16:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c18:	4b3a      	ldr	r3, [pc, #232]	; (8005d04 <network_configure_weights+0x4d4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c20:	4a38      	ldr	r2, [pc, #224]	; (8005d04 <network_configure_weights+0x4d4>)
 8005c22:	6013      	str	r3, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_network_weights_map[0] + 295472);
 8005c24:	4b27      	ldr	r3, [pc, #156]	; (8005cc4 <network_configure_weights+0x494>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	4b37      	ldr	r3, [pc, #220]	; (8005d08 <network_configure_weights+0x4d8>)
 8005c2a:	4413      	add	r3, r2
 8005c2c:	4a35      	ldr	r2, [pc, #212]	; (8005d04 <network_configure_weights+0x4d4>)
 8005c2e:	6093      	str	r3, [r2, #8]
    conv2d_12_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 295472);
 8005c30:	4b24      	ldr	r3, [pc, #144]	; (8005cc4 <network_configure_weights+0x494>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	4b34      	ldr	r3, [pc, #208]	; (8005d08 <network_configure_weights+0x4d8>)
 8005c36:	4413      	add	r3, r2
 8005c38:	4a32      	ldr	r2, [pc, #200]	; (8005d04 <network_configure_weights+0x4d4>)
 8005c3a:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c3c:	4b33      	ldr	r3, [pc, #204]	; (8005d0c <network_configure_weights+0x4dc>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c44:	4a31      	ldr	r2, [pc, #196]	; (8005d0c <network_configure_weights+0x4dc>)
 8005c46:	6013      	str	r3, [r2, #0]
    conv2d_15_weights_array.data = AI_PTR(g_network_weights_map[0] + 295664);
 8005c48:	4b1e      	ldr	r3, [pc, #120]	; (8005cc4 <network_configure_weights+0x494>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	4b30      	ldr	r3, [pc, #192]	; (8005d10 <network_configure_weights+0x4e0>)
 8005c4e:	4413      	add	r3, r2
 8005c50:	4a2e      	ldr	r2, [pc, #184]	; (8005d0c <network_configure_weights+0x4dc>)
 8005c52:	6093      	str	r3, [r2, #8]
    conv2d_15_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 295664);
 8005c54:	4b1b      	ldr	r3, [pc, #108]	; (8005cc4 <network_configure_weights+0x494>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	4b2d      	ldr	r3, [pc, #180]	; (8005d10 <network_configure_weights+0x4e0>)
 8005c5a:	4413      	add	r3, r2
 8005c5c:	4a2b      	ldr	r2, [pc, #172]	; (8005d0c <network_configure_weights+0x4dc>)
 8005c5e:	60d3      	str	r3, [r2, #12]
    
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c60:	4b2c      	ldr	r3, [pc, #176]	; (8005d14 <network_configure_weights+0x4e4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c68:	4a2a      	ldr	r2, [pc, #168]	; (8005d14 <network_configure_weights+0x4e4>)
 8005c6a:	6013      	str	r3, [r2, #0]
    conv2d_15_bias_array.data = AI_PTR(g_network_weights_map[0] + 337136);
 8005c6c:	4b15      	ldr	r3, [pc, #84]	; (8005cc4 <network_configure_weights+0x494>)
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	4b29      	ldr	r3, [pc, #164]	; (8005d18 <network_configure_weights+0x4e8>)
 8005c72:	4413      	add	r3, r2
 8005c74:	4a27      	ldr	r2, [pc, #156]	; (8005d14 <network_configure_weights+0x4e4>)
 8005c76:	6093      	str	r3, [r2, #8]
    conv2d_15_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 337136);
 8005c78:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <network_configure_weights+0x494>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	4b26      	ldr	r3, [pc, #152]	; (8005d18 <network_configure_weights+0x4e8>)
 8005c7e:	4413      	add	r3, r2
 8005c80:	4a24      	ldr	r2, [pc, #144]	; (8005d14 <network_configure_weights+0x4e4>)
 8005c82:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c84:	4b25      	ldr	r3, [pc, #148]	; (8005d1c <network_configure_weights+0x4ec>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c8c:	4a23      	ldr	r2, [pc, #140]	; (8005d1c <network_configure_weights+0x4ec>)
 8005c8e:	6013      	str	r3, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(g_network_weights_map[0] + 337520);
 8005c90:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <network_configure_weights+0x494>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	4b22      	ldr	r3, [pc, #136]	; (8005d20 <network_configure_weights+0x4f0>)
 8005c96:	4413      	add	r3, r2
 8005c98:	4a20      	ldr	r2, [pc, #128]	; (8005d1c <network_configure_weights+0x4ec>)
 8005c9a:	6093      	str	r3, [r2, #8]
    conv2d_17_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 337520);
 8005c9c:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <network_configure_weights+0x494>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	4b1f      	ldr	r3, [pc, #124]	; (8005d20 <network_configure_weights+0x4f0>)
 8005ca2:	4413      	add	r3, r2
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	; (8005d1c <network_configure_weights+0x4ec>)
 8005ca6:	60d3      	str	r3, [r2, #12]
    
    return true;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e005      	b.n	8005cb8 <network_configure_weights+0x488>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8005cac:	2212      	movs	r2, #18
 8005cae:	2130      	movs	r1, #48	; 0x30
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fb9d 	bl	80063f0 <ai_platform_network_set_error>
  return false;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	240001e0 	.word	0x240001e0
 8005cc4:	240109c4 	.word	0x240109c4
 8005cc8:	0003b7e0 	.word	0x0003b7e0
 8005ccc:	240001f0 	.word	0x240001f0
 8005cd0:	0003b830 	.word	0x0003b830
 8005cd4:	24000210 	.word	0x24000210
 8005cd8:	0003c640 	.word	0x0003c640
 8005cdc:	24000250 	.word	0x24000250
 8005ce0:	0003c690 	.word	0x0003c690
 8005ce4:	24000290 	.word	0x24000290
 8005ce8:	0003e580 	.word	0x0003e580
 8005cec:	240002c0 	.word	0x240002c0
 8005cf0:	0003e630 	.word	0x0003e630
 8005cf4:	24000300 	.word	0x24000300
 8005cf8:	00043070 	.word	0x00043070
 8005cfc:	24000340 	.word	0x24000340
 8005d00:	00043130 	.word	0x00043130
 8005d04:	24000380 	.word	0x24000380
 8005d08:	00048230 	.word	0x00048230
 8005d0c:	240003b0 	.word	0x240003b0
 8005d10:	000482f0 	.word	0x000482f0
 8005d14:	240003e0 	.word	0x240003e0
 8005d18:	000524f0 	.word	0x000524f0
 8005d1c:	24000410 	.word	0x24000410
 8005d20:	00052670 	.word	0x00052670

08005d24 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fa53 	bl	80061d8 <ai_platform_network_get_error>
 8005d32:	4603      	mov	r3, r0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8005d46:	2300      	movs	r3, #0
 8005d48:	9301      	str	r3, [sp, #4]
 8005d4a:	2305      	movs	r3, #5
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	2301      	movs	r3, #1
 8005d50:	4a04      	ldr	r2, [pc, #16]	; (8005d64 <ai_network_create+0x28>)
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fe65 	bl	8006a24 <ai_platform_network_create>
 8005d5a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	24001e6c 	.word	0x24001e6c

08005d68 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b096      	sub	sp, #88	; 0x58
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8005d74:	2100      	movs	r1, #0
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f7ff ffe0 	bl	8005d3c <ai_network_create>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8005d80:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <ai_network_create_and_init+0x24>
        return err;
 8005d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d8a:	e05d      	b.n	8005e48 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8005d8c:	f107 0314 	add.w	r3, r7, #20
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 f8dd 	bl	8005f50 <ai_network_data_params_get>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f083 0301 	eor.w	r3, r3, #1
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d008      	beq.n	8005db4 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff ffbc 	bl	8005d24 <ai_network_get_error>
 8005dac:	4603      	mov	r3, r0
 8005dae:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8005db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db2:	e049      	b.n	8005e48 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d016      	beq.n	8005de8 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005dba:	2300      	movs	r3, #0
 8005dbc:	657b      	str	r3, [r7, #84]	; 0x54
 8005dbe:	e00e      	b.n	8005dde <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005dc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	4413      	add	r3, r2
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	f107 0314 	add.w	r3, r7, #20
 8005dd0:	330c      	adds	r3, #12
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 f922 	bl	800601c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dda:	3301      	adds	r3, #1
 8005ddc:	657b      	str	r3, [r7, #84]	; 0x54
 8005dde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005de0:	461a      	mov	r2, r3
 8005de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de4:	4293      	cmp	r3, r2
 8005de6:	dbeb      	blt.n	8005dc0 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d016      	beq.n	8005e1c <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005dee:	2300      	movs	r3, #0
 8005df0:	653b      	str	r3, [r7, #80]	; 0x50
 8005df2:	e00e      	b.n	8005e12 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8005df4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	f107 0314 	add.w	r3, r7, #20
 8005e04:	3304      	adds	r3, #4
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 f908 	bl	800601c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e0e:	3301      	adds	r3, #1
 8005e10:	653b      	str	r3, [r7, #80]	; 0x50
 8005e12:	8b7b      	ldrh	r3, [r7, #26]
 8005e14:	461a      	mov	r2, r3
 8005e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	dbeb      	blt.n	8005df4 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f107 0214 	add.w	r2, r7, #20
 8005e24:	4611      	mov	r1, r2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f846 	bl	8005eb8 <ai_network_init>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f083 0301 	eor.w	r3, r3, #1
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d006      	beq.n	8005e46 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff ff71 	bl	8005d24 <ai_network_get_error>
 8005e42:	4603      	mov	r3, r0
 8005e44:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8005e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3758      	adds	r7, #88	; 0x58
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d104      	bne.n	8005e6a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005e60:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <ai_network_inputs_get+0x2c>)
 8005e62:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a06      	ldr	r2, [pc, #24]	; (8005e80 <ai_network_inputs_get+0x30>)
 8005e68:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fac5 	bl	80063fc <ai_platform_inputs_get>
 8005e72:	4603      	mov	r3, r0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	24001e6c 	.word	0x24001e6c
 8005e80:	a1c00100 	.word	0xa1c00100

08005e84 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d104      	bne.n	8005e9e <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005e94:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <ai_network_outputs_get+0x2c>)
 8005e96:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a06      	ldr	r2, [pc, #24]	; (8005eb4 <ai_network_outputs_get+0x30>)
 8005e9c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fc37 	bl	8006714 <ai_platform_outputs_get>
 8005ea6:	4603      	mov	r3, r0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	24001e6c 	.word	0x24001e6c
 8005eb4:	a1c00100 	.word	0xa1c00100

08005eb8 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 ff87 	bl	8006dd8 <ai_platform_network_init>
 8005eca:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <ai_network_init+0x1e>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e028      	b.n	8005f28 <ai_network_init+0x70>

  ai_bool ok = true;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7ff fca7 	bl	8005830 <network_configure_weights>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	7afb      	ldrb	r3, [r7, #11]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	bf14      	ite	ne
 8005eee:	2301      	movne	r3, #1
 8005ef0:	2300      	moveq	r3, #0
 8005ef2:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7ff fa8c 	bl	8005414 <network_configure_activations>
 8005efc:	4603      	mov	r3, r0
 8005efe:	461a      	mov	r2, r3
 8005f00:	7afb      	ldrb	r3, [r7, #11]
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	bf14      	ite	ne
 8005f08:	2301      	movne	r3, #1
 8005f0a:	2300      	moveq	r3, #0
 8005f0c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f001 f8fe 	bl	8007110 <ai_platform_network_post_init>
 8005f14:	4603      	mov	r3, r0
 8005f16:	461a      	mov	r2, r3
 8005f18:	7afb      	ldrb	r3, [r7, #11]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	bf14      	ite	ne
 8005f20:	2301      	movne	r3, #1
 8005f22:	2300      	moveq	r3, #0
 8005f24:	72fb      	strb	r3, [r7, #11]

  return ok;
 8005f26:	7afb      	ldrb	r3, [r7, #11]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	68b9      	ldr	r1, [r7, #8]
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f001 fa0f 	bl	8007364 <ai_platform_network_process>
 8005f46:	4603      	mov	r3, r0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <ai_network_data_params_get+0x12>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e016      	b.n	8005f90 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8005f62:	4a0d      	ldr	r2, [pc, #52]	; (8005f98 <ai_network_data_params_get+0x48>)
 8005f64:	f107 0310 	add.w	r3, r7, #16
 8005f68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f6c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005f70:	4a0a      	ldr	r2, [pc, #40]	; (8005f9c <ai_network_data_params_get+0x4c>)
 8005f72:	f107 0308 	add.w	r3, r7, #8
 8005f76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f7a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005f7e:	f107 0210 	add.w	r2, r7, #16
 8005f82:	f107 0308 	add.w	r3, r7, #8
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f90b 	bl	80061a4 <ai_platform_bind_network_params>
 8005f8e:	4603      	mov	r3, r0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	08010f38 	.word	0x08010f38
 8005f9c:	08010f40 	.word	0x08010f40

08005fa0 <ai_buffer_get_size>:
 8005fa0:	b368      	cbz	r0, 8005ffe <ai_buffer_get_size+0x5e>
 8005fa2:	4b17      	ldr	r3, [pc, #92]	; (8006000 <ai_buffer_get_size+0x60>)
 8005fa4:	4a17      	ldr	r2, [pc, #92]	; (8006004 <ai_buffer_get_size+0x64>)
 8005fa6:	b410      	push	{r4}
 8005fa8:	6804      	ldr	r4, [r0, #0]
 8005faa:	4023      	ands	r3, r4
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d123      	bne.n	8005ff8 <ai_buffer_get_size+0x58>
 8005fb0:	b311      	cbz	r1, 8005ff8 <ai_buffer_get_size+0x58>
 8005fb2:	6984      	ldr	r4, [r0, #24]
 8005fb4:	6862      	ldr	r2, [r4, #4]
 8005fb6:	321f      	adds	r2, #31
 8005fb8:	f022 021f 	bic.w	r2, r2, #31
 8005fbc:	7d03      	ldrb	r3, [r0, #20]
 8005fbe:	6941      	ldr	r1, [r0, #20]
 8005fc0:	f1a3 0301 	sub.w	r3, r3, #1
 8005fc4:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8005fc8:	fab3 f383 	clz	r3, r3
 8005fcc:	095b      	lsrs	r3, r3, #5
 8005fce:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005fd2:	da0c      	bge.n	8005fee <ai_buffer_get_size+0x4e>
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d103      	bne.n	8005fe0 <ai_buffer_get_size+0x40>
 8005fd8:	2802      	cmp	r0, #2
 8005fda:	f04f 0302 	mov.w	r3, #2
 8005fde:	d006      	beq.n	8005fee <ai_buffer_get_size+0x4e>
 8005fe0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	4298      	cmp	r0, r3
 8005fe8:	fb01 f202 	mul.w	r2, r1, r2
 8005fec:	d1f2      	bne.n	8005fd4 <ai_buffer_get_size+0x34>
 8005fee:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8005ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	6984      	ldr	r4, [r0, #24]
 8005ffa:	6862      	ldr	r2, [r4, #4]
 8005ffc:	e7de      	b.n	8005fbc <ai_buffer_get_size+0x1c>
 8005ffe:	4770      	bx	lr
 8006000:	017fffff 	.word	0x017fffff
 8006004:	000400c0 	.word	0x000400c0

08006008 <ai_buffer_array_sane>:
 8006008:	b138      	cbz	r0, 800601a <ai_buffer_array_sane+0x12>
 800600a:	6843      	ldr	r3, [r0, #4]
 800600c:	b123      	cbz	r3, 8006018 <ai_buffer_array_sane+0x10>
 800600e:	8840      	ldrh	r0, [r0, #2]
 8006010:	3800      	subs	r0, #0
 8006012:	bf18      	it	ne
 8006014:	2001      	movne	r0, #1
 8006016:	4770      	bx	lr
 8006018:	4618      	mov	r0, r3
 800601a:	4770      	bx	lr

0800601c <ai_buffer_array_item_set_address>:
 800601c:	b150      	cbz	r0, 8006034 <ai_buffer_array_item_set_address+0x18>
 800601e:	6843      	ldr	r3, [r0, #4]
 8006020:	b14b      	cbz	r3, 8006036 <ai_buffer_array_item_set_address+0x1a>
 8006022:	8840      	ldrh	r0, [r0, #2]
 8006024:	b900      	cbnz	r0, 8006028 <ai_buffer_array_item_set_address+0xc>
 8006026:	4770      	bx	lr
 8006028:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800602c:	2001      	movs	r0, #1
 800602e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006032:	604a      	str	r2, [r1, #4]
 8006034:	4770      	bx	lr
 8006036:	4618      	mov	r0, r3
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop

0800603c <_ai_platform_acquire_crc>:
 800603c:	2001      	movs	r0, #1
 800603e:	4770      	bx	lr

08006040 <_ai_platform_release_crc>:
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop

08006044 <ai_platform_get_weights_map>:
 8006044:	2900      	cmp	r1, #0
 8006046:	bf18      	it	ne
 8006048:	2800      	cmpne	r0, #0
 800604a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604c:	bf0c      	ite	eq
 800604e:	2401      	moveq	r4, #1
 8006050:	2400      	movne	r4, #0
 8006052:	2a00      	cmp	r2, #0
 8006054:	bf08      	it	eq
 8006056:	f044 0401 	orreq.w	r4, r4, #1
 800605a:	b114      	cbz	r4, 8006062 <ai_platform_get_weights_map+0x1e>
 800605c:	2400      	movs	r4, #0
 800605e:	4620      	mov	r0, r4
 8006060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006062:	4616      	mov	r6, r2
 8006064:	4b22      	ldr	r3, [pc, #136]	; (80060f0 <ai_platform_get_weights_map+0xac>)
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	4605      	mov	r5, r0
 800606a:	460f      	mov	r7, r1
 800606c:	429a      	cmp	r2, r3
 800606e:	d022      	beq.n	80060b6 <ai_platform_get_weights_map+0x72>
 8006070:	6870      	ldr	r0, [r6, #4]
 8006072:	2800      	cmp	r0, #0
 8006074:	d0f2      	beq.n	800605c <ai_platform_get_weights_map+0x18>
 8006076:	6806      	ldr	r6, [r0, #0]
 8006078:	429e      	cmp	r6, r3
 800607a:	d006      	beq.n	800608a <ai_platform_get_weights_map+0x46>
 800607c:	f1a1 0401 	sub.w	r4, r1, #1
 8006080:	6028      	str	r0, [r5, #0]
 8006082:	fab4 f484 	clz	r4, r4
 8006086:	0964      	lsrs	r4, r4, #5
 8006088:	e7e9      	b.n	800605e <ai_platform_get_weights_map+0x1a>
 800608a:	3d04      	subs	r5, #4
 800608c:	4602      	mov	r2, r0
 800608e:	4621      	mov	r1, r4
 8006090:	e000      	b.n	8006094 <ai_platform_get_weights_map+0x50>
 8006092:	4619      	mov	r1, r3
 8006094:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006098:	42b3      	cmp	r3, r6
 800609a:	d025      	beq.n	80060e8 <ai_platform_get_weights_map+0xa4>
 800609c:	f845 3f04 	str.w	r3, [r5, #4]!
 80060a0:	1c4b      	adds	r3, r1, #1
 80060a2:	429f      	cmp	r7, r3
 80060a4:	d8f5      	bhi.n	8006092 <ai_platform_get_weights_map+0x4e>
 80060a6:	d1da      	bne.n	800605e <ai_platform_get_weights_map+0x1a>
 80060a8:	3102      	adds	r1, #2
 80060aa:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80060ae:	42b3      	cmp	r3, r6
 80060b0:	d1d5      	bne.n	800605e <ai_platform_get_weights_map+0x1a>
 80060b2:	2401      	movs	r4, #1
 80060b4:	e7d3      	b.n	800605e <ai_platform_get_weights_map+0x1a>
 80060b6:	1d30      	adds	r0, r6, #4
 80060b8:	f7ff ffa6 	bl	8006008 <ai_buffer_array_sane>
 80060bc:	2800      	cmp	r0, #0
 80060be:	d0cd      	beq.n	800605c <ai_platform_get_weights_map+0x18>
 80060c0:	88f3      	ldrh	r3, [r6, #6]
 80060c2:	429f      	cmp	r7, r3
 80060c4:	d1ca      	bne.n	800605c <ai_platform_get_weights_map+0x18>
 80060c6:	3d04      	subs	r5, #4
 80060c8:	4622      	mov	r2, r4
 80060ca:	68b3      	ldr	r3, [r6, #8]
 80060cc:	4423      	add	r3, r4
 80060ce:	341c      	adds	r4, #28
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	b123      	cbz	r3, 80060de <ai_platform_get_weights_map+0x9a>
 80060d4:	3201      	adds	r2, #1
 80060d6:	f845 3f04 	str.w	r3, [r5, #4]!
 80060da:	4297      	cmp	r7, r2
 80060dc:	d8f5      	bhi.n	80060ca <ai_platform_get_weights_map+0x86>
 80060de:	1abc      	subs	r4, r7, r2
 80060e0:	fab4 f484 	clz	r4, r4
 80060e4:	0964      	lsrs	r4, r4, #5
 80060e6:	e7ba      	b.n	800605e <ai_platform_get_weights_map+0x1a>
 80060e8:	428f      	cmp	r7, r1
 80060ea:	d1b8      	bne.n	800605e <ai_platform_get_weights_map+0x1a>
 80060ec:	e7e1      	b.n	80060b2 <ai_platform_get_weights_map+0x6e>
 80060ee:	bf00      	nop
 80060f0:	a1facade 	.word	0xa1facade

080060f4 <ai_platform_get_activations_map>:
 80060f4:	2900      	cmp	r1, #0
 80060f6:	bf18      	it	ne
 80060f8:	2800      	cmpne	r0, #0
 80060fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fc:	bf0c      	ite	eq
 80060fe:	2401      	moveq	r4, #1
 8006100:	2400      	movne	r4, #0
 8006102:	2a00      	cmp	r2, #0
 8006104:	bf08      	it	eq
 8006106:	f044 0401 	orreq.w	r4, r4, #1
 800610a:	b114      	cbz	r4, 8006112 <ai_platform_get_activations_map+0x1e>
 800610c:	2400      	movs	r4, #0
 800610e:	4620      	mov	r0, r4
 8006110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006112:	4616      	mov	r6, r2
 8006114:	4b22      	ldr	r3, [pc, #136]	; (80061a0 <ai_platform_get_activations_map+0xac>)
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	4605      	mov	r5, r0
 800611a:	460f      	mov	r7, r1
 800611c:	429a      	cmp	r2, r3
 800611e:	d022      	beq.n	8006166 <ai_platform_get_activations_map+0x72>
 8006120:	6a30      	ldr	r0, [r6, #32]
 8006122:	2800      	cmp	r0, #0
 8006124:	d0f2      	beq.n	800610c <ai_platform_get_activations_map+0x18>
 8006126:	6806      	ldr	r6, [r0, #0]
 8006128:	429e      	cmp	r6, r3
 800612a:	d006      	beq.n	800613a <ai_platform_get_activations_map+0x46>
 800612c:	f1a1 0401 	sub.w	r4, r1, #1
 8006130:	6028      	str	r0, [r5, #0]
 8006132:	fab4 f484 	clz	r4, r4
 8006136:	0964      	lsrs	r4, r4, #5
 8006138:	e7e9      	b.n	800610e <ai_platform_get_activations_map+0x1a>
 800613a:	3d04      	subs	r5, #4
 800613c:	4602      	mov	r2, r0
 800613e:	4621      	mov	r1, r4
 8006140:	e000      	b.n	8006144 <ai_platform_get_activations_map+0x50>
 8006142:	4619      	mov	r1, r3
 8006144:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006148:	42b3      	cmp	r3, r6
 800614a:	d026      	beq.n	800619a <ai_platform_get_activations_map+0xa6>
 800614c:	f845 3f04 	str.w	r3, [r5, #4]!
 8006150:	1c4b      	adds	r3, r1, #1
 8006152:	429f      	cmp	r7, r3
 8006154:	d8f5      	bhi.n	8006142 <ai_platform_get_activations_map+0x4e>
 8006156:	d1da      	bne.n	800610e <ai_platform_get_activations_map+0x1a>
 8006158:	3102      	adds	r1, #2
 800615a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800615e:	42b3      	cmp	r3, r6
 8006160:	d1d5      	bne.n	800610e <ai_platform_get_activations_map+0x1a>
 8006162:	2401      	movs	r4, #1
 8006164:	e7d3      	b.n	800610e <ai_platform_get_activations_map+0x1a>
 8006166:	f106 000c 	add.w	r0, r6, #12
 800616a:	f7ff ff4d 	bl	8006008 <ai_buffer_array_sane>
 800616e:	2800      	cmp	r0, #0
 8006170:	d0cc      	beq.n	800610c <ai_platform_get_activations_map+0x18>
 8006172:	89f3      	ldrh	r3, [r6, #14]
 8006174:	429f      	cmp	r7, r3
 8006176:	d1c9      	bne.n	800610c <ai_platform_get_activations_map+0x18>
 8006178:	3d04      	subs	r5, #4
 800617a:	4622      	mov	r2, r4
 800617c:	6933      	ldr	r3, [r6, #16]
 800617e:	4423      	add	r3, r4
 8006180:	341c      	adds	r4, #28
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	b123      	cbz	r3, 8006190 <ai_platform_get_activations_map+0x9c>
 8006186:	3201      	adds	r2, #1
 8006188:	f845 3f04 	str.w	r3, [r5, #4]!
 800618c:	4297      	cmp	r7, r2
 800618e:	d8f5      	bhi.n	800617c <ai_platform_get_activations_map+0x88>
 8006190:	1abc      	subs	r4, r7, r2
 8006192:	fab4 f484 	clz	r4, r4
 8006196:	0964      	lsrs	r4, r4, #5
 8006198:	e7b9      	b.n	800610e <ai_platform_get_activations_map+0x1a>
 800619a:	428f      	cmp	r7, r1
 800619c:	d1b7      	bne.n	800610e <ai_platform_get_activations_map+0x1a>
 800619e:	e7e0      	b.n	8006162 <ai_platform_get_activations_map+0x6e>
 80061a0:	a1facade 	.word	0xa1facade

080061a4 <ai_platform_bind_network_params>:
 80061a4:	2a00      	cmp	r2, #0
 80061a6:	bf18      	it	ne
 80061a8:	2900      	cmpne	r1, #0
 80061aa:	d010      	beq.n	80061ce <ai_platform_bind_network_params+0x2a>
 80061ac:	b178      	cbz	r0, 80061ce <ai_platform_bind_network_params+0x2a>
 80061ae:	4603      	mov	r3, r0
 80061b0:	4808      	ldr	r0, [pc, #32]	; (80061d4 <ai_platform_bind_network_params+0x30>)
 80061b2:	f103 0c0c 	add.w	ip, r3, #12
 80061b6:	f843 0b04 	str.w	r0, [r3], #4
 80061ba:	c903      	ldmia	r1, {r0, r1}
 80061bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80061c0:	2301      	movs	r3, #1
 80061c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061c6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80061ca:	4618      	mov	r0, r3
 80061cc:	4770      	bx	lr
 80061ce:	2300      	movs	r3, #0
 80061d0:	4618      	mov	r0, r3
 80061d2:	4770      	bx	lr
 80061d4:	a1facade 	.word	0xa1facade

080061d8 <ai_platform_network_get_error>:
 80061d8:	b510      	push	{r4, lr}
 80061da:	2800      	cmp	r0, #0
 80061dc:	d03f      	beq.n	800625e <ai_platform_network_get_error+0x86>
 80061de:	4b7d      	ldr	r3, [pc, #500]	; (80063d4 <ai_platform_network_get_error+0x1fc>)
 80061e0:	4604      	mov	r4, r0
 80061e2:	6802      	ldr	r2, [r0, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d13a      	bne.n	800625e <ai_platform_network_get_error+0x86>
 80061e8:	f7ff ff28 	bl	800603c <_ai_platform_acquire_crc>
 80061ec:	4b7a      	ldr	r3, [pc, #488]	; (80063d8 <ai_platform_network_get_error+0x200>)
 80061ee:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061f8:	189a      	adds	r2, r3, r2
 80061fa:	2a01      	cmp	r2, #1
 80061fc:	f240 8086 	bls.w	800630c <ai_platform_network_get_error+0x134>
 8006200:	f240 4249 	movw	r2, #1097	; 0x449
 8006204:	4293      	cmp	r3, r2
 8006206:	f000 8081 	beq.w	800630c <ai_platform_network_get_error+0x134>
 800620a:	4a74      	ldr	r2, [pc, #464]	; (80063dc <ai_platform_network_get_error+0x204>)
 800620c:	6813      	ldr	r3, [r2, #0]
 800620e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006212:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006216:	f000 8087 	beq.w	8006328 <ai_platform_network_get_error+0x150>
 800621a:	6813      	ldr	r3, [r2, #0]
 800621c:	f240 4183 	movw	r1, #1155	; 0x483
 8006220:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006224:	428b      	cmp	r3, r1
 8006226:	f000 80a9 	beq.w	800637c <ai_platform_network_get_error+0x1a4>
 800622a:	6813      	ldr	r3, [r2, #0]
 800622c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006230:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006234:	f000 80c0 	beq.w	80063b8 <ai_platform_network_get_error+0x1e0>
 8006238:	6813      	ldr	r3, [r2, #0]
 800623a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800623e:	2b00      	cmp	r3, #0
 8006240:	f040 8082 	bne.w	8006348 <ai_platform_network_get_error+0x170>
 8006244:	4a66      	ldr	r2, [pc, #408]	; (80063e0 <ai_platform_network_get_error+0x208>)
 8006246:	2301      	movs	r3, #1
 8006248:	6093      	str	r3, [r2, #8]
 800624a:	6893      	ldr	r3, [r2, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1fc      	bne.n	800624a <ai_platform_network_get_error+0x72>
 8006250:	4964      	ldr	r1, [pc, #400]	; (80063e4 <ai_platform_network_get_error+0x20c>)
 8006252:	4b65      	ldr	r3, [pc, #404]	; (80063e8 <ai_platform_network_get_error+0x210>)
 8006254:	6011      	str	r1, [r2, #0]
 8006256:	6812      	ldr	r2, [r2, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d075      	beq.n	8006348 <ai_platform_network_get_error+0x170>
 800625c:	e7fe      	b.n	800625c <ai_platform_network_get_error+0x84>
 800625e:	f7ff feed 	bl	800603c <_ai_platform_acquire_crc>
 8006262:	4b5d      	ldr	r3, [pc, #372]	; (80063d8 <ai_platform_network_get_error+0x200>)
 8006264:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800626e:	185a      	adds	r2, r3, r1
 8006270:	2a01      	cmp	r2, #1
 8006272:	d929      	bls.n	80062c8 <ai_platform_network_get_error+0xf0>
 8006274:	f240 4249 	movw	r2, #1097	; 0x449
 8006278:	4293      	cmp	r3, r2
 800627a:	d025      	beq.n	80062c8 <ai_platform_network_get_error+0xf0>
 800627c:	4a57      	ldr	r2, [pc, #348]	; (80063dc <ai_platform_network_get_error+0x204>)
 800627e:	6813      	ldr	r3, [r2, #0]
 8006280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006284:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006288:	d02b      	beq.n	80062e2 <ai_platform_network_get_error+0x10a>
 800628a:	6813      	ldr	r3, [r2, #0]
 800628c:	f240 4183 	movw	r1, #1155	; 0x483
 8006290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006294:	428b      	cmp	r3, r1
 8006296:	d060      	beq.n	800635a <ai_platform_network_get_error+0x182>
 8006298:	6813      	ldr	r3, [r2, #0]
 800629a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800629e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80062a2:	d07c      	beq.n	800639e <ai_platform_network_get_error+0x1c6>
 80062a4:	6813      	ldr	r3, [r2, #0]
 80062a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d129      	bne.n	8006302 <ai_platform_network_get_error+0x12a>
 80062ae:	4a4c      	ldr	r2, [pc, #304]	; (80063e0 <ai_platform_network_get_error+0x208>)
 80062b0:	2301      	movs	r3, #1
 80062b2:	6093      	str	r3, [r2, #8]
 80062b4:	6893      	ldr	r3, [r2, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1fc      	bne.n	80062b4 <ai_platform_network_get_error+0xdc>
 80062ba:	494a      	ldr	r1, [pc, #296]	; (80063e4 <ai_platform_network_get_error+0x20c>)
 80062bc:	4b4a      	ldr	r3, [pc, #296]	; (80063e8 <ai_platform_network_get_error+0x210>)
 80062be:	6011      	str	r1, [r2, #0]
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d01d      	beq.n	8006302 <ai_platform_network_get_error+0x12a>
 80062c6:	e7fe      	b.n	80062c6 <ai_platform_network_get_error+0xee>
 80062c8:	4a45      	ldr	r2, [pc, #276]	; (80063e0 <ai_platform_network_get_error+0x208>)
 80062ca:	2301      	movs	r3, #1
 80062cc:	6093      	str	r3, [r2, #8]
 80062ce:	6893      	ldr	r3, [r2, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1fc      	bne.n	80062ce <ai_platform_network_get_error+0xf6>
 80062d4:	4943      	ldr	r1, [pc, #268]	; (80063e4 <ai_platform_network_get_error+0x20c>)
 80062d6:	4b44      	ldr	r3, [pc, #272]	; (80063e8 <ai_platform_network_get_error+0x210>)
 80062d8:	6011      	str	r1, [r2, #0]
 80062da:	6812      	ldr	r2, [r2, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d010      	beq.n	8006302 <ai_platform_network_get_error+0x12a>
 80062e0:	e7fe      	b.n	80062e0 <ai_platform_network_get_error+0x108>
 80062e2:	4a42      	ldr	r2, [pc, #264]	; (80063ec <ai_platform_network_get_error+0x214>)
 80062e4:	2301      	movs	r3, #1
 80062e6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80062ea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1fb      	bne.n	80062ea <ai_platform_network_get_error+0x112>
 80062f2:	493c      	ldr	r1, [pc, #240]	; (80063e4 <ai_platform_network_get_error+0x20c>)
 80062f4:	4b3c      	ldr	r3, [pc, #240]	; (80063e8 <ai_platform_network_get_error+0x210>)
 80062f6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80062fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80062fe:	429a      	cmp	r2, r3
 8006300:	d111      	bne.n	8006326 <ai_platform_network_get_error+0x14e>
 8006302:	f7ff fe9d 	bl	8006040 <_ai_platform_release_crc>
 8006306:	f241 0010 	movw	r0, #4112	; 0x1010
 800630a:	bd10      	pop	{r4, pc}
 800630c:	4a34      	ldr	r2, [pc, #208]	; (80063e0 <ai_platform_network_get_error+0x208>)
 800630e:	2301      	movs	r3, #1
 8006310:	6093      	str	r3, [r2, #8]
 8006312:	6893      	ldr	r3, [r2, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1fc      	bne.n	8006312 <ai_platform_network_get_error+0x13a>
 8006318:	4932      	ldr	r1, [pc, #200]	; (80063e4 <ai_platform_network_get_error+0x20c>)
 800631a:	4b33      	ldr	r3, [pc, #204]	; (80063e8 <ai_platform_network_get_error+0x210>)
 800631c:	6011      	str	r1, [r2, #0]
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d011      	beq.n	8006348 <ai_platform_network_get_error+0x170>
 8006324:	e7fe      	b.n	8006324 <ai_platform_network_get_error+0x14c>
 8006326:	e7fe      	b.n	8006326 <ai_platform_network_get_error+0x14e>
 8006328:	4a30      	ldr	r2, [pc, #192]	; (80063ec <ai_platform_network_get_error+0x214>)
 800632a:	2301      	movs	r3, #1
 800632c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006330:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1fb      	bne.n	8006330 <ai_platform_network_get_error+0x158>
 8006338:	492a      	ldr	r1, [pc, #168]	; (80063e4 <ai_platform_network_get_error+0x20c>)
 800633a:	4b2b      	ldr	r3, [pc, #172]	; (80063e8 <ai_platform_network_get_error+0x210>)
 800633c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006340:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006344:	429a      	cmp	r2, r3
 8006346:	d107      	bne.n	8006358 <ai_platform_network_get_error+0x180>
 8006348:	f7ff fe7a 	bl	8006040 <_ai_platform_release_crc>
 800634c:	f104 0010 	add.w	r0, r4, #16
 8006350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006354:	f001 bae6 	b.w	8007924 <core_get_error>
 8006358:	e7fe      	b.n	8006358 <ai_platform_network_get_error+0x180>
 800635a:	4a24      	ldr	r2, [pc, #144]	; (80063ec <ai_platform_network_get_error+0x214>)
 800635c:	2301      	movs	r3, #1
 800635e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006362:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1fb      	bne.n	8006362 <ai_platform_network_get_error+0x18a>
 800636a:	491e      	ldr	r1, [pc, #120]	; (80063e4 <ai_platform_network_get_error+0x20c>)
 800636c:	4b1e      	ldr	r3, [pc, #120]	; (80063e8 <ai_platform_network_get_error+0x210>)
 800636e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006372:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006376:	429a      	cmp	r2, r3
 8006378:	d0c3      	beq.n	8006302 <ai_platform_network_get_error+0x12a>
 800637a:	e7fe      	b.n	800637a <ai_platform_network_get_error+0x1a2>
 800637c:	4a1b      	ldr	r2, [pc, #108]	; (80063ec <ai_platform_network_get_error+0x214>)
 800637e:	2301      	movs	r3, #1
 8006380:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006384:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1fb      	bne.n	8006384 <ai_platform_network_get_error+0x1ac>
 800638c:	4915      	ldr	r1, [pc, #84]	; (80063e4 <ai_platform_network_get_error+0x20c>)
 800638e:	4b16      	ldr	r3, [pc, #88]	; (80063e8 <ai_platform_network_get_error+0x210>)
 8006390:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006394:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006398:	429a      	cmp	r2, r3
 800639a:	d0d5      	beq.n	8006348 <ai_platform_network_get_error+0x170>
 800639c:	e7fe      	b.n	800639c <ai_platform_network_get_error+0x1c4>
 800639e:	4a10      	ldr	r2, [pc, #64]	; (80063e0 <ai_platform_network_get_error+0x208>)
 80063a0:	2301      	movs	r3, #1
 80063a2:	6093      	str	r3, [r2, #8]
 80063a4:	6893      	ldr	r3, [r2, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1fc      	bne.n	80063a4 <ai_platform_network_get_error+0x1cc>
 80063aa:	490e      	ldr	r1, [pc, #56]	; (80063e4 <ai_platform_network_get_error+0x20c>)
 80063ac:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <ai_platform_network_get_error+0x210>)
 80063ae:	6011      	str	r1, [r2, #0]
 80063b0:	6812      	ldr	r2, [r2, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d0a5      	beq.n	8006302 <ai_platform_network_get_error+0x12a>
 80063b6:	e7fe      	b.n	80063b6 <ai_platform_network_get_error+0x1de>
 80063b8:	4a09      	ldr	r2, [pc, #36]	; (80063e0 <ai_platform_network_get_error+0x208>)
 80063ba:	2301      	movs	r3, #1
 80063bc:	6093      	str	r3, [r2, #8]
 80063be:	6893      	ldr	r3, [r2, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1fc      	bne.n	80063be <ai_platform_network_get_error+0x1e6>
 80063c4:	4907      	ldr	r1, [pc, #28]	; (80063e4 <ai_platform_network_get_error+0x20c>)
 80063c6:	4b08      	ldr	r3, [pc, #32]	; (80063e8 <ai_platform_network_get_error+0x210>)
 80063c8:	6011      	str	r1, [r2, #0]
 80063ca:	6812      	ldr	r2, [r2, #0]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d0bb      	beq.n	8006348 <ai_platform_network_get_error+0x170>
 80063d0:	e7fe      	b.n	80063d0 <ai_platform_network_get_error+0x1f8>
 80063d2:	bf00      	nop
 80063d4:	a1c00100 	.word	0xa1c00100
 80063d8:	e0042000 	.word	0xe0042000
 80063dc:	5c001000 	.word	0x5c001000
 80063e0:	40023000 	.word	0x40023000
 80063e4:	f407a5c2 	.word	0xf407a5c2
 80063e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80063ec:	58024000 	.word	0x58024000

080063f0 <ai_platform_network_set_error>:
 80063f0:	b110      	cbz	r0, 80063f8 <ai_platform_network_set_error+0x8>
 80063f2:	3010      	adds	r0, #16
 80063f4:	f001 ba9c 	b.w	8007930 <core_set_error>
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop

080063fc <ai_platform_inputs_get>:
 80063fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006400:	b085      	sub	sp, #20
 8006402:	9102      	str	r1, [sp, #8]
 8006404:	2800      	cmp	r0, #0
 8006406:	f000 8093 	beq.w	8006530 <ai_platform_inputs_get+0x134>
 800640a:	4baa      	ldr	r3, [pc, #680]	; (80066b4 <ai_platform_inputs_get+0x2b8>)
 800640c:	4681      	mov	r9, r0
 800640e:	6802      	ldr	r2, [r0, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	f040 808d 	bne.w	8006530 <ai_platform_inputs_get+0x134>
 8006416:	f7ff fe11 	bl	800603c <_ai_platform_acquire_crc>
 800641a:	4ba7      	ldr	r3, [pc, #668]	; (80066b8 <ai_platform_inputs_get+0x2bc>)
 800641c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006426:	189a      	adds	r2, r3, r2
 8006428:	2a01      	cmp	r2, #1
 800642a:	f240 80da 	bls.w	80065e2 <ai_platform_inputs_get+0x1e6>
 800642e:	f240 4249 	movw	r2, #1097	; 0x449
 8006432:	4293      	cmp	r3, r2
 8006434:	f000 80d5 	beq.w	80065e2 <ai_platform_inputs_get+0x1e6>
 8006438:	4aa0      	ldr	r2, [pc, #640]	; (80066bc <ai_platform_inputs_get+0x2c0>)
 800643a:	6813      	ldr	r3, [r2, #0]
 800643c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006440:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006444:	f000 80dc 	beq.w	8006600 <ai_platform_inputs_get+0x204>
 8006448:	6813      	ldr	r3, [r2, #0]
 800644a:	f240 4183 	movw	r1, #1155	; 0x483
 800644e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006452:	428b      	cmp	r3, r1
 8006454:	f000 810e 	beq.w	8006674 <ai_platform_inputs_get+0x278>
 8006458:	6813      	ldr	r3, [r2, #0]
 800645a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800645e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006462:	f000 8143 	beq.w	80066ec <ai_platform_inputs_get+0x2f0>
 8006466:	6813      	ldr	r3, [r2, #0]
 8006468:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8113 	beq.w	8006698 <ai_platform_inputs_get+0x29c>
 8006472:	f7ff fde5 	bl	8006040 <_ai_platform_release_crc>
 8006476:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 80d2 	beq.w	8006624 <ai_platform_inputs_get+0x228>
 8006480:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8006484:	f1ba 0f00 	cmp.w	sl, #0
 8006488:	f000 80cc 	beq.w	8006624 <ai_platform_inputs_get+0x228>
 800648c:	2100      	movs	r1, #0
 800648e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006492:	460d      	mov	r5, r1
 8006494:	4689      	mov	r9, r1
 8006496:	e016      	b.n	80064c6 <ai_platform_inputs_get+0xca>
 8006498:	9a01      	ldr	r2, [sp, #4]
 800649a:	2301      	movs	r3, #1
 800649c:	f848 3002 	str.w	r3, [r8, r2]
 80064a0:	69b2      	ldr	r2, [r6, #24]
 80064a2:	f04f 0301 	mov.w	r3, #1
 80064a6:	6856      	ldr	r6, [r2, #4]
 80064a8:	3501      	adds	r5, #1
 80064aa:	f109 091c 	add.w	r9, r9, #28
 80064ae:	7523      	strb	r3, [r4, #20]
 80064b0:	2300      	movs	r3, #0
 80064b2:	6962      	ldr	r2, [r4, #20]
 80064b4:	60a7      	str	r7, [r4, #8]
 80064b6:	f36b 221f 	bfi	r2, fp, #8, #24
 80064ba:	6126      	str	r6, [r4, #16]
 80064bc:	61a1      	str	r1, [r4, #24]
 80064be:	60e3      	str	r3, [r4, #12]
 80064c0:	6162      	str	r2, [r4, #20]
 80064c2:	e9c4 0c00 	strd	r0, ip, [r4]
 80064c6:	f8ba 3000 	ldrh.w	r3, [sl]
 80064ca:	b2ac      	uxth	r4, r5
 80064cc:	42ab      	cmp	r3, r5
 80064ce:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	f240 80b5 	bls.w	8006642 <ai_platform_inputs_get+0x246>
 80064d8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 80b0 	beq.w	8006642 <ai_platform_inputs_get+0x246>
 80064e2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80064e6:	2e00      	cmp	r6, #0
 80064e8:	f000 80ab 	beq.w	8006642 <ai_platform_inputs_get+0x246>
 80064ec:	f8da 3008 	ldr.w	r3, [sl, #8]
 80064f0:	69b2      	ldr	r2, [r6, #24]
 80064f2:	68f1      	ldr	r1, [r6, #12]
 80064f4:	6810      	ldr	r0, [r2, #0]
 80064f6:	9100      	str	r1, [sp, #0]
 80064f8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 80064fc:	68b3      	ldr	r3, [r6, #8]
 80064fe:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006502:	444c      	add	r4, r9
 8006504:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006508:	f007 fbcc 	bl	800dca4 <ai_array_to_buffer_fmt>
 800650c:	69b2      	ldr	r2, [r6, #24]
 800650e:	9900      	ldr	r1, [sp, #0]
 8006510:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006514:	2f00      	cmp	r7, #0
 8006516:	d0c4      	beq.n	80064a2 <ai_platform_inputs_get+0xa6>
 8006518:	2200      	movs	r2, #0
 800651a:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800651e:	6832      	ldr	r2, [r6, #0]
 8006520:	607a      	str	r2, [r7, #4]
 8006522:	b112      	cbz	r2, 800652a <ai_platform_inputs_get+0x12e>
 8006524:	8852      	ldrh	r2, [r2, #2]
 8006526:	2a00      	cmp	r2, #0
 8006528:	d1b6      	bne.n	8006498 <ai_platform_inputs_get+0x9c>
 800652a:	69b2      	ldr	r2, [r6, #24]
 800652c:	2700      	movs	r7, #0
 800652e:	e7b8      	b.n	80064a2 <ai_platform_inputs_get+0xa6>
 8006530:	f7ff fd84 	bl	800603c <_ai_platform_acquire_crc>
 8006534:	4b60      	ldr	r3, [pc, #384]	; (80066b8 <ai_platform_inputs_get+0x2bc>)
 8006536:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006540:	185a      	adds	r2, r3, r1
 8006542:	2a01      	cmp	r2, #1
 8006544:	d92a      	bls.n	800659c <ai_platform_inputs_get+0x1a0>
 8006546:	f240 4249 	movw	r2, #1097	; 0x449
 800654a:	4293      	cmp	r3, r2
 800654c:	d026      	beq.n	800659c <ai_platform_inputs_get+0x1a0>
 800654e:	4a5b      	ldr	r2, [pc, #364]	; (80066bc <ai_platform_inputs_get+0x2c0>)
 8006550:	6813      	ldr	r3, [r2, #0]
 8006552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006556:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800655a:	d02c      	beq.n	80065b6 <ai_platform_inputs_get+0x1ba>
 800655c:	6813      	ldr	r3, [r2, #0]
 800655e:	f240 4183 	movw	r1, #1155	; 0x483
 8006562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006566:	428b      	cmp	r3, r1
 8006568:	d073      	beq.n	8006652 <ai_platform_inputs_get+0x256>
 800656a:	6813      	ldr	r3, [r2, #0]
 800656c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006570:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006574:	f000 80ac 	beq.w	80066d0 <ai_platform_inputs_get+0x2d4>
 8006578:	6813      	ldr	r3, [r2, #0]
 800657a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800657e:	2b00      	cmp	r3, #0
 8006580:	d129      	bne.n	80065d6 <ai_platform_inputs_get+0x1da>
 8006582:	4a4f      	ldr	r2, [pc, #316]	; (80066c0 <ai_platform_inputs_get+0x2c4>)
 8006584:	2301      	movs	r3, #1
 8006586:	6093      	str	r3, [r2, #8]
 8006588:	6893      	ldr	r3, [r2, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1fc      	bne.n	8006588 <ai_platform_inputs_get+0x18c>
 800658e:	494d      	ldr	r1, [pc, #308]	; (80066c4 <ai_platform_inputs_get+0x2c8>)
 8006590:	4b4d      	ldr	r3, [pc, #308]	; (80066c8 <ai_platform_inputs_get+0x2cc>)
 8006592:	6011      	str	r1, [r2, #0]
 8006594:	6812      	ldr	r2, [r2, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d01d      	beq.n	80065d6 <ai_platform_inputs_get+0x1da>
 800659a:	e7fe      	b.n	800659a <ai_platform_inputs_get+0x19e>
 800659c:	4a48      	ldr	r2, [pc, #288]	; (80066c0 <ai_platform_inputs_get+0x2c4>)
 800659e:	2301      	movs	r3, #1
 80065a0:	6093      	str	r3, [r2, #8]
 80065a2:	6893      	ldr	r3, [r2, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1fc      	bne.n	80065a2 <ai_platform_inputs_get+0x1a6>
 80065a8:	4946      	ldr	r1, [pc, #280]	; (80066c4 <ai_platform_inputs_get+0x2c8>)
 80065aa:	4b47      	ldr	r3, [pc, #284]	; (80066c8 <ai_platform_inputs_get+0x2cc>)
 80065ac:	6011      	str	r1, [r2, #0]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d010      	beq.n	80065d6 <ai_platform_inputs_get+0x1da>
 80065b4:	e7fe      	b.n	80065b4 <ai_platform_inputs_get+0x1b8>
 80065b6:	4a45      	ldr	r2, [pc, #276]	; (80066cc <ai_platform_inputs_get+0x2d0>)
 80065b8:	2301      	movs	r3, #1
 80065ba:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80065be:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1fb      	bne.n	80065be <ai_platform_inputs_get+0x1c2>
 80065c6:	493f      	ldr	r1, [pc, #252]	; (80066c4 <ai_platform_inputs_get+0x2c8>)
 80065c8:	4b3f      	ldr	r3, [pc, #252]	; (80066c8 <ai_platform_inputs_get+0x2cc>)
 80065ca:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80065ce:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d113      	bne.n	80065fe <ai_platform_inputs_get+0x202>
 80065d6:	f7ff fd33 	bl	8006040 <_ai_platform_release_crc>
 80065da:	2000      	movs	r0, #0
 80065dc:	b005      	add	sp, #20
 80065de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e2:	4a37      	ldr	r2, [pc, #220]	; (80066c0 <ai_platform_inputs_get+0x2c4>)
 80065e4:	2301      	movs	r3, #1
 80065e6:	6093      	str	r3, [r2, #8]
 80065e8:	6893      	ldr	r3, [r2, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1fc      	bne.n	80065e8 <ai_platform_inputs_get+0x1ec>
 80065ee:	4b35      	ldr	r3, [pc, #212]	; (80066c4 <ai_platform_inputs_get+0x2c8>)
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	4b35      	ldr	r3, [pc, #212]	; (80066c8 <ai_platform_inputs_get+0x2cc>)
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	f43f af3b 	beq.w	8006472 <ai_platform_inputs_get+0x76>
 80065fc:	e7fe      	b.n	80065fc <ai_platform_inputs_get+0x200>
 80065fe:	e7fe      	b.n	80065fe <ai_platform_inputs_get+0x202>
 8006600:	4a32      	ldr	r2, [pc, #200]	; (80066cc <ai_platform_inputs_get+0x2d0>)
 8006602:	2301      	movs	r3, #1
 8006604:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006608:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1fb      	bne.n	8006608 <ai_platform_inputs_get+0x20c>
 8006610:	4b2c      	ldr	r3, [pc, #176]	; (80066c4 <ai_platform_inputs_get+0x2c8>)
 8006612:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006616:	4b2c      	ldr	r3, [pc, #176]	; (80066c8 <ai_platform_inputs_get+0x2cc>)
 8006618:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800661c:	429a      	cmp	r2, r3
 800661e:	f43f af28 	beq.w	8006472 <ai_platform_inputs_get+0x76>
 8006622:	e7fe      	b.n	8006622 <ai_platform_inputs_get+0x226>
 8006624:	2400      	movs	r4, #0
 8006626:	2218      	movs	r2, #24
 8006628:	2111      	movs	r1, #17
 800662a:	f109 0010 	add.w	r0, r9, #16
 800662e:	f001 f97f 	bl	8007930 <core_set_error>
 8006632:	4620      	mov	r0, r4
 8006634:	9b02      	ldr	r3, [sp, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0d0      	beq.n	80065dc <ai_platform_inputs_get+0x1e0>
 800663a:	801c      	strh	r4, [r3, #0]
 800663c:	b005      	add	sp, #20
 800663e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006642:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006646:	2c00      	cmp	r4, #0
 8006648:	d0ec      	beq.n	8006624 <ai_platform_inputs_get+0x228>
 800664a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800664e:	6858      	ldr	r0, [r3, #4]
 8006650:	e7f0      	b.n	8006634 <ai_platform_inputs_get+0x238>
 8006652:	4a1e      	ldr	r2, [pc, #120]	; (80066cc <ai_platform_inputs_get+0x2d0>)
 8006654:	2301      	movs	r3, #1
 8006656:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800665a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1fb      	bne.n	800665a <ai_platform_inputs_get+0x25e>
 8006662:	4918      	ldr	r1, [pc, #96]	; (80066c4 <ai_platform_inputs_get+0x2c8>)
 8006664:	4b18      	ldr	r3, [pc, #96]	; (80066c8 <ai_platform_inputs_get+0x2cc>)
 8006666:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800666a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800666e:	429a      	cmp	r2, r3
 8006670:	d0b1      	beq.n	80065d6 <ai_platform_inputs_get+0x1da>
 8006672:	e7fe      	b.n	8006672 <ai_platform_inputs_get+0x276>
 8006674:	4a15      	ldr	r2, [pc, #84]	; (80066cc <ai_platform_inputs_get+0x2d0>)
 8006676:	2301      	movs	r3, #1
 8006678:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800667c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1fb      	bne.n	800667c <ai_platform_inputs_get+0x280>
 8006684:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <ai_platform_inputs_get+0x2c8>)
 8006686:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800668a:	4b0f      	ldr	r3, [pc, #60]	; (80066c8 <ai_platform_inputs_get+0x2cc>)
 800668c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006690:	429a      	cmp	r2, r3
 8006692:	f43f aeee 	beq.w	8006472 <ai_platform_inputs_get+0x76>
 8006696:	e7fe      	b.n	8006696 <ai_platform_inputs_get+0x29a>
 8006698:	4a09      	ldr	r2, [pc, #36]	; (80066c0 <ai_platform_inputs_get+0x2c4>)
 800669a:	2301      	movs	r3, #1
 800669c:	6093      	str	r3, [r2, #8]
 800669e:	6893      	ldr	r3, [r2, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1fc      	bne.n	800669e <ai_platform_inputs_get+0x2a2>
 80066a4:	4b07      	ldr	r3, [pc, #28]	; (80066c4 <ai_platform_inputs_get+0x2c8>)
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <ai_platform_inputs_get+0x2cc>)
 80066aa:	6812      	ldr	r2, [r2, #0]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	f43f aee0 	beq.w	8006472 <ai_platform_inputs_get+0x76>
 80066b2:	e7fe      	b.n	80066b2 <ai_platform_inputs_get+0x2b6>
 80066b4:	a1c00100 	.word	0xa1c00100
 80066b8:	e0042000 	.word	0xe0042000
 80066bc:	5c001000 	.word	0x5c001000
 80066c0:	40023000 	.word	0x40023000
 80066c4:	f407a5c2 	.word	0xf407a5c2
 80066c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80066cc:	58024000 	.word	0x58024000
 80066d0:	4a0d      	ldr	r2, [pc, #52]	; (8006708 <ai_platform_inputs_get+0x30c>)
 80066d2:	2301      	movs	r3, #1
 80066d4:	6093      	str	r3, [r2, #8]
 80066d6:	6893      	ldr	r3, [r2, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1fc      	bne.n	80066d6 <ai_platform_inputs_get+0x2da>
 80066dc:	490b      	ldr	r1, [pc, #44]	; (800670c <ai_platform_inputs_get+0x310>)
 80066de:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <ai_platform_inputs_get+0x314>)
 80066e0:	6011      	str	r1, [r2, #0]
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	f43f af76 	beq.w	80065d6 <ai_platform_inputs_get+0x1da>
 80066ea:	e7fe      	b.n	80066ea <ai_platform_inputs_get+0x2ee>
 80066ec:	4a06      	ldr	r2, [pc, #24]	; (8006708 <ai_platform_inputs_get+0x30c>)
 80066ee:	2301      	movs	r3, #1
 80066f0:	6093      	str	r3, [r2, #8]
 80066f2:	6893      	ldr	r3, [r2, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1fc      	bne.n	80066f2 <ai_platform_inputs_get+0x2f6>
 80066f8:	4b04      	ldr	r3, [pc, #16]	; (800670c <ai_platform_inputs_get+0x310>)
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	4b04      	ldr	r3, [pc, #16]	; (8006710 <ai_platform_inputs_get+0x314>)
 80066fe:	6812      	ldr	r2, [r2, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	f43f aeb6 	beq.w	8006472 <ai_platform_inputs_get+0x76>
 8006706:	e7fe      	b.n	8006706 <ai_platform_inputs_get+0x30a>
 8006708:	40023000 	.word	0x40023000
 800670c:	f407a5c2 	.word	0xf407a5c2
 8006710:	b5e8b5cd 	.word	0xb5e8b5cd

08006714 <ai_platform_outputs_get>:
 8006714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006718:	b085      	sub	sp, #20
 800671a:	9102      	str	r1, [sp, #8]
 800671c:	2800      	cmp	r0, #0
 800671e:	f000 808f 	beq.w	8006840 <ai_platform_outputs_get+0x12c>
 8006722:	4ba8      	ldr	r3, [pc, #672]	; (80069c4 <ai_platform_outputs_get+0x2b0>)
 8006724:	4681      	mov	r9, r0
 8006726:	6802      	ldr	r2, [r0, #0]
 8006728:	429a      	cmp	r2, r3
 800672a:	f040 8089 	bne.w	8006840 <ai_platform_outputs_get+0x12c>
 800672e:	f7ff fc85 	bl	800603c <_ai_platform_acquire_crc>
 8006732:	4ba5      	ldr	r3, [pc, #660]	; (80069c8 <ai_platform_outputs_get+0x2b4>)
 8006734:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800673e:	189a      	adds	r2, r3, r2
 8006740:	2a01      	cmp	r2, #1
 8006742:	f240 80d6 	bls.w	80068f2 <ai_platform_outputs_get+0x1de>
 8006746:	f240 4249 	movw	r2, #1097	; 0x449
 800674a:	4293      	cmp	r3, r2
 800674c:	f000 80d1 	beq.w	80068f2 <ai_platform_outputs_get+0x1de>
 8006750:	4a9e      	ldr	r2, [pc, #632]	; (80069cc <ai_platform_outputs_get+0x2b8>)
 8006752:	6813      	ldr	r3, [r2, #0]
 8006754:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006758:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800675c:	f000 80d8 	beq.w	8006910 <ai_platform_outputs_get+0x1fc>
 8006760:	6813      	ldr	r3, [r2, #0]
 8006762:	f240 4183 	movw	r1, #1155	; 0x483
 8006766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800676a:	428b      	cmp	r3, r1
 800676c:	f000 8109 	beq.w	8006982 <ai_platform_outputs_get+0x26e>
 8006770:	6813      	ldr	r3, [r2, #0]
 8006772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006776:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800677a:	f000 813f 	beq.w	80069fc <ai_platform_outputs_get+0x2e8>
 800677e:	6813      	ldr	r3, [r2, #0]
 8006780:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 810e 	beq.w	80069a6 <ai_platform_outputs_get+0x292>
 800678a:	f7ff fc59 	bl	8006040 <_ai_platform_release_crc>
 800678e:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8006792:	2b01      	cmp	r3, #1
 8006794:	f240 80db 	bls.w	800694e <ai_platform_outputs_get+0x23a>
 8006798:	2100      	movs	r1, #0
 800679a:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800679e:	f8cd 900c 	str.w	r9, [sp, #12]
 80067a2:	460d      	mov	r5, r1
 80067a4:	4689      	mov	r9, r1
 80067a6:	e016      	b.n	80067d6 <ai_platform_outputs_get+0xc2>
 80067a8:	9a01      	ldr	r2, [sp, #4]
 80067aa:	2301      	movs	r3, #1
 80067ac:	f848 3002 	str.w	r3, [r8, r2]
 80067b0:	69b2      	ldr	r2, [r6, #24]
 80067b2:	f04f 0301 	mov.w	r3, #1
 80067b6:	6856      	ldr	r6, [r2, #4]
 80067b8:	3501      	adds	r5, #1
 80067ba:	f109 091c 	add.w	r9, r9, #28
 80067be:	7523      	strb	r3, [r4, #20]
 80067c0:	2300      	movs	r3, #0
 80067c2:	6962      	ldr	r2, [r4, #20]
 80067c4:	60a7      	str	r7, [r4, #8]
 80067c6:	f36b 221f 	bfi	r2, fp, #8, #24
 80067ca:	6126      	str	r6, [r4, #16]
 80067cc:	61a1      	str	r1, [r4, #24]
 80067ce:	60e3      	str	r3, [r4, #12]
 80067d0:	6162      	str	r2, [r4, #20]
 80067d2:	e9c4 0c00 	strd	r0, ip, [r4]
 80067d6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80067da:	b2ac      	uxth	r4, r5
 80067dc:	42ab      	cmp	r3, r5
 80067de:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80067e2:	9301      	str	r3, [sp, #4]
 80067e4:	f240 80a6 	bls.w	8006934 <ai_platform_outputs_get+0x220>
 80067e8:	f8da 3010 	ldr.w	r3, [sl, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80a1 	beq.w	8006934 <ai_platform_outputs_get+0x220>
 80067f2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80067f6:	2e00      	cmp	r6, #0
 80067f8:	f000 809c 	beq.w	8006934 <ai_platform_outputs_get+0x220>
 80067fc:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006800:	69b2      	ldr	r2, [r6, #24]
 8006802:	68f1      	ldr	r1, [r6, #12]
 8006804:	6810      	ldr	r0, [r2, #0]
 8006806:	9100      	str	r1, [sp, #0]
 8006808:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800680c:	68b3      	ldr	r3, [r6, #8]
 800680e:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006812:	444c      	add	r4, r9
 8006814:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006818:	f007 fa44 	bl	800dca4 <ai_array_to_buffer_fmt>
 800681c:	69b2      	ldr	r2, [r6, #24]
 800681e:	9900      	ldr	r1, [sp, #0]
 8006820:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006824:	2f00      	cmp	r7, #0
 8006826:	d0c4      	beq.n	80067b2 <ai_platform_outputs_get+0x9e>
 8006828:	2200      	movs	r2, #0
 800682a:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800682e:	6832      	ldr	r2, [r6, #0]
 8006830:	607a      	str	r2, [r7, #4]
 8006832:	b112      	cbz	r2, 800683a <ai_platform_outputs_get+0x126>
 8006834:	8852      	ldrh	r2, [r2, #2]
 8006836:	2a00      	cmp	r2, #0
 8006838:	d1b6      	bne.n	80067a8 <ai_platform_outputs_get+0x94>
 800683a:	69b2      	ldr	r2, [r6, #24]
 800683c:	2700      	movs	r7, #0
 800683e:	e7b8      	b.n	80067b2 <ai_platform_outputs_get+0x9e>
 8006840:	f7ff fbfc 	bl	800603c <_ai_platform_acquire_crc>
 8006844:	4b60      	ldr	r3, [pc, #384]	; (80069c8 <ai_platform_outputs_get+0x2b4>)
 8006846:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006850:	185a      	adds	r2, r3, r1
 8006852:	2a01      	cmp	r2, #1
 8006854:	d92a      	bls.n	80068ac <ai_platform_outputs_get+0x198>
 8006856:	f240 4249 	movw	r2, #1097	; 0x449
 800685a:	4293      	cmp	r3, r2
 800685c:	d026      	beq.n	80068ac <ai_platform_outputs_get+0x198>
 800685e:	4a5b      	ldr	r2, [pc, #364]	; (80069cc <ai_platform_outputs_get+0x2b8>)
 8006860:	6813      	ldr	r3, [r2, #0]
 8006862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006866:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800686a:	d02c      	beq.n	80068c6 <ai_platform_outputs_get+0x1b2>
 800686c:	6813      	ldr	r3, [r2, #0]
 800686e:	f240 4183 	movw	r1, #1155	; 0x483
 8006872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006876:	428b      	cmp	r3, r1
 8006878:	d072      	beq.n	8006960 <ai_platform_outputs_get+0x24c>
 800687a:	6813      	ldr	r3, [r2, #0]
 800687c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006880:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006884:	f000 80ac 	beq.w	80069e0 <ai_platform_outputs_get+0x2cc>
 8006888:	6813      	ldr	r3, [r2, #0]
 800688a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800688e:	2b00      	cmp	r3, #0
 8006890:	d129      	bne.n	80068e6 <ai_platform_outputs_get+0x1d2>
 8006892:	4a4f      	ldr	r2, [pc, #316]	; (80069d0 <ai_platform_outputs_get+0x2bc>)
 8006894:	2301      	movs	r3, #1
 8006896:	6093      	str	r3, [r2, #8]
 8006898:	6893      	ldr	r3, [r2, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1fc      	bne.n	8006898 <ai_platform_outputs_get+0x184>
 800689e:	494d      	ldr	r1, [pc, #308]	; (80069d4 <ai_platform_outputs_get+0x2c0>)
 80068a0:	4b4d      	ldr	r3, [pc, #308]	; (80069d8 <ai_platform_outputs_get+0x2c4>)
 80068a2:	6011      	str	r1, [r2, #0]
 80068a4:	6812      	ldr	r2, [r2, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d01d      	beq.n	80068e6 <ai_platform_outputs_get+0x1d2>
 80068aa:	e7fe      	b.n	80068aa <ai_platform_outputs_get+0x196>
 80068ac:	4a48      	ldr	r2, [pc, #288]	; (80069d0 <ai_platform_outputs_get+0x2bc>)
 80068ae:	2301      	movs	r3, #1
 80068b0:	6093      	str	r3, [r2, #8]
 80068b2:	6893      	ldr	r3, [r2, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1fc      	bne.n	80068b2 <ai_platform_outputs_get+0x19e>
 80068b8:	4946      	ldr	r1, [pc, #280]	; (80069d4 <ai_platform_outputs_get+0x2c0>)
 80068ba:	4b47      	ldr	r3, [pc, #284]	; (80069d8 <ai_platform_outputs_get+0x2c4>)
 80068bc:	6011      	str	r1, [r2, #0]
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d010      	beq.n	80068e6 <ai_platform_outputs_get+0x1d2>
 80068c4:	e7fe      	b.n	80068c4 <ai_platform_outputs_get+0x1b0>
 80068c6:	4a45      	ldr	r2, [pc, #276]	; (80069dc <ai_platform_outputs_get+0x2c8>)
 80068c8:	2301      	movs	r3, #1
 80068ca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80068ce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1fb      	bne.n	80068ce <ai_platform_outputs_get+0x1ba>
 80068d6:	493f      	ldr	r1, [pc, #252]	; (80069d4 <ai_platform_outputs_get+0x2c0>)
 80068d8:	4b3f      	ldr	r3, [pc, #252]	; (80069d8 <ai_platform_outputs_get+0x2c4>)
 80068da:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80068de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d113      	bne.n	800690e <ai_platform_outputs_get+0x1fa>
 80068e6:	f7ff fbab 	bl	8006040 <_ai_platform_release_crc>
 80068ea:	2000      	movs	r0, #0
 80068ec:	b005      	add	sp, #20
 80068ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f2:	4a37      	ldr	r2, [pc, #220]	; (80069d0 <ai_platform_outputs_get+0x2bc>)
 80068f4:	2301      	movs	r3, #1
 80068f6:	6093      	str	r3, [r2, #8]
 80068f8:	6893      	ldr	r3, [r2, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1fc      	bne.n	80068f8 <ai_platform_outputs_get+0x1e4>
 80068fe:	4b35      	ldr	r3, [pc, #212]	; (80069d4 <ai_platform_outputs_get+0x2c0>)
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	4b35      	ldr	r3, [pc, #212]	; (80069d8 <ai_platform_outputs_get+0x2c4>)
 8006904:	6812      	ldr	r2, [r2, #0]
 8006906:	429a      	cmp	r2, r3
 8006908:	f43f af3f 	beq.w	800678a <ai_platform_outputs_get+0x76>
 800690c:	e7fe      	b.n	800690c <ai_platform_outputs_get+0x1f8>
 800690e:	e7fe      	b.n	800690e <ai_platform_outputs_get+0x1fa>
 8006910:	4a32      	ldr	r2, [pc, #200]	; (80069dc <ai_platform_outputs_get+0x2c8>)
 8006912:	2301      	movs	r3, #1
 8006914:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006918:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1fb      	bne.n	8006918 <ai_platform_outputs_get+0x204>
 8006920:	4b2c      	ldr	r3, [pc, #176]	; (80069d4 <ai_platform_outputs_get+0x2c0>)
 8006922:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006926:	4b2c      	ldr	r3, [pc, #176]	; (80069d8 <ai_platform_outputs_get+0x2c4>)
 8006928:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800692c:	429a      	cmp	r2, r3
 800692e:	f43f af2c 	beq.w	800678a <ai_platform_outputs_get+0x76>
 8006932:	e7fe      	b.n	8006932 <ai_platform_outputs_get+0x21e>
 8006934:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006938:	b14c      	cbz	r4, 800694e <ai_platform_outputs_get+0x23a>
 800693a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800693e:	6858      	ldr	r0, [r3, #4]
 8006940:	9b02      	ldr	r3, [sp, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0d2      	beq.n	80068ec <ai_platform_outputs_get+0x1d8>
 8006946:	801c      	strh	r4, [r3, #0]
 8006948:	b005      	add	sp, #20
 800694a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800694e:	2400      	movs	r4, #0
 8006950:	2218      	movs	r2, #24
 8006952:	2111      	movs	r1, #17
 8006954:	f109 0010 	add.w	r0, r9, #16
 8006958:	f000 ffea 	bl	8007930 <core_set_error>
 800695c:	4620      	mov	r0, r4
 800695e:	e7ef      	b.n	8006940 <ai_platform_outputs_get+0x22c>
 8006960:	4a1e      	ldr	r2, [pc, #120]	; (80069dc <ai_platform_outputs_get+0x2c8>)
 8006962:	2301      	movs	r3, #1
 8006964:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006968:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1fb      	bne.n	8006968 <ai_platform_outputs_get+0x254>
 8006970:	4918      	ldr	r1, [pc, #96]	; (80069d4 <ai_platform_outputs_get+0x2c0>)
 8006972:	4b19      	ldr	r3, [pc, #100]	; (80069d8 <ai_platform_outputs_get+0x2c4>)
 8006974:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006978:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800697c:	429a      	cmp	r2, r3
 800697e:	d0b2      	beq.n	80068e6 <ai_platform_outputs_get+0x1d2>
 8006980:	e7fe      	b.n	8006980 <ai_platform_outputs_get+0x26c>
 8006982:	4a16      	ldr	r2, [pc, #88]	; (80069dc <ai_platform_outputs_get+0x2c8>)
 8006984:	2301      	movs	r3, #1
 8006986:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800698a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1fb      	bne.n	800698a <ai_platform_outputs_get+0x276>
 8006992:	4b10      	ldr	r3, [pc, #64]	; (80069d4 <ai_platform_outputs_get+0x2c0>)
 8006994:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006998:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <ai_platform_outputs_get+0x2c4>)
 800699a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800699e:	429a      	cmp	r2, r3
 80069a0:	f43f aef3 	beq.w	800678a <ai_platform_outputs_get+0x76>
 80069a4:	e7fe      	b.n	80069a4 <ai_platform_outputs_get+0x290>
 80069a6:	4a0a      	ldr	r2, [pc, #40]	; (80069d0 <ai_platform_outputs_get+0x2bc>)
 80069a8:	2301      	movs	r3, #1
 80069aa:	6093      	str	r3, [r2, #8]
 80069ac:	6893      	ldr	r3, [r2, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1fc      	bne.n	80069ac <ai_platform_outputs_get+0x298>
 80069b2:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <ai_platform_outputs_get+0x2c0>)
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	4b08      	ldr	r3, [pc, #32]	; (80069d8 <ai_platform_outputs_get+0x2c4>)
 80069b8:	6812      	ldr	r2, [r2, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	f43f aee5 	beq.w	800678a <ai_platform_outputs_get+0x76>
 80069c0:	e7fe      	b.n	80069c0 <ai_platform_outputs_get+0x2ac>
 80069c2:	bf00      	nop
 80069c4:	a1c00100 	.word	0xa1c00100
 80069c8:	e0042000 	.word	0xe0042000
 80069cc:	5c001000 	.word	0x5c001000
 80069d0:	40023000 	.word	0x40023000
 80069d4:	f407a5c2 	.word	0xf407a5c2
 80069d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80069dc:	58024000 	.word	0x58024000
 80069e0:	4a0d      	ldr	r2, [pc, #52]	; (8006a18 <ai_platform_outputs_get+0x304>)
 80069e2:	2301      	movs	r3, #1
 80069e4:	6093      	str	r3, [r2, #8]
 80069e6:	6893      	ldr	r3, [r2, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1fc      	bne.n	80069e6 <ai_platform_outputs_get+0x2d2>
 80069ec:	490b      	ldr	r1, [pc, #44]	; (8006a1c <ai_platform_outputs_get+0x308>)
 80069ee:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <ai_platform_outputs_get+0x30c>)
 80069f0:	6011      	str	r1, [r2, #0]
 80069f2:	6812      	ldr	r2, [r2, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	f43f af76 	beq.w	80068e6 <ai_platform_outputs_get+0x1d2>
 80069fa:	e7fe      	b.n	80069fa <ai_platform_outputs_get+0x2e6>
 80069fc:	4a06      	ldr	r2, [pc, #24]	; (8006a18 <ai_platform_outputs_get+0x304>)
 80069fe:	2301      	movs	r3, #1
 8006a00:	6093      	str	r3, [r2, #8]
 8006a02:	6893      	ldr	r3, [r2, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1fc      	bne.n	8006a02 <ai_platform_outputs_get+0x2ee>
 8006a08:	4b04      	ldr	r3, [pc, #16]	; (8006a1c <ai_platform_outputs_get+0x308>)
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <ai_platform_outputs_get+0x30c>)
 8006a0e:	6812      	ldr	r2, [r2, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	f43f aeba 	beq.w	800678a <ai_platform_outputs_get+0x76>
 8006a16:	e7fe      	b.n	8006a16 <ai_platform_outputs_get+0x302>
 8006a18:	40023000 	.word	0x40023000
 8006a1c:	f407a5c2 	.word	0xf407a5c2
 8006a20:	b5e8b5cd 	.word	0xb5e8b5cd

08006a24 <ai_platform_network_create>:
 8006a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	4615      	mov	r5, r2
 8006a2e:	461e      	mov	r6, r3
 8006a30:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8006a34:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8006a38:	f7ff fb00 	bl	800603c <_ai_platform_acquire_crc>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	f000 80bd 	beq.w	8006bbc <ai_platform_network_create+0x198>
 8006a42:	4ba5      	ldr	r3, [pc, #660]	; (8006cd8 <ai_platform_network_create+0x2b4>)
 8006a44:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8006a48:	4601      	mov	r1, r0
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a50:	eb03 020c 	add.w	r2, r3, ip
 8006a54:	2a01      	cmp	r2, #1
 8006a56:	f240 80a8 	bls.w	8006baa <ai_platform_network_create+0x186>
 8006a5a:	f240 4249 	movw	r2, #1097	; 0x449
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	f000 80a3 	beq.w	8006baa <ai_platform_network_create+0x186>
 8006a64:	4a9d      	ldr	r2, [pc, #628]	; (8006cdc <ai_platform_network_create+0x2b8>)
 8006a66:	6813      	ldr	r3, [r2, #0]
 8006a68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a6c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006a70:	f000 80b9 	beq.w	8006be6 <ai_platform_network_create+0x1c2>
 8006a74:	6813      	ldr	r3, [r2, #0]
 8006a76:	f240 4c83 	movw	ip, #1155	; 0x483
 8006a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a7e:	4563      	cmp	r3, ip
 8006a80:	f000 80a1 	beq.w	8006bc6 <ai_platform_network_create+0x1a2>
 8006a84:	6813      	ldr	r3, [r2, #0]
 8006a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a8a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006a8e:	f000 8153 	beq.w	8006d38 <ai_platform_network_create+0x314>
 8006a92:	6813      	ldr	r3, [r2, #0]
 8006a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f040 808d 	bne.w	8006bb8 <ai_platform_network_create+0x194>
 8006a9e:	4a90      	ldr	r2, [pc, #576]	; (8006ce0 <ai_platform_network_create+0x2bc>)
 8006aa0:	2318      	movs	r3, #24
 8006aa2:	6093      	str	r3, [r2, #8]
 8006aa4:	6893      	ldr	r3, [r2, #8]
 8006aa6:	2b18      	cmp	r3, #24
 8006aa8:	f040 8086 	bne.w	8006bb8 <ai_platform_network_create+0x194>
 8006aac:	2301      	movs	r3, #1
 8006aae:	6093      	str	r3, [r2, #8]
 8006ab0:	6893      	ldr	r3, [r2, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1fc      	bne.n	8006ab0 <ai_platform_network_create+0x8c>
 8006ab6:	4608      	mov	r0, r1
 8006ab8:	f7ff fac2 	bl	8006040 <_ai_platform_release_crc>
 8006abc:	f7ff fabe 	bl	800603c <_ai_platform_acquire_crc>
 8006ac0:	4b85      	ldr	r3, [pc, #532]	; (8006cd8 <ai_platform_network_create+0x2b4>)
 8006ac2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006acc:	189a      	adds	r2, r3, r2
 8006ace:	2a01      	cmp	r2, #1
 8006ad0:	f240 809f 	bls.w	8006c12 <ai_platform_network_create+0x1ee>
 8006ad4:	f240 4249 	movw	r2, #1097	; 0x449
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	f000 809a 	beq.w	8006c12 <ai_platform_network_create+0x1ee>
 8006ade:	4a7f      	ldr	r2, [pc, #508]	; (8006cdc <ai_platform_network_create+0x2b8>)
 8006ae0:	6813      	ldr	r3, [r2, #0]
 8006ae2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ae6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006aea:	f000 80a0 	beq.w	8006c2e <ai_platform_network_create+0x20a>
 8006aee:	6813      	ldr	r3, [r2, #0]
 8006af0:	f240 4183 	movw	r1, #1155	; 0x483
 8006af4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006af8:	428b      	cmp	r3, r1
 8006afa:	f000 80bf 	beq.w	8006c7c <ai_platform_network_create+0x258>
 8006afe:	6813      	ldr	r3, [r2, #0]
 8006b00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b04:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006b08:	f000 8123 	beq.w	8006d52 <ai_platform_network_create+0x32e>
 8006b0c:	6813      	ldr	r3, [r2, #0]
 8006b0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 80c4 	beq.w	8006ca0 <ai_platform_network_create+0x27c>
 8006b18:	f7ff fa92 	bl	8006040 <_ai_platform_release_crc>
 8006b1c:	2c00      	cmp	r4, #0
 8006b1e:	f000 80aa 	beq.w	8006c76 <ai_platform_network_create+0x252>
 8006b22:	4b70      	ldr	r3, [pc, #448]	; (8006ce4 <ai_platform_network_create+0x2c0>)
 8006b24:	602b      	str	r3, [r5, #0]
 8006b26:	6025      	str	r5, [r4, #0]
 8006b28:	f000 fefa 	bl	8007920 <core_init>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	f000 8090 	beq.w	8006c52 <ai_platform_network_create+0x22e>
 8006b32:	f7ff fa83 	bl	800603c <_ai_platform_acquire_crc>
 8006b36:	4b68      	ldr	r3, [pc, #416]	; (8006cd8 <ai_platform_network_create+0x2b4>)
 8006b38:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b42:	185a      	adds	r2, r3, r1
 8006b44:	2a01      	cmp	r2, #1
 8006b46:	f240 80b9 	bls.w	8006cbc <ai_platform_network_create+0x298>
 8006b4a:	f240 4249 	movw	r2, #1097	; 0x449
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	f000 80b4 	beq.w	8006cbc <ai_platform_network_create+0x298>
 8006b54:	4a61      	ldr	r2, [pc, #388]	; (8006cdc <ai_platform_network_create+0x2b8>)
 8006b56:	6813      	ldr	r3, [r2, #0]
 8006b58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b5c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006b60:	f000 80c8 	beq.w	8006cf4 <ai_platform_network_create+0x2d0>
 8006b64:	6813      	ldr	r3, [r2, #0]
 8006b66:	f240 4183 	movw	r1, #1155	; 0x483
 8006b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b6e:	428b      	cmp	r3, r1
 8006b70:	f000 8107 	beq.w	8006d82 <ai_platform_network_create+0x35e>
 8006b74:	6813      	ldr	r3, [r2, #0]
 8006b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b7a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006b7e:	f000 8111 	beq.w	8006da4 <ai_platform_network_create+0x380>
 8006b82:	6813      	ldr	r3, [r2, #0]
 8006b84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f040 80c3 	bne.w	8006d14 <ai_platform_network_create+0x2f0>
 8006b8e:	4b54      	ldr	r3, [pc, #336]	; (8006ce0 <ai_platform_network_create+0x2bc>)
 8006b90:	2201      	movs	r2, #1
 8006b92:	609a      	str	r2, [r3, #8]
 8006b94:	689a      	ldr	r2, [r3, #8]
 8006b96:	2a00      	cmp	r2, #0
 8006b98:	d1fc      	bne.n	8006b94 <ai_platform_network_create+0x170>
 8006b9a:	4a53      	ldr	r2, [pc, #332]	; (8006ce8 <ai_platform_network_create+0x2c4>)
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	4b52      	ldr	r3, [pc, #328]	; (8006cec <ai_platform_network_create+0x2c8>)
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	f000 80b6 	beq.w	8006d14 <ai_platform_network_create+0x2f0>
 8006ba8:	e7fe      	b.n	8006ba8 <ai_platform_network_create+0x184>
 8006baa:	4b4d      	ldr	r3, [pc, #308]	; (8006ce0 <ai_platform_network_create+0x2bc>)
 8006bac:	2218      	movs	r2, #24
 8006bae:	609a      	str	r2, [r3, #8]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	2a18      	cmp	r2, #24
 8006bb4:	d027      	beq.n	8006c06 <ai_platform_network_create+0x1e2>
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	f7ff fa42 	bl	8006040 <_ai_platform_release_crc>
 8006bbc:	f244 1033 	movw	r0, #16691	; 0x4133
 8006bc0:	b003      	add	sp, #12
 8006bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bc6:	4a4a      	ldr	r2, [pc, #296]	; (8006cf0 <ai_platform_network_create+0x2cc>)
 8006bc8:	2318      	movs	r3, #24
 8006bca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006bce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006bd2:	2b18      	cmp	r3, #24
 8006bd4:	d1f0      	bne.n	8006bb8 <ai_platform_network_create+0x194>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006bdc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1fb      	bne.n	8006bdc <ai_platform_network_create+0x1b8>
 8006be4:	e767      	b.n	8006ab6 <ai_platform_network_create+0x92>
 8006be6:	4a42      	ldr	r2, [pc, #264]	; (8006cf0 <ai_platform_network_create+0x2cc>)
 8006be8:	2318      	movs	r3, #24
 8006bea:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006bee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006bf2:	2b18      	cmp	r3, #24
 8006bf4:	d1e0      	bne.n	8006bb8 <ai_platform_network_create+0x194>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006bfc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1fb      	bne.n	8006bfc <ai_platform_network_create+0x1d8>
 8006c04:	e757      	b.n	8006ab6 <ai_platform_network_create+0x92>
 8006c06:	2201      	movs	r2, #1
 8006c08:	609a      	str	r2, [r3, #8]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	2a00      	cmp	r2, #0
 8006c0e:	d1fc      	bne.n	8006c0a <ai_platform_network_create+0x1e6>
 8006c10:	e751      	b.n	8006ab6 <ai_platform_network_create+0x92>
 8006c12:	4a33      	ldr	r2, [pc, #204]	; (8006ce0 <ai_platform_network_create+0x2bc>)
 8006c14:	2301      	movs	r3, #1
 8006c16:	6093      	str	r3, [r2, #8]
 8006c18:	6891      	ldr	r1, [r2, #8]
 8006c1a:	2900      	cmp	r1, #0
 8006c1c:	d1fc      	bne.n	8006c18 <ai_platform_network_create+0x1f4>
 8006c1e:	4b32      	ldr	r3, [pc, #200]	; (8006ce8 <ai_platform_network_create+0x2c4>)
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	4b32      	ldr	r3, [pc, #200]	; (8006cec <ai_platform_network_create+0x2c8>)
 8006c24:	6812      	ldr	r2, [r2, #0]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	f43f af76 	beq.w	8006b18 <ai_platform_network_create+0xf4>
 8006c2c:	e7fe      	b.n	8006c2c <ai_platform_network_create+0x208>
 8006c2e:	4a30      	ldr	r2, [pc, #192]	; (8006cf0 <ai_platform_network_create+0x2cc>)
 8006c30:	2301      	movs	r3, #1
 8006c32:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006c36:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1fb      	bne.n	8006c36 <ai_platform_network_create+0x212>
 8006c3e:	4b2a      	ldr	r3, [pc, #168]	; (8006ce8 <ai_platform_network_create+0x2c4>)
 8006c40:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006c44:	4b29      	ldr	r3, [pc, #164]	; (8006cec <ai_platform_network_create+0x2c8>)
 8006c46:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	f43f af64 	beq.w	8006b18 <ai_platform_network_create+0xf4>
 8006c50:	e7fe      	b.n	8006c50 <ai_platform_network_create+0x22c>
 8006c52:	f04f 0930 	mov.w	r9, #48	; 0x30
 8006c56:	2300      	movs	r3, #0
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	2410      	movs	r4, #16
 8006c5c:	4642      	mov	r2, r8
 8006c5e:	4639      	mov	r1, r7
 8006c60:	4630      	mov	r0, r6
 8006c62:	f007 f803 	bl	800dc6c <ai_version_get>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2000      	movs	r0, #0
 8006c6a:	64ab      	str	r3, [r5, #72]	; 0x48
 8006c6c:	f369 0007 	bfi	r0, r9, #0, #8
 8006c70:	f364 201f 	bfi	r0, r4, #8, #24
 8006c74:	e7a4      	b.n	8006bc0 <ai_platform_network_create+0x19c>
 8006c76:	f241 0010 	movw	r0, #4112	; 0x1010
 8006c7a:	e7a1      	b.n	8006bc0 <ai_platform_network_create+0x19c>
 8006c7c:	4a1c      	ldr	r2, [pc, #112]	; (8006cf0 <ai_platform_network_create+0x2cc>)
 8006c7e:	2301      	movs	r3, #1
 8006c80:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006c84:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1fb      	bne.n	8006c84 <ai_platform_network_create+0x260>
 8006c8c:	4b16      	ldr	r3, [pc, #88]	; (8006ce8 <ai_platform_network_create+0x2c4>)
 8006c8e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006c92:	4b16      	ldr	r3, [pc, #88]	; (8006cec <ai_platform_network_create+0x2c8>)
 8006c94:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	f43f af3d 	beq.w	8006b18 <ai_platform_network_create+0xf4>
 8006c9e:	e7fe      	b.n	8006c9e <ai_platform_network_create+0x27a>
 8006ca0:	4a0f      	ldr	r2, [pc, #60]	; (8006ce0 <ai_platform_network_create+0x2bc>)
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	6093      	str	r3, [r2, #8]
 8006ca6:	6893      	ldr	r3, [r2, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1fc      	bne.n	8006ca6 <ai_platform_network_create+0x282>
 8006cac:	4b0e      	ldr	r3, [pc, #56]	; (8006ce8 <ai_platform_network_create+0x2c4>)
 8006cae:	6013      	str	r3, [r2, #0]
 8006cb0:	4b0e      	ldr	r3, [pc, #56]	; (8006cec <ai_platform_network_create+0x2c8>)
 8006cb2:	6812      	ldr	r2, [r2, #0]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	f43f af2f 	beq.w	8006b18 <ai_platform_network_create+0xf4>
 8006cba:	e7fe      	b.n	8006cba <ai_platform_network_create+0x296>
 8006cbc:	4a08      	ldr	r2, [pc, #32]	; (8006ce0 <ai_platform_network_create+0x2bc>)
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	6093      	str	r3, [r2, #8]
 8006cc2:	6893      	ldr	r3, [r2, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1fc      	bne.n	8006cc2 <ai_platform_network_create+0x29e>
 8006cc8:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <ai_platform_network_create+0x2c4>)
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	4b07      	ldr	r3, [pc, #28]	; (8006cec <ai_platform_network_create+0x2c8>)
 8006cce:	6812      	ldr	r2, [r2, #0]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d01f      	beq.n	8006d14 <ai_platform_network_create+0x2f0>
 8006cd4:	e7fe      	b.n	8006cd4 <ai_platform_network_create+0x2b0>
 8006cd6:	bf00      	nop
 8006cd8:	e0042000 	.word	0xe0042000
 8006cdc:	5c001000 	.word	0x5c001000
 8006ce0:	40023000 	.word	0x40023000
 8006ce4:	a1c00100 	.word	0xa1c00100
 8006ce8:	f407a5c2 	.word	0xf407a5c2
 8006cec:	b5e8b5cd 	.word	0xb5e8b5cd
 8006cf0:	58024000 	.word	0x58024000
 8006cf4:	4a33      	ldr	r2, [pc, #204]	; (8006dc4 <ai_platform_network_create+0x3a0>)
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006cfc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1fb      	bne.n	8006cfc <ai_platform_network_create+0x2d8>
 8006d04:	4b30      	ldr	r3, [pc, #192]	; (8006dc8 <ai_platform_network_create+0x3a4>)
 8006d06:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006d0a:	4b30      	ldr	r3, [pc, #192]	; (8006dcc <ai_platform_network_create+0x3a8>)
 8006d0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d12c      	bne.n	8006d6e <ai_platform_network_create+0x34a>
 8006d14:	f7ff f994 	bl	8006040 <_ai_platform_release_crc>
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f006 ffa5 	bl	800dc6c <ai_version_get>
 8006d22:	4681      	mov	r9, r0
 8006d24:	2200      	movs	r2, #0
 8006d26:	2105      	movs	r1, #5
 8006d28:	2001      	movs	r0, #1
 8006d2a:	f006 ff9f 	bl	800dc6c <ai_version_get>
 8006d2e:	4581      	cmp	r9, r0
 8006d30:	d01e      	beq.n	8006d70 <ai_platform_network_create+0x34c>
 8006d32:	f04f 0901 	mov.w	r9, #1
 8006d36:	e78e      	b.n	8006c56 <ai_platform_network_create+0x232>
 8006d38:	4b25      	ldr	r3, [pc, #148]	; (8006dd0 <ai_platform_network_create+0x3ac>)
 8006d3a:	2218      	movs	r2, #24
 8006d3c:	609a      	str	r2, [r3, #8]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	2a18      	cmp	r2, #24
 8006d42:	f47f af39 	bne.w	8006bb8 <ai_platform_network_create+0x194>
 8006d46:	2201      	movs	r2, #1
 8006d48:	609a      	str	r2, [r3, #8]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	2a00      	cmp	r2, #0
 8006d4e:	d1fc      	bne.n	8006d4a <ai_platform_network_create+0x326>
 8006d50:	e6b1      	b.n	8006ab6 <ai_platform_network_create+0x92>
 8006d52:	4a1f      	ldr	r2, [pc, #124]	; (8006dd0 <ai_platform_network_create+0x3ac>)
 8006d54:	2301      	movs	r3, #1
 8006d56:	6093      	str	r3, [r2, #8]
 8006d58:	6893      	ldr	r3, [r2, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1fc      	bne.n	8006d58 <ai_platform_network_create+0x334>
 8006d5e:	4b1a      	ldr	r3, [pc, #104]	; (8006dc8 <ai_platform_network_create+0x3a4>)
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	4b1a      	ldr	r3, [pc, #104]	; (8006dcc <ai_platform_network_create+0x3a8>)
 8006d64:	6812      	ldr	r2, [r2, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	f43f aed6 	beq.w	8006b18 <ai_platform_network_create+0xf4>
 8006d6c:	e7fe      	b.n	8006d6c <ai_platform_network_create+0x348>
 8006d6e:	e7fe      	b.n	8006d6e <ai_platform_network_create+0x34a>
 8006d70:	4b18      	ldr	r3, [pc, #96]	; (8006dd4 <ai_platform_network_create+0x3b0>)
 8006d72:	a801      	add	r0, sp, #4
 8006d74:	9301      	str	r3, [sp, #4]
 8006d76:	f001 fe05 	bl	8008984 <ai_check_custom_types>
 8006d7a:	b300      	cbz	r0, 8006dbe <ai_platform_network_create+0x39a>
 8006d7c:	2400      	movs	r4, #0
 8006d7e:	46a1      	mov	r9, r4
 8006d80:	e76c      	b.n	8006c5c <ai_platform_network_create+0x238>
 8006d82:	4b10      	ldr	r3, [pc, #64]	; (8006dc4 <ai_platform_network_create+0x3a0>)
 8006d84:	2201      	movs	r2, #1
 8006d86:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006d8a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006d8e:	2a00      	cmp	r2, #0
 8006d90:	d1fb      	bne.n	8006d8a <ai_platform_network_create+0x366>
 8006d92:	4a0d      	ldr	r2, [pc, #52]	; (8006dc8 <ai_platform_network_create+0x3a4>)
 8006d94:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006d98:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006d9c:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <ai_platform_network_create+0x3a8>)
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d0b8      	beq.n	8006d14 <ai_platform_network_create+0x2f0>
 8006da2:	e7fe      	b.n	8006da2 <ai_platform_network_create+0x37e>
 8006da4:	4b0a      	ldr	r3, [pc, #40]	; (8006dd0 <ai_platform_network_create+0x3ac>)
 8006da6:	2201      	movs	r2, #1
 8006da8:	609a      	str	r2, [r3, #8]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	2a00      	cmp	r2, #0
 8006dae:	d1fc      	bne.n	8006daa <ai_platform_network_create+0x386>
 8006db0:	4a05      	ldr	r2, [pc, #20]	; (8006dc8 <ai_platform_network_create+0x3a4>)
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <ai_platform_network_create+0x3a8>)
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d0ab      	beq.n	8006d14 <ai_platform_network_create+0x2f0>
 8006dbc:	e7fe      	b.n	8006dbc <ai_platform_network_create+0x398>
 8006dbe:	f04f 0902 	mov.w	r9, #2
 8006dc2:	e748      	b.n	8006c56 <ai_platform_network_create+0x232>
 8006dc4:	58024000 	.word	0x58024000
 8006dc8:	f407a5c2 	.word	0xf407a5c2
 8006dcc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006dd0:	40023000 	.word	0x40023000
 8006dd4:	84048403 	.word	0x84048403

08006dd8 <ai_platform_network_init>:
 8006dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d052      	beq.n	8006e86 <ai_platform_network_init+0xae>
 8006de0:	4bab      	ldr	r3, [pc, #684]	; (8007090 <ai_platform_network_init+0x2b8>)
 8006de2:	4604      	mov	r4, r0
 8006de4:	6802      	ldr	r2, [r0, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d14d      	bne.n	8006e86 <ai_platform_network_init+0xae>
 8006dea:	460d      	mov	r5, r1
 8006dec:	f7ff f926 	bl	800603c <_ai_platform_acquire_crc>
 8006df0:	4ba8      	ldr	r3, [pc, #672]	; (8007094 <ai_platform_network_init+0x2bc>)
 8006df2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dfc:	189a      	adds	r2, r3, r2
 8006dfe:	2a01      	cmp	r2, #1
 8006e00:	f240 809b 	bls.w	8006f3a <ai_platform_network_init+0x162>
 8006e04:	f240 4249 	movw	r2, #1097	; 0x449
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	f000 8096 	beq.w	8006f3a <ai_platform_network_init+0x162>
 8006e0e:	4aa2      	ldr	r2, [pc, #648]	; (8007098 <ai_platform_network_init+0x2c0>)
 8006e10:	6813      	ldr	r3, [r2, #0]
 8006e12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e16:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006e1a:	f000 809d 	beq.w	8006f58 <ai_platform_network_init+0x180>
 8006e1e:	6813      	ldr	r3, [r2, #0]
 8006e20:	f240 4183 	movw	r1, #1155	; 0x483
 8006e24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e28:	428b      	cmp	r3, r1
 8006e2a:	f000 80e4 	beq.w	8006ff6 <ai_platform_network_init+0x21e>
 8006e2e:	6813      	ldr	r3, [r2, #0]
 8006e30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e34:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006e38:	f000 811b 	beq.w	8007072 <ai_platform_network_init+0x29a>
 8006e3c:	6813      	ldr	r3, [r2, #0]
 8006e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 80f9 	beq.w	800703a <ai_platform_network_init+0x262>
 8006e48:	f7ff f8fa 	bl	8006040 <_ai_platform_release_crc>
 8006e4c:	2d00      	cmp	r5, #0
 8006e4e:	f000 8147 	beq.w	80070e0 <ai_platform_network_init+0x308>
 8006e52:	4b92      	ldr	r3, [pc, #584]	; (800709c <ai_platform_network_init+0x2c4>)
 8006e54:	682a      	ldr	r2, [r5, #0]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	f040 8090 	bne.w	8006f7c <ai_platform_network_init+0x1a4>
 8006e5c:	692b      	ldr	r3, [r5, #16]
 8006e5e:	89ae      	ldrh	r6, [r5, #12]
 8006e60:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8006e64:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8006e68:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e6a:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8006e6e:	2303      	movs	r3, #3
 8006e70:	84a6      	strh	r6, [r4, #36]	; 0x24
 8006e72:	4626      	mov	r6, r4
 8006e74:	4620      	mov	r0, r4
 8006e76:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8006e7a:	60e3      	str	r3, [r4, #12]
 8006e7c:	f001 fdaa 	bl	80089d4 <ai_layers_init_all>
 8006e80:	4630      	mov	r0, r6
 8006e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e86:	f7ff f8d9 	bl	800603c <_ai_platform_acquire_crc>
 8006e8a:	4b82      	ldr	r3, [pc, #520]	; (8007094 <ai_platform_network_init+0x2bc>)
 8006e8c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e96:	185a      	adds	r2, r3, r1
 8006e98:	2a01      	cmp	r2, #1
 8006e9a:	d92b      	bls.n	8006ef4 <ai_platform_network_init+0x11c>
 8006e9c:	f240 4249 	movw	r2, #1097	; 0x449
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d027      	beq.n	8006ef4 <ai_platform_network_init+0x11c>
 8006ea4:	4a7c      	ldr	r2, [pc, #496]	; (8007098 <ai_platform_network_init+0x2c0>)
 8006ea6:	6813      	ldr	r3, [r2, #0]
 8006ea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006eac:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006eb0:	d02d      	beq.n	8006f0e <ai_platform_network_init+0x136>
 8006eb2:	6813      	ldr	r3, [r2, #0]
 8006eb4:	f240 4183 	movw	r1, #1155	; 0x483
 8006eb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ebc:	428b      	cmp	r3, r1
 8006ebe:	f000 8089 	beq.w	8006fd4 <ai_platform_network_init+0x1fc>
 8006ec2:	6813      	ldr	r3, [r2, #0]
 8006ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ec8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006ecc:	f000 80c3 	beq.w	8007056 <ai_platform_network_init+0x27e>
 8006ed0:	6813      	ldr	r3, [r2, #0]
 8006ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d129      	bne.n	8006f2e <ai_platform_network_init+0x156>
 8006eda:	4a71      	ldr	r2, [pc, #452]	; (80070a0 <ai_platform_network_init+0x2c8>)
 8006edc:	2301      	movs	r3, #1
 8006ede:	6093      	str	r3, [r2, #8]
 8006ee0:	6893      	ldr	r3, [r2, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1fc      	bne.n	8006ee0 <ai_platform_network_init+0x108>
 8006ee6:	496f      	ldr	r1, [pc, #444]	; (80070a4 <ai_platform_network_init+0x2cc>)
 8006ee8:	4b6f      	ldr	r3, [pc, #444]	; (80070a8 <ai_platform_network_init+0x2d0>)
 8006eea:	6011      	str	r1, [r2, #0]
 8006eec:	6812      	ldr	r2, [r2, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d01d      	beq.n	8006f2e <ai_platform_network_init+0x156>
 8006ef2:	e7fe      	b.n	8006ef2 <ai_platform_network_init+0x11a>
 8006ef4:	4a6a      	ldr	r2, [pc, #424]	; (80070a0 <ai_platform_network_init+0x2c8>)
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	6093      	str	r3, [r2, #8]
 8006efa:	6893      	ldr	r3, [r2, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1fc      	bne.n	8006efa <ai_platform_network_init+0x122>
 8006f00:	4968      	ldr	r1, [pc, #416]	; (80070a4 <ai_platform_network_init+0x2cc>)
 8006f02:	4b69      	ldr	r3, [pc, #420]	; (80070a8 <ai_platform_network_init+0x2d0>)
 8006f04:	6011      	str	r1, [r2, #0]
 8006f06:	6812      	ldr	r2, [r2, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d010      	beq.n	8006f2e <ai_platform_network_init+0x156>
 8006f0c:	e7fe      	b.n	8006f0c <ai_platform_network_init+0x134>
 8006f0e:	4a67      	ldr	r2, [pc, #412]	; (80070ac <ai_platform_network_init+0x2d4>)
 8006f10:	2301      	movs	r3, #1
 8006f12:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006f16:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1fb      	bne.n	8006f16 <ai_platform_network_init+0x13e>
 8006f1e:	4961      	ldr	r1, [pc, #388]	; (80070a4 <ai_platform_network_init+0x2cc>)
 8006f20:	4b61      	ldr	r3, [pc, #388]	; (80070a8 <ai_platform_network_init+0x2d0>)
 8006f22:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006f26:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d113      	bne.n	8006f56 <ai_platform_network_init+0x17e>
 8006f2e:	2600      	movs	r6, #0
 8006f30:	f7ff f886 	bl	8006040 <_ai_platform_release_crc>
 8006f34:	4630      	mov	r0, r6
 8006f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f3a:	4a59      	ldr	r2, [pc, #356]	; (80070a0 <ai_platform_network_init+0x2c8>)
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	6093      	str	r3, [r2, #8]
 8006f40:	6893      	ldr	r3, [r2, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1fc      	bne.n	8006f40 <ai_platform_network_init+0x168>
 8006f46:	4b57      	ldr	r3, [pc, #348]	; (80070a4 <ai_platform_network_init+0x2cc>)
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	4b57      	ldr	r3, [pc, #348]	; (80070a8 <ai_platform_network_init+0x2d0>)
 8006f4c:	6812      	ldr	r2, [r2, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	f43f af7a 	beq.w	8006e48 <ai_platform_network_init+0x70>
 8006f54:	e7fe      	b.n	8006f54 <ai_platform_network_init+0x17c>
 8006f56:	e7fe      	b.n	8006f56 <ai_platform_network_init+0x17e>
 8006f58:	4a54      	ldr	r2, [pc, #336]	; (80070ac <ai_platform_network_init+0x2d4>)
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006f60:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1fb      	bne.n	8006f60 <ai_platform_network_init+0x188>
 8006f68:	4b4e      	ldr	r3, [pc, #312]	; (80070a4 <ai_platform_network_init+0x2cc>)
 8006f6a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006f6e:	4b4e      	ldr	r3, [pc, #312]	; (80070a8 <ai_platform_network_init+0x2d0>)
 8006f70:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006f74:	429a      	cmp	r2, r3
 8006f76:	f43f af67 	beq.w	8006e48 <ai_platform_network_init+0x70>
 8006f7a:	e7fe      	b.n	8006f7a <ai_platform_network_init+0x1a2>
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f105 081c 	add.w	r8, r5, #28
 8006f84:	686e      	ldr	r6, [r5, #4]
 8006f86:	f7ff f80b 	bl	8005fa0 <ai_buffer_get_size>
 8006f8a:	4607      	mov	r7, r0
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	4640      	mov	r0, r8
 8006f90:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8006f94:	f7ff f804 	bl	8005fa0 <ai_buffer_get_size>
 8006f98:	2f00      	cmp	r7, #0
 8006f9a:	d13e      	bne.n	800701a <ai_platform_network_init+0x242>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	f000 808e 	beq.w	80070be <ai_platform_network_init+0x2e6>
 8006fa2:	f1b9 0f00 	cmp.w	r9, #0
 8006fa6:	f000 8094 	beq.w	80070d2 <ai_platform_network_init+0x2fa>
 8006faa:	f04f 0c01 	mov.w	ip, #1
 8006fae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006fb0:	2600      	movs	r6, #0
 8006fb2:	83e7      	strh	r7, [r4, #30]
 8006fb4:	4563      	cmp	r3, ip
 8006fb6:	83a6      	strh	r6, [r4, #28]
 8006fb8:	d37a      	bcc.n	80070b0 <ai_platform_network_init+0x2d8>
 8006fba:	f1bc 0f00 	cmp.w	ip, #0
 8006fbe:	f000 809c 	beq.w	80070fa <ai_platform_network_init+0x322>
 8006fc2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006fc4:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8006fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fca:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8006fce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006fd2:	e74c      	b.n	8006e6e <ai_platform_network_init+0x96>
 8006fd4:	4a35      	ldr	r2, [pc, #212]	; (80070ac <ai_platform_network_init+0x2d4>)
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006fdc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1fb      	bne.n	8006fdc <ai_platform_network_init+0x204>
 8006fe4:	492f      	ldr	r1, [pc, #188]	; (80070a4 <ai_platform_network_init+0x2cc>)
 8006fe6:	4b30      	ldr	r3, [pc, #192]	; (80070a8 <ai_platform_network_init+0x2d0>)
 8006fe8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006fec:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d09c      	beq.n	8006f2e <ai_platform_network_init+0x156>
 8006ff4:	e7fe      	b.n	8006ff4 <ai_platform_network_init+0x21c>
 8006ff6:	4a2d      	ldr	r2, [pc, #180]	; (80070ac <ai_platform_network_init+0x2d4>)
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006ffe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1fb      	bne.n	8006ffe <ai_platform_network_init+0x226>
 8007006:	4b27      	ldr	r3, [pc, #156]	; (80070a4 <ai_platform_network_init+0x2cc>)
 8007008:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800700c:	4b26      	ldr	r3, [pc, #152]	; (80070a8 <ai_platform_network_init+0x2d0>)
 800700e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007012:	429a      	cmp	r2, r3
 8007014:	f43f af18 	beq.w	8006e48 <ai_platform_network_init+0x70>
 8007018:	e7fe      	b.n	8007018 <ai_platform_network_init+0x240>
 800701a:	2800      	cmp	r0, #0
 800701c:	d153      	bne.n	80070c6 <ai_platform_network_init+0x2ee>
 800701e:	4680      	mov	r8, r0
 8007020:	4684      	mov	ip, r0
 8007022:	2e00      	cmp	r6, #0
 8007024:	d063      	beq.n	80070ee <ai_platform_network_init+0x316>
 8007026:	8be6      	ldrh	r6, [r4, #30]
 8007028:	2e00      	cmp	r6, #0
 800702a:	d168      	bne.n	80070fe <ai_platform_network_init+0x326>
 800702c:	2212      	movs	r2, #18
 800702e:	2116      	movs	r1, #22
 8007030:	f104 0010 	add.w	r0, r4, #16
 8007034:	f000 fc7c 	bl	8007930 <core_set_error>
 8007038:	e77c      	b.n	8006f34 <ai_platform_network_init+0x15c>
 800703a:	4a19      	ldr	r2, [pc, #100]	; (80070a0 <ai_platform_network_init+0x2c8>)
 800703c:	2301      	movs	r3, #1
 800703e:	6093      	str	r3, [r2, #8]
 8007040:	6893      	ldr	r3, [r2, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1fc      	bne.n	8007040 <ai_platform_network_init+0x268>
 8007046:	4b17      	ldr	r3, [pc, #92]	; (80070a4 <ai_platform_network_init+0x2cc>)
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	4b17      	ldr	r3, [pc, #92]	; (80070a8 <ai_platform_network_init+0x2d0>)
 800704c:	6812      	ldr	r2, [r2, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	f43f aefa 	beq.w	8006e48 <ai_platform_network_init+0x70>
 8007054:	e7fe      	b.n	8007054 <ai_platform_network_init+0x27c>
 8007056:	4a12      	ldr	r2, [pc, #72]	; (80070a0 <ai_platform_network_init+0x2c8>)
 8007058:	2301      	movs	r3, #1
 800705a:	6093      	str	r3, [r2, #8]
 800705c:	6893      	ldr	r3, [r2, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1fc      	bne.n	800705c <ai_platform_network_init+0x284>
 8007062:	4910      	ldr	r1, [pc, #64]	; (80070a4 <ai_platform_network_init+0x2cc>)
 8007064:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <ai_platform_network_init+0x2d0>)
 8007066:	6011      	str	r1, [r2, #0]
 8007068:	6812      	ldr	r2, [r2, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	f43f af5f 	beq.w	8006f2e <ai_platform_network_init+0x156>
 8007070:	e7fe      	b.n	8007070 <ai_platform_network_init+0x298>
 8007072:	4a0b      	ldr	r2, [pc, #44]	; (80070a0 <ai_platform_network_init+0x2c8>)
 8007074:	2301      	movs	r3, #1
 8007076:	6093      	str	r3, [r2, #8]
 8007078:	6893      	ldr	r3, [r2, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1fc      	bne.n	8007078 <ai_platform_network_init+0x2a0>
 800707e:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <ai_platform_network_init+0x2cc>)
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <ai_platform_network_init+0x2d0>)
 8007084:	6812      	ldr	r2, [r2, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	f43f aede 	beq.w	8006e48 <ai_platform_network_init+0x70>
 800708c:	e7fe      	b.n	800708c <ai_platform_network_init+0x2b4>
 800708e:	bf00      	nop
 8007090:	a1c00100 	.word	0xa1c00100
 8007094:	e0042000 	.word	0xe0042000
 8007098:	5c001000 	.word	0x5c001000
 800709c:	a1facade 	.word	0xa1facade
 80070a0:	40023000 	.word	0x40023000
 80070a4:	f407a5c2 	.word	0xf407a5c2
 80070a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80070ac:	58024000 	.word	0x58024000
 80070b0:	2213      	movs	r2, #19
 80070b2:	2116      	movs	r1, #22
 80070b4:	f104 0010 	add.w	r0, r4, #16
 80070b8:	f000 fc3a 	bl	8007930 <core_set_error>
 80070bc:	e73a      	b.n	8006f34 <ai_platform_network_init+0x15c>
 80070be:	4607      	mov	r7, r0
 80070c0:	4680      	mov	r8, r0
 80070c2:	4684      	mov	ip, r0
 80070c4:	e773      	b.n	8006fae <ai_platform_network_init+0x1d6>
 80070c6:	f1b9 0f00 	cmp.w	r9, #0
 80070ca:	d002      	beq.n	80070d2 <ai_platform_network_init+0x2fa>
 80070cc:	f04f 0c01 	mov.w	ip, #1
 80070d0:	e7a7      	b.n	8007022 <ai_platform_network_init+0x24a>
 80070d2:	2110      	movs	r1, #16
 80070d4:	2213      	movs	r2, #19
 80070d6:	2600      	movs	r6, #0
 80070d8:	1860      	adds	r0, r4, r1
 80070da:	f000 fc29 	bl	8007930 <core_set_error>
 80070de:	e729      	b.n	8006f34 <ai_platform_network_init+0x15c>
 80070e0:	2110      	movs	r1, #16
 80070e2:	2211      	movs	r2, #17
 80070e4:	462e      	mov	r6, r5
 80070e6:	1860      	adds	r0, r4, r1
 80070e8:	f000 fc22 	bl	8007930 <core_set_error>
 80070ec:	e722      	b.n	8006f34 <ai_platform_network_init+0x15c>
 80070ee:	2110      	movs	r1, #16
 80070f0:	2212      	movs	r2, #18
 80070f2:	1860      	adds	r0, r4, r1
 80070f4:	f000 fc1c 	bl	8007930 <core_set_error>
 80070f8:	e71c      	b.n	8006f34 <ai_platform_network_init+0x15c>
 80070fa:	4666      	mov	r6, ip
 80070fc:	e6b7      	b.n	8006e6e <ai_platform_network_init+0x96>
 80070fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007100:	6a26      	ldr	r6, [r4, #32]
 8007102:	2701      	movs	r7, #1
 8007104:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007106:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800710a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800710e:	e74e      	b.n	8006fae <ai_platform_network_init+0x1d6>

08007110 <ai_platform_network_post_init>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	2800      	cmp	r0, #0
 8007114:	d04e      	beq.n	80071b4 <ai_platform_network_post_init+0xa4>
 8007116:	4b8c      	ldr	r3, [pc, #560]	; (8007348 <ai_platform_network_post_init+0x238>)
 8007118:	4604      	mov	r4, r0
 800711a:	6802      	ldr	r2, [r0, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d149      	bne.n	80071b4 <ai_platform_network_post_init+0xa4>
 8007120:	f7fe ff8c 	bl	800603c <_ai_platform_acquire_crc>
 8007124:	4b89      	ldr	r3, [pc, #548]	; (800734c <ai_platform_network_post_init+0x23c>)
 8007126:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007130:	189a      	adds	r2, r3, r2
 8007132:	2a01      	cmp	r2, #1
 8007134:	f240 8095 	bls.w	8007262 <ai_platform_network_post_init+0x152>
 8007138:	f240 4249 	movw	r2, #1097	; 0x449
 800713c:	4293      	cmp	r3, r2
 800713e:	f000 8090 	beq.w	8007262 <ai_platform_network_post_init+0x152>
 8007142:	4a83      	ldr	r2, [pc, #524]	; (8007350 <ai_platform_network_post_init+0x240>)
 8007144:	6813      	ldr	r3, [r2, #0]
 8007146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800714a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800714e:	f000 8096 	beq.w	800727e <ai_platform_network_post_init+0x16e>
 8007152:	6813      	ldr	r3, [r2, #0]
 8007154:	f240 4183 	movw	r1, #1155	; 0x483
 8007158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800715c:	428b      	cmp	r3, r1
 800715e:	f000 80b8 	beq.w	80072d2 <ai_platform_network_post_init+0x1c2>
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007168:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800716c:	f000 80de 	beq.w	800732c <ai_platform_network_post_init+0x21c>
 8007170:	6813      	ldr	r3, [r2, #0]
 8007172:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 80bd 	beq.w	80072f6 <ai_platform_network_post_init+0x1e6>
 800717c:	f7fe ff60 	bl	8006040 <_ai_platform_release_crc>
 8007180:	68e3      	ldr	r3, [r4, #12]
 8007182:	f013 0502 	ands.w	r5, r3, #2
 8007186:	f000 808c 	beq.w	80072a2 <ai_platform_network_post_init+0x192>
 800718a:	4620      	mov	r0, r4
 800718c:	f001 fc30 	bl	80089f0 <ai_layers_post_init_all>
 8007190:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007192:	b16b      	cbz	r3, 80071b0 <ai_platform_network_post_init+0xa0>
 8007194:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007196:	e007      	b.n	80071a8 <ai_platform_network_post_init+0x98>
 8007198:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800719c:	4798      	blx	r3
 800719e:	692b      	ldr	r3, [r5, #16]
 80071a0:	b133      	cbz	r3, 80071b0 <ai_platform_network_post_init+0xa0>
 80071a2:	42ab      	cmp	r3, r5
 80071a4:	461d      	mov	r5, r3
 80071a6:	d003      	beq.n	80071b0 <ai_platform_network_post_init+0xa0>
 80071a8:	4629      	mov	r1, r5
 80071aa:	2000      	movs	r0, #0
 80071ac:	2d00      	cmp	r5, #0
 80071ae:	d1f3      	bne.n	8007198 <ai_platform_network_post_init+0x88>
 80071b0:	2001      	movs	r0, #1
 80071b2:	bd38      	pop	{r3, r4, r5, pc}
 80071b4:	f7fe ff42 	bl	800603c <_ai_platform_acquire_crc>
 80071b8:	4b64      	ldr	r3, [pc, #400]	; (800734c <ai_platform_network_post_init+0x23c>)
 80071ba:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071c4:	185a      	adds	r2, r3, r1
 80071c6:	2a01      	cmp	r2, #1
 80071c8:	d92a      	bls.n	8007220 <ai_platform_network_post_init+0x110>
 80071ca:	f240 4249 	movw	r2, #1097	; 0x449
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d026      	beq.n	8007220 <ai_platform_network_post_init+0x110>
 80071d2:	4a5f      	ldr	r2, [pc, #380]	; (8007350 <ai_platform_network_post_init+0x240>)
 80071d4:	6813      	ldr	r3, [r2, #0]
 80071d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071da:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80071de:	d02c      	beq.n	800723a <ai_platform_network_post_init+0x12a>
 80071e0:	6813      	ldr	r3, [r2, #0]
 80071e2:	f240 4183 	movw	r1, #1155	; 0x483
 80071e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071ea:	428b      	cmp	r3, r1
 80071ec:	d060      	beq.n	80072b0 <ai_platform_network_post_init+0x1a0>
 80071ee:	6813      	ldr	r3, [r2, #0]
 80071f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071f4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80071f8:	f000 808b 	beq.w	8007312 <ai_platform_network_post_init+0x202>
 80071fc:	6813      	ldr	r3, [r2, #0]
 80071fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007202:	2b00      	cmp	r3, #0
 8007204:	d129      	bne.n	800725a <ai_platform_network_post_init+0x14a>
 8007206:	4a53      	ldr	r2, [pc, #332]	; (8007354 <ai_platform_network_post_init+0x244>)
 8007208:	2301      	movs	r3, #1
 800720a:	6093      	str	r3, [r2, #8]
 800720c:	6893      	ldr	r3, [r2, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1fc      	bne.n	800720c <ai_platform_network_post_init+0xfc>
 8007212:	4951      	ldr	r1, [pc, #324]	; (8007358 <ai_platform_network_post_init+0x248>)
 8007214:	4b51      	ldr	r3, [pc, #324]	; (800735c <ai_platform_network_post_init+0x24c>)
 8007216:	6011      	str	r1, [r2, #0]
 8007218:	6812      	ldr	r2, [r2, #0]
 800721a:	429a      	cmp	r2, r3
 800721c:	d01d      	beq.n	800725a <ai_platform_network_post_init+0x14a>
 800721e:	e7fe      	b.n	800721e <ai_platform_network_post_init+0x10e>
 8007220:	4a4c      	ldr	r2, [pc, #304]	; (8007354 <ai_platform_network_post_init+0x244>)
 8007222:	2301      	movs	r3, #1
 8007224:	6093      	str	r3, [r2, #8]
 8007226:	6893      	ldr	r3, [r2, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1fc      	bne.n	8007226 <ai_platform_network_post_init+0x116>
 800722c:	494a      	ldr	r1, [pc, #296]	; (8007358 <ai_platform_network_post_init+0x248>)
 800722e:	4b4b      	ldr	r3, [pc, #300]	; (800735c <ai_platform_network_post_init+0x24c>)
 8007230:	6011      	str	r1, [r2, #0]
 8007232:	6812      	ldr	r2, [r2, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d010      	beq.n	800725a <ai_platform_network_post_init+0x14a>
 8007238:	e7fe      	b.n	8007238 <ai_platform_network_post_init+0x128>
 800723a:	4a49      	ldr	r2, [pc, #292]	; (8007360 <ai_platform_network_post_init+0x250>)
 800723c:	2301      	movs	r3, #1
 800723e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007242:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1fb      	bne.n	8007242 <ai_platform_network_post_init+0x132>
 800724a:	4943      	ldr	r1, [pc, #268]	; (8007358 <ai_platform_network_post_init+0x248>)
 800724c:	4b43      	ldr	r3, [pc, #268]	; (800735c <ai_platform_network_post_init+0x24c>)
 800724e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007252:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007256:	429a      	cmp	r2, r3
 8007258:	d110      	bne.n	800727c <ai_platform_network_post_init+0x16c>
 800725a:	f7fe fef1 	bl	8006040 <_ai_platform_release_crc>
 800725e:	2000      	movs	r0, #0
 8007260:	bd38      	pop	{r3, r4, r5, pc}
 8007262:	4a3c      	ldr	r2, [pc, #240]	; (8007354 <ai_platform_network_post_init+0x244>)
 8007264:	2301      	movs	r3, #1
 8007266:	6093      	str	r3, [r2, #8]
 8007268:	6893      	ldr	r3, [r2, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1fc      	bne.n	8007268 <ai_platform_network_post_init+0x158>
 800726e:	493a      	ldr	r1, [pc, #232]	; (8007358 <ai_platform_network_post_init+0x248>)
 8007270:	4b3a      	ldr	r3, [pc, #232]	; (800735c <ai_platform_network_post_init+0x24c>)
 8007272:	6011      	str	r1, [r2, #0]
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d080      	beq.n	800717c <ai_platform_network_post_init+0x6c>
 800727a:	e7fe      	b.n	800727a <ai_platform_network_post_init+0x16a>
 800727c:	e7fe      	b.n	800727c <ai_platform_network_post_init+0x16c>
 800727e:	4a38      	ldr	r2, [pc, #224]	; (8007360 <ai_platform_network_post_init+0x250>)
 8007280:	2301      	movs	r3, #1
 8007282:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007286:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1fb      	bne.n	8007286 <ai_platform_network_post_init+0x176>
 800728e:	4932      	ldr	r1, [pc, #200]	; (8007358 <ai_platform_network_post_init+0x248>)
 8007290:	4b32      	ldr	r3, [pc, #200]	; (800735c <ai_platform_network_post_init+0x24c>)
 8007292:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007296:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800729a:	429a      	cmp	r2, r3
 800729c:	f43f af6e 	beq.w	800717c <ai_platform_network_post_init+0x6c>
 80072a0:	e7fe      	b.n	80072a0 <ai_platform_network_post_init+0x190>
 80072a2:	2210      	movs	r2, #16
 80072a4:	2111      	movs	r1, #17
 80072a6:	18a0      	adds	r0, r4, r2
 80072a8:	f000 fb42 	bl	8007930 <core_set_error>
 80072ac:	4628      	mov	r0, r5
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	4a2b      	ldr	r2, [pc, #172]	; (8007360 <ai_platform_network_post_init+0x250>)
 80072b2:	2301      	movs	r3, #1
 80072b4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80072b8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1fb      	bne.n	80072b8 <ai_platform_network_post_init+0x1a8>
 80072c0:	4925      	ldr	r1, [pc, #148]	; (8007358 <ai_platform_network_post_init+0x248>)
 80072c2:	4b26      	ldr	r3, [pc, #152]	; (800735c <ai_platform_network_post_init+0x24c>)
 80072c4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80072c8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d0c4      	beq.n	800725a <ai_platform_network_post_init+0x14a>
 80072d0:	e7fe      	b.n	80072d0 <ai_platform_network_post_init+0x1c0>
 80072d2:	4a23      	ldr	r2, [pc, #140]	; (8007360 <ai_platform_network_post_init+0x250>)
 80072d4:	2301      	movs	r3, #1
 80072d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80072da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1fb      	bne.n	80072da <ai_platform_network_post_init+0x1ca>
 80072e2:	491d      	ldr	r1, [pc, #116]	; (8007358 <ai_platform_network_post_init+0x248>)
 80072e4:	4b1d      	ldr	r3, [pc, #116]	; (800735c <ai_platform_network_post_init+0x24c>)
 80072e6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80072ea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80072ee:	429a      	cmp	r2, r3
 80072f0:	f43f af44 	beq.w	800717c <ai_platform_network_post_init+0x6c>
 80072f4:	e7fe      	b.n	80072f4 <ai_platform_network_post_init+0x1e4>
 80072f6:	4a17      	ldr	r2, [pc, #92]	; (8007354 <ai_platform_network_post_init+0x244>)
 80072f8:	2301      	movs	r3, #1
 80072fa:	6093      	str	r3, [r2, #8]
 80072fc:	6893      	ldr	r3, [r2, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1fc      	bne.n	80072fc <ai_platform_network_post_init+0x1ec>
 8007302:	4915      	ldr	r1, [pc, #84]	; (8007358 <ai_platform_network_post_init+0x248>)
 8007304:	4b15      	ldr	r3, [pc, #84]	; (800735c <ai_platform_network_post_init+0x24c>)
 8007306:	6011      	str	r1, [r2, #0]
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	f43f af36 	beq.w	800717c <ai_platform_network_post_init+0x6c>
 8007310:	e7fe      	b.n	8007310 <ai_platform_network_post_init+0x200>
 8007312:	4a10      	ldr	r2, [pc, #64]	; (8007354 <ai_platform_network_post_init+0x244>)
 8007314:	2301      	movs	r3, #1
 8007316:	6093      	str	r3, [r2, #8]
 8007318:	6893      	ldr	r3, [r2, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1fc      	bne.n	8007318 <ai_platform_network_post_init+0x208>
 800731e:	490e      	ldr	r1, [pc, #56]	; (8007358 <ai_platform_network_post_init+0x248>)
 8007320:	4b0e      	ldr	r3, [pc, #56]	; (800735c <ai_platform_network_post_init+0x24c>)
 8007322:	6011      	str	r1, [r2, #0]
 8007324:	6812      	ldr	r2, [r2, #0]
 8007326:	429a      	cmp	r2, r3
 8007328:	d097      	beq.n	800725a <ai_platform_network_post_init+0x14a>
 800732a:	e7fe      	b.n	800732a <ai_platform_network_post_init+0x21a>
 800732c:	4a09      	ldr	r2, [pc, #36]	; (8007354 <ai_platform_network_post_init+0x244>)
 800732e:	2301      	movs	r3, #1
 8007330:	6093      	str	r3, [r2, #8]
 8007332:	6893      	ldr	r3, [r2, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1fc      	bne.n	8007332 <ai_platform_network_post_init+0x222>
 8007338:	4907      	ldr	r1, [pc, #28]	; (8007358 <ai_platform_network_post_init+0x248>)
 800733a:	4b08      	ldr	r3, [pc, #32]	; (800735c <ai_platform_network_post_init+0x24c>)
 800733c:	6011      	str	r1, [r2, #0]
 800733e:	6812      	ldr	r2, [r2, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	f43f af1b 	beq.w	800717c <ai_platform_network_post_init+0x6c>
 8007346:	e7fe      	b.n	8007346 <ai_platform_network_post_init+0x236>
 8007348:	a1c00100 	.word	0xa1c00100
 800734c:	e0042000 	.word	0xe0042000
 8007350:	5c001000 	.word	0x5c001000
 8007354:	40023000 	.word	0x40023000
 8007358:	f407a5c2 	.word	0xf407a5c2
 800735c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007360:	58024000 	.word	0x58024000

08007364 <ai_platform_network_process>:
 8007364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007368:	b085      	sub	sp, #20
 800736a:	460e      	mov	r6, r1
 800736c:	4605      	mov	r5, r0
 800736e:	9201      	str	r2, [sp, #4]
 8007370:	b120      	cbz	r0, 800737c <ai_platform_network_process+0x18>
 8007372:	4b24      	ldr	r3, [pc, #144]	; (8007404 <ai_platform_network_process+0xa0>)
 8007374:	6802      	ldr	r2, [r0, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	bf18      	it	ne
 800737a:	2500      	movne	r5, #0
 800737c:	f7fe fe5e 	bl	800603c <_ai_platform_acquire_crc>
 8007380:	4b21      	ldr	r3, [pc, #132]	; (8007408 <ai_platform_network_process+0xa4>)
 8007382:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800738c:	185a      	adds	r2, r3, r1
 800738e:	2a01      	cmp	r2, #1
 8007390:	d92b      	bls.n	80073ea <ai_platform_network_process+0x86>
 8007392:	f240 4249 	movw	r2, #1097	; 0x449
 8007396:	4293      	cmp	r3, r2
 8007398:	d027      	beq.n	80073ea <ai_platform_network_process+0x86>
 800739a:	4a1c      	ldr	r2, [pc, #112]	; (800740c <ai_platform_network_process+0xa8>)
 800739c:	6813      	ldr	r3, [r2, #0]
 800739e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073a2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80073a6:	d039      	beq.n	800741c <ai_platform_network_process+0xb8>
 80073a8:	6813      	ldr	r3, [r2, #0]
 80073aa:	f240 4183 	movw	r1, #1155	; 0x483
 80073ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073b2:	428b      	cmp	r3, r1
 80073b4:	f000 819c 	beq.w	80076f0 <ai_platform_network_process+0x38c>
 80073b8:	6813      	ldr	r3, [r2, #0]
 80073ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073be:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80073c2:	f000 8179 	beq.w	80076b8 <ai_platform_network_process+0x354>
 80073c6:	6813      	ldr	r3, [r2, #0]
 80073c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d136      	bne.n	800743e <ai_platform_network_process+0xda>
 80073d0:	4a0f      	ldr	r2, [pc, #60]	; (8007410 <ai_platform_network_process+0xac>)
 80073d2:	2301      	movs	r3, #1
 80073d4:	6093      	str	r3, [r2, #8]
 80073d6:	6893      	ldr	r3, [r2, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1fc      	bne.n	80073d6 <ai_platform_network_process+0x72>
 80073dc:	4b0d      	ldr	r3, [pc, #52]	; (8007414 <ai_platform_network_process+0xb0>)
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	4b0d      	ldr	r3, [pc, #52]	; (8007418 <ai_platform_network_process+0xb4>)
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d02a      	beq.n	800743e <ai_platform_network_process+0xda>
 80073e8:	e7fe      	b.n	80073e8 <ai_platform_network_process+0x84>
 80073ea:	4a09      	ldr	r2, [pc, #36]	; (8007410 <ai_platform_network_process+0xac>)
 80073ec:	2301      	movs	r3, #1
 80073ee:	6093      	str	r3, [r2, #8]
 80073f0:	6893      	ldr	r3, [r2, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1fc      	bne.n	80073f0 <ai_platform_network_process+0x8c>
 80073f6:	4b07      	ldr	r3, [pc, #28]	; (8007414 <ai_platform_network_process+0xb0>)
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	4b07      	ldr	r3, [pc, #28]	; (8007418 <ai_platform_network_process+0xb4>)
 80073fc:	6812      	ldr	r2, [r2, #0]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d01d      	beq.n	800743e <ai_platform_network_process+0xda>
 8007402:	e7fe      	b.n	8007402 <ai_platform_network_process+0x9e>
 8007404:	a1c00100 	.word	0xa1c00100
 8007408:	e0042000 	.word	0xe0042000
 800740c:	5c001000 	.word	0x5c001000
 8007410:	40023000 	.word	0x40023000
 8007414:	f407a5c2 	.word	0xf407a5c2
 8007418:	b5e8b5cd 	.word	0xb5e8b5cd
 800741c:	4ab0      	ldr	r2, [pc, #704]	; (80076e0 <ai_platform_network_process+0x37c>)
 800741e:	2301      	movs	r3, #1
 8007420:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007424:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1fb      	bne.n	8007424 <ai_platform_network_process+0xc0>
 800742c:	4bad      	ldr	r3, [pc, #692]	; (80076e4 <ai_platform_network_process+0x380>)
 800742e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007432:	4bad      	ldr	r3, [pc, #692]	; (80076e8 <ai_platform_network_process+0x384>)
 8007434:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007438:	429a      	cmp	r2, r3
 800743a:	f040 812b 	bne.w	8007694 <ai_platform_network_process+0x330>
 800743e:	f7fe fdff 	bl	8006040 <_ai_platform_release_crc>
 8007442:	2d00      	cmp	r5, #0
 8007444:	f000 8172 	beq.w	800772c <ai_platform_network_process+0x3c8>
 8007448:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 8123 	beq.w	8007696 <ai_platform_network_process+0x332>
 8007450:	68eb      	ldr	r3, [r5, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8007458:	f003 0303 	and.w	r3, r3, #3
 800745c:	616a      	str	r2, [r5, #20]
 800745e:	2b03      	cmp	r3, #3
 8007460:	f040 811f 	bne.w	80076a2 <ai_platform_network_process+0x33e>
 8007464:	2e00      	cmp	r6, #0
 8007466:	f000 8156 	beq.w	8007716 <ai_platform_network_process+0x3b2>
 800746a:	fab8 f788 	clz	r7, r8
 800746e:	097f      	lsrs	r7, r7, #5
 8007470:	f1b8 0f00 	cmp.w	r8, #0
 8007474:	f000 814f 	beq.w	8007716 <ai_platform_network_process+0x3b2>
 8007478:	f8b8 3000 	ldrh.w	r3, [r8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 814a 	beq.w	8007716 <ai_platform_network_process+0x3b2>
 8007482:	69b3      	ldr	r3, [r6, #24]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800748a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d072      	beq.n	8007578 <ai_platform_network_process+0x214>
 8007492:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007496:	2c00      	cmp	r4, #0
 8007498:	d06e      	beq.n	8007578 <ai_platform_network_process+0x214>
 800749a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800749e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80074a2:	f8d3 a000 	ldr.w	sl, [r3]
 80074a6:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 80074aa:	f000 8133 	beq.w	8007714 <ai_platform_network_process+0x3b0>
 80074ae:	69a3      	ldr	r3, [r4, #24]
 80074b0:	2101      	movs	r1, #1
 80074b2:	4630      	mov	r0, r6
 80074b4:	685d      	ldr	r5, [r3, #4]
 80074b6:	f7fe fd73 	bl	8005fa0 <ai_buffer_get_size>
 80074ba:	4285      	cmp	r5, r0
 80074bc:	f0c0 8138 	bcc.w	8007730 <ai_platform_network_process+0x3cc>
 80074c0:	68e0      	ldr	r0, [r4, #12]
 80074c2:	69b1      	ldr	r1, [r6, #24]
 80074c4:	68c2      	ldr	r2, [r0, #12]
 80074c6:	68cb      	ldr	r3, [r1, #12]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	f040 8131 	bne.w	8007730 <ai_platform_network_process+0x3cc>
 80074ce:	6882      	ldr	r2, [r0, #8]
 80074d0:	688b      	ldr	r3, [r1, #8]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	f040 812c 	bne.w	8007730 <ai_platform_network_process+0x3cc>
 80074d8:	6842      	ldr	r2, [r0, #4]
 80074da:	684b      	ldr	r3, [r1, #4]
 80074dc:	429a      	cmp	r2, r3
 80074de:	f040 8127 	bne.w	8007730 <ai_platform_network_process+0x3cc>
 80074e2:	69a3      	ldr	r3, [r4, #24]
 80074e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074e8:	f006 fc70 	bl	800ddcc <ai_array_get_data_byte_size>
 80074ec:	4605      	mov	r5, r0
 80074ee:	4620      	mov	r0, r4
 80074f0:	f006 fbc2 	bl	800dc78 <get_tensor_byte_size>
 80074f4:	4285      	cmp	r5, r0
 80074f6:	f0c0 811b 	bcc.w	8007730 <ai_platform_network_process+0x3cc>
 80074fa:	69a3      	ldr	r3, [r4, #24]
 80074fc:	6818      	ldr	r0, [r3, #0]
 80074fe:	f006 fbd1 	bl	800dca4 <ai_array_to_buffer_fmt>
 8007502:	6833      	ldr	r3, [r6, #0]
 8007504:	4058      	eors	r0, r3
 8007506:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800750a:	f040 81ca 	bne.w	80078a2 <ai_platform_network_process+0x53e>
 800750e:	6873      	ldr	r3, [r6, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 81bd 	beq.w	8007890 <ai_platform_network_process+0x52c>
 8007516:	69b3      	ldr	r3, [r6, #24]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 81ca 	beq.w	80078b4 <ai_platform_network_process+0x550>
 8007520:	9a02      	ldr	r2, [sp, #8]
 8007522:	4620      	mov	r0, r4
 8007524:	3701      	adds	r7, #1
 8007526:	361c      	adds	r6, #28
 8007528:	429a      	cmp	r2, r3
 800752a:	bf38      	it	cc
 800752c:	461a      	movcc	r2, r3
 800752e:	9202      	str	r2, [sp, #8]
 8007530:	f006 fba2 	bl	800dc78 <get_tensor_byte_size>
 8007534:	f8c9 0008 	str.w	r0, [r9, #8]
 8007538:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	fb00 f303 	mul.w	r3, r0, r3
 8007542:	f8c9 300c 	str.w	r3, [r9, #12]
 8007546:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800754a:	440b      	add	r3, r1
 800754c:	f8c9 1004 	str.w	r1, [r9, #4]
 8007550:	f84a 300b 	str.w	r3, [sl, fp]
 8007554:	69a0      	ldr	r0, [r4, #24]
 8007556:	6803      	ldr	r3, [r0, #0]
 8007558:	009a      	lsls	r2, r3, #2
 800755a:	f100 80bb 	bmi.w	80076d4 <ai_platform_network_process+0x370>
 800755e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007562:	1a9b      	subs	r3, r3, r2
 8007564:	4419      	add	r1, r3
 8007566:	6081      	str	r1, [r0, #8]
 8007568:	69a3      	ldr	r3, [r4, #24]
 800756a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800756e:	60da      	str	r2, [r3, #12]
 8007570:	f8b8 3000 	ldrh.w	r3, [r8]
 8007574:	42bb      	cmp	r3, r7
 8007576:	d888      	bhi.n	800748a <ai_platform_network_process+0x126>
 8007578:	9d03      	ldr	r5, [sp, #12]
 800757a:	9b01      	ldr	r3, [sp, #4]
 800757c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 81a1 	beq.w	80078c6 <ai_platform_network_process+0x562>
 8007584:	2a01      	cmp	r2, #1
 8007586:	f240 817b 	bls.w	8007880 <ai_platform_network_process+0x51c>
 800758a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800758e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 8174 	beq.w	8007880 <ai_platform_network_process+0x51c>
 8007598:	9e01      	ldr	r6, [sp, #4]
 800759a:	2700      	movs	r7, #0
 800759c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 80d3 	beq.w	800774c <ai_platform_network_process+0x3e8>
 80075a6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80075aa:	2c00      	cmp	r4, #0
 80075ac:	f000 80ce 	beq.w	800774c <ai_platform_network_process+0x3e8>
 80075b0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80075b4:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80075b8:	f8d3 8000 	ldr.w	r8, [r3]
 80075bc:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80075c0:	f000 819f 	beq.w	8007902 <ai_platform_network_process+0x59e>
 80075c4:	69a3      	ldr	r3, [r4, #24]
 80075c6:	2101      	movs	r1, #1
 80075c8:	4630      	mov	r0, r6
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	f7fe fce7 	bl	8005fa0 <ai_buffer_get_size>
 80075d2:	9b01      	ldr	r3, [sp, #4]
 80075d4:	4283      	cmp	r3, r0
 80075d6:	f0c0 8153 	bcc.w	8007880 <ai_platform_network_process+0x51c>
 80075da:	68e0      	ldr	r0, [r4, #12]
 80075dc:	69b1      	ldr	r1, [r6, #24]
 80075de:	68c2      	ldr	r2, [r0, #12]
 80075e0:	68cb      	ldr	r3, [r1, #12]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	f040 814c 	bne.w	8007880 <ai_platform_network_process+0x51c>
 80075e8:	6882      	ldr	r2, [r0, #8]
 80075ea:	688b      	ldr	r3, [r1, #8]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	f040 8147 	bne.w	8007880 <ai_platform_network_process+0x51c>
 80075f2:	6842      	ldr	r2, [r0, #4]
 80075f4:	684b      	ldr	r3, [r1, #4]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	f040 8142 	bne.w	8007880 <ai_platform_network_process+0x51c>
 80075fc:	69a3      	ldr	r3, [r4, #24]
 80075fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007602:	f006 fbe3 	bl	800ddcc <ai_array_get_data_byte_size>
 8007606:	9001      	str	r0, [sp, #4]
 8007608:	4620      	mov	r0, r4
 800760a:	f006 fb35 	bl	800dc78 <get_tensor_byte_size>
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	4283      	cmp	r3, r0
 8007612:	f0c0 8135 	bcc.w	8007880 <ai_platform_network_process+0x51c>
 8007616:	69a3      	ldr	r3, [r4, #24]
 8007618:	6818      	ldr	r0, [r3, #0]
 800761a:	f006 fb43 	bl	800dca4 <ai_array_to_buffer_fmt>
 800761e:	6833      	ldr	r3, [r6, #0]
 8007620:	4058      	eors	r0, r3
 8007622:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007626:	f040 815c 	bne.w	80078e2 <ai_platform_network_process+0x57e>
 800762a:	6873      	ldr	r3, [r6, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 8150 	beq.w	80078d2 <ai_platform_network_process+0x56e>
 8007632:	69b3      	ldr	r3, [r6, #24]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 815b 	beq.w	80078f2 <ai_platform_network_process+0x58e>
 800763c:	9a02      	ldr	r2, [sp, #8]
 800763e:	4620      	mov	r0, r4
 8007640:	3701      	adds	r7, #1
 8007642:	361c      	adds	r6, #28
 8007644:	429a      	cmp	r2, r3
 8007646:	bf38      	it	cc
 8007648:	461a      	movcc	r2, r3
 800764a:	9202      	str	r2, [sp, #8]
 800764c:	f006 fb14 	bl	800dc78 <get_tensor_byte_size>
 8007650:	f8ca 0008 	str.w	r0, [sl, #8]
 8007654:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	fb00 f303 	mul.w	r3, r0, r3
 800765e:	f8ca 300c 	str.w	r3, [sl, #12]
 8007662:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8007666:	440b      	add	r3, r1
 8007668:	f8ca 1004 	str.w	r1, [sl, #4]
 800766c:	f848 300b 	str.w	r3, [r8, fp]
 8007670:	69a0      	ldr	r0, [r4, #24]
 8007672:	6803      	ldr	r3, [r0, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	d464      	bmi.n	8007742 <ai_platform_network_process+0x3de>
 8007678:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800767c:	1a9b      	subs	r3, r3, r2
 800767e:	4419      	add	r1, r3
 8007680:	6081      	str	r1, [r0, #8]
 8007682:	69a3      	ldr	r3, [r4, #24]
 8007684:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007688:	60da      	str	r2, [r3, #12]
 800768a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800768e:	429f      	cmp	r7, r3
 8007690:	d384      	bcc.n	800759c <ai_platform_network_process+0x238>
 8007692:	e05b      	b.n	800774c <ai_platform_network_process+0x3e8>
 8007694:	e7fe      	b.n	8007694 <ai_platform_network_process+0x330>
 8007696:	68ea      	ldr	r2, [r5, #12]
 8007698:	616b      	str	r3, [r5, #20]
 800769a:	f002 0203 	and.w	r2, r2, #3
 800769e:	2a03      	cmp	r2, #3
 80076a0:	d039      	beq.n	8007716 <ai_platform_network_process+0x3b2>
 80076a2:	2230      	movs	r2, #48	; 0x30
 80076a4:	2111      	movs	r1, #17
 80076a6:	f105 0010 	add.w	r0, r5, #16
 80076aa:	2400      	movs	r4, #0
 80076ac:	f000 f940 	bl	8007930 <core_set_error>
 80076b0:	4620      	mov	r0, r4
 80076b2:	b005      	add	sp, #20
 80076b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b8:	4a0c      	ldr	r2, [pc, #48]	; (80076ec <ai_platform_network_process+0x388>)
 80076ba:	2301      	movs	r3, #1
 80076bc:	6093      	str	r3, [r2, #8]
 80076be:	6893      	ldr	r3, [r2, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1fc      	bne.n	80076be <ai_platform_network_process+0x35a>
 80076c4:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <ai_platform_network_process+0x380>)
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <ai_platform_network_process+0x384>)
 80076ca:	6812      	ldr	r2, [r2, #0]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	f43f aeb6 	beq.w	800743e <ai_platform_network_process+0xda>
 80076d2:	e7fe      	b.n	80076d2 <ai_platform_network_process+0x36e>
 80076d4:	f8b8 3000 	ldrh.w	r3, [r8]
 80076d8:	429f      	cmp	r7, r3
 80076da:	f4ff aed6 	bcc.w	800748a <ai_platform_network_process+0x126>
 80076de:	e74b      	b.n	8007578 <ai_platform_network_process+0x214>
 80076e0:	58024000 	.word	0x58024000
 80076e4:	f407a5c2 	.word	0xf407a5c2
 80076e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80076ec:	40023000 	.word	0x40023000
 80076f0:	4a88      	ldr	r2, [pc, #544]	; (8007914 <ai_platform_network_process+0x5b0>)
 80076f2:	2301      	movs	r3, #1
 80076f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80076f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1fb      	bne.n	80076f8 <ai_platform_network_process+0x394>
 8007700:	4b85      	ldr	r3, [pc, #532]	; (8007918 <ai_platform_network_process+0x5b4>)
 8007702:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007706:	4b85      	ldr	r3, [pc, #532]	; (800791c <ai_platform_network_process+0x5b8>)
 8007708:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800770c:	429a      	cmp	r2, r3
 800770e:	f43f ae96 	beq.w	800743e <ai_platform_network_process+0xda>
 8007712:	e7fe      	b.n	8007712 <ai_platform_network_process+0x3ae>
 8007714:	9d03      	ldr	r5, [sp, #12]
 8007716:	2400      	movs	r4, #0
 8007718:	2217      	movs	r2, #23
 800771a:	2112      	movs	r1, #18
 800771c:	f105 0010 	add.w	r0, r5, #16
 8007720:	f000 f906 	bl	8007930 <core_set_error>
 8007724:	4620      	mov	r0, r4
 8007726:	b005      	add	sp, #20
 8007728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772c:	462c      	mov	r4, r5
 800772e:	e7bf      	b.n	80076b0 <ai_platform_network_process+0x34c>
 8007730:	9d03      	ldr	r5, [sp, #12]
 8007732:	2218      	movs	r2, #24
 8007734:	2112      	movs	r1, #18
 8007736:	2400      	movs	r4, #0
 8007738:	f105 0010 	add.w	r0, r5, #16
 800773c:	f000 f8f8 	bl	8007930 <core_set_error>
 8007740:	e7b6      	b.n	80076b0 <ai_platform_network_process+0x34c>
 8007742:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007746:	429f      	cmp	r7, r3
 8007748:	f4ff af28 	bcc.w	800759c <ai_platform_network_process+0x238>
 800774c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007750:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007752:	82ab      	strh	r3, [r5, #20]
 8007754:	2a00      	cmp	r2, #0
 8007756:	f040 808d 	bne.w	8007874 <ai_platform_network_process+0x510>
 800775a:	4616      	mov	r6, r2
 800775c:	4617      	mov	r7, r2
 800775e:	8aec      	ldrh	r4, [r5, #22]
 8007760:	429c      	cmp	r4, r3
 8007762:	d2a5      	bcs.n	80076b0 <ai_platform_network_process+0x34c>
 8007764:	46ab      	mov	fp, r5
 8007766:	2e00      	cmp	r6, #0
 8007768:	d030      	beq.n	80077cc <ai_platform_network_process+0x468>
 800776a:	f04f 0800 	mov.w	r8, #0
 800776e:	e014      	b.n	800779a <ai_platform_network_process+0x436>
 8007770:	6882      	ldr	r2, [r0, #8]
 8007772:	68c5      	ldr	r5, [r0, #12]
 8007774:	6863      	ldr	r3, [r4, #4]
 8007776:	1b52      	subs	r2, r2, r5
 8007778:	4413      	add	r3, r2
 800777a:	6083      	str	r3, [r0, #8]
 800777c:	698b      	ldr	r3, [r1, #24]
 800777e:	6862      	ldr	r2, [r4, #4]
 8007780:	60da      	str	r2, [r3, #12]
 8007782:	f859 200a 	ldr.w	r2, [r9, sl]
 8007786:	f108 0801 	add.w	r8, r8, #1
 800778a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800778e:	440b      	add	r3, r1
 8007790:	4293      	cmp	r3, r2
 8007792:	d301      	bcc.n	8007798 <ai_platform_network_process+0x434>
 8007794:	68e3      	ldr	r3, [r4, #12]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	6063      	str	r3, [r4, #4]
 800779a:	8833      	ldrh	r3, [r6, #0]
 800779c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80077a0:	4543      	cmp	r3, r8
 80077a2:	d913      	bls.n	80077cc <ai_platform_network_process+0x468>
 80077a4:	6873      	ldr	r3, [r6, #4]
 80077a6:	b18b      	cbz	r3, 80077cc <ai_platform_network_process+0x468>
 80077a8:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80077ac:	b171      	cbz	r1, 80077cc <ai_platform_network_process+0x468>
 80077ae:	6988      	ldr	r0, [r1, #24]
 80077b0:	68b2      	ldr	r2, [r6, #8]
 80077b2:	6803      	ldr	r3, [r0, #0]
 80077b4:	f8d2 9000 	ldr.w	r9, [r2]
 80077b8:	009d      	lsls	r5, r3, #2
 80077ba:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80077be:	d5d7      	bpl.n	8007770 <ai_platform_network_process+0x40c>
 80077c0:	6880      	ldr	r0, [r0, #8]
 80077c2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80077c6:	f006 fc55 	bl	800e074 <memcpy>
 80077ca:	e7da      	b.n	8007782 <ai_platform_network_process+0x41e>
 80077cc:	4658      	mov	r0, fp
 80077ce:	f001 f923 	bl	8008a18 <ai_layers_forward_all>
 80077d2:	2f00      	cmp	r7, #0
 80077d4:	d03f      	beq.n	8007856 <ai_platform_network_process+0x4f2>
 80077d6:	2400      	movs	r4, #0
 80077d8:	e016      	b.n	8007808 <ai_platform_network_process+0x4a4>
 80077da:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80077de:	f859 100a 	ldr.w	r1, [r9, sl]
 80077e2:	4413      	add	r3, r2
 80077e4:	428b      	cmp	r3, r1
 80077e6:	d302      	bcc.n	80077ee <ai_platform_network_process+0x48a>
 80077e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077ec:	1acb      	subs	r3, r1, r3
 80077ee:	f8c8 3004 	str.w	r3, [r8, #4]
 80077f2:	6981      	ldr	r1, [r0, #24]
 80077f4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80077f8:	1b52      	subs	r2, r2, r5
 80077fa:	4413      	add	r3, r2
 80077fc:	608b      	str	r3, [r1, #8]
 80077fe:	6983      	ldr	r3, [r0, #24]
 8007800:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007804:	60da      	str	r2, [r3, #12]
 8007806:	3401      	adds	r4, #1
 8007808:	883b      	ldrh	r3, [r7, #0]
 800780a:	42a3      	cmp	r3, r4
 800780c:	d923      	bls.n	8007856 <ai_platform_network_process+0x4f2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	b30b      	cbz	r3, 8007856 <ai_platform_network_process+0x4f2>
 8007812:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007816:	b1f0      	cbz	r0, 8007856 <ai_platform_network_process+0x4f2>
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800781e:	6983      	ldr	r3, [r0, #24]
 8007820:	f8d2 9000 	ldr.w	r9, [r2]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800782a:	0092      	lsls	r2, r2, #2
 800782c:	d5d5      	bpl.n	80077da <ai_platform_network_process+0x476>
 800782e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8007832:	6899      	ldr	r1, [r3, #8]
 8007834:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007838:	f006 fc1c 	bl	800e074 <memcpy>
 800783c:	f859 200a 	ldr.w	r2, [r9, sl]
 8007840:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007844:	440b      	add	r3, r1
 8007846:	4293      	cmp	r3, r2
 8007848:	d302      	bcc.n	8007850 <ai_platform_network_process+0x4ec>
 800784a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	f8c8 3004 	str.w	r3, [r8, #4]
 8007854:	e7d7      	b.n	8007806 <ai_platform_network_process+0x4a2>
 8007856:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800785a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800785e:	3401      	adds	r4, #1
 8007860:	b2a4      	uxth	r4, r4
 8007862:	42a3      	cmp	r3, r4
 8007864:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007868:	f63f af7d 	bhi.w	8007766 <ai_platform_network_process+0x402>
 800786c:	4620      	mov	r0, r4
 800786e:	b005      	add	sp, #20
 8007870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007874:	2a01      	cmp	r2, #1
 8007876:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8007878:	d029      	beq.n	80078ce <ai_platform_network_process+0x56a>
 800787a:	f106 070c 	add.w	r7, r6, #12
 800787e:	e76e      	b.n	800775e <ai_platform_network_process+0x3fa>
 8007880:	2218      	movs	r2, #24
 8007882:	2113      	movs	r1, #19
 8007884:	f105 0010 	add.w	r0, r5, #16
 8007888:	2400      	movs	r4, #0
 800788a:	f000 f851 	bl	8007930 <core_set_error>
 800788e:	e70f      	b.n	80076b0 <ai_platform_network_process+0x34c>
 8007890:	9d03      	ldr	r5, [sp, #12]
 8007892:	4604      	mov	r4, r0
 8007894:	2217      	movs	r2, #23
 8007896:	2112      	movs	r1, #18
 8007898:	f105 0010 	add.w	r0, r5, #16
 800789c:	f000 f848 	bl	8007930 <core_set_error>
 80078a0:	e706      	b.n	80076b0 <ai_platform_network_process+0x34c>
 80078a2:	9d03      	ldr	r5, [sp, #12]
 80078a4:	2219      	movs	r2, #25
 80078a6:	2112      	movs	r1, #18
 80078a8:	2400      	movs	r4, #0
 80078aa:	f105 0010 	add.w	r0, r5, #16
 80078ae:	f000 f83f 	bl	8007930 <core_set_error>
 80078b2:	e6fd      	b.n	80076b0 <ai_platform_network_process+0x34c>
 80078b4:	9d03      	ldr	r5, [sp, #12]
 80078b6:	4604      	mov	r4, r0
 80078b8:	2221      	movs	r2, #33	; 0x21
 80078ba:	2112      	movs	r1, #18
 80078bc:	f105 0010 	add.w	r0, r5, #16
 80078c0:	f000 f836 	bl	8007930 <core_set_error>
 80078c4:	e6f4      	b.n	80076b0 <ai_platform_network_process+0x34c>
 80078c6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80078ca:	82ab      	strh	r3, [r5, #20]
 80078cc:	e742      	b.n	8007754 <ai_platform_network_process+0x3f0>
 80078ce:	2700      	movs	r7, #0
 80078d0:	e745      	b.n	800775e <ai_platform_network_process+0x3fa>
 80078d2:	4604      	mov	r4, r0
 80078d4:	2217      	movs	r2, #23
 80078d6:	2113      	movs	r1, #19
 80078d8:	f105 0010 	add.w	r0, r5, #16
 80078dc:	f000 f828 	bl	8007930 <core_set_error>
 80078e0:	e6e6      	b.n	80076b0 <ai_platform_network_process+0x34c>
 80078e2:	2219      	movs	r2, #25
 80078e4:	2113      	movs	r1, #19
 80078e6:	f105 0010 	add.w	r0, r5, #16
 80078ea:	2400      	movs	r4, #0
 80078ec:	f000 f820 	bl	8007930 <core_set_error>
 80078f0:	e6de      	b.n	80076b0 <ai_platform_network_process+0x34c>
 80078f2:	4604      	mov	r4, r0
 80078f4:	2221      	movs	r2, #33	; 0x21
 80078f6:	2113      	movs	r1, #19
 80078f8:	f105 0010 	add.w	r0, r5, #16
 80078fc:	f000 f818 	bl	8007930 <core_set_error>
 8007900:	e6d6      	b.n	80076b0 <ai_platform_network_process+0x34c>
 8007902:	2217      	movs	r2, #23
 8007904:	2113      	movs	r1, #19
 8007906:	f105 0010 	add.w	r0, r5, #16
 800790a:	4654      	mov	r4, sl
 800790c:	f000 f810 	bl	8007930 <core_set_error>
 8007910:	e6ce      	b.n	80076b0 <ai_platform_network_process+0x34c>
 8007912:	bf00      	nop
 8007914:	58024000 	.word	0x58024000
 8007918:	f407a5c2 	.word	0xf407a5c2
 800791c:	b5e8b5cd 	.word	0xb5e8b5cd

08007920 <core_init>:
 8007920:	2001      	movs	r0, #1
 8007922:	4770      	bx	lr

08007924 <core_get_error>:
 8007924:	4603      	mov	r3, r0
 8007926:	2200      	movs	r2, #0
 8007928:	6800      	ldr	r0, [r0, #0]
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop

08007930 <core_set_error>:
 8007930:	4603      	mov	r3, r0
 8007932:	7800      	ldrb	r0, [r0, #0]
 8007934:	b108      	cbz	r0, 800793a <core_set_error+0xa>
 8007936:	2000      	movs	r0, #0
 8007938:	4770      	bx	lr
 800793a:	7019      	strb	r1, [r3, #0]
 800793c:	2001      	movs	r0, #1
 800793e:	6819      	ldr	r1, [r3, #0]
 8007940:	f362 211f 	bfi	r1, r2, #8, #24
 8007944:	6019      	str	r1, [r3, #0]
 8007946:	4770      	bx	lr

08007948 <func_dummy>:
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop

0800794c <forward_conv2d_integer_SSSA>:
 800794c:	6983      	ldr	r3, [r0, #24]
 800794e:	881a      	ldrh	r2, [r3, #0]
 8007950:	2a00      	cmp	r2, #0
 8007952:	f000 812d 	beq.w	8007bb0 <forward_conv2d_integer_SSSA+0x264>
 8007956:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795a:	685d      	ldr	r5, [r3, #4]
 800795c:	b0ad      	sub	sp, #180	; 0xb4
 800795e:	686c      	ldr	r4, [r5, #4]
 8007960:	b104      	cbz	r4, 8007964 <forward_conv2d_integer_SSSA+0x18>
 8007962:	6824      	ldr	r4, [r4, #0]
 8007964:	2a01      	cmp	r2, #1
 8007966:	f000 82a2 	beq.w	8007eae <forward_conv2d_integer_SSSA+0x562>
 800796a:	692b      	ldr	r3, [r5, #16]
 800796c:	9323      	str	r3, [sp, #140]	; 0x8c
 800796e:	b10b      	cbz	r3, 8007974 <forward_conv2d_integer_SSSA+0x28>
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	9323      	str	r3, [sp, #140]	; 0x8c
 8007974:	2a02      	cmp	r2, #2
 8007976:	f000 8118 	beq.w	8007baa <forward_conv2d_integer_SSSA+0x25e>
 800797a:	69eb      	ldr	r3, [r5, #28]
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 8245 	beq.w	8007e0c <forward_conv2d_integer_SSSA+0x4c0>
 8007982:	8b2e      	ldrh	r6, [r5, #24]
 8007984:	6819      	ldr	r1, [r3, #0]
 8007986:	2e01      	cmp	r6, #1
 8007988:	f200 8114 	bhi.w	8007bb4 <forward_conv2d_integer_SSSA+0x268>
 800798c:	2600      	movs	r6, #0
 800798e:	2a03      	cmp	r2, #3
 8007990:	f000 8290 	beq.w	8007eb4 <forward_conv2d_integer_SSSA+0x568>
 8007994:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007996:	2a00      	cmp	r2, #0
 8007998:	f000 828f 	beq.w	8007eba <forward_conv2d_integer_SSSA+0x56e>
 800799c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800799e:	6817      	ldr	r7, [r2, #0]
 80079a0:	9527      	str	r5, [sp, #156]	; 0x9c
 80079a2:	9722      	str	r7, [sp, #136]	; 0x88
 80079a4:	2d00      	cmp	r5, #0
 80079a6:	f000 8225 	beq.w	8007df4 <forward_conv2d_integer_SSSA+0x4a8>
 80079aa:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80079ae:	68e7      	ldr	r7, [r4, #12]
 80079b0:	69b2      	ldr	r2, [r6, #24]
 80079b2:	687d      	ldr	r5, [r7, #4]
 80079b4:	6892      	ldr	r2, [r2, #8]
 80079b6:	9520      	str	r5, [sp, #128]	; 0x80
 80079b8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80079ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80079bc:	69ad      	ldr	r5, [r5, #24]
 80079be:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80079c2:	68ad      	ldr	r5, [r5, #8]
 80079c4:	f8d2 a004 	ldr.w	sl, [r2, #4]
 80079c8:	951e      	str	r5, [sp, #120]	; 0x78
 80079ca:	fa1f f58a 	uxth.w	r5, sl
 80079ce:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80079d0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80079d4:	9518      	str	r5, [sp, #96]	; 0x60
 80079d6:	68d5      	ldr	r5, [r2, #12]
 80079d8:	6892      	ldr	r2, [r2, #8]
 80079da:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 80079de:	9221      	str	r2, [sp, #132]	; 0x84
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	951f      	str	r5, [sp, #124]	; 0x7c
 80079e4:	9224      	str	r2, [sp, #144]	; 0x90
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	9226      	str	r2, [sp, #152]	; 0x98
 80079ea:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 80079ec:	9213      	str	r2, [sp, #76]	; 0x4c
 80079ee:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80079f0:	9215      	str	r2, [sp, #84]	; 0x54
 80079f2:	8832      	ldrh	r2, [r6, #0]
 80079f4:	9216      	str	r2, [sp, #88]	; 0x58
 80079f6:	88b2      	ldrh	r2, [r6, #4]
 80079f8:	9214      	str	r2, [sp, #80]	; 0x50
 80079fa:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80079fe:	69c6      	ldr	r6, [r0, #28]
 8007a00:	921d      	str	r2, [sp, #116]	; 0x74
 8007a02:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8007a06:	9219      	str	r2, [sp, #100]	; 0x64
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 81df 	beq.w	8007dcc <forward_conv2d_integer_SSSA+0x480>
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 81db 	beq.w	8007dcc <forward_conv2d_integer_SSSA+0x480>
 8007a16:	699a      	ldr	r2, [r3, #24]
 8007a18:	2a00      	cmp	r2, #0
 8007a1a:	bf08      	it	eq
 8007a1c:	4613      	moveq	r3, r2
 8007a1e:	9325      	str	r3, [sp, #148]	; 0x94
 8007a20:	6827      	ldr	r7, [r4, #0]
 8007a22:	f8d9 2000 	ldr.w	r2, [r9]
 8007a26:	680b      	ldr	r3, [r1, #0]
 8007a28:	2f00      	cmp	r7, #0
 8007a2a:	f000 81c8 	beq.w	8007dbe <forward_conv2d_integer_SSSA+0x472>
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	2800      	cmp	r0, #0
 8007a32:	f000 81c4 	beq.w	8007dbe <forward_conv2d_integer_SSSA+0x472>
 8007a36:	887d      	ldrh	r5, [r7, #2]
 8007a38:	2d00      	cmp	r5, #0
 8007a3a:	f000 81c0 	beq.w	8007dbe <forward_conv2d_integer_SSSA+0x472>
 8007a3e:	6800      	ldr	r0, [r0, #0]
 8007a40:	edd0 7a00 	vldr	s15, [r0]
 8007a44:	2a00      	cmp	r2, #0
 8007a46:	f000 81ab 	beq.w	8007da0 <forward_conv2d_integer_SSSA+0x454>
 8007a4a:	6850      	ldr	r0, [r2, #4]
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	f000 81a7 	beq.w	8007da0 <forward_conv2d_integer_SSSA+0x454>
 8007a52:	8855      	ldrh	r5, [r2, #2]
 8007a54:	2d00      	cmp	r5, #0
 8007a56:	f000 81a3 	beq.w	8007da0 <forward_conv2d_integer_SSSA+0x454>
 8007a5a:	6800      	ldr	r0, [r0, #0]
 8007a5c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007a5e:	ed90 0a00 	vldr	s0, [r0]
 8007a62:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007a64:	42a8      	cmp	r0, r5
 8007a66:	f040 81a2 	bne.w	8007dae <forward_conv2d_integer_SSSA+0x462>
 8007a6a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007a6c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007a6e:	42a8      	cmp	r0, r5
 8007a70:	f040 819d 	bne.w	8007dae <forward_conv2d_integer_SSSA+0x462>
 8007a74:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007a76:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007a78:	42a8      	cmp	r0, r5
 8007a7a:	f040 8198 	bne.w	8007dae <forward_conv2d_integer_SSSA+0x462>
 8007a7e:	9824      	ldr	r0, [sp, #144]	; 0x90
 8007a80:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8007a82:	42a8      	cmp	r0, r5
 8007a84:	f040 8193 	bne.w	8007dae <forward_conv2d_integer_SSSA+0x462>
 8007a88:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007a8a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8007a8c:	42a8      	cmp	r0, r5
 8007a8e:	bf08      	it	eq
 8007a90:	f1bb 0f03 	cmpeq.w	fp, #3
 8007a94:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007a96:	bf0c      	ite	eq
 8007a98:	f04f 0c01 	moveq.w	ip, #1
 8007a9c:	f04f 0c00 	movne.w	ip, #0
 8007aa0:	2801      	cmp	r0, #1
 8007aa2:	f040 818a 	bne.w	8007dba <forward_conv2d_integer_SSSA+0x46e>
 8007aa6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007aa8:	2801      	cmp	r0, #1
 8007aaa:	f040 8186 	bne.w	8007dba <forward_conv2d_integer_SSSA+0x46e>
 8007aae:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007ab0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007ab2:	4328      	orrs	r0, r5
 8007ab4:	f040 8181 	bne.w	8007dba <forward_conv2d_integer_SSSA+0x46e>
 8007ab8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007aba:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007abc:	2801      	cmp	r0, #1
 8007abe:	bf08      	it	eq
 8007ac0:	2d01      	cmpeq	r5, #1
 8007ac2:	bf0c      	ite	eq
 8007ac4:	2001      	moveq	r0, #1
 8007ac6:	2000      	movne	r0, #0
 8007ac8:	6989      	ldr	r1, [r1, #24]
 8007aca:	69a4      	ldr	r4, [r4, #24]
 8007acc:	6889      	ldr	r1, [r1, #8]
 8007ace:	68a4      	ldr	r4, [r4, #8]
 8007ad0:	911a      	str	r1, [sp, #104]	; 0x68
 8007ad2:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8007ad6:	688d      	ldr	r5, [r1, #8]
 8007ad8:	2f00      	cmp	r7, #0
 8007ada:	f000 8175 	beq.w	8007dc8 <forward_conv2d_integer_SSSA+0x47c>
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	f000 8185 	beq.w	8007df0 <forward_conv2d_integer_SSSA+0x4a4>
 8007ae6:	887f      	ldrh	r7, [r7, #2]
 8007ae8:	2f00      	cmp	r7, #0
 8007aea:	f000 816d 	beq.w	8007dc8 <forward_conv2d_integer_SSSA+0x47c>
 8007aee:	6849      	ldr	r1, [r1, #4]
 8007af0:	f991 1000 	ldrsb.w	r1, [r1]
 8007af4:	9117      	str	r1, [sp, #92]	; 0x5c
 8007af6:	2a00      	cmp	r2, #0
 8007af8:	f000 8164 	beq.w	8007dc4 <forward_conv2d_integer_SSSA+0x478>
 8007afc:	6851      	ldr	r1, [r2, #4]
 8007afe:	2900      	cmp	r1, #0
 8007b00:	f000 8174 	beq.w	8007dec <forward_conv2d_integer_SSSA+0x4a0>
 8007b04:	8852      	ldrh	r2, [r2, #2]
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	f000 815c 	beq.w	8007dc4 <forward_conv2d_integer_SSSA+0x478>
 8007b0c:	684a      	ldr	r2, [r1, #4]
 8007b0e:	f992 2000 	ldrsb.w	r2, [r2]
 8007b12:	921c      	str	r2, [sp, #112]	; 0x70
 8007b14:	b113      	cbz	r3, 8007b1c <forward_conv2d_integer_SSSA+0x1d0>
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	b103      	cbz	r3, 8007b1c <forward_conv2d_integer_SSSA+0x1d0>
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2e01      	cmp	r6, #1
 8007b1e:	f000 815f 	beq.w	8007de0 <forward_conv2d_integer_SSSA+0x494>
 8007b22:	f8bd 8080 	ldrh.w	r8, [sp, #128]	; 0x80
 8007b26:	4546      	cmp	r6, r8
 8007b28:	bf0c      	ite	eq
 8007b2a:	f04f 0813 	moveq.w	r8, #19
 8007b2e:	f04f 0800 	movne.w	r8, #0
 8007b32:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007b34:	fa1f fa8a 	uxth.w	sl, sl
 8007b38:	9921      	ldr	r1, [sp, #132]	; 0x84
 8007b3a:	fb01 f202 	mul.w	r2, r1, r2
 8007b3e:	fb0a 5202 	mla	r2, sl, r2, r5
 8007b42:	4294      	cmp	r4, r2
 8007b44:	f080 814a 	bcs.w	8007ddc <forward_conv2d_integer_SSSA+0x490>
 8007b48:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b4a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007b4c:	fb01 f602 	mul.w	r6, r1, r2
 8007b50:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
 8007b54:	fb02 4606 	mla	r6, r2, r6, r4
 8007b58:	42b5      	cmp	r5, r6
 8007b5a:	bf2c      	ite	cs
 8007b5c:	2600      	movcs	r6, #0
 8007b5e:	2601      	movcc	r6, #1
 8007b60:	2200      	movs	r2, #0
 8007b62:	f10d 07a2 	add.w	r7, sp, #162	; 0xa2
 8007b66:	f1a8 0811 	sub.w	r8, r8, #17
 8007b6a:	f8ad 20a2 	strh.w	r2, [sp, #162]	; 0xa2
 8007b6e:	4638      	mov	r0, r7
 8007b70:	9229      	str	r2, [sp, #164]	; 0xa4
 8007b72:	ed93 7a00 	vldr	s14, [r3]
 8007b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b7a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007b7e:	f001 fcf3 	bl	8009568 <align_factor>
 8007b82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b84:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	9029      	str	r0, [sp, #164]	; 0xa4
 8007b8a:	922a      	str	r2, [sp, #168]	; 0xa8
 8007b8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b90:	f006 f8f4 	bl	800dd7c <ai_array_get_byte_size>
 8007b94:	902b      	str	r0, [sp, #172]	; 0xac
 8007b96:	f1b8 0f03 	cmp.w	r8, #3
 8007b9a:	f200 8192 	bhi.w	8007ec2 <forward_conv2d_integer_SSSA+0x576>
 8007b9e:	e8df f018 	tbh	[pc, r8, lsl #1]
 8007ba2:	00ce      	.short	0x00ce
 8007ba4:	005f0096 	.word	0x005f0096
 8007ba8:	000b      	.short	0x000b
 8007baa:	2300      	movs	r3, #0
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	deff      	udf	#255	; 0xff
 8007bb0:	6853      	ldr	r3, [r2, #4]
 8007bb2:	deff      	udf	#255	; 0xff
 8007bb4:	685e      	ldr	r6, [r3, #4]
 8007bb6:	e6ea      	b.n	800798e <forward_conv2d_integer_SSSA+0x42>
 8007bb8:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8007bbc:	4658      	mov	r0, fp
 8007bbe:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8007bc2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007bc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007bc6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007bc8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007bcc:	9303      	str	r3, [sp, #12]
 8007bce:	4643      	mov	r3, r8
 8007bd0:	9202      	str	r2, [sp, #8]
 8007bd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007bd4:	e9cd 6100 	strd	r6, r1, [sp]
 8007bd8:	4651      	mov	r1, sl
 8007bda:	f002 fadf 	bl	800a19c <st_sssa8_convolve_rank1upd>
 8007bde:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007be0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007be2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007be4:	9310      	str	r3, [sp, #64]	; 0x40
 8007be6:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8007bea:	950d      	str	r5, [sp, #52]	; 0x34
 8007bec:	930e      	str	r3, [sp, #56]	; 0x38
 8007bee:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8007bf2:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007bf4:	9201      	str	r2, [sp, #4]
 8007bf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bf8:	465b      	mov	r3, fp
 8007bfa:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 8007bfe:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 8007c02:	f8cd a000 	str.w	sl, [sp]
 8007c06:	950c      	str	r5, [sp, #48]	; 0x30
 8007c08:	f8cd 8008 	str.w	r8, [sp, #8]
 8007c0c:	e9cd 700a 	strd	r7, r0, [sp, #40]	; 0x28
 8007c10:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007c12:	9008      	str	r0, [sp, #32]
 8007c14:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007c16:	9007      	str	r0, [sp, #28]
 8007c18:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007c1a:	9006      	str	r0, [sp, #24]
 8007c1c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007c1e:	9005      	str	r0, [sp, #20]
 8007c20:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007c22:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8007c26:	4620      	mov	r0, r4
 8007c28:	ac29      	add	r4, sp, #164	; 0xa4
 8007c2a:	9409      	str	r4, [sp, #36]	; 0x24
 8007c2c:	f002 fb42 	bl	800a2b4 <st_sssa8_convolve>
 8007c30:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007c34:	0a1b      	lsrs	r3, r3, #8
 8007c36:	f000 8138 	beq.w	8007eaa <forward_conv2d_integer_SSSA+0x55e>
 8007c3a:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007c44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c48:	4298      	cmp	r0, r3
 8007c4a:	fb01 f202 	mul.w	r2, r1, r2
 8007c4e:	d1f9      	bne.n	8007c44 <forward_conv2d_integer_SSSA+0x2f8>
 8007c50:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007c52:	4649      	mov	r1, r9
 8007c54:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8007c56:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007c58:	47a0      	blx	r4
 8007c5a:	b02d      	add	sp, #180	; 0xb4
 8007c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c60:	f8bd 6064 	ldrh.w	r6, [sp, #100]	; 0x64
 8007c64:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 8007c68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c6a:	4632      	mov	r2, r6
 8007c6c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007c70:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c72:	4650      	mov	r0, sl
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	4643      	mov	r3, r8
 8007c78:	f001 fcc8 	bl	800960c <st_sssa8_conv_dw_Wadapt>
 8007c7c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007c7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c80:	4620      	mov	r0, r4
 8007c82:	920c      	str	r2, [sp, #48]	; 0x30
 8007c84:	ac29      	add	r4, sp, #164	; 0xa4
 8007c86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c88:	9310      	str	r3, [sp, #64]	; 0x40
 8007c8a:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8007c8e:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 8007c92:	930e      	str	r3, [sp, #56]	; 0x38
 8007c94:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8007c98:	f8cd a000 	str.w	sl, [sp]
 8007c9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c9e:	465b      	mov	r3, fp
 8007ca0:	950d      	str	r5, [sp, #52]	; 0x34
 8007ca2:	9602      	str	r6, [sp, #8]
 8007ca4:	9409      	str	r4, [sp, #36]	; 0x24
 8007ca6:	e9cd 720a 	strd	r7, r2, [sp, #40]	; 0x28
 8007caa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007cac:	9208      	str	r2, [sp, #32]
 8007cae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007cb0:	9207      	str	r2, [sp, #28]
 8007cb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cb4:	9206      	str	r2, [sp, #24]
 8007cb6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007cb8:	9205      	str	r2, [sp, #20]
 8007cba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007cbc:	e9cd 8203 	strd	r8, r2, [sp, #12]
 8007cc0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007cc2:	9201      	str	r2, [sp, #4]
 8007cc4:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 8007cc8:	f001 fd5c 	bl	8009784 <st_sssa8_convolve_dw>
 8007ccc:	e7b0      	b.n	8007c30 <forward_conv2d_integer_SSSA+0x2e4>
 8007cce:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 8007cd2:	465a      	mov	r2, fp
 8007cd4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007cd6:	981a      	ldr	r0, [sp, #104]	; 0x68
 8007cd8:	4643      	mov	r3, r8
 8007cda:	f003 fc6d 	bl	800b5b8 <st_sssa8_convolve_1x1_WeightsPrefetch>
 8007cde:	2e00      	cmp	r6, #0
 8007ce0:	f040 8097 	bne.w	8007e12 <forward_conv2d_integer_SSSA+0x4c6>
 8007ce4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8007cec:	ac29      	add	r4, sp, #164	; 0xa4
 8007cee:	930c      	str	r3, [sp, #48]	; 0x30
 8007cf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cf2:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 8007cf6:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 8007cfa:	950d      	str	r5, [sp, #52]	; 0x34
 8007cfc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007d00:	9603      	str	r6, [sp, #12]
 8007d02:	9409      	str	r4, [sp, #36]	; 0x24
 8007d04:	e9cd 730a 	strd	r7, r3, [sp, #40]	; 0x28
 8007d08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d0a:	9308      	str	r3, [sp, #32]
 8007d0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d0e:	9307      	str	r3, [sp, #28]
 8007d10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d12:	9306      	str	r3, [sp, #24]
 8007d14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d16:	9305      	str	r3, [sp, #20]
 8007d18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d1a:	9304      	str	r3, [sp, #16]
 8007d1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8007d28:	930e      	str	r3, [sp, #56]	; 0x38
 8007d2a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8007d2e:	9302      	str	r3, [sp, #8]
 8007d30:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8007d34:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d36:	465b      	mov	r3, fp
 8007d38:	f003 fc4c 	bl	800b5d4 <st_sssa8_convolve_1x1>
 8007d3c:	e778      	b.n	8007c30 <forward_conv2d_integer_SSSA+0x2e4>
 8007d3e:	f8bd 6064 	ldrh.w	r6, [sp, #100]	; 0x64
 8007d42:	4658      	mov	r0, fp
 8007d44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d48:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007d4a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8007d4e:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007d52:	9303      	str	r3, [sp, #12]
 8007d54:	4633      	mov	r3, r6
 8007d56:	9202      	str	r2, [sp, #8]
 8007d58:	4652      	mov	r2, sl
 8007d5a:	e9cd 6100 	strd	r6, r1, [sp]
 8007d5e:	4641      	mov	r1, r8
 8007d60:	f002 fa1c 	bl	800a19c <st_sssa8_convolve_rank1upd>
 8007d64:	981e      	ldr	r0, [sp, #120]	; 0x78
 8007d66:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8007d6a:	465a      	mov	r2, fp
 8007d6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d6e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007d70:	9509      	str	r5, [sp, #36]	; 0x24
 8007d72:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007d74:	930a      	str	r3, [sp, #40]	; 0x28
 8007d76:	4643      	mov	r3, r8
 8007d78:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 8007d7c:	9508      	str	r5, [sp, #32]
 8007d7e:	f8cd a000 	str.w	sl, [sp]
 8007d82:	e9cd 7006 	strd	r7, r0, [sp, #24]
 8007d86:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007d88:	9004      	str	r0, [sp, #16]
 8007d8a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007d8c:	9003      	str	r0, [sp, #12]
 8007d8e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007d90:	e9cd 6001 	strd	r6, r0, [sp, #4]
 8007d94:	4620      	mov	r0, r4
 8007d96:	ac29      	add	r4, sp, #164	; 0xa4
 8007d98:	9405      	str	r4, [sp, #20]
 8007d9a:	f003 f81f 	bl	800addc <st_sssa8_convolve_rgb>
 8007d9e:	e747      	b.n	8007c30 <forward_conv2d_integer_SSSA+0x2e4>
 8007da0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007da2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007da4:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8007ec8 <forward_conv2d_integer_SSSA+0x57c>
 8007da8:	42a8      	cmp	r0, r5
 8007daa:	f43f ae5e 	beq.w	8007a6a <forward_conv2d_integer_SSSA+0x11e>
 8007dae:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007db0:	f04f 0c00 	mov.w	ip, #0
 8007db4:	2801      	cmp	r0, #1
 8007db6:	f43f ae76 	beq.w	8007aa6 <forward_conv2d_integer_SSSA+0x15a>
 8007dba:	2000      	movs	r0, #0
 8007dbc:	e684      	b.n	8007ac8 <forward_conv2d_integer_SSSA+0x17c>
 8007dbe:	eddf 7a42 	vldr	s15, [pc, #264]	; 8007ec8 <forward_conv2d_integer_SSSA+0x57c>
 8007dc2:	e63f      	b.n	8007a44 <forward_conv2d_integer_SSSA+0xf8>
 8007dc4:	921c      	str	r2, [sp, #112]	; 0x70
 8007dc6:	e6a5      	b.n	8007b14 <forward_conv2d_integer_SSSA+0x1c8>
 8007dc8:	9717      	str	r7, [sp, #92]	; 0x5c
 8007dca:	e694      	b.n	8007af6 <forward_conv2d_integer_SSSA+0x1aa>
 8007dcc:	6a03      	ldr	r3, [r0, #32]
 8007dce:	9325      	str	r3, [sp, #148]	; 0x94
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f43f ae25 	beq.w	8007a20 <forward_conv2d_integer_SSSA+0xd4>
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	9325      	str	r3, [sp, #148]	; 0x94
 8007dda:	e621      	b.n	8007a20 <forward_conv2d_integer_SSSA+0xd4>
 8007ddc:	2600      	movs	r6, #0
 8007dde:	e6bf      	b.n	8007b60 <forward_conv2d_integer_SSSA+0x214>
 8007de0:	f1bc 0f00 	cmp.w	ip, #0
 8007de4:	d00b      	beq.n	8007dfe <forward_conv2d_integer_SSSA+0x4b2>
 8007de6:	f04f 0811 	mov.w	r8, #17
 8007dea:	e6a2      	b.n	8007b32 <forward_conv2d_integer_SSSA+0x1e6>
 8007dec:	911c      	str	r1, [sp, #112]	; 0x70
 8007dee:	e691      	b.n	8007b14 <forward_conv2d_integer_SSSA+0x1c8>
 8007df0:	9117      	str	r1, [sp, #92]	; 0x5c
 8007df2:	e680      	b.n	8007af6 <forward_conv2d_integer_SSSA+0x1aa>
 8007df4:	4a35      	ldr	r2, [pc, #212]	; (8007ecc <forward_conv2d_integer_SSSA+0x580>)
 8007df6:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007dfa:	9227      	str	r2, [sp, #156]	; 0x9c
 8007dfc:	e5d7      	b.n	80079ae <forward_conv2d_integer_SSSA+0x62>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	bf0c      	ite	eq
 8007e02:	f04f 0814 	moveq.w	r8, #20
 8007e06:	f04f 0812 	movne.w	r8, #18
 8007e0a:	e692      	b.n	8007b32 <forward_conv2d_integer_SSSA+0x1e6>
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	461e      	mov	r6, r3
 8007e10:	e5bd      	b.n	800798e <forward_conv2d_integer_SSSA+0x42>
 8007e12:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e14:	2a00      	cmp	r2, #0
 8007e16:	f43f af0b 	beq.w	8007c30 <forward_conv2d_integer_SSSA+0x2e4>
 8007e1a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8007e1e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8007e22:	9120      	str	r1, [sp, #128]	; 0x80
 8007e24:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 8007e28:	9821      	ldr	r0, [sp, #132]	; 0x84
 8007e2a:	911f      	str	r1, [sp, #124]	; 0x7c
 8007e2c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007e2e:	fb00 fa0a 	mul.w	sl, r0, sl
 8007e32:	9621      	str	r6, [sp, #132]	; 0x84
 8007e34:	b280      	uxth	r0, r0
 8007e36:	fb01 f303 	mul.w	r3, r1, r3
 8007e3a:	2600      	movs	r6, #0
 8007e3c:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8007e40:	b289      	uxth	r1, r1
 8007e42:	4699      	mov	r9, r3
 8007e44:	465b      	mov	r3, fp
 8007e46:	4693      	mov	fp, r2
 8007e48:	901e      	str	r0, [sp, #120]	; 0x78
 8007e4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007e4c:	3601      	adds	r6, #1
 8007e4e:	4620      	mov	r0, r4
 8007e50:	950d      	str	r5, [sp, #52]	; 0x34
 8007e52:	920e      	str	r2, [sp, #56]	; 0x38
 8007e54:	4455      	add	r5, sl
 8007e56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007e58:	444c      	add	r4, r9
 8007e5a:	931d      	str	r3, [sp, #116]	; 0x74
 8007e5c:	920c      	str	r2, [sp, #48]	; 0x30
 8007e5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e60:	9119      	str	r1, [sp, #100]	; 0x64
 8007e62:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007e66:	e9cd 720a 	strd	r7, r2, [sp, #40]	; 0x28
 8007e6a:	aa29      	add	r2, sp, #164	; 0xa4
 8007e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007e70:	9208      	str	r2, [sp, #32]
 8007e72:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e74:	9207      	str	r2, [sp, #28]
 8007e76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e78:	9206      	str	r2, [sp, #24]
 8007e7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e7c:	9205      	str	r2, [sp, #20]
 8007e7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e80:	9204      	str	r2, [sp, #16]
 8007e82:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007e84:	9203      	str	r2, [sp, #12]
 8007e86:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e88:	9202      	str	r2, [sp, #8]
 8007e8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e8c:	9201      	str	r2, [sp, #4]
 8007e8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007e90:	9200      	str	r2, [sp, #0]
 8007e92:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e94:	920f      	str	r2, [sp, #60]	; 0x3c
 8007e96:	2201      	movs	r2, #1
 8007e98:	f003 fb9c 	bl	800b5d4 <st_sssa8_convolve_1x1>
 8007e9c:	45b3      	cmp	fp, r6
 8007e9e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8007ea0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ea2:	d1d2      	bne.n	8007e4a <forward_conv2d_integer_SSSA+0x4fe>
 8007ea4:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 8007ea8:	e6c2      	b.n	8007c30 <forward_conv2d_integer_SSSA+0x2e4>
 8007eaa:	2201      	movs	r2, #1
 8007eac:	e6d0      	b.n	8007c50 <forward_conv2d_integer_SSSA+0x304>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	deff      	udf	#255	; 0xff
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	deff      	udf	#255	; 0xff
 8007eba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007ebc:	b913      	cbnz	r3, 8007ec4 <forward_conv2d_integer_SSSA+0x578>
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	deff      	udf	#255	; 0xff
 8007ec2:	e7fe      	b.n	8007ec2 <forward_conv2d_integer_SSSA+0x576>
 8007ec4:	68d3      	ldr	r3, [r2, #12]
 8007ec6:	deff      	udf	#255	; 0xff
 8007ec8:	00000000 	.word	0x00000000
 8007ecc:	08007949 	.word	0x08007949

08007ed0 <forward_conv2d_nl_pool_integer_SSSA>:
 8007ed0:	6982      	ldr	r2, [r0, #24]
 8007ed2:	8813      	ldrh	r3, [r2, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 8193 	beq.w	8008200 <forward_conv2d_nl_pool_integer_SSSA+0x330>
 8007eda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ede:	ed2d 8b02 	vpush	{d8}
 8007ee2:	6851      	ldr	r1, [r2, #4]
 8007ee4:	b0d5      	sub	sp, #340	; 0x154
 8007ee6:	4680      	mov	r8, r0
 8007ee8:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8007eec:	f1b9 0f00 	cmp.w	r9, #0
 8007ef0:	d001      	beq.n	8007ef6 <forward_conv2d_nl_pool_integer_SSSA+0x26>
 8007ef2:	f8d9 9000 	ldr.w	r9, [r9]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	f000 834e 	beq.w	8008598 <forward_conv2d_nl_pool_integer_SSSA+0x6c8>
 8007efc:	690a      	ldr	r2, [r1, #16]
 8007efe:	9216      	str	r2, [sp, #88]	; 0x58
 8007f00:	b10a      	cbz	r2, 8007f06 <forward_conv2d_nl_pool_integer_SSSA+0x36>
 8007f02:	6812      	ldr	r2, [r2, #0]
 8007f04:	9216      	str	r2, [sp, #88]	; 0x58
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	f000 8177 	beq.w	80081fa <forward_conv2d_nl_pool_integer_SSSA+0x32a>
 8007f0c:	69ca      	ldr	r2, [r1, #28]
 8007f0e:	2a00      	cmp	r2, #0
 8007f10:	f000 8310 	beq.w	8008534 <forward_conv2d_nl_pool_integer_SSSA+0x664>
 8007f14:	8b08      	ldrh	r0, [r1, #24]
 8007f16:	f8d2 b000 	ldr.w	fp, [r2]
 8007f1a:	2801      	cmp	r0, #1
 8007f1c:	f200 8172 	bhi.w	8008204 <forward_conv2d_nl_pool_integer_SSSA+0x334>
 8007f20:	2000      	movs	r0, #0
 8007f22:	901c      	str	r0, [sp, #112]	; 0x70
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	f000 833a 	beq.w	800859e <forward_conv2d_nl_pool_integer_SSSA+0x6ce>
 8007f2a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 8331 	beq.w	8008594 <forward_conv2d_nl_pool_integer_SSSA+0x6c4>
 8007f32:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 8007f36:	6818      	ldr	r0, [r3, #0]
 8007f38:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8007f3c:	9130      	str	r1, [sp, #192]	; 0xc0
 8007f3e:	9019      	str	r0, [sp, #100]	; 0x64
 8007f40:	2900      	cmp	r1, #0
 8007f42:	f000 82f2 	beq.w	800852a <forward_conv2d_nl_pool_integer_SSSA+0x65a>
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f4a:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007f4e:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	6845      	ldr	r5, [r0, #4]
 8007f56:	461e      	mov	r6, r3
 8007f58:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8007f5a:	9514      	str	r5, [sp, #80]	; 0x50
 8007f5c:	b2b6      	uxth	r6, r6
 8007f5e:	68e4      	ldr	r4, [r4, #12]
 8007f60:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 8007f64:	9624      	str	r6, [sp, #144]	; 0x90
 8007f66:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8007f6a:	f8d8 502c 	ldr.w	r5, [r8, #44]	; 0x2c
 8007f6e:	ee08 6a90 	vmov	s17, r6
 8007f72:	68e6      	ldr	r6, [r4, #12]
 8007f74:	68a4      	ldr	r4, [r4, #8]
 8007f76:	9321      	str	r3, [sp, #132]	; 0x84
 8007f78:	9435      	str	r4, [sp, #212]	; 0xd4
 8007f7a:	680b      	ldr	r3, [r1, #0]
 8007f7c:	f8db 700c 	ldr.w	r7, [fp, #12]
 8007f80:	f8d8 c054 	ldr.w	ip, [r8, #84]	; 0x54
 8007f84:	961d      	str	r6, [sp, #116]	; 0x74
 8007f86:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 8007f8a:	9039      	str	r0, [sp, #228]	; 0xe4
 8007f8c:	f8b8 0028 	ldrh.w	r0, [r8, #40]	; 0x28
 8007f90:	9033      	str	r0, [sp, #204]	; 0xcc
 8007f92:	b2a8      	uxth	r0, r5
 8007f94:	9034      	str	r0, [sp, #208]	; 0xd0
 8007f96:	b298      	uxth	r0, r3
 8007f98:	9015      	str	r0, [sp, #84]	; 0x54
 8007f9a:	8888      	ldrh	r0, [r1, #4]
 8007f9c:	6889      	ldr	r1, [r1, #8]
 8007f9e:	902c      	str	r0, [sp, #176]	; 0xb0
 8007fa0:	68b8      	ldr	r0, [r7, #8]
 8007fa2:	901f      	str	r0, [sp, #124]	; 0x7c
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	9027      	str	r0, [sp, #156]	; 0x9c
 8007fa8:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8007fac:	901a      	str	r0, [sp, #104]	; 0x68
 8007fae:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
 8007fb2:	9036      	str	r0, [sp, #216]	; 0xd8
 8007fb4:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 8007fb8:	9037      	str	r0, [sp, #220]	; 0xdc
 8007fba:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 8007fbe:	9018      	str	r0, [sp, #96]	; 0x60
 8007fc0:	f8dc 0000 	ldr.w	r0, [ip]
 8007fc4:	902d      	str	r0, [sp, #180]	; 0xb4
 8007fc6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8007fca:	9038      	str	r0, [sp, #224]	; 0xe0
 8007fcc:	2a00      	cmp	r2, #0
 8007fce:	f000 8286 	beq.w	80084de <forward_conv2d_nl_pool_integer_SSSA+0x60e>
 8007fd2:	6892      	ldr	r2, [r2, #8]
 8007fd4:	2a00      	cmp	r2, #0
 8007fd6:	f000 8282 	beq.w	80084de <forward_conv2d_nl_pool_integer_SSSA+0x60e>
 8007fda:	6990      	ldr	r0, [r2, #24]
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	bf08      	it	eq
 8007fe0:	4602      	moveq	r2, r0
 8007fe2:	9228      	str	r2, [sp, #160]	; 0xa0
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007fe8:	b2aa      	uxth	r2, r5
 8007fea:	f8da 6018 	ldr.w	r6, [sl, #24]
 8007fee:	fa13 f581 	uxtah	r5, r3, r1
 8007ff2:	4423      	add	r3, r4
 8007ff4:	9222      	str	r2, [sp, #136]	; 0x88
 8007ff6:	f240 4101 	movw	r1, #1025	; 0x401
 8007ffa:	4425      	add	r5, r4
 8007ffc:	9320      	str	r3, [sp, #128]	; 0x80
 8007ffe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008000:	f50d 7c82 	add.w	ip, sp, #260	; 0x104
 8008004:	6987      	ldr	r7, [r0, #24]
 8008006:	ac49      	add	r4, sp, #292	; 0x124
 8008008:	1aed      	subs	r5, r5, r3
 800800a:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
 800800e:	fbb5 f3f2 	udiv	r3, r5, r2
 8008012:	aa45      	add	r2, sp, #276	; 0x114
 8008014:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8008016:	9313      	str	r3, [sp, #76]	; 0x4c
 8008018:	2300      	movs	r3, #0
 800801a:	9252      	str	r2, [sp, #328]	; 0x148
 800801c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008020:	69ad      	ldr	r5, [r5, #24]
 8008022:	934d      	str	r3, [sp, #308]	; 0x134
 8008024:	9341      	str	r3, [sp, #260]	; 0x104
 8008026:	9345      	str	r3, [sp, #276]	; 0x114
 8008028:	9344      	str	r3, [sp, #272]	; 0x110
 800802a:	9348      	str	r3, [sp, #288]	; 0x120
 800802c:	9353      	str	r3, [sp, #332]	; 0x14c
 800802e:	952a      	str	r5, [sp, #168]	; 0xa8
 8008030:	e9cd 3342 	strd	r3, r3, [sp, #264]	; 0x108
 8008034:	e9cd 3346 	strd	r3, r3, [sp, #280]	; 0x118
 8008038:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800803c:	e9cd 214e 	strd	r2, r1, [sp, #312]	; 0x138
 8008040:	f240 4102 	movw	r1, #1026	; 0x402
 8008044:	931e      	str	r3, [sp, #120]	; 0x78
 8008046:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800804a:	9151      	str	r1, [sp, #324]	; 0x144
 800804c:	4601      	mov	r1, r0
 800804e:	a84d      	add	r0, sp, #308	; 0x134
 8008050:	932e      	str	r3, [sp, #184]	; 0xb8
 8008052:	f005 ffa5 	bl	800dfa0 <core_tensor_clone>
 8008056:	4639      	mov	r1, r7
 8008058:	4620      	mov	r0, r4
 800805a:	f005 ffd3 	bl	800e004 <core_array_clone>
 800805e:	9453      	str	r4, [sp, #332]	; 0x14c
 8008060:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008064:	f8d9 1000 	ldr.w	r1, [r9]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f9bd 40b4 	ldrsh.w	r4, [sp, #180]	; 0xb4
 800806e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008070:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008072:	f8da 2000 	ldr.w	r2, [sl]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	9329      	str	r3, [sp, #164]	; 0xa4
 800807c:	f8db 3000 	ldr.w	r3, [fp]
 8008080:	2900      	cmp	r1, #0
 8008082:	f000 81b3 	beq.w	80083ec <forward_conv2d_nl_pool_integer_SSSA+0x51c>
 8008086:	6848      	ldr	r0, [r1, #4]
 8008088:	2800      	cmp	r0, #0
 800808a:	f000 81af 	beq.w	80083ec <forward_conv2d_nl_pool_integer_SSSA+0x51c>
 800808e:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8008092:	f1bc 0f00 	cmp.w	ip, #0
 8008096:	f000 81a9 	beq.w	80083ec <forward_conv2d_nl_pool_integer_SSSA+0x51c>
 800809a:	6800      	ldr	r0, [r0, #0]
 800809c:	edd0 7a00 	vldr	s15, [r0]
 80080a0:	2a00      	cmp	r2, #0
 80080a2:	f000 81a0 	beq.w	80083e6 <forward_conv2d_nl_pool_integer_SSSA+0x516>
 80080a6:	6850      	ldr	r0, [r2, #4]
 80080a8:	2800      	cmp	r0, #0
 80080aa:	f000 819c 	beq.w	80083e6 <forward_conv2d_nl_pool_integer_SSSA+0x516>
 80080ae:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 80080b2:	f1bc 0f00 	cmp.w	ip, #0
 80080b6:	f000 8196 	beq.w	80083e6 <forward_conv2d_nl_pool_integer_SSSA+0x516>
 80080ba:	6800      	ldr	r0, [r0, #0]
 80080bc:	ed90 0a00 	vldr	s0, [r0]
 80080c0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80080c2:	2801      	cmp	r0, #1
 80080c4:	f040 818c 	bne.w	80083e0 <forward_conv2d_nl_pool_integer_SSSA+0x510>
 80080c8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80080ca:	2801      	cmp	r0, #1
 80080cc:	f040 8188 	bne.w	80083e0 <forward_conv2d_nl_pool_integer_SSSA+0x510>
 80080d0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80080d2:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 80080d4:	4328      	orrs	r0, r5
 80080d6:	f040 8183 	bne.w	80083e0 <forward_conv2d_nl_pool_integer_SSSA+0x510>
 80080da:	e9dd 0533 	ldrd	r0, r5, [sp, #204]	; 0xcc
 80080de:	2801      	cmp	r0, #1
 80080e0:	bf08      	it	eq
 80080e2:	2d01      	cmpeq	r5, #1
 80080e4:	bf0c      	ite	eq
 80080e6:	2001      	moveq	r0, #1
 80080e8:	2000      	movne	r0, #0
 80080ea:	9023      	str	r0, [sp, #140]	; 0x8c
 80080ec:	981c      	ldr	r0, [sp, #112]	; 0x70
 80080ee:	f8d9 c018 	ldr.w	ip, [r9, #24]
 80080f2:	f8db e018 	ldr.w	lr, [fp, #24]
 80080f6:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80080fa:	6980      	ldr	r0, [r0, #24]
 80080fc:	951c      	str	r5, [sp, #112]	; 0x70
 80080fe:	6880      	ldr	r0, [r0, #8]
 8008100:	f8de 5008 	ldr.w	r5, [lr, #8]
 8008104:	902f      	str	r0, [sp, #188]	; 0xbc
 8008106:	952b      	str	r5, [sp, #172]	; 0xac
 8008108:	2900      	cmp	r1, #0
 800810a:	f000 81e2 	beq.w	80084d2 <forward_conv2d_nl_pool_integer_SSSA+0x602>
 800810e:	6848      	ldr	r0, [r1, #4]
 8008110:	2800      	cmp	r0, #0
 8008112:	f000 8208 	beq.w	8008526 <forward_conv2d_nl_pool_integer_SSSA+0x656>
 8008116:	8849      	ldrh	r1, [r1, #2]
 8008118:	2900      	cmp	r1, #0
 800811a:	f000 81da 	beq.w	80084d2 <forward_conv2d_nl_pool_integer_SSSA+0x602>
 800811e:	6841      	ldr	r1, [r0, #4]
 8008120:	f991 1000 	ldrsb.w	r1, [r1]
 8008124:	9131      	str	r1, [sp, #196]	; 0xc4
 8008126:	2a00      	cmp	r2, #0
 8008128:	f000 81d7 	beq.w	80084da <forward_conv2d_nl_pool_integer_SSSA+0x60a>
 800812c:	6851      	ldr	r1, [r2, #4]
 800812e:	2900      	cmp	r1, #0
 8008130:	f000 81f7 	beq.w	8008522 <forward_conv2d_nl_pool_integer_SSSA+0x652>
 8008134:	8852      	ldrh	r2, [r2, #2]
 8008136:	2a00      	cmp	r2, #0
 8008138:	f000 81cf 	beq.w	80084da <forward_conv2d_nl_pool_integer_SSSA+0x60a>
 800813c:	684a      	ldr	r2, [r1, #4]
 800813e:	f992 2000 	ldrsb.w	r2, [r2]
 8008142:	9232      	str	r2, [sp, #200]	; 0xc8
 8008144:	b113      	cbz	r3, 800814c <forward_conv2d_nl_pool_integer_SSSA+0x27c>
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	b103      	cbz	r3, 800814c <forward_conv2d_nl_pool_integer_SSSA+0x27c>
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800814e:	2a01      	cmp	r2, #1
 8008150:	f000 81e0 	beq.w	8008514 <forward_conv2d_nl_pool_integer_SSSA+0x644>
 8008154:	4611      	mov	r1, r2
 8008156:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800815a:	4291      	cmp	r1, r2
 800815c:	bf0c      	ite	eq
 800815e:	2213      	moveq	r2, #19
 8008160:	2200      	movne	r2, #0
 8008162:	9226      	str	r2, [sp, #152]	; 0x98
 8008164:	f04f 0900 	mov.w	r9, #0
 8008168:	f10d 00f6 	add.w	r0, sp, #246	; 0xf6
 800816c:	f8ad 90f6 	strh.w	r9, [sp, #246]	; 0xf6
 8008170:	f8cd 90f8 	str.w	r9, [sp, #248]	; 0xf8
 8008174:	ed93 7a00 	vldr	s14, [r3]
 8008178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800817c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008180:	f001 f9f2 	bl	8009568 <align_factor>
 8008184:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008186:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	903e      	str	r0, [sp, #248]	; 0xf8
 800818c:	923f      	str	r2, [sp, #252]	; 0xfc
 800818e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008192:	f005 fdf3 	bl	800dd7c <ai_array_get_byte_size>
 8008196:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008198:	9040      	str	r0, [sp, #256]	; 0x100
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 80e8 	beq.w	8008370 <forward_conv2d_nl_pool_integer_SSSA+0x4a0>
 80081a0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80081a2:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 80081a6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80081aa:	fb01 f202 	mul.w	r2, r1, r2
 80081ae:	9421      	str	r4, [sp, #132]	; 0x84
 80081b0:	9225      	str	r2, [sp, #148]	; 0x94
 80081b2:	b28a      	uxth	r2, r1
 80081b4:	9939      	ldr	r1, [sp, #228]	; 0xe4
 80081b6:	9223      	str	r2, [sp, #140]	; 0x8c
 80081b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80081ba:	fb01 f202 	mul.w	r2, r1, r2
 80081be:	fb03 f202 	mul.w	r2, r3, r2
 80081c2:	fb01 f303 	mul.w	r3, r1, r3
 80081c6:	9239      	str	r2, [sp, #228]	; 0xe4
 80081c8:	933a      	str	r3, [sp, #232]	; 0xe8
 80081ca:	b28b      	uxth	r3, r1
 80081cc:	ee08 3a10 	vmov	s16, r3
 80081d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80081d2:	e9cd 3919 	strd	r3, r9, [sp, #100]	; 0x64
 80081d6:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 80081da:	931b      	str	r3, [sp, #108]	; 0x6c
 80081dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081de:	3301      	adds	r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f340 80d1 	ble.w	8008388 <forward_conv2d_nl_pool_integer_SSSA+0x4b8>
 80081e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081e8:	2b13      	cmp	r3, #19
 80081ea:	f000 813d 	beq.w	8008468 <forward_conv2d_nl_pool_integer_SSSA+0x598>
 80081ee:	2b14      	cmp	r3, #20
 80081f0:	f000 8103 	beq.w	80083fa <forward_conv2d_nl_pool_integer_SSSA+0x52a>
 80081f4:	2b12      	cmp	r3, #18
 80081f6:	d008      	beq.n	800820a <forward_conv2d_nl_pool_integer_SSSA+0x33a>
 80081f8:	e7fe      	b.n	80081f8 <forward_conv2d_nl_pool_integer_SSSA+0x328>
 80081fa:	2300      	movs	r3, #0
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	deff      	udf	#255	; 0xff
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	deff      	udf	#255	; 0xff
 8008204:	6850      	ldr	r0, [r2, #4]
 8008206:	901c      	str	r0, [sp, #112]	; 0x70
 8008208:	e68c      	b.n	8007f24 <forward_conv2d_nl_pool_integer_SSSA+0x54>
 800820a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800820c:	429c      	cmp	r4, r3
 800820e:	ab3f      	add	r3, sp, #252	; 0xfc
 8008210:	d103      	bne.n	800821a <forward_conv2d_nl_pool_integer_SSSA+0x34a>
 8008212:	f1b9 0f00 	cmp.w	r9, #0
 8008216:	f000 8190 	beq.w	800853a <forward_conv2d_nl_pool_integer_SSSA+0x66a>
 800821a:	9310      	str	r3, [sp, #64]	; 0x40
 800821c:	2301      	movs	r3, #1
 800821e:	aa3e      	add	r2, sp, #248	; 0xf8
 8008220:	ee18 1a10 	vmov	r1, s16
 8008224:	930f      	str	r3, [sp, #60]	; 0x3c
 8008226:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008228:	981c      	ldr	r0, [sp, #112]	; 0x70
 800822a:	930e      	str	r3, [sp, #56]	; 0x38
 800822c:	68b3      	ldr	r3, [r6, #8]
 800822e:	9209      	str	r2, [sp, #36]	; 0x24
 8008230:	930d      	str	r3, [sp, #52]	; 0x34
 8008232:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8008234:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 8008238:	930c      	str	r3, [sp, #48]	; 0x30
 800823a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800823c:	930b      	str	r3, [sp, #44]	; 0x2c
 800823e:	f10d 03f6 	add.w	r3, sp, #246	; 0xf6
 8008242:	930a      	str	r3, [sp, #40]	; 0x28
 8008244:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8008246:	9308      	str	r3, [sp, #32]
 8008248:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800824a:	9307      	str	r3, [sp, #28]
 800824c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800824e:	9306      	str	r3, [sp, #24]
 8008250:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008252:	9305      	str	r3, [sp, #20]
 8008254:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008256:	9304      	str	r3, [sp, #16]
 8008258:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8008264:	9303      	str	r3, [sp, #12]
 8008266:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 800826a:	9302      	str	r3, [sp, #8]
 800826c:	ee18 3a90 	vmov	r3, s17
 8008270:	f003 f9b0 	bl	800b5d4 <st_sssa8_convolve_1x1>
 8008274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008276:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008278:	4293      	cmp	r3, r2
 800827a:	f000 80ba 	beq.w	80083f2 <forward_conv2d_nl_pool_integer_SSSA+0x522>
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008282:	429a      	cmp	r2, r3
 8008284:	9320      	str	r3, [sp, #128]	; 0x80
 8008286:	bf28      	it	cs
 8008288:	461a      	movcs	r2, r3
 800828a:	9219      	str	r2, [sp, #100]	; 0x64
 800828c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800828e:	2b00      	cmp	r3, #0
 8008290:	f040 8097 	bne.w	80083c2 <forward_conv2d_nl_pool_integer_SSSA+0x4f2>
 8008294:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008296:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8008298:	4413      	add	r3, r2
 800829a:	931c      	str	r3, [sp, #112]	; 0x70
 800829c:	3401      	adds	r4, #1
 800829e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80082a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80082a2:	4651      	mov	r1, sl
 80082a4:	b224      	sxth	r4, r4
 80082a6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80082a8:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 80082aa:	47a8      	blx	r5
 80082ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082ae:	429c      	cmp	r4, r3
 80082b0:	db34      	blt.n	800831c <forward_conv2d_nl_pool_integer_SSSA+0x44c>
 80082b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80082b4:	2201      	movs	r2, #1
 80082b6:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80082ba:	a84d      	add	r0, sp, #308	; 0x134
 80082bc:	9308      	str	r3, [sp, #32]
 80082be:	4491      	add	r9, r2
 80082c0:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80082c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80082c6:	1ae4      	subs	r4, r4, r3
 80082c8:	9305      	str	r3, [sp, #20]
 80082ca:	fa1f f38b 	uxth.w	r3, fp
 80082ce:	9207      	str	r2, [sp, #28]
 80082d0:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 80082d4:	b224      	sxth	r4, r4
 80082d6:	9303      	str	r3, [sp, #12]
 80082d8:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	; 0xd4
 80082dc:	9201      	str	r2, [sp, #4]
 80082de:	1a52      	subs	r2, r2, r1
 80082e0:	9306      	str	r3, [sp, #24]
 80082e2:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	; 0xdc
 80082e6:	b292      	uxth	r2, r2
 80082e8:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
 80082f0:	9302      	str	r3, [sp, #8]
 80082f2:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	; 0xd8
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	e9dd 1323 	ldrd	r1, r3, [sp, #140]	; 0x8c
 80082fc:	47a8      	blx	r5
 80082fe:	465a      	mov	r2, fp
 8008300:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 8008304:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800830c:	b21a      	sxth	r2, r3
 800830e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	9221      	str	r2, [sp, #132]	; 0x84
 8008314:	68da      	ldr	r2, [r3, #12]
 8008316:	688b      	ldr	r3, [r1, #8]
 8008318:	4413      	add	r3, r2
 800831a:	608b      	str	r3, [r1, #8]
 800831c:	f8da 3014 	ldr.w	r3, [sl, #20]
 8008320:	68b2      	ldr	r2, [r6, #8]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	eb02 0b03 	add.w	fp, r2, r3
 8008328:	f8c6 b008 	str.w	fp, [r6, #8]
 800832c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8008330:	b13b      	cbz	r3, 8008342 <forward_conv2d_nl_pool_integer_SSSA+0x472>
 8008332:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	68da      	ldr	r2, [r3, #12]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	4413      	add	r3, r2
 800833c:	60bb      	str	r3, [r7, #8]
 800833e:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8008342:	68f3      	ldr	r3, [r6, #12]
 8008344:	4650      	mov	r0, sl
 8008346:	9314      	str	r3, [sp, #80]	; 0x50
 8008348:	f005 fc96 	bl	800dc78 <get_tensor_byte_size>
 800834c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800834e:	4418      	add	r0, r3
 8008350:	4583      	cmp	fp, r0
 8008352:	d306      	bcc.n	8008362 <forward_conv2d_nl_pool_integer_SSSA+0x492>
 8008354:	68f3      	ldr	r3, [r6, #12]
 8008356:	60b3      	str	r3, [r6, #8]
 8008358:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800835c:	b10b      	cbz	r3, 8008362 <forward_conv2d_nl_pool_integer_SSSA+0x492>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	60bb      	str	r3, [r7, #8]
 8008362:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008364:	3b01      	subs	r3, #1
 8008366:	9313      	str	r3, [sp, #76]	; 0x4c
 8008368:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800836a:	4599      	cmp	r9, r3
 800836c:	f4ff af36 	bcc.w	80081dc <forward_conv2d_nl_pool_integer_SSSA+0x30c>
 8008370:	68f3      	ldr	r3, [r6, #12]
 8008372:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8008374:	60b3      	str	r3, [r6, #8]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	60bb      	str	r3, [r7, #8]
 800837a:	68d3      	ldr	r3, [r2, #12]
 800837c:	6093      	str	r3, [r2, #8]
 800837e:	b055      	add	sp, #340	; 0x154
 8008380:	ecbd 8b02 	vpop	{d8}
 8008384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008388:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800838a:	2b00      	cmp	r3, #0
 800838c:	da8e      	bge.n	80082ac <forward_conv2d_nl_pool_integer_SSSA+0x3dc>
 800838e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008390:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008394:	fb03 1314 	mls	r3, r3, r4, r1
 8008398:	429a      	cmp	r2, r3
 800839a:	d901      	bls.n	80083a0 <forward_conv2d_nl_pool_integer_SSSA+0x4d0>
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	4403      	add	r3, r0
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d203      	bcs.n	80083ac <forward_conv2d_nl_pool_integer_SSSA+0x4dc>
 80083a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80083a6:	42a0      	cmp	r0, r4
 80083a8:	f040 80a2 	bne.w	80084f0 <forward_conv2d_nl_pool_integer_SSSA+0x620>
 80083ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80083ae:	b2a4      	uxth	r4, r4
 80083b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80083b2:	4413      	add	r3, r2
 80083b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80083b6:	1b1b      	subs	r3, r3, r4
 80083b8:	4414      	add	r4, r2
 80083ba:	b21b      	sxth	r3, r3
 80083bc:	b224      	sxth	r4, r4
 80083be:	931a      	str	r3, [sp, #104]	; 0x68
 80083c0:	e774      	b.n	80082ac <forward_conv2d_nl_pool_integer_SSSA+0x3dc>
 80083c2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80083c4:	461a      	mov	r2, r3
 80083c6:	1a5b      	subs	r3, r3, r1
 80083c8:	d505      	bpl.n	80083d6 <forward_conv2d_nl_pool_integer_SSSA+0x506>
 80083ca:	1a8a      	subs	r2, r1, r2
 80083cc:	983a      	ldr	r0, [sp, #232]	; 0xe8
 80083ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80083d0:	fb00 1202 	mla	r2, r0, r2, r1
 80083d4:	921c      	str	r2, [sp, #112]	; 0x70
 80083d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80083da:	b29b      	uxth	r3, r3
 80083dc:	9315      	str	r3, [sp, #84]	; 0x54
 80083de:	e75d      	b.n	800829c <forward_conv2d_nl_pool_integer_SSSA+0x3cc>
 80083e0:	2000      	movs	r0, #0
 80083e2:	9023      	str	r0, [sp, #140]	; 0x8c
 80083e4:	e682      	b.n	80080ec <forward_conv2d_nl_pool_integer_SSSA+0x21c>
 80083e6:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80085a4 <forward_conv2d_nl_pool_integer_SSSA+0x6d4>
 80083ea:	e669      	b.n	80080c0 <forward_conv2d_nl_pool_integer_SSSA+0x1f0>
 80083ec:	eddf 7a6d 	vldr	s15, [pc, #436]	; 80085a4 <forward_conv2d_nl_pool_integer_SSSA+0x6d4>
 80083f0:	e656      	b.n	80080a0 <forward_conv2d_nl_pool_integer_SSSA+0x1d0>
 80083f2:	2300      	movs	r3, #0
 80083f4:	9319      	str	r3, [sp, #100]	; 0x64
 80083f6:	9320      	str	r3, [sp, #128]	; 0x80
 80083f8:	e748      	b.n	800828c <forward_conv2d_nl_pool_integer_SSSA+0x3bc>
 80083fa:	f1b9 0f00 	cmp.w	r9, #0
 80083fe:	d103      	bne.n	8008408 <forward_conv2d_nl_pool_integer_SSSA+0x538>
 8008400:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008402:	429c      	cmp	r4, r3
 8008404:	f000 80b1 	beq.w	800856a <forward_conv2d_nl_pool_integer_SSSA+0x69a>
 8008408:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 800840c:	f8bd b07c 	ldrh.w	fp, [sp, #124]	; 0x7c
 8008410:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008412:	a93e      	add	r1, sp, #248	; 0xf8
 8008414:	981c      	ldr	r0, [sp, #112]	; 0x70
 8008416:	9210      	str	r2, [sp, #64]	; 0x40
 8008418:	2201      	movs	r2, #1
 800841a:	920f      	str	r2, [sp, #60]	; 0x3c
 800841c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800841e:	920e      	str	r2, [sp, #56]	; 0x38
 8008420:	68b2      	ldr	r2, [r6, #8]
 8008422:	9302      	str	r3, [sp, #8]
 8008424:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8008426:	9109      	str	r1, [sp, #36]	; 0x24
 8008428:	ee18 1a10 	vmov	r1, s16
 800842c:	930c      	str	r3, [sp, #48]	; 0x30
 800842e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8008430:	920d      	str	r2, [sp, #52]	; 0x34
 8008432:	930b      	str	r3, [sp, #44]	; 0x2c
 8008434:	f10d 03f6 	add.w	r3, sp, #246	; 0xf6
 8008438:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 800843c:	930a      	str	r3, [sp, #40]	; 0x28
 800843e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8008440:	f8cd b00c 	str.w	fp, [sp, #12]
 8008444:	9308      	str	r3, [sp, #32]
 8008446:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8008448:	9307      	str	r3, [sp, #28]
 800844a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800844c:	9306      	str	r3, [sp, #24]
 800844e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008450:	9305      	str	r3, [sp, #20]
 8008452:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008454:	9304      	str	r3, [sp, #16]
 8008456:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008458:	9301      	str	r3, [sp, #4]
 800845a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	ee18 3a90 	vmov	r3, s17
 8008462:	f001 ff27 	bl	800a2b4 <st_sssa8_convolve>
 8008466:	e705      	b.n	8008274 <forward_conv2d_nl_pool_integer_SSSA+0x3a4>
 8008468:	f1b9 0f00 	cmp.w	r9, #0
 800846c:	d102      	bne.n	8008474 <forward_conv2d_nl_pool_integer_SSSA+0x5a4>
 800846e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008470:	429c      	cmp	r4, r3
 8008472:	d06b      	beq.n	800854c <forward_conv2d_nl_pool_integer_SSSA+0x67c>
 8008474:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
 8008478:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 800847c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800847e:	a83e      	add	r0, sp, #248	; 0xf8
 8008480:	9110      	str	r1, [sp, #64]	; 0x40
 8008482:	2101      	movs	r1, #1
 8008484:	910f      	str	r1, [sp, #60]	; 0x3c
 8008486:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8008488:	910e      	str	r1, [sp, #56]	; 0x38
 800848a:	68b1      	ldr	r1, [r6, #8]
 800848c:	9303      	str	r3, [sp, #12]
 800848e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8008490:	9009      	str	r0, [sp, #36]	; 0x24
 8008492:	930c      	str	r3, [sp, #48]	; 0x30
 8008494:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8008496:	9202      	str	r2, [sp, #8]
 8008498:	930b      	str	r3, [sp, #44]	; 0x2c
 800849a:	f10d 03f6 	add.w	r3, sp, #246	; 0xf6
 800849e:	910d      	str	r1, [sp, #52]	; 0x34
 80084a0:	ee18 1a10 	vmov	r1, s16
 80084a4:	930a      	str	r3, [sp, #40]	; 0x28
 80084a6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80084a8:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 80084ac:	9308      	str	r3, [sp, #32]
 80084ae:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80084b0:	981c      	ldr	r0, [sp, #112]	; 0x70
 80084b2:	9307      	str	r3, [sp, #28]
 80084b4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80084b6:	9306      	str	r3, [sp, #24]
 80084b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084ba:	9305      	str	r3, [sp, #20]
 80084bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80084be:	9304      	str	r3, [sp, #16]
 80084c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80084c2:	9301      	str	r3, [sp, #4]
 80084c4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	ee18 3a90 	vmov	r3, s17
 80084cc:	f001 f95a 	bl	8009784 <st_sssa8_convolve_dw>
 80084d0:	e6d0      	b.n	8008274 <forward_conv2d_nl_pool_integer_SSSA+0x3a4>
 80084d2:	9131      	str	r1, [sp, #196]	; 0xc4
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	f47f ae29 	bne.w	800812c <forward_conv2d_nl_pool_integer_SSSA+0x25c>
 80084da:	9232      	str	r2, [sp, #200]	; 0xc8
 80084dc:	e632      	b.n	8008144 <forward_conv2d_nl_pool_integer_SSSA+0x274>
 80084de:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80084e2:	9228      	str	r2, [sp, #160]	; 0xa0
 80084e4:	2a00      	cmp	r2, #0
 80084e6:	f43f ad7d 	beq.w	8007fe4 <forward_conv2d_nl_pool_integer_SSSA+0x114>
 80084ea:	6892      	ldr	r2, [r2, #8]
 80084ec:	9228      	str	r2, [sp, #160]	; 0xa0
 80084ee:	e579      	b.n	8007fe4 <forward_conv2d_nl_pool_integer_SSSA+0x114>
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	4402      	add	r2, r0
 80084f4:	4293      	cmp	r3, r2
 80084f6:	f4bf af59 	bcs.w	80083ac <forward_conv2d_nl_pool_integer_SSSA+0x4dc>
 80084fa:	3901      	subs	r1, #1
 80084fc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80084fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008502:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	4402      	add	r2, r0
 800850c:	4293      	cmp	r3, r2
 800850e:	d3f6      	bcc.n	80084fe <forward_conv2d_nl_pool_integer_SSSA+0x62e>
 8008510:	9513      	str	r5, [sp, #76]	; 0x4c
 8008512:	e74b      	b.n	80083ac <forward_conv2d_nl_pool_integer_SSSA+0x4dc>
 8008514:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008516:	2a00      	cmp	r2, #0
 8008518:	bf0c      	ite	eq
 800851a:	2214      	moveq	r2, #20
 800851c:	2212      	movne	r2, #18
 800851e:	9226      	str	r2, [sp, #152]	; 0x98
 8008520:	e620      	b.n	8008164 <forward_conv2d_nl_pool_integer_SSSA+0x294>
 8008522:	9132      	str	r1, [sp, #200]	; 0xc8
 8008524:	e60e      	b.n	8008144 <forward_conv2d_nl_pool_integer_SSSA+0x274>
 8008526:	9031      	str	r0, [sp, #196]	; 0xc4
 8008528:	e5fd      	b.n	8008126 <forward_conv2d_nl_pool_integer_SSSA+0x256>
 800852a:	4b1f      	ldr	r3, [pc, #124]	; (80085a8 <forward_conv2d_nl_pool_integer_SSSA+0x6d8>)
 800852c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008530:	9330      	str	r3, [sp, #192]	; 0xc0
 8008532:	e50a      	b.n	8007f4a <forward_conv2d_nl_pool_integer_SSSA+0x7a>
 8008534:	4693      	mov	fp, r2
 8008536:	921c      	str	r2, [sp, #112]	; 0x70
 8008538:	e4f4      	b.n	8007f24 <forward_conv2d_nl_pool_integer_SSSA+0x54>
 800853a:	ee18 2a90 	vmov	r2, s17
 800853e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8008540:	982b      	ldr	r0, [sp, #172]	; 0xac
 8008542:	9314      	str	r3, [sp, #80]	; 0x50
 8008544:	f003 f838 	bl	800b5b8 <st_sssa8_convolve_1x1_WeightsPrefetch>
 8008548:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800854a:	e666      	b.n	800821a <forward_conv2d_nl_pool_integer_SSSA+0x34a>
 800854c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800854e:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8008558:	9924      	ldr	r1, [sp, #144]	; 0x90
 800855a:	982b      	ldr	r0, [sp, #172]	; 0xac
 800855c:	923b      	str	r2, [sp, #236]	; 0xec
 800855e:	9314      	str	r3, [sp, #80]	; 0x50
 8008560:	f001 f854 	bl	800960c <st_sssa8_conv_dw_Wadapt>
 8008564:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8008566:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008568:	e788      	b.n	800847c <forward_conv2d_nl_pool_integer_SSSA+0x5ac>
 800856a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800856c:	ee18 0a90 	vmov	r0, s17
 8008570:	f8bd b07c 	ldrh.w	fp, [sp, #124]	; 0x7c
 8008574:	9303      	str	r3, [sp, #12]
 8008576:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8008578:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800857a:	9302      	str	r3, [sp, #8]
 800857c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800857e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 8008586:	f8cd b000 	str.w	fp, [sp]
 800858a:	9314      	str	r3, [sp, #80]	; 0x50
 800858c:	f001 fe06 	bl	800a19c <st_sssa8_convolve_rank1upd>
 8008590:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008592:	e73d      	b.n	8008410 <forward_conv2d_nl_pool_integer_SSSA+0x540>
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	deff      	udf	#255	; 0xff
 8008598:	2300      	movs	r3, #0
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	deff      	udf	#255	; 0xff
 800859e:	2300      	movs	r3, #0
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	deff      	udf	#255	; 0xff
 80085a4:	00000000 	.word	0x00000000
 80085a8:	08007949 	.word	0x08007949

080085ac <forward_eltwise_integer_INT8>:
 80085ac:	6982      	ldr	r2, [r0, #24]
 80085ae:	8813      	ldrh	r3, [r2, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d04e      	beq.n	8008652 <forward_eltwise_integer_INT8+0xa6>
 80085b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b8:	ed2d 8b02 	vpush	{d8}
 80085bc:	6852      	ldr	r2, [r2, #4]
 80085be:	b0ab      	sub	sp, #172	; 0xac
 80085c0:	6854      	ldr	r4, [r2, #4]
 80085c2:	2c00      	cmp	r4, #0
 80085c4:	f000 81d4 	beq.w	8008970 <forward_eltwise_integer_INT8+0x3c4>
 80085c8:	e9d4 5400 	ldrd	r5, r4, [r4]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	f000 81d3 	beq.w	8008978 <forward_eltwise_integer_INT8+0x3cc>
 80085d2:	6916      	ldr	r6, [r2, #16]
 80085d4:	b106      	cbz	r6, 80085d8 <forward_eltwise_integer_INT8+0x2c>
 80085d6:	6836      	ldr	r6, [r6, #0]
 80085d8:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80085dc:	f105 0108 	add.w	r1, r5, #8
 80085e0:	f104 0b08 	add.w	fp, r4, #8
 80085e4:	e9d0 7307 	ldrd	r7, r3, [r0, #28]
 80085e8:	68a0      	ldr	r0, [r4, #8]
 80085ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80085ec:	ea8c 0300 	eor.w	r3, ip, r0
 80085f0:	f3cc 2c17 	ubfx	ip, ip, #8, #24
 80085f4:	f033 03ff 	bics.w	r3, r3, #255	; 0xff
 80085f8:	d10e      	bne.n	8008618 <forward_eltwise_integer_INT8+0x6c>
 80085fa:	4663      	mov	r3, ip
 80085fc:	4686      	mov	lr, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 81b2 	beq.w	8008968 <forward_eltwise_integer_INT8+0x3bc>
 8008604:	3b01      	subs	r3, #1
 8008606:	68e2      	ldr	r2, [r4, #12]
 8008608:	68e8      	ldr	r0, [r5, #12]
 800860a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800860e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8008612:	4290      	cmp	r0, r2
 8008614:	d0f3      	beq.n	80085fe <forward_eltwise_integer_INT8+0x52>
 8008616:	4670      	mov	r0, lr
 8008618:	2300      	movs	r3, #0
 800861a:	9308      	str	r3, [sp, #32]
 800861c:	f10c 33ff 	add.w	r3, ip, #4294967295
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	e005      	b.n	8008630 <forward_eltwise_integer_INT8+0x84>
 8008624:	68ea      	ldr	r2, [r5, #12]
 8008626:	58d2      	ldr	r2, [r2, r3]
 8008628:	3b04      	subs	r3, #4
 800862a:	2a01      	cmp	r2, #1
 800862c:	f040 8199 	bne.w	8008962 <forward_eltwise_integer_INT8+0x3b6>
 8008630:	1d1a      	adds	r2, r3, #4
 8008632:	d1f7      	bne.n	8008624 <forward_eltwise_integer_INT8+0x78>
 8008634:	f04f 0a01 	mov.w	sl, #1
 8008638:	f3c0 2017 	ubfx	r0, r0, #8, #24
 800863c:	b158      	cbz	r0, 8008656 <forward_eltwise_integer_INT8+0xaa>
 800863e:	3801      	subs	r0, #1
 8008640:	68e3      	ldr	r3, [r4, #12]
 8008642:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d0f8      	beq.n	800863c <forward_eltwise_integer_INT8+0x90>
 800864a:	2300      	movs	r3, #0
 800864c:	46d1      	mov	r9, sl
 800864e:	9309      	str	r3, [sp, #36]	; 0x24
 8008650:	e005      	b.n	800865e <forward_eltwise_integer_INT8+0xb2>
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	deff      	udf	#255	; 0xff
 8008656:	2301      	movs	r3, #1
 8008658:	f08a 0901 	eor.w	r9, sl, #1
 800865c:	9309      	str	r3, [sp, #36]	; 0x24
 800865e:	6972      	ldr	r2, [r6, #20]
 8008660:	2000      	movs	r0, #0
 8008662:	696b      	ldr	r3, [r5, #20]
 8008664:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8008668:	aa1b      	add	r2, sp, #108	; 0x6c
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	9216      	str	r2, [sp, #88]	; 0x58
 800866e:	f240 5201 	movw	r2, #1281	; 0x501
 8008672:	901f      	str	r0, [sp, #124]	; 0x7c
 8008674:	9215      	str	r2, [sp, #84]	; 0x54
 8008676:	465a      	mov	r2, fp
 8008678:	930d      	str	r3, [sp, #52]	; 0x34
 800867a:	910c      	str	r1, [sp, #48]	; 0x30
 800867c:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
 8008680:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
 8008684:	a815      	add	r0, sp, #84	; 0x54
 8008686:	f005 fbb1 	bl	800ddec <core_get_broadcasted_shape>
 800868a:	69ab      	ldr	r3, [r5, #24]
 800868c:	f8d5 c000 	ldr.w	ip, [r5]
 8008690:	930a      	str	r3, [sp, #40]	; 0x28
 8008692:	6832      	ldr	r2, [r6, #0]
 8008694:	6820      	ldr	r0, [r4, #0]
 8008696:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
 800869a:	f1bc 0f00 	cmp.w	ip, #0
 800869e:	d018      	beq.n	80086d2 <forward_eltwise_integer_INT8+0x126>
 80086a0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80086a4:	b1ad      	cbz	r5, 80086d2 <forward_eltwise_integer_INT8+0x126>
 80086a6:	f8bc e002 	ldrh.w	lr, [ip, #2]
 80086aa:	f1be 0f00 	cmp.w	lr, #0
 80086ae:	d010      	beq.n	80086d2 <forward_eltwise_integer_INT8+0x126>
 80086b0:	682d      	ldr	r5, [r5, #0]
 80086b2:	682d      	ldr	r5, [r5, #0]
 80086b4:	950f      	str	r5, [sp, #60]	; 0x3c
 80086b6:	b980      	cbnz	r0, 80086da <forward_eltwise_integer_INT8+0x12e>
 80086b8:	2500      	movs	r5, #0
 80086ba:	9510      	str	r5, [sp, #64]	; 0x40
 80086bc:	b1d2      	cbz	r2, 80086f4 <forward_eltwise_integer_INT8+0x148>
 80086be:	6855      	ldr	r5, [r2, #4]
 80086c0:	b1c5      	cbz	r5, 80086f4 <forward_eltwise_integer_INT8+0x148>
 80086c2:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 80086c6:	f1be 0f00 	cmp.w	lr, #0
 80086ca:	d013      	beq.n	80086f4 <forward_eltwise_integer_INT8+0x148>
 80086cc:	682d      	ldr	r5, [r5, #0]
 80086ce:	682d      	ldr	r5, [r5, #0]
 80086d0:	e011      	b.n	80086f6 <forward_eltwise_integer_INT8+0x14a>
 80086d2:	2500      	movs	r5, #0
 80086d4:	950f      	str	r5, [sp, #60]	; 0x3c
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d0ee      	beq.n	80086b8 <forward_eltwise_integer_INT8+0x10c>
 80086da:	6845      	ldr	r5, [r0, #4]
 80086dc:	2d00      	cmp	r5, #0
 80086de:	d0eb      	beq.n	80086b8 <forward_eltwise_integer_INT8+0x10c>
 80086e0:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 80086e4:	f1be 0f00 	cmp.w	lr, #0
 80086e8:	d0e6      	beq.n	80086b8 <forward_eltwise_integer_INT8+0x10c>
 80086ea:	682d      	ldr	r5, [r5, #0]
 80086ec:	682d      	ldr	r5, [r5, #0]
 80086ee:	9510      	str	r5, [sp, #64]	; 0x40
 80086f0:	2a00      	cmp	r2, #0
 80086f2:	d1e4      	bne.n	80086be <forward_eltwise_integer_INT8+0x112>
 80086f4:	2500      	movs	r5, #0
 80086f6:	69b6      	ldr	r6, [r6, #24]
 80086f8:	9511      	str	r5, [sp, #68]	; 0x44
 80086fa:	69a5      	ldr	r5, [r4, #24]
 80086fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80086fe:	68ad      	ldr	r5, [r5, #8]
 8008700:	68a4      	ldr	r4, [r4, #8]
 8008702:	68b6      	ldr	r6, [r6, #8]
 8008704:	f1bc 0f00 	cmp.w	ip, #0
 8008708:	d00e      	beq.n	8008728 <forward_eltwise_integer_INT8+0x17c>
 800870a:	f8dc e004 	ldr.w	lr, [ip, #4]
 800870e:	f1be 0f00 	cmp.w	lr, #0
 8008712:	f000 8100 	beq.w	8008916 <forward_eltwise_integer_INT8+0x36a>
 8008716:	f8bc c002 	ldrh.w	ip, [ip, #2]
 800871a:	f1bc 0f00 	cmp.w	ip, #0
 800871e:	d003      	beq.n	8008728 <forward_eltwise_integer_INT8+0x17c>
 8008720:	f8de c004 	ldr.w	ip, [lr, #4]
 8008724:	f99c c000 	ldrsb.w	ip, [ip]
 8008728:	f88d c039 	strb.w	ip, [sp, #57]	; 0x39
 800872c:	b158      	cbz	r0, 8008746 <forward_eltwise_integer_INT8+0x19a>
 800872e:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8008732:	f1bc 0f00 	cmp.w	ip, #0
 8008736:	f000 80f2 	beq.w	800891e <forward_eltwise_integer_INT8+0x372>
 800873a:	8840      	ldrh	r0, [r0, #2]
 800873c:	b118      	cbz	r0, 8008746 <forward_eltwise_integer_INT8+0x19a>
 800873e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8008742:	f990 0000 	ldrsb.w	r0, [r0]
 8008746:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
 800874a:	b142      	cbz	r2, 800875e <forward_eltwise_integer_INT8+0x1b2>
 800874c:	6850      	ldr	r0, [r2, #4]
 800874e:	2800      	cmp	r0, #0
 8008750:	f000 80df 	beq.w	8008912 <forward_eltwise_integer_INT8+0x366>
 8008754:	8852      	ldrh	r2, [r2, #2]
 8008756:	b112      	cbz	r2, 800875e <forward_eltwise_integer_INT8+0x1b2>
 8008758:	6842      	ldr	r2, [r0, #4]
 800875a:	f992 2000 	ldrsb.w	r2, [r2]
 800875e:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8008762:	9a08      	ldr	r2, [sp, #32]
 8008764:	b912      	cbnz	r2, 800876c <forward_eltwise_integer_INT8+0x1c0>
 8008766:	f1b9 0f00 	cmp.w	r9, #0
 800876a:	d030      	beq.n	80087ce <forward_eltwise_integer_INT8+0x222>
 800876c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800876e:	4553      	cmp	r3, sl
 8008770:	f000 80d3 	beq.w	800891a <forward_eltwise_integer_INT8+0x36e>
 8008774:	f1ba 0f00 	cmp.w	sl, #0
 8008778:	bf14      	ite	ne
 800877a:	2701      	movne	r7, #1
 800877c:	2702      	moveq	r7, #2
 800877e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008780:	0a1b      	lsrs	r3, r3, #8
 8008782:	f000 80f7 	beq.w	8008974 <forward_eltwise_integer_INT8+0x3c8>
 8008786:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008788:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800878c:	2301      	movs	r3, #1
 800878e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008792:	4290      	cmp	r0, r2
 8008794:	fb01 f303 	mul.w	r3, r1, r3
 8008798:	d1f9      	bne.n	800878e <forward_eltwise_integer_INT8+0x1e2>
 800879a:	4621      	mov	r1, r4
 800879c:	f10d 043b 	add.w	r4, sp, #59	; 0x3b
 80087a0:	462a      	mov	r2, r5
 80087a2:	4630      	mov	r0, r6
 80087a4:	9405      	str	r4, [sp, #20]
 80087a6:	ac11      	add	r4, sp, #68	; 0x44
 80087a8:	9706      	str	r7, [sp, #24]
 80087aa:	9404      	str	r4, [sp, #16]
 80087ac:	f10d 043a 	add.w	r4, sp, #58	; 0x3a
 80087b0:	9403      	str	r4, [sp, #12]
 80087b2:	ac10      	add	r4, sp, #64	; 0x40
 80087b4:	9402      	str	r4, [sp, #8]
 80087b6:	f10d 0439 	add.w	r4, sp, #57	; 0x39
 80087ba:	9401      	str	r4, [sp, #4]
 80087bc:	ac0f      	add	r4, sp, #60	; 0x3c
 80087be:	9400      	str	r4, [sp, #0]
 80087c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80087c2:	47a0      	blx	r4
 80087c4:	b02b      	add	sp, #172	; 0xac
 80087c6:	ecbd 8b02 	vpop	{d8}
 80087ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ce:	aa20      	add	r2, sp, #128	; 0x80
 80087d0:	a817      	add	r0, sp, #92	; 0x5c
 80087d2:	9308      	str	r3, [sp, #32]
 80087d4:	9218      	str	r2, [sp, #96]	; 0x60
 80087d6:	aa25      	add	r2, sp, #148	; 0x94
 80087d8:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
 80087dc:	921a      	str	r2, [sp, #104]	; 0x68
 80087de:	f240 5202 	movw	r2, #1282	; 0x502
 80087e2:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
 80087e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80087e8:	9219      	str	r2, [sp, #100]	; 0x64
 80087ea:	aa15      	add	r2, sp, #84	; 0x54
 80087ec:	e9cd 9921 	strd	r9, r9, [sp, #132]	; 0x84
 80087f0:	e9cd 9923 	strd	r9, r9, [sp, #140]	; 0x8c
 80087f4:	e9cd 9926 	strd	r9, r9, [sp, #152]	; 0x98
 80087f8:	e9cd 9928 	strd	r9, r9, [sp, #160]	; 0xa0
 80087fc:	f005 fb1e 	bl	800de3c <core_compute_offsets_in_bytes>
 8008800:	9b08      	ldr	r3, [sp, #32]
 8008802:	aa15      	add	r2, sp, #84	; 0x54
 8008804:	4659      	mov	r1, fp
 8008806:	a819      	add	r0, sp, #100	; 0x64
 8008808:	f005 fb18 	bl	800de3c <core_compute_offsets_in_bytes>
 800880c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800880e:	68d3      	ldr	r3, [r2, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0d7      	beq.n	80087c4 <forward_eltwise_integer_INT8+0x218>
 8008814:	6891      	ldr	r1, [r2, #8]
 8008816:	eddf 8a5a 	vldr	s17, [pc, #360]	; 8008980 <forward_eltwise_integer_INT8+0x3d4>
 800881a:	468c      	mov	ip, r1
 800881c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008820:	f1bc 0f00 	cmp.w	ip, #0
 8008824:	d0ce      	beq.n	80087c4 <forward_eltwise_integer_INT8+0x218>
 8008826:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008828:	f04f 0b00 	mov.w	fp, #0
 800882c:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8008830:	f04f 0a00 	mov.w	sl, #0
 8008834:	2804      	cmp	r0, #4
 8008836:	bf8c      	ite	hi
 8008838:	6911      	ldrhi	r1, [r2, #16]
 800883a:	2101      	movls	r1, #1
 800883c:	458a      	cmp	sl, r1
 800883e:	d270      	bcs.n	8008922 <forward_eltwise_integer_INT8+0x376>
 8008840:	6851      	ldr	r1, [r2, #4]
 8008842:	2900      	cmp	r1, #0
 8008844:	d054      	beq.n	80088f0 <forward_eltwise_integer_INT8+0x344>
 8008846:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800884a:	f04f 0900 	mov.w	r9, #0
 800884e:	f994 2000 	ldrsb.w	r2, [r4]
 8008852:	a814      	add	r0, sp, #80	; 0x50
 8008854:	f99d 1039 	ldrsb.w	r1, [sp, #57]	; 0x39
 8008858:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800885c:	1a53      	subs	r3, r2, r1
 800885e:	f99d 103a 	ldrsb.w	r1, [sp, #58]	; 0x3a
 8008862:	eddd 6a10 	vldr	s13, [sp, #64]	; 0x40
 8008866:	ee07 3a10 	vmov	s14, r3
 800886a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800886e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008872:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 8008876:	f995 2000 	ldrsb.w	r2, [r5]
 800887a:	1a53      	subs	r3, r2, r1
 800887c:	aa13      	add	r2, sp, #76	; 0x4c
 800887e:	a912      	add	r1, sp, #72	; 0x48
 8008880:	ee07 3a90 	vmov	s15, r3
 8008884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008888:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800888c:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 8008890:	47b8      	blx	r7
 8008892:	ed9d 6a14 	vldr	s12, [sp, #80]	; 0x50
 8008896:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 800889a:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 800889e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b6:	fe38 7a28 	vselgt.f32	s14, s16, s17
 80088ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80088be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80088c2:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 80088c6:	ee17 2a10 	vmov	r2, s14
 80088ca:	f302 0207 	ssat	r2, #8, r2
 80088ce:	7032      	strb	r2, [r6, #0]
 80088d0:	f109 0901 	add.w	r9, r9, #1
 80088d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80088d6:	4446      	add	r6, r8
 80088d8:	6852      	ldr	r2, [r2, #4]
 80088da:	4414      	add	r4, r2
 80088dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80088de:	6852      	ldr	r2, [r2, #4]
 80088e0:	4415      	add	r5, r2
 80088e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80088e4:	6851      	ldr	r1, [r2, #4]
 80088e6:	4549      	cmp	r1, r9
 80088e8:	d8b1      	bhi.n	800884e <forward_eltwise_integer_INT8+0x2a2>
 80088ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 80088ec:	f3c0 2017 	ubfx	r0, r0, #8, #24
 80088f0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80088f2:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 80088f6:	d302      	bcc.n	80088fe <forward_eltwise_integer_INT8+0x352>
 80088f8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80088fa:	6909      	ldr	r1, [r1, #16]
 80088fc:	440c      	add	r4, r1
 80088fe:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008900:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8008904:	d302      	bcc.n	800890c <forward_eltwise_integer_INT8+0x360>
 8008906:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008908:	6909      	ldr	r1, [r1, #16]
 800890a:	440d      	add	r5, r1
 800890c:	f10a 0a01 	add.w	sl, sl, #1
 8008910:	e790      	b.n	8008834 <forward_eltwise_integer_INT8+0x288>
 8008912:	4602      	mov	r2, r0
 8008914:	e723      	b.n	800875e <forward_eltwise_integer_INT8+0x1b2>
 8008916:	46f4      	mov	ip, lr
 8008918:	e706      	b.n	8008728 <forward_eltwise_integer_INT8+0x17c>
 800891a:	2700      	movs	r7, #0
 800891c:	e72f      	b.n	800877e <forward_eltwise_integer_INT8+0x1d2>
 800891e:	4660      	mov	r0, ip
 8008920:	e711      	b.n	8008746 <forward_eltwise_integer_INT8+0x19a>
 8008922:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8008926:	f10b 0b01 	add.w	fp, fp, #1
 800892a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800892c:	f8de 1008 	ldr.w	r1, [lr, #8]
 8008930:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8008934:	440c      	add	r4, r1
 8008936:	6899      	ldr	r1, [r3, #8]
 8008938:	45dc      	cmp	ip, fp
 800893a:	440d      	add	r5, r1
 800893c:	f63f af78 	bhi.w	8008830 <forward_eltwise_integer_INT8+0x284>
 8008940:	f8de 000c 	ldr.w	r0, [lr, #12]
 8008944:	9908      	ldr	r1, [sp, #32]
 8008946:	4404      	add	r4, r0
 8008948:	68d0      	ldr	r0, [r2, #12]
 800894a:	3101      	adds	r1, #1
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	4288      	cmp	r0, r1
 8008950:	441d      	add	r5, r3
 8008952:	9108      	str	r1, [sp, #32]
 8008954:	f63f af64 	bhi.w	8008820 <forward_eltwise_integer_INT8+0x274>
 8008958:	b02b      	add	sp, #172	; 0xac
 800895a:	ecbd 8b02 	vpop	{d8}
 800895e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008962:	f04f 0a00 	mov.w	sl, #0
 8008966:	e667      	b.n	8008638 <forward_eltwise_integer_INT8+0x8c>
 8008968:	2301      	movs	r3, #1
 800896a:	4670      	mov	r0, lr
 800896c:	9308      	str	r3, [sp, #32]
 800896e:	e655      	b.n	800861c <forward_eltwise_integer_INT8+0x70>
 8008970:	4625      	mov	r5, r4
 8008972:	e62b      	b.n	80085cc <forward_eltwise_integer_INT8+0x20>
 8008974:	2301      	movs	r3, #1
 8008976:	e710      	b.n	800879a <forward_eltwise_integer_INT8+0x1ee>
 8008978:	2300      	movs	r3, #0
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	deff      	udf	#255	; 0xff
 800897e:	bf00      	nop
 8008980:	befffffc 	.word	0xbefffffc

08008984 <ai_check_custom_types>:
 8008984:	b082      	sub	sp, #8
 8008986:	4b12      	ldr	r3, [pc, #72]	; (80089d0 <ai_check_custom_types+0x4c>)
 8008988:	9301      	str	r3, [sp, #4]
 800898a:	b118      	cbz	r0, 8008994 <ai_check_custom_types+0x10>
 800898c:	7803      	ldrb	r3, [r0, #0]
 800898e:	2b03      	cmp	r3, #3
 8008990:	d002      	beq.n	8008998 <ai_check_custom_types+0x14>
 8008992:	2000      	movs	r0, #0
 8008994:	b002      	add	sp, #8
 8008996:	4770      	bx	lr
 8008998:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800899c:	4293      	cmp	r3, r2
 800899e:	d004      	beq.n	80089aa <ai_check_custom_types+0x26>
 80089a0:	2001      	movs	r0, #1
 80089a2:	f080 0001 	eor.w	r0, r0, #1
 80089a6:	b002      	add	sp, #8
 80089a8:	4770      	bx	lr
 80089aa:	7842      	ldrb	r2, [r0, #1]
 80089ac:	3001      	adds	r0, #1
 80089ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d1f4      	bne.n	80089a0 <ai_check_custom_types+0x1c>
 80089b6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80089ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d1ee      	bne.n	80089a0 <ai_check_custom_types+0x1c>
 80089c2:	7842      	ldrb	r2, [r0, #1]
 80089c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d1e9      	bne.n	80089a0 <ai_check_custom_types+0x1c>
 80089cc:	2000      	movs	r0, #0
 80089ce:	e7e8      	b.n	80089a2 <ai_check_custom_types+0x1e>
 80089d0:	84048403 	.word	0x84048403

080089d4 <ai_layers_init_all>:
 80089d4:	2100      	movs	r1, #0
 80089d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80089d8:	b13b      	cbz	r3, 80089ea <ai_layers_init_all+0x16>
 80089da:	691a      	ldr	r2, [r3, #16]
 80089dc:	3101      	adds	r1, #1
 80089de:	60d8      	str	r0, [r3, #12]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	4613      	mov	r3, r2
 80089e4:	d001      	beq.n	80089ea <ai_layers_init_all+0x16>
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	d1f6      	bne.n	80089d8 <ai_layers_init_all+0x4>
 80089ea:	4608      	mov	r0, r1
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop

080089f0 <ai_layers_post_init_all>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	2500      	movs	r5, #0
 80089f4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80089f6:	b16c      	cbz	r4, 8008a14 <ai_layers_post_init_all+0x24>
 80089f8:	6863      	ldr	r3, [r4, #4]
 80089fa:	07db      	lsls	r3, r3, #31
 80089fc:	d504      	bpl.n	8008a08 <ai_layers_post_init_all+0x18>
 80089fe:	6a23      	ldr	r3, [r4, #32]
 8008a00:	4620      	mov	r0, r4
 8008a02:	b10b      	cbz	r3, 8008a08 <ai_layers_post_init_all+0x18>
 8008a04:	3501      	adds	r5, #1
 8008a06:	4798      	blx	r3
 8008a08:	6923      	ldr	r3, [r4, #16]
 8008a0a:	42a3      	cmp	r3, r4
 8008a0c:	461c      	mov	r4, r3
 8008a0e:	d001      	beq.n	8008a14 <ai_layers_post_init_all+0x24>
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1f0      	bne.n	80089f6 <ai_layers_post_init_all+0x6>
 8008a14:	4628      	mov	r0, r5
 8008a16:	bd38      	pop	{r3, r4, r5, pc}

08008a18 <ai_layers_forward_all>:
 8008a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8008a20:	4604      	mov	r4, r0
 8008a22:	f1b8 0f00 	cmp.w	r8, #0
 8008a26:	d02a      	beq.n	8008a7e <ai_layers_forward_all+0x66>
 8008a28:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008a2a:	6381      	str	r1, [r0, #56]	; 0x38
 8008a2c:	b319      	cbz	r1, 8008a76 <ai_layers_forward_all+0x5e>
 8008a2e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008a30:	2001      	movs	r0, #1
 8008a32:	47c0      	blx	r8
 8008a34:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008a36:	b1f6      	cbz	r6, 8008a76 <ai_layers_forward_all+0x5e>
 8008a38:	2700      	movs	r7, #0
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008a3e:	2002      	movs	r0, #2
 8008a40:	47c0      	blx	r8
 8008a42:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008a44:	4628      	mov	r0, r5
 8008a46:	696b      	ldr	r3, [r5, #20]
 8008a48:	4798      	blx	r3
 8008a4a:	692e      	ldr	r6, [r5, #16]
 8008a4c:	2003      	movs	r0, #3
 8008a4e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008a50:	42b5      	cmp	r5, r6
 8008a52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008a54:	d007      	beq.n	8008a66 <ai_layers_forward_all+0x4e>
 8008a56:	47c0      	blx	r8
 8008a58:	3701      	adds	r7, #1
 8008a5a:	63a6      	str	r6, [r4, #56]	; 0x38
 8008a5c:	2e00      	cmp	r6, #0
 8008a5e:	d1ec      	bne.n	8008a3a <ai_layers_forward_all+0x22>
 8008a60:	4638      	mov	r0, r7
 8008a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a66:	2003      	movs	r0, #3
 8008a68:	3701      	adds	r7, #1
 8008a6a:	47c0      	blx	r8
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	4638      	mov	r0, r7
 8008a70:	63a3      	str	r3, [r4, #56]	; 0x38
 8008a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a76:	2700      	movs	r7, #0
 8008a78:	4638      	mov	r0, r7
 8008a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a7e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008a80:	6385      	str	r5, [r0, #56]	; 0x38
 8008a82:	2d00      	cmp	r5, #0
 8008a84:	d0f7      	beq.n	8008a76 <ai_layers_forward_all+0x5e>
 8008a86:	4647      	mov	r7, r8
 8008a88:	696b      	ldr	r3, [r5, #20]
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	4798      	blx	r3
 8008a8e:	462b      	mov	r3, r5
 8008a90:	692d      	ldr	r5, [r5, #16]
 8008a92:	429d      	cmp	r5, r3
 8008a94:	d004      	beq.n	8008aa0 <ai_layers_forward_all+0x88>
 8008a96:	3701      	adds	r7, #1
 8008a98:	63a5      	str	r5, [r4, #56]	; 0x38
 8008a9a:	2d00      	cmp	r5, #0
 8008a9c:	d1f4      	bne.n	8008a88 <ai_layers_forward_all+0x70>
 8008a9e:	e7df      	b.n	8008a60 <ai_layers_forward_all+0x48>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	3701      	adds	r7, #1
 8008aa4:	63a3      	str	r3, [r4, #56]	; 0x38
 8008aa6:	e7db      	b.n	8008a60 <ai_layers_forward_all+0x48>

08008aa8 <pool_func_mp_array_integer_INT8>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	b093      	sub	sp, #76	; 0x4c
 8008aae:	468c      	mov	ip, r1
 8008ab0:	469a      	mov	sl, r3
 8008ab2:	6804      	ldr	r4, [r0, #0]
 8008ab4:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 8008ab8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8008abc:	910e      	str	r1, [sp, #56]	; 0x38
 8008abe:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 8008ac2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ac4:	910f      	str	r1, [sp, #60]	; 0x3c
 8008ac6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008ac8:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 8008acc:	6980      	ldr	r0, [r0, #24]
 8008ace:	9110      	str	r1, [sp, #64]	; 0x40
 8008ad0:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 8008ad4:	6999      	ldr	r1, [r3, #24]
 8008ad6:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
 8008ada:	f8bd e088 	ldrh.w	lr, [sp, #136]	; 0x88
 8008ade:	f8bd 808c 	ldrh.w	r8, [sp, #140]	; 0x8c
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2c00      	cmp	r4, #0
 8008ae6:	d05c      	beq.n	8008ba2 <pool_func_mp_array_integer_INT8+0xfa>
 8008ae8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008aec:	f1b9 0f00 	cmp.w	r9, #0
 8008af0:	d041      	beq.n	8008b76 <pool_func_mp_array_integer_INT8+0xce>
 8008af2:	8865      	ldrh	r5, [r4, #2]
 8008af4:	2d00      	cmp	r5, #0
 8008af6:	d06d      	beq.n	8008bd4 <pool_func_mp_array_integer_INT8+0x12c>
 8008af8:	f8d9 6000 	ldr.w	r6, [r9]
 8008afc:	ed96 0a00 	vldr	s0, [r6]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d06b      	beq.n	8008bdc <pool_func_mp_array_integer_INT8+0x134>
 8008b04:	685e      	ldr	r6, [r3, #4]
 8008b06:	2e00      	cmp	r6, #0
 8008b08:	d03c      	beq.n	8008b84 <pool_func_mp_array_integer_INT8+0xdc>
 8008b0a:	885d      	ldrh	r5, [r3, #2]
 8008b0c:	9511      	str	r5, [sp, #68]	; 0x44
 8008b0e:	2d00      	cmp	r5, #0
 8008b10:	d050      	beq.n	8008bb4 <pool_func_mp_array_integer_INT8+0x10c>
 8008b12:	6835      	ldr	r5, [r6, #0]
 8008b14:	6880      	ldr	r0, [r0, #8]
 8008b16:	6889      	ldr	r1, [r1, #8]
 8008b18:	edd5 0a00 	vldr	s1, [r5]
 8008b1c:	f1b9 0f00 	cmp.w	r9, #0
 8008b20:	d052      	beq.n	8008bc8 <pool_func_mp_array_integer_INT8+0x120>
 8008b22:	8864      	ldrh	r4, [r4, #2]
 8008b24:	2c00      	cmp	r4, #0
 8008b26:	d037      	beq.n	8008b98 <pool_func_mp_array_integer_INT8+0xf0>
 8008b28:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8008b2c:	f994 4000 	ldrsb.w	r4, [r4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d04d      	beq.n	8008bd0 <pool_func_mp_array_integer_INT8+0x128>
 8008b34:	2e00      	cmp	r6, #0
 8008b36:	d032      	beq.n	8008b9e <pool_func_mp_array_integer_INT8+0xf6>
 8008b38:	885b      	ldrh	r3, [r3, #2]
 8008b3a:	9311      	str	r3, [sp, #68]	; 0x44
 8008b3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d046      	beq.n	8008bd0 <pool_func_mp_array_integer_INT8+0x128>
 8008b42:	6873      	ldr	r3, [r6, #4]
 8008b44:	f993 5000 	ldrsb.w	r5, [r3]
 8008b48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b4a:	f8cd a000 	str.w	sl, [sp]
 8008b4e:	9304      	str	r3, [sp, #16]
 8008b50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b52:	9303      	str	r3, [sp, #12]
 8008b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b56:	9302      	str	r3, [sp, #8]
 8008b58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b5a:	9301      	str	r3, [sp, #4]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	4662      	mov	r2, ip
 8008b60:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 8008b64:	e9cd e807 	strd	lr, r8, [sp, #28]
 8008b68:	e9cd b705 	strd	fp, r7, [sp, #20]
 8008b6c:	f004 fd44 	bl	800d5f8 <st_int8_maxpool>
 8008b70:	b013      	add	sp, #76	; 0x4c
 8008b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d03c      	beq.n	8008bf4 <pool_func_mp_array_integer_INT8+0x14c>
 8008b7a:	685e      	ldr	r6, [r3, #4]
 8008b7c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8008c48 <pool_func_mp_array_integer_INT8+0x1a0>
 8008b80:	2e00      	cmp	r6, #0
 8008b82:	d1c2      	bne.n	8008b0a <pool_func_mp_array_integer_INT8+0x62>
 8008b84:	6880      	ldr	r0, [r0, #8]
 8008b86:	6889      	ldr	r1, [r1, #8]
 8008b88:	f1b9 0f00 	cmp.w	r9, #0
 8008b8c:	d02d      	beq.n	8008bea <pool_func_mp_array_integer_INT8+0x142>
 8008b8e:	8864      	ldrh	r4, [r4, #2]
 8008b90:	2c00      	cmp	r4, #0
 8008b92:	d151      	bne.n	8008c38 <pool_func_mp_array_integer_INT8+0x190>
 8008b94:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8008c48 <pool_func_mp_array_integer_INT8+0x1a0>
 8008b98:	2400      	movs	r4, #0
 8008b9a:	2e00      	cmp	r6, #0
 8008b9c:	d1cc      	bne.n	8008b38 <pool_func_mp_array_integer_INT8+0x90>
 8008b9e:	2500      	movs	r5, #0
 8008ba0:	e7d2      	b.n	8008b48 <pool_func_mp_array_integer_INT8+0xa0>
 8008ba2:	b33b      	cbz	r3, 8008bf4 <pool_func_mp_array_integer_INT8+0x14c>
 8008ba4:	685e      	ldr	r6, [r3, #4]
 8008ba6:	b376      	cbz	r6, 8008c06 <pool_func_mp_array_integer_INT8+0x15e>
 8008ba8:	885d      	ldrh	r5, [r3, #2]
 8008baa:	9511      	str	r5, [sp, #68]	; 0x44
 8008bac:	2d00      	cmp	r5, #0
 8008bae:	d133      	bne.n	8008c18 <pool_func_mp_array_integer_INT8+0x170>
 8008bb0:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8008c48 <pool_func_mp_array_integer_INT8+0x1a0>
 8008bb4:	6880      	ldr	r0, [r0, #8]
 8008bb6:	6889      	ldr	r1, [r1, #8]
 8008bb8:	b1c4      	cbz	r4, 8008bec <pool_func_mp_array_integer_INT8+0x144>
 8008bba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008bbe:	eddf 0a22 	vldr	s1, [pc, #136]	; 8008c48 <pool_func_mp_array_integer_INT8+0x1a0>
 8008bc2:	f1b9 0f00 	cmp.w	r9, #0
 8008bc6:	d1ac      	bne.n	8008b22 <pool_func_mp_array_integer_INT8+0x7a>
 8008bc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bca:	464c      	mov	r4, r9
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1b8      	bne.n	8008b42 <pool_func_mp_array_integer_INT8+0x9a>
 8008bd0:	461d      	mov	r5, r3
 8008bd2:	e7b9      	b.n	8008b48 <pool_func_mp_array_integer_INT8+0xa0>
 8008bd4:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8008c48 <pool_func_mp_array_integer_INT8+0x1a0>
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d193      	bne.n	8008b04 <pool_func_mp_array_integer_INT8+0x5c>
 8008bdc:	6880      	ldr	r0, [r0, #8]
 8008bde:	6889      	ldr	r1, [r1, #8]
 8008be0:	bb15      	cbnz	r5, 8008c28 <pool_func_mp_array_integer_INT8+0x180>
 8008be2:	462c      	mov	r4, r5
 8008be4:	eddf 0a18 	vldr	s1, [pc, #96]	; 8008c48 <pool_func_mp_array_integer_INT8+0x1a0>
 8008be8:	e7ae      	b.n	8008b48 <pool_func_mp_array_integer_INT8+0xa0>
 8008bea:	464c      	mov	r4, r9
 8008bec:	eddf 0a16 	vldr	s1, [pc, #88]	; 8008c48 <pool_func_mp_array_integer_INT8+0x1a0>
 8008bf0:	4625      	mov	r5, r4
 8008bf2:	e7a9      	b.n	8008b48 <pool_func_mp_array_integer_INT8+0xa0>
 8008bf4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8008c48 <pool_func_mp_array_integer_INT8+0x1a0>
 8008bf8:	461c      	mov	r4, r3
 8008bfa:	6880      	ldr	r0, [r0, #8]
 8008bfc:	461d      	mov	r5, r3
 8008bfe:	eef0 0a40 	vmov.f32	s1, s0
 8008c02:	6889      	ldr	r1, [r1, #8]
 8008c04:	e7a0      	b.n	8008b48 <pool_func_mp_array_integer_INT8+0xa0>
 8008c06:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008c48 <pool_func_mp_array_integer_INT8+0x1a0>
 8008c0a:	4634      	mov	r4, r6
 8008c0c:	6880      	ldr	r0, [r0, #8]
 8008c0e:	4635      	mov	r5, r6
 8008c10:	eef0 0a40 	vmov.f32	s1, s0
 8008c14:	6889      	ldr	r1, [r1, #8]
 8008c16:	e797      	b.n	8008b48 <pool_func_mp_array_integer_INT8+0xa0>
 8008c18:	6833      	ldr	r3, [r6, #0]
 8008c1a:	6880      	ldr	r0, [r0, #8]
 8008c1c:	6889      	ldr	r1, [r1, #8]
 8008c1e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8008c48 <pool_func_mp_array_integer_INT8+0x1a0>
 8008c22:	edd3 0a00 	vldr	s1, [r3]
 8008c26:	e78c      	b.n	8008b42 <pool_func_mp_array_integer_INT8+0x9a>
 8008c28:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8008c2c:	461d      	mov	r5, r3
 8008c2e:	eddf 0a06 	vldr	s1, [pc, #24]	; 8008c48 <pool_func_mp_array_integer_INT8+0x1a0>
 8008c32:	f994 4000 	ldrsb.w	r4, [r4]
 8008c36:	e787      	b.n	8008b48 <pool_func_mp_array_integer_INT8+0xa0>
 8008c38:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008c3c:	eddf 0a02 	vldr	s1, [pc, #8]	; 8008c48 <pool_func_mp_array_integer_INT8+0x1a0>
 8008c40:	f993 4000 	ldrsb.w	r4, [r3]
 8008c44:	e7ab      	b.n	8008b9e <pool_func_mp_array_integer_INT8+0xf6>
 8008c46:	bf00      	nop
 8008c48:	00000000 	.word	0x00000000

08008c4c <forward_mp_integer_INT8>:
 8008c4c:	6983      	ldr	r3, [r0, #24]
 8008c4e:	881a      	ldrh	r2, [r3, #0]
 8008c50:	2a00      	cmp	r2, #0
 8008c52:	d074      	beq.n	8008d3e <forward_mp_integer_INT8+0xf2>
 8008c54:	6859      	ldr	r1, [r3, #4]
 8008c56:	684b      	ldr	r3, [r1, #4]
 8008c58:	b103      	cbz	r3, 8008c5c <forward_mp_integer_INT8+0x10>
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2a01      	cmp	r2, #1
 8008c5e:	f000 80e0 	beq.w	8008e22 <forward_mp_integer_INT8+0x1d6>
 8008c62:	690a      	ldr	r2, [r1, #16]
 8008c64:	2a00      	cmp	r2, #0
 8008c66:	f000 80df 	beq.w	8008e28 <forward_mp_integer_INT8+0x1dc>
 8008c6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6e:	68de      	ldr	r6, [r3, #12]
 8008c70:	b095      	sub	sp, #84	; 0x54
 8008c72:	6811      	ldr	r1, [r2, #0]
 8008c74:	681c      	ldr	r4, [r3, #0]
 8008c76:	f8d3 b018 	ldr.w	fp, [r3, #24]
 8008c7a:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8008c7e:	8932      	ldrh	r2, [r6, #8]
 8008c80:	89b3      	ldrh	r3, [r6, #12]
 8008c82:	8b86      	ldrh	r6, [r0, #28]
 8008c84:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8008c86:	960d      	str	r6, [sp, #52]	; 0x34
 8008c88:	8c06      	ldrh	r6, [r0, #32]
 8008c8a:	68cd      	ldr	r5, [r1, #12]
 8008c8c:	960e      	str	r6, [sp, #56]	; 0x38
 8008c8e:	88be      	ldrh	r6, [r7, #4]
 8008c90:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8008c94:	960f      	str	r6, [sp, #60]	; 0x3c
 8008c96:	883e      	ldrh	r6, [r7, #0]
 8008c98:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 8008c9c:	9610      	str	r6, [sp, #64]	; 0x40
 8008c9e:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 8008ca0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8008ca2:	9611      	str	r6, [sp, #68]	; 0x44
 8008ca4:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8008ca8:	680e      	ldr	r6, [r1, #0]
 8008caa:	9012      	str	r0, [sp, #72]	; 0x48
 8008cac:	2c00      	cmp	r4, #0
 8008cae:	d060      	beq.n	8008d72 <forward_mp_integer_INT8+0x126>
 8008cb0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008cb4:	f1b9 0f00 	cmp.w	r9, #0
 8008cb8:	d043      	beq.n	8008d42 <forward_mp_integer_INT8+0xf6>
 8008cba:	8865      	ldrh	r5, [r4, #2]
 8008cbc:	2d00      	cmp	r5, #0
 8008cbe:	d06e      	beq.n	8008d9e <forward_mp_integer_INT8+0x152>
 8008cc0:	f8d9 1000 	ldr.w	r1, [r9]
 8008cc4:	ed91 0a00 	vldr	s0, [r1]
 8008cc8:	2e00      	cmp	r6, #0
 8008cca:	d06c      	beq.n	8008da6 <forward_mp_integer_INT8+0x15a>
 8008ccc:	6877      	ldr	r7, [r6, #4]
 8008cce:	2f00      	cmp	r7, #0
 8008cd0:	d03e      	beq.n	8008d50 <forward_mp_integer_INT8+0x104>
 8008cd2:	8871      	ldrh	r1, [r6, #2]
 8008cd4:	9113      	str	r1, [sp, #76]	; 0x4c
 8008cd6:	2900      	cmp	r1, #0
 8008cd8:	d053      	beq.n	8008d82 <forward_mp_integer_INT8+0x136>
 8008cda:	683d      	ldr	r5, [r7, #0]
 8008cdc:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008ce0:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008ce4:	edd5 0a00 	vldr	s1, [r5]
 8008ce8:	f1b9 0f00 	cmp.w	r9, #0
 8008cec:	d055      	beq.n	8008d9a <forward_mp_integer_INT8+0x14e>
 8008cee:	8864      	ldrh	r4, [r4, #2]
 8008cf0:	2c00      	cmp	r4, #0
 8008cf2:	d039      	beq.n	8008d68 <forward_mp_integer_INT8+0x11c>
 8008cf4:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8008cf8:	f994 4000 	ldrsb.w	r4, [r4]
 8008cfc:	2e00      	cmp	r6, #0
 8008cfe:	d036      	beq.n	8008d6e <forward_mp_integer_INT8+0x122>
 8008d00:	2f00      	cmp	r7, #0
 8008d02:	d034      	beq.n	8008d6e <forward_mp_integer_INT8+0x122>
 8008d04:	8875      	ldrh	r5, [r6, #2]
 8008d06:	9513      	str	r5, [sp, #76]	; 0x4c
 8008d08:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8008d0a:	b115      	cbz	r5, 8008d12 <forward_mp_integer_INT8+0xc6>
 8008d0c:	687d      	ldr	r5, [r7, #4]
 8008d0e:	f995 5000 	ldrsb.w	r5, [r5]
 8008d12:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 8008d16:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008d18:	9406      	str	r4, [sp, #24]
 8008d1a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008d1c:	9405      	str	r4, [sp, #20]
 8008d1e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008d20:	9404      	str	r4, [sp, #16]
 8008d22:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8008d24:	9403      	str	r4, [sp, #12]
 8008d26:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008d28:	9402      	str	r4, [sp, #8]
 8008d2a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008d2c:	e9cd e807 	strd	lr, r8, [sp, #28]
 8008d30:	e9cd c400 	strd	ip, r4, [sp]
 8008d34:	f004 fc60 	bl	800d5f8 <st_int8_maxpool>
 8008d38:	b015      	add	sp, #84	; 0x54
 8008d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3e:	6853      	ldr	r3, [r2, #4]
 8008d40:	deff      	udf	#255	; 0xff
 8008d42:	2e00      	cmp	r6, #0
 8008d44:	d039      	beq.n	8008dba <forward_mp_integer_INT8+0x16e>
 8008d46:	6877      	ldr	r7, [r6, #4]
 8008d48:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8008e2c <forward_mp_integer_INT8+0x1e0>
 8008d4c:	2f00      	cmp	r7, #0
 8008d4e:	d1c0      	bne.n	8008cd2 <forward_mp_integer_INT8+0x86>
 8008d50:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008d54:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008d58:	f1b9 0f00 	cmp.w	r9, #0
 8008d5c:	d05c      	beq.n	8008e18 <forward_mp_integer_INT8+0x1cc>
 8008d5e:	8864      	ldrh	r4, [r4, #2]
 8008d60:	2c00      	cmp	r4, #0
 8008d62:	d152      	bne.n	8008e0a <forward_mp_integer_INT8+0x1be>
 8008d64:	eddf 0a31 	vldr	s1, [pc, #196]	; 8008e2c <forward_mp_integer_INT8+0x1e0>
 8008d68:	2400      	movs	r4, #0
 8008d6a:	2f00      	cmp	r7, #0
 8008d6c:	d1ca      	bne.n	8008d04 <forward_mp_integer_INT8+0xb8>
 8008d6e:	2500      	movs	r5, #0
 8008d70:	e7cf      	b.n	8008d12 <forward_mp_integer_INT8+0xc6>
 8008d72:	b316      	cbz	r6, 8008dba <forward_mp_integer_INT8+0x16e>
 8008d74:	6877      	ldr	r7, [r6, #4]
 8008d76:	b35f      	cbz	r7, 8008dd0 <forward_mp_integer_INT8+0x184>
 8008d78:	8871      	ldrh	r1, [r6, #2]
 8008d7a:	9113      	str	r1, [sp, #76]	; 0x4c
 8008d7c:	bb99      	cbnz	r1, 8008de6 <forward_mp_integer_INT8+0x19a>
 8008d7e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8008e2c <forward_mp_integer_INT8+0x1e0>
 8008d82:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008d86:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008d8a:	b194      	cbz	r4, 8008db2 <forward_mp_integer_INT8+0x166>
 8008d8c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008d90:	eddf 0a26 	vldr	s1, [pc, #152]	; 8008e2c <forward_mp_integer_INT8+0x1e0>
 8008d94:	f1b9 0f00 	cmp.w	r9, #0
 8008d98:	d1a9      	bne.n	8008cee <forward_mp_integer_INT8+0xa2>
 8008d9a:	464c      	mov	r4, r9
 8008d9c:	e7b4      	b.n	8008d08 <forward_mp_integer_INT8+0xbc>
 8008d9e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8008e2c <forward_mp_integer_INT8+0x1e0>
 8008da2:	2e00      	cmp	r6, #0
 8008da4:	d192      	bne.n	8008ccc <forward_mp_integer_INT8+0x80>
 8008da6:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008daa:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008dae:	bb25      	cbnz	r5, 8008dfa <forward_mp_integer_INT8+0x1ae>
 8008db0:	462c      	mov	r4, r5
 8008db2:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8008e2c <forward_mp_integer_INT8+0x1e0>
 8008db6:	4625      	mov	r5, r4
 8008db8:	e7ab      	b.n	8008d12 <forward_mp_integer_INT8+0xc6>
 8008dba:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8008e2c <forward_mp_integer_INT8+0x1e0>
 8008dbe:	4634      	mov	r4, r6
 8008dc0:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008dc4:	4635      	mov	r5, r6
 8008dc6:	eef0 0a40 	vmov.f32	s1, s0
 8008dca:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008dce:	e7a0      	b.n	8008d12 <forward_mp_integer_INT8+0xc6>
 8008dd0:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8008e2c <forward_mp_integer_INT8+0x1e0>
 8008dd4:	463c      	mov	r4, r7
 8008dd6:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008dda:	463d      	mov	r5, r7
 8008ddc:	eef0 0a40 	vmov.f32	s1, s0
 8008de0:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008de4:	e795      	b.n	8008d12 <forward_mp_integer_INT8+0xc6>
 8008de6:	683d      	ldr	r5, [r7, #0]
 8008de8:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008dec:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008df0:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008e2c <forward_mp_integer_INT8+0x1e0>
 8008df4:	edd5 0a00 	vldr	s1, [r5]
 8008df8:	e788      	b.n	8008d0c <forward_mp_integer_INT8+0xc0>
 8008dfa:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8008dfe:	4635      	mov	r5, r6
 8008e00:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8008e2c <forward_mp_integer_INT8+0x1e0>
 8008e04:	f994 4000 	ldrsb.w	r4, [r4]
 8008e08:	e783      	b.n	8008d12 <forward_mp_integer_INT8+0xc6>
 8008e0a:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8008e0e:	eddf 0a07 	vldr	s1, [pc, #28]	; 8008e2c <forward_mp_integer_INT8+0x1e0>
 8008e12:	f994 4000 	ldrsb.w	r4, [r4]
 8008e16:	e7aa      	b.n	8008d6e <forward_mp_integer_INT8+0x122>
 8008e18:	464c      	mov	r4, r9
 8008e1a:	eddf 0a04 	vldr	s1, [pc, #16]	; 8008e2c <forward_mp_integer_INT8+0x1e0>
 8008e1e:	464d      	mov	r5, r9
 8008e20:	e777      	b.n	8008d12 <forward_mp_integer_INT8+0xc6>
 8008e22:	2300      	movs	r3, #0
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	deff      	udf	#255	; 0xff
 8008e28:	68d3      	ldr	r3, [r2, #12]
 8008e2a:	deff      	udf	#255	; 0xff
 8008e2c:	00000000 	.word	0x00000000

08008e30 <ai_sum_f32>:
 8008e30:	edd1 7a00 	vldr	s15, [r1]
 8008e34:	ed92 7a00 	vldr	s14, [r2]
 8008e38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e3c:	edc0 7a00 	vstr	s15, [r0]
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop

08008e44 <ai_sum_buffer_INT8>:
 8008e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e48:	b085      	sub	sp, #20
 8008e4a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	ed94 6a00 	vldr	s12, [r4]
 8008e52:	461c      	mov	r4, r3
 8008e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e56:	08a4      	lsrs	r4, r4, #2
 8008e58:	f993 9000 	ldrsb.w	r9, [r3]
 8008e5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e5e:	fa1f f589 	uxth.w	r5, r9
 8008e62:	f993 a000 	ldrsb.w	sl, [r3]
 8008e66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e68:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8008e6c:	fa1f f68a 	uxth.w	r6, sl
 8008e70:	ed93 5a00 	vldr	s10, [r3]
 8008e74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e76:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8008e7a:	edd3 7a00 	vldr	s15, [r3]
 8008e7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e80:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8008e84:	f993 7000 	ldrsb.w	r7, [r3]
 8008e88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e8a:	ee07 7a10 	vmov	s14, r7
 8008e8e:	eec5 5a27 	vdiv.f32	s11, s10, s15
 8008e92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008e96:	bb23      	cbnz	r3, 8008ee2 <ai_sum_buffer_INT8+0x9e>
 8008e98:	eeb4 6a67 	vcmp.f32	s12, s15
 8008e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea0:	f040 811e 	bne.w	80090e0 <ai_sum_buffer_INT8+0x29c>
 8008ea4:	45b9      	cmp	r9, r7
 8008ea6:	f040 811b 	bne.w	80090e0 <ai_sum_buffer_INT8+0x29c>
 8008eaa:	eeb4 5a67 	vcmp.f32	s10, s15
 8008eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb2:	f040 8115 	bne.w	80090e0 <ai_sum_buffer_INT8+0x29c>
 8008eb6:	45ba      	cmp	sl, r7
 8008eb8:	f040 8112 	bne.w	80090e0 <ai_sum_buffer_INT8+0x29c>
 8008ebc:	9b00      	ldr	r3, [sp, #0]
 8008ebe:	b16b      	cbz	r3, 8008edc <ai_sum_buffer_INT8+0x98>
 8008ec0:	440b      	add	r3, r1
 8008ec2:	461d      	mov	r5, r3
 8008ec4:	f911 3b01 	ldrsb.w	r3, [r1], #1
 8008ec8:	f912 4b01 	ldrsb.w	r4, [r2], #1
 8008ecc:	4423      	add	r3, r4
 8008ece:	1bdb      	subs	r3, r3, r7
 8008ed0:	f303 0307 	ssat	r3, #8, r3
 8008ed4:	42a9      	cmp	r1, r5
 8008ed6:	f800 3b01 	strb.w	r3, [r0], #1
 8008eda:	d1f3      	bne.n	8008ec4 <ai_sum_buffer_INT8+0x80>
 8008edc:	b005      	add	sp, #20
 8008ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	f000 8240 	beq.w	8009368 <ai_sum_buffer_INT8+0x524>
 8008ee8:	f992 3000 	ldrsb.w	r3, [r2]
 8008eec:	eba3 030a 	sub.w	r3, r3, sl
 8008ef0:	ee07 3a90 	vmov	s15, r3
 8008ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ef8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008efc:	2c00      	cmp	r4, #0
 8008efe:	f000 832c 	beq.w	800955a <ai_sum_buffer_INT8+0x716>
 8008f02:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8008f06:	00a7      	lsls	r7, r4, #2
 8008f08:	ed9f 6a74 	vldr	s12, [pc, #464]	; 80090dc <ai_sum_buffer_INT8+0x298>
 8008f0c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8008f10:	4606      	mov	r6, r0
 8008f12:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f16:	fa2f f28c 	sxtb16	r2, ip
 8008f1a:	ea4f 2c3c 	mov.w	ip, ip, ror #8
 8008f1e:	fa2f fc8c 	sxtb16	ip, ip
 8008f22:	fadc fc05 	ssub16	ip, ip, r5
 8008f26:	fad2 f205 	ssub16	r2, r2, r5
 8008f2a:	b213      	sxth	r3, r2
 8008f2c:	eef0 4a47 	vmov.f32	s9, s14
 8008f30:	ee05 3a10 	vmov	s10, r3
 8008f34:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8008f38:	eee5 4a26 	vfma.f32	s9, s10, s13
 8008f3c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8008f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f44:	fe75 7a86 	vselgt.f32	s15, s11, s12
 8008f48:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8008f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f50:	ee17 8a90 	vmov	r8, s15
 8008f54:	f308 0807 	ssat	r8, #8, r8
 8008f58:	1412      	asrs	r2, r2, #16
 8008f5a:	eeb0 5a47 	vmov.f32	s10, s14
 8008f5e:	fa4f f888 	sxtb.w	r8, r8
 8008f62:	ee07 2a90 	vmov	s15, r2
 8008f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f6a:	eea7 5aa6 	vfma.f32	s10, s15, s13
 8008f6e:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8008f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f76:	fe75 7a86 	vselgt.f32	s15, s11, s12
 8008f7a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8008f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f82:	ee17 3a90 	vmov	r3, s15
 8008f86:	f303 0307 	ssat	r3, #8, r3
 8008f8a:	b25a      	sxtb	r2, r3
 8008f8c:	eef0 4a47 	vmov.f32	s9, s14
 8008f90:	fa0f f38c 	sxth.w	r3, ip
 8008f94:	ee05 3a10 	vmov	s10, r3
 8008f98:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8008f9c:	eee5 4a26 	vfma.f32	s9, s10, s13
 8008fa0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8008fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa8:	fe75 7a86 	vselgt.f32	s15, s11, s12
 8008fac:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8008fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fb4:	ee17 ea90 	vmov	lr, s15
 8008fb8:	f30e 0e07 	ssat	lr, #8, lr
 8008fbc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8008fc0:	eeb0 5a47 	vmov.f32	s10, s14
 8008fc4:	fa4f fe8e 	sxtb.w	lr, lr
 8008fc8:	ee07 ca90 	vmov	s15, ip
 8008fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fd0:	eea7 5aa6 	vfma.f32	s10, s15, s13
 8008fd4:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8008fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fdc:	fe75 7a86 	vselgt.f32	s15, s11, s12
 8008fe0:	ee77 7a85 	vadd.f32	s15, s15, s10
 8008fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fe8:	ee17 3a90 	vmov	r3, s15
 8008fec:	f303 0c07 	ssat	ip, #8, r3
 8008ff0:	0413      	lsls	r3, r2, #16
 8008ff2:	42a1      	cmp	r1, r4
 8008ff4:	fa5f f888 	uxtb.w	r8, r8
 8008ff8:	ea4f 220e 	mov.w	r2, lr, lsl #8
 8008ffc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009000:	b292      	uxth	r2, r2
 8009002:	ea43 0308 	orr.w	r3, r3, r8
 8009006:	ea43 0302 	orr.w	r3, r3, r2
 800900a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 800900e:	f846 3b04 	str.w	r3, [r6], #4
 8009012:	f47f af7e 	bne.w	8008f12 <ai_sum_buffer_INT8+0xce>
 8009016:	4438      	add	r0, r7
 8009018:	9b00      	ldr	r3, [sp, #0]
 800901a:	f013 0303 	ands.w	r3, r3, #3
 800901e:	f43f af5d 	beq.w	8008edc <ai_sum_buffer_INT8+0x98>
 8009022:	f994 2000 	ldrsb.w	r2, [r4]
 8009026:	eef0 4a47 	vmov.f32	s9, s14
 800902a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800902e:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 80090dc <ai_sum_buffer_INT8+0x298>
 8009032:	eba2 0209 	sub.w	r2, r2, r9
 8009036:	ee07 2a90 	vmov	s15, r2
 800903a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800903e:	eee5 4aa6 	vfma.f32	s9, s11, s13
 8009042:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8009046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800904a:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800904e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8009052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009056:	ee17 2a90 	vmov	r2, s15
 800905a:	f302 0207 	ssat	r2, #8, r2
 800905e:	3b01      	subs	r3, #1
 8009060:	7002      	strb	r2, [r0, #0]
 8009062:	f43f af3b 	beq.w	8008edc <ai_sum_buffer_INT8+0x98>
 8009066:	f994 2001 	ldrsb.w	r2, [r4, #1]
 800906a:	eef0 4a47 	vmov.f32	s9, s14
 800906e:	eba2 0209 	sub.w	r2, r2, r9
 8009072:	ee07 2a90 	vmov	s15, r2
 8009076:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800907a:	eee5 4aa6 	vfma.f32	s9, s11, s13
 800907e:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8009082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009086:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800908a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800908e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009092:	ee17 2a90 	vmov	r2, s15
 8009096:	f302 0207 	ssat	r2, #8, r2
 800909a:	2b01      	cmp	r3, #1
 800909c:	7042      	strb	r2, [r0, #1]
 800909e:	f43f af1d 	beq.w	8008edc <ai_sum_buffer_INT8+0x98>
 80090a2:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80090a6:	eba3 0309 	sub.w	r3, r3, r9
 80090aa:	ee07 3a90 	vmov	s15, r3
 80090ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090b2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80090b6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80090ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090be:	fe36 6a05 	vselgt.f32	s12, s12, s10
 80090c2:	ee36 7a07 	vadd.f32	s14, s12, s14
 80090c6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80090ca:	ee17 3a10 	vmov	r3, s14
 80090ce:	f303 0307 	ssat	r3, #8, r3
 80090d2:	7083      	strb	r3, [r0, #2]
 80090d4:	b005      	add	sp, #20
 80090d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090da:	bf00      	nop
 80090dc:	befffffc 	.word	0xbefffffc
 80090e0:	2c00      	cmp	r4, #0
 80090e2:	f000 8238 	beq.w	8009556 <ai_sum_buffer_INT8+0x712>
 80090e6:	00a3      	lsls	r3, r4, #2
 80090e8:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 80090ec:	ed1f 5a05 	vldr	s10, [pc, #-20]	; 80090dc <ai_sum_buffer_INT8+0x298>
 80090f0:	4680      	mov	r8, r0
 80090f2:	9301      	str	r3, [sp, #4]
 80090f4:	eb01 0384 	add.w	r3, r1, r4, lsl #2
 80090f8:	4617      	mov	r7, r2
 80090fa:	f8cd 9008 	str.w	r9, [sp, #8]
 80090fe:	469b      	mov	fp, r3
 8009100:	9303      	str	r3, [sp, #12]
 8009102:	f851 cb04 	ldr.w	ip, [r1], #4
 8009106:	f857 3b04 	ldr.w	r3, [r7], #4
 800910a:	fa2f f48c 	sxtb16	r4, ip
 800910e:	ea4f 2933 	mov.w	r9, r3, ror #8
 8009112:	ea4f 2c3c 	mov.w	ip, ip, ror #8
 8009116:	fa2f f989 	sxtb16	r9, r9
 800911a:	fa2f fc8c 	sxtb16	ip, ip
 800911e:	fa2f f383 	sxtb16	r3, r3
 8009122:	fadc fc05 	ssub16	ip, ip, r5
 8009126:	fad4 f405 	ssub16	r4, r4, r5
 800912a:	fad9 f906 	ssub16	r9, r9, r6
 800912e:	fad3 f306 	ssub16	r3, r3, r6
 8009132:	fa0f fe83 	sxth.w	lr, r3
 8009136:	ee07 ea90 	vmov	s15, lr
 800913a:	fa0f fe84 	sxth.w	lr, r4
 800913e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009142:	ee06 ea10 	vmov	s12, lr
 8009146:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800914a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800914e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009152:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009156:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800915a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800915e:	fe34 6a85 	vselgt.f32	s12, s9, s10
 8009162:	ee76 7a27 	vadd.f32	s15, s12, s15
 8009166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800916a:	ee17 ea90 	vmov	lr, s15
 800916e:	f30e 0e07 	ssat	lr, #8, lr
 8009172:	141b      	asrs	r3, r3, #16
 8009174:	1424      	asrs	r4, r4, #16
 8009176:	ee07 3a90 	vmov	s15, r3
 800917a:	fa4f fe8e 	sxtb.w	lr, lr
 800917e:	ee06 4a10 	vmov	s12, r4
 8009182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009186:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800918a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800918e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009196:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800919a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800919e:	fe34 6a85 	vselgt.f32	s12, s9, s10
 80091a2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80091a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091aa:	ee17 3a90 	vmov	r3, s15
 80091ae:	f303 0307 	ssat	r3, #8, r3
 80091b2:	fa0f f489 	sxth.w	r4, r9
 80091b6:	b25b      	sxtb	r3, r3
 80091b8:	ee07 4a90 	vmov	s15, r4
 80091bc:	fa0f f48c 	sxth.w	r4, ip
 80091c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091c4:	ee06 4a10 	vmov	s12, r4
 80091c8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80091cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80091d0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80091d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e0:	fe34 6a85 	vselgt.f32	s12, s9, s10
 80091e4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80091e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091ec:	ee17 4a90 	vmov	r4, s15
 80091f0:	f304 0407 	ssat	r4, #8, r4
 80091f4:	ea4f 4929 	mov.w	r9, r9, asr #16
 80091f8:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 80091fc:	ee07 9a90 	vmov	s15, r9
 8009200:	b264      	sxtb	r4, r4
 8009202:	ee06 ca10 	vmov	s12, ip
 8009206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800920a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800920e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009212:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009216:	ee77 7a87 	vadd.f32	s15, s15, s14
 800921a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800921e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009222:	fe34 6a85 	vselgt.f32	s12, s9, s10
 8009226:	ee76 7a27 	vadd.f32	s15, s12, s15
 800922a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800922e:	ee17 ca90 	vmov	ip, s15
 8009232:	f30c 0c07 	ssat	ip, #8, ip
 8009236:	041b      	lsls	r3, r3, #16
 8009238:	4559      	cmp	r1, fp
 800923a:	fa5f fe8e 	uxtb.w	lr, lr
 800923e:	ea4f 2404 	mov.w	r4, r4, lsl #8
 8009242:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009246:	b2a4      	uxth	r4, r4
 8009248:	ea43 0e0e 	orr.w	lr, r3, lr
 800924c:	ea4e 0e04 	orr.w	lr, lr, r4
 8009250:	ea4e 6e0c 	orr.w	lr, lr, ip, lsl #24
 8009254:	f848 eb04 	str.w	lr, [r8], #4
 8009258:	f47f af53 	bne.w	8009102 <ai_sum_buffer_INT8+0x2be>
 800925c:	e9dd 3901 	ldrd	r3, r9, [sp, #4]
 8009260:	441a      	add	r2, r3
 8009262:	4418      	add	r0, r3
 8009264:	9b00      	ldr	r3, [sp, #0]
 8009266:	f013 0303 	ands.w	r3, r3, #3
 800926a:	f43f ae37 	beq.w	8008edc <ai_sum_buffer_INT8+0x98>
 800926e:	f992 1000 	ldrsb.w	r1, [r2]
 8009272:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8009276:	9c03      	ldr	r4, [sp, #12]
 8009278:	eba1 010a 	sub.w	r1, r1, sl
 800927c:	ed5f 4a69 	vldr	s9, [pc, #-420]	; 80090dc <ai_sum_buffer_INT8+0x298>
 8009280:	ee07 1a90 	vmov	s15, r1
 8009284:	f994 1000 	ldrsb.w	r1, [r4]
 8009288:	eba1 0109 	sub.w	r1, r1, r9
 800928c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009290:	ee06 1a10 	vmov	s12, r1
 8009294:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009298:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800929c:	eee6 7a86 	vfma.f32	s15, s13, s12
 80092a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ac:	fe35 6a24 	vselgt.f32	s12, s10, s9
 80092b0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80092b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092b8:	ee17 1a90 	vmov	r1, s15
 80092bc:	f301 0107 	ssat	r1, #8, r1
 80092c0:	3b01      	subs	r3, #1
 80092c2:	7001      	strb	r1, [r0, #0]
 80092c4:	f43f ae0a 	beq.w	8008edc <ai_sum_buffer_INT8+0x98>
 80092c8:	f992 1001 	ldrsb.w	r1, [r2, #1]
 80092cc:	eba1 010a 	sub.w	r1, r1, sl
 80092d0:	ee07 1a90 	vmov	s15, r1
 80092d4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80092d8:	eba1 0109 	sub.w	r1, r1, r9
 80092dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092e0:	ee06 1a10 	vmov	s12, r1
 80092e4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80092e8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80092ec:	eee6 7a86 	vfma.f32	s15, s13, s12
 80092f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092fc:	fe35 6a24 	vselgt.f32	s12, s10, s9
 8009300:	ee76 7a27 	vadd.f32	s15, s12, s15
 8009304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009308:	ee17 1a90 	vmov	r1, s15
 800930c:	f301 0107 	ssat	r1, #8, r1
 8009310:	2b01      	cmp	r3, #1
 8009312:	7041      	strb	r1, [r0, #1]
 8009314:	f43f ade2 	beq.w	8008edc <ai_sum_buffer_INT8+0x98>
 8009318:	f992 3002 	ldrsb.w	r3, [r2, #2]
 800931c:	f994 2002 	ldrsb.w	r2, [r4, #2]
 8009320:	eba3 030a 	sub.w	r3, r3, sl
 8009324:	eba2 0209 	sub.w	r2, r2, r9
 8009328:	ee07 3a90 	vmov	s15, r3
 800932c:	ee06 2a10 	vmov	s12, r2
 8009330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009334:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009338:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800933c:	eee6 5a26 	vfma.f32	s11, s12, s13
 8009340:	ee35 7a87 	vadd.f32	s14, s11, s14
 8009344:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934c:	fe35 5a24 	vselgt.f32	s10, s10, s9
 8009350:	ee35 7a07 	vadd.f32	s14, s10, s14
 8009354:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8009358:	ee17 3a10 	vmov	r3, s14
 800935c:	f303 0307 	ssat	r3, #8, r3
 8009360:	7083      	strb	r3, [r0, #2]
 8009362:	b005      	add	sp, #20
 8009364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009368:	f991 3000 	ldrsb.w	r3, [r1]
 800936c:	eba3 0309 	sub.w	r3, r3, r9
 8009370:	ee07 3a90 	vmov	s15, r3
 8009374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009378:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800937c:	2c00      	cmp	r4, #0
 800937e:	f000 80ee 	beq.w	800955e <ai_sum_buffer_INT8+0x71a>
 8009382:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009386:	00a7      	lsls	r7, r4, #2
 8009388:	ed5f 6aac 	vldr	s13, [pc, #-688]	; 80090dc <ai_sum_buffer_INT8+0x298>
 800938c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009390:	4605      	mov	r5, r0
 8009392:	f852 cb04 	ldr.w	ip, [r2], #4
 8009396:	fa2f f18c 	sxtb16	r1, ip
 800939a:	ea4f 2c3c 	mov.w	ip, ip, ror #8
 800939e:	fa2f fc8c 	sxtb16	ip, ip
 80093a2:	fadc fc06 	ssub16	ip, ip, r6
 80093a6:	fad1 f106 	ssub16	r1, r1, r6
 80093aa:	b20b      	sxth	r3, r1
 80093ac:	eef0 4a47 	vmov.f32	s9, s14
 80093b0:	ee05 3a10 	vmov	s10, r3
 80093b4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80093b8:	eee5 4a25 	vfma.f32	s9, s10, s11
 80093bc:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80093c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093c4:	fe76 7a26 	vselgt.f32	s15, s12, s13
 80093c8:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80093cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093d0:	ee17 8a90 	vmov	r8, s15
 80093d4:	f308 0807 	ssat	r8, #8, r8
 80093d8:	1409      	asrs	r1, r1, #16
 80093da:	eeb0 5a47 	vmov.f32	s10, s14
 80093de:	fa4f f888 	sxtb.w	r8, r8
 80093e2:	ee07 1a90 	vmov	s15, r1
 80093e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093ea:	eea7 5aa5 	vfma.f32	s10, s15, s11
 80093ee:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 80093f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f6:	fe76 7a26 	vselgt.f32	s15, s12, s13
 80093fa:	ee77 7a85 	vadd.f32	s15, s15, s10
 80093fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009402:	ee17 3a90 	vmov	r3, s15
 8009406:	f303 0307 	ssat	r3, #8, r3
 800940a:	b259      	sxtb	r1, r3
 800940c:	eef0 4a47 	vmov.f32	s9, s14
 8009410:	fa0f f38c 	sxth.w	r3, ip
 8009414:	ee05 3a10 	vmov	s10, r3
 8009418:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800941c:	eee5 4a25 	vfma.f32	s9, s10, s11
 8009420:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8009424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009428:	fe76 7a26 	vselgt.f32	s15, s12, s13
 800942c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8009430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009434:	ee17 ea90 	vmov	lr, s15
 8009438:	f30e 0e07 	ssat	lr, #8, lr
 800943c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8009440:	eeb0 5a47 	vmov.f32	s10, s14
 8009444:	fa4f fe8e 	sxtb.w	lr, lr
 8009448:	ee07 ca90 	vmov	s15, ip
 800944c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009450:	eea7 5aa5 	vfma.f32	s10, s15, s11
 8009454:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8009458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800945c:	fe76 7a26 	vselgt.f32	s15, s12, s13
 8009460:	ee77 7a85 	vadd.f32	s15, s15, s10
 8009464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009468:	ee17 3a90 	vmov	r3, s15
 800946c:	f303 0c07 	ssat	ip, #8, r3
 8009470:	040b      	lsls	r3, r1, #16
 8009472:	42a2      	cmp	r2, r4
 8009474:	fa5f f888 	uxtb.w	r8, r8
 8009478:	ea4f 210e 	mov.w	r1, lr, lsl #8
 800947c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009480:	b289      	uxth	r1, r1
 8009482:	ea43 0308 	orr.w	r3, r3, r8
 8009486:	ea43 0301 	orr.w	r3, r3, r1
 800948a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 800948e:	f845 3b04 	str.w	r3, [r5], #4
 8009492:	f47f af7e 	bne.w	8009392 <ai_sum_buffer_INT8+0x54e>
 8009496:	4438      	add	r0, r7
 8009498:	9b00      	ldr	r3, [sp, #0]
 800949a:	f013 0203 	ands.w	r2, r3, #3
 800949e:	f43f ad1d 	beq.w	8008edc <ai_sum_buffer_INT8+0x98>
 80094a2:	f994 3000 	ldrsb.w	r3, [r4]
 80094a6:	eef0 4a47 	vmov.f32	s9, s14
 80094aa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80094ae:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8009564 <ai_sum_buffer_INT8+0x720>
 80094b2:	eba3 030a 	sub.w	r3, r3, sl
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80094be:	eee5 4a86 	vfma.f32	s9, s11, s12
 80094c2:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80094c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ca:	fe76 7a85 	vselgt.f32	s15, s13, s10
 80094ce:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80094d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094d6:	ee17 3a90 	vmov	r3, s15
 80094da:	f303 0307 	ssat	r3, #8, r3
 80094de:	3a01      	subs	r2, #1
 80094e0:	7003      	strb	r3, [r0, #0]
 80094e2:	f43f acfb 	beq.w	8008edc <ai_sum_buffer_INT8+0x98>
 80094e6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80094ea:	eef0 4a47 	vmov.f32	s9, s14
 80094ee:	eba3 030a 	sub.w	r3, r3, sl
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80094fa:	eee5 4a86 	vfma.f32	s9, s11, s12
 80094fe:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8009502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009506:	fe76 7a85 	vselgt.f32	s15, s13, s10
 800950a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800950e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009512:	ee17 3a90 	vmov	r3, s15
 8009516:	f303 0307 	ssat	r3, #8, r3
 800951a:	2a01      	cmp	r2, #1
 800951c:	7043      	strb	r3, [r0, #1]
 800951e:	f43f acdd 	beq.w	8008edc <ai_sum_buffer_INT8+0x98>
 8009522:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8009526:	eba3 030a 	sub.w	r3, r3, sl
 800952a:	ee07 3a90 	vmov	s15, r3
 800952e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009532:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009536:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800953a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953e:	fe76 6a85 	vselgt.f32	s13, s13, s10
 8009542:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009546:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800954a:	ee17 3a10 	vmov	r3, s14
 800954e:	f303 0307 	ssat	r3, #8, r3
 8009552:	7083      	strb	r3, [r0, #2]
 8009554:	e4c2      	b.n	8008edc <ai_sum_buffer_INT8+0x98>
 8009556:	9103      	str	r1, [sp, #12]
 8009558:	e684      	b.n	8009264 <ai_sum_buffer_INT8+0x420>
 800955a:	460c      	mov	r4, r1
 800955c:	e55c      	b.n	8009018 <ai_sum_buffer_INT8+0x1d4>
 800955e:	4614      	mov	r4, r2
 8009560:	e79a      	b.n	8009498 <ai_sum_buffer_INT8+0x654>
 8009562:	bf00      	nop
 8009564:	befffffc 	.word	0xbefffffc

08009568 <align_factor>:
 8009568:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800956c:	4602      	mov	r2, r0
 800956e:	b508      	push	{r3, lr}
 8009570:	eeb4 0a67 	vcmp.f32	s0, s15
 8009574:	2300      	movs	r3, #0
 8009576:	8003      	strh	r3, [r0, #0]
 8009578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957c:	d524      	bpl.n	80095c8 <align_factor+0x60>
 800957e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009586:	dd1f      	ble.n	80095c8 <align_factor+0x60>
 8009588:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800958c:	2301      	movs	r3, #1
 800958e:	e005      	b.n	800959c <align_factor+0x34>
 8009590:	8013      	strh	r3, [r2, #0]
 8009592:	b28b      	uxth	r3, r1
 8009594:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009598:	2b21      	cmp	r3, #33	; 0x21
 800959a:	d02b      	beq.n	80095f4 <align_factor+0x8c>
 800959c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80095a0:	1c59      	adds	r1, r3, #1
 80095a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a6:	d4f3      	bmi.n	8009590 <align_factor+0x28>
 80095a8:	eddf 7a17 	vldr	s15, [pc, #92]	; 8009608 <align_factor+0xa0>
 80095ac:	ee60 7a27 	vmul.f32	s15, s0, s15
 80095b0:	ee17 0a90 	vmov	r0, s15
 80095b4:	f7f6 ff0c 	bl	80003d0 <__aeabi_f2lz>
 80095b8:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 80095bc:	d003      	beq.n	80095c6 <align_factor+0x5e>
 80095be:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80095c2:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 80095c6:	bd08      	pop	{r3, pc}
 80095c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80095cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80095d4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80095d8:	e005      	b.n	80095e6 <align_factor+0x7e>
 80095da:	8013      	strh	r3, [r2, #0]
 80095dc:	b28b      	uxth	r3, r1
 80095de:	ee20 0a07 	vmul.f32	s0, s0, s14
 80095e2:	4283      	cmp	r3, r0
 80095e4:	d00a      	beq.n	80095fc <align_factor+0x94>
 80095e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80095ea:	1e59      	subs	r1, r3, #1
 80095ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f0:	dcf3      	bgt.n	80095da <align_factor+0x72>
 80095f2:	e7d9      	b.n	80095a8 <align_factor+0x40>
 80095f4:	2300      	movs	r3, #0
 80095f6:	4618      	mov	r0, r3
 80095f8:	8013      	strh	r3, [r2, #0]
 80095fa:	bd08      	pop	{r3, pc}
 80095fc:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 8009600:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009604:	8013      	strh	r3, [r2, #0]
 8009606:	e7cf      	b.n	80095a8 <align_factor+0x40>
 8009608:	4f000000 	.word	0x4f000000

0800960c <st_sssa8_conv_dw_Wadapt>:
 800960c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009610:	088c      	lsrs	r4, r1, #2
 8009612:	b089      	sub	sp, #36	; 0x24
 8009614:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009616:	9007      	str	r0, [sp, #28]
 8009618:	9404      	str	r4, [sp, #16]
 800961a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800961e:	d055      	beq.n	80096cc <st_sssa8_conv_dw_Wadapt+0xc0>
 8009620:	fb03 f902 	mul.w	r9, r3, r2
 8009624:	461f      	mov	r7, r3
 8009626:	4616      	mov	r6, r2
 8009628:	1e62      	subs	r2, r4, #1
 800962a:	f3c9 094f 	ubfx	r9, r9, #1, #16
 800962e:	f100 0a04 	add.w	sl, r0, #4
 8009632:	b292      	uxth	r2, r2
 8009634:	4680      	mov	r8, r0
 8009636:	fb16 fb07 	smulbb	fp, r6, r7
 800963a:	f109 33ff 	add.w	r3, r9, #4294967295
 800963e:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 8009642:	b29b      	uxth	r3, r3
 8009644:	f00b 0401 	and.w	r4, fp, #1
 8009648:	004f      	lsls	r7, r1, #1
 800964a:	011a      	lsls	r2, r3, #4
 800964c:	9401      	str	r4, [sp, #4]
 800964e:	3220      	adds	r2, #32
 8009650:	9203      	str	r2, [sp, #12]
 8009652:	1c5a      	adds	r2, r3, #1
 8009654:	fb03 1301 	mla	r3, r3, r1, r1
 8009658:	0112      	lsls	r2, r2, #4
 800965a:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 800965e:	9202      	str	r2, [sp, #8]
 8009660:	4644      	mov	r4, r8
 8009662:	f1b9 0f00 	cmp.w	r9, #0
 8009666:	d06d      	beq.n	8009744 <st_sssa8_conv_dw_Wadapt+0x138>
 8009668:	9b03      	ldr	r3, [sp, #12]
 800966a:	f105 0210 	add.w	r2, r5, #16
 800966e:	eb05 0e03 	add.w	lr, r5, r3
 8009672:	3210      	adds	r2, #16
 8009674:	5866      	ldr	r6, [r4, r1]
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	443c      	add	r4, r7
 800967a:	4572      	cmp	r2, lr
 800967c:	eac6 4023 	pkhtb	r0, r6, r3, asr #16
 8009680:	eac3 4306 	pkhbt	r3, r3, r6, lsl #16
 8009684:	ea4f 2630 	mov.w	r6, r0, ror #8
 8009688:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800968c:	fa2f f080 	sxtb16	r0, r0
 8009690:	fa2f f383 	sxtb16	r3, r3
 8009694:	fa2f f686 	sxtb16	r6, r6
 8009698:	f842 3c20 	str.w	r3, [r2, #-32]
 800969c:	f842 0c18 	str.w	r0, [r2, #-24]
 80096a0:	fa2f f38c 	sxtb16	r3, ip
 80096a4:	f842 6c14 	str.w	r6, [r2, #-20]
 80096a8:	f842 3c1c 	str.w	r3, [r2, #-28]
 80096ac:	d1e1      	bne.n	8009672 <st_sssa8_conv_dw_Wadapt+0x66>
 80096ae:	9b02      	ldr	r3, [sp, #8]
 80096b0:	eb0b 0408 	add.w	r4, fp, r8
 80096b4:	18ea      	adds	r2, r5, r3
 80096b6:	9b01      	ldr	r3, [sp, #4]
 80096b8:	bb6b      	cbnz	r3, 8009716 <st_sssa8_conv_dw_Wadapt+0x10a>
 80096ba:	4615      	mov	r5, r2
 80096bc:	f108 0804 	add.w	r8, r8, #4
 80096c0:	45d0      	cmp	r8, sl
 80096c2:	d1cd      	bne.n	8009660 <st_sssa8_conv_dw_Wadapt+0x54>
 80096c4:	9b04      	ldr	r3, [sp, #16]
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	9304      	str	r3, [sp, #16]
 80096cc:	f011 0303 	ands.w	r3, r1, #3
 80096d0:	d035      	beq.n	800973e <st_sssa8_conv_dw_Wadapt+0x132>
 80096d2:	e9dd 2005 	ldrd	r2, r0, [sp, #20]
 80096d6:	fb12 f000 	smulbb	r0, r2, r0
 80096da:	b280      	uxth	r0, r0
 80096dc:	b378      	cbz	r0, 800973e <st_sssa8_conv_dw_Wadapt+0x132>
 80096de:	2901      	cmp	r1, #1
 80096e0:	d132      	bne.n	8009748 <st_sssa8_conv_dw_Wadapt+0x13c>
 80096e2:	0047      	lsls	r7, r0, #1
 80096e4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80096e8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 80096ec:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80096f0:	4664      	mov	r4, ip
 80096f2:	4601      	mov	r1, r0
 80096f4:	1e63      	subs	r3, r4, #1
 80096f6:	1c62      	adds	r2, r4, #1
 80096f8:	4626      	mov	r6, r4
 80096fa:	4473      	add	r3, lr
 80096fc:	b294      	uxth	r4, r2
 80096fe:	f913 2f01 	ldrsb.w	r2, [r3, #1]!
 8009702:	f825 2b02 	strh.w	r2, [r5], #2
 8009706:	428d      	cmp	r5, r1
 8009708:	d1f9      	bne.n	80096fe <st_sssa8_conv_dw_Wadapt+0xf2>
 800970a:	4566      	cmp	r6, ip
 800970c:	4605      	mov	r5, r0
 800970e:	4439      	add	r1, r7
 8009710:	d015      	beq.n	800973e <st_sssa8_conv_dw_Wadapt+0x132>
 8009712:	4438      	add	r0, r7
 8009714:	e7ee      	b.n	80096f4 <st_sssa8_conv_dw_Wadapt+0xe8>
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	f102 0508 	add.w	r5, r2, #8
 800971c:	eac3 2003 	pkhbt	r0, r3, r3, lsl #8
 8009720:	eac3 6323 	pkhtb	r3, r3, r3, asr #24
 8009724:	fa2f f080 	sxtb16	r0, r0
 8009728:	ea4f 4333 	mov.w	r3, r3, ror #16
 800972c:	8010      	strh	r0, [r2, #0]
 800972e:	fa2f f383 	sxtb16	r3, r3
 8009732:	0c00      	lsrs	r0, r0, #16
 8009734:	8093      	strh	r3, [r2, #4]
 8009736:	0c1b      	lsrs	r3, r3, #16
 8009738:	8050      	strh	r0, [r2, #2]
 800973a:	80d3      	strh	r3, [r2, #6]
 800973c:	e7be      	b.n	80096bc <st_sssa8_conv_dw_Wadapt+0xb0>
 800973e:	b009      	add	sp, #36	; 0x24
 8009740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009744:	462a      	mov	r2, r5
 8009746:	e7b6      	b.n	80096b6 <st_sssa8_conv_dw_Wadapt+0xaa>
 8009748:	9a04      	ldr	r2, [sp, #16]
 800974a:	eb05 0740 	add.w	r7, r5, r0, lsl #1
 800974e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8009752:	0040      	lsls	r0, r0, #1
 8009754:	4413      	add	r3, r2
 8009756:	463c      	mov	r4, r7
 8009758:	4694      	mov	ip, r2
 800975a:	b29e      	uxth	r6, r3
 800975c:	462b      	mov	r3, r5
 800975e:	f10c 0501 	add.w	r5, ip, #1
 8009762:	eb0e 020c 	add.w	r2, lr, ip
 8009766:	fa1f fc85 	uxth.w	ip, r5
 800976a:	f992 5000 	ldrsb.w	r5, [r2]
 800976e:	440a      	add	r2, r1
 8009770:	f823 5b02 	strh.w	r5, [r3], #2
 8009774:	42a3      	cmp	r3, r4
 8009776:	d1f8      	bne.n	800976a <st_sssa8_conv_dw_Wadapt+0x15e>
 8009778:	45b4      	cmp	ip, r6
 800977a:	4404      	add	r4, r0
 800977c:	463b      	mov	r3, r7
 800977e:	d0de      	beq.n	800973e <st_sssa8_conv_dw_Wadapt+0x132>
 8009780:	4407      	add	r7, r0
 8009782:	e7ec      	b.n	800975e <st_sssa8_conv_dw_Wadapt+0x152>

08009784 <st_sssa8_convolve_dw>:
 8009784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009788:	ed2d 8b02 	vpush	{d8}
 800978c:	b0db      	sub	sp, #364	; 0x16c
 800978e:	9315      	str	r3, [sp, #84]	; 0x54
 8009790:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 8009792:	912d      	str	r1, [sp, #180]	; 0xb4
 8009794:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009798:	9b6f      	ldr	r3, [sp, #444]	; 0x1bc
 800979a:	9211      	str	r2, [sp, #68]	; 0x44
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f8bd 21a0 	ldrh.w	r2, [sp, #416]	; 0x1a0
 80097a2:	9308      	str	r3, [sp, #32]
 80097a4:	1e4b      	subs	r3, r1, #1
 80097a6:	922b      	str	r2, [sp, #172]	; 0xac
 80097a8:	f8bd 21a4 	ldrh.w	r2, [sp, #420]	; 0x1a4
 80097ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80097ae:	9231      	str	r2, [sp, #196]	; 0xc4
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	f8bd 31a8 	ldrh.w	r3, [sp, #424]	; 0x1a8
 80097b6:	9017      	str	r0, [sp, #92]	; 0x5c
 80097b8:	2a14      	cmp	r2, #20
 80097ba:	932c      	str	r3, [sp, #176]	; 0xb0
 80097bc:	f8bd 31ac 	ldrh.w	r3, [sp, #428]	; 0x1ac
 80097c0:	f8bd 01d0 	ldrh.w	r0, [sp, #464]	; 0x1d0
 80097c4:	9332      	str	r3, [sp, #200]	; 0xc8
 80097c6:	f8bd 31b0 	ldrh.w	r3, [sp, #432]	; 0x1b0
 80097ca:	9023      	str	r0, [sp, #140]	; 0x8c
 80097cc:	931f      	str	r3, [sp, #124]	; 0x7c
 80097ce:	f8bd 31b4 	ldrh.w	r3, [sp, #436]	; 0x1b4
 80097d2:	f8bd 01d4 	ldrh.w	r0, [sp, #468]	; 0x1d4
 80097d6:	9333      	str	r3, [sp, #204]	; 0xcc
 80097d8:	f99d 31c4 	ldrsb.w	r3, [sp, #452]	; 0x1c4
 80097dc:	f8bd b19c 	ldrh.w	fp, [sp, #412]	; 0x19c
 80097e0:	9316      	str	r3, [sp, #88]	; 0x58
 80097e2:	9105      	str	r1, [sp, #20]
 80097e4:	f99d 31c8 	ldrsb.w	r3, [sp, #456]	; 0x1c8
 80097e8:	9034      	str	r0, [sp, #208]	; 0xd0
 80097ea:	f200 84cb 	bhi.w	800a184 <st_sssa8_convolve_dw+0xa00>
 80097ee:	2201      	movs	r2, #1
 80097f0:	408b      	lsls	r3, r1
 80097f2:	408a      	lsls	r2, r1
 80097f4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80097f8:	9306      	str	r3, [sp, #24]
 80097fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80097fc:	a950      	add	r1, sp, #320	; 0x140
 80097fe:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8009800:	a846      	add	r0, sp, #280	; 0x118
 8009802:	933c      	str	r3, [sp, #240]	; 0xf0
 8009804:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009806:	9243      	str	r2, [sp, #268]	; 0x10c
 8009808:	933b      	str	r3, [sp, #236]	; 0xec
 800980a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800980c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800980e:	9252      	str	r2, [sp, #328]	; 0x148
 8009810:	9340      	str	r3, [sp, #256]	; 0x100
 8009812:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8009814:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8009816:	9253      	str	r2, [sp, #332]	; 0x14c
 8009818:	933f      	str	r3, [sp, #252]	; 0xfc
 800981a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800981c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800981e:	9254      	str	r2, [sp, #336]	; 0x150
 8009820:	9344      	str	r3, [sp, #272]	; 0x110
 8009822:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8009824:	fb03 f303 	mul.w	r3, r3, r3
 8009828:	9255      	str	r2, [sp, #340]	; 0x154
 800982a:	fb0b f303 	mul.w	r3, fp, r3
 800982e:	9a76      	ldr	r2, [sp, #472]	; 0x1d8
 8009830:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8009834:	aa3a      	add	r2, sp, #232	; 0xe8
 8009836:	9314      	str	r3, [sp, #80]	; 0x50
 8009838:	ab42      	add	r3, sp, #264	; 0x108
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	ab3e      	add	r3, sp, #248	; 0xf8
 800983e:	f001 ff1f 	bl	800b680 <ai_padding_opt_init>
 8009842:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009844:	fbbb f3f3 	udiv	r3, fp, r3
 8009848:	079a      	lsls	r2, r3, #30
 800984a:	9319      	str	r3, [sp, #100]	; 0x64
 800984c:	f040 8497 	bne.w	800a17e <st_sssa8_convolve_dw+0x9fa>
 8009850:	2204      	movs	r2, #4
 8009852:	109b      	asrs	r3, r3, #2
 8009854:	9219      	str	r2, [sp, #100]	; 0x64
 8009856:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009858:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800985a:	4252      	negs	r2, r2
 800985c:	eac2 4702 	pkhbt	r7, r2, r2, lsl #16
 8009860:	2900      	cmp	r1, #0
 8009862:	f000 81b1 	beq.w	8009bc8 <st_sssa8_convolve_dw+0x444>
 8009866:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009868:	ea4f 069b 	mov.w	r6, fp, lsr #2
 800986c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800986e:	46b8      	mov	r8, r7
 8009870:	fb01 f003 	mul.w	r0, r1, r3
 8009874:	9625      	str	r6, [sp, #148]	; 0x94
 8009876:	902f      	str	r0, [sp, #188]	; 0xbc
 8009878:	9831      	ldr	r0, [sp, #196]	; 0xc4
 800987a:	fb15 f300 	smulbb	r3, r5, r0
 800987e:	fb00 f205 	mul.w	r2, r0, r5
 8009882:	b29c      	uxth	r4, r3
 8009884:	f3c2 004f 	ubfx	r0, r2, #1, #16
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	1e72      	subs	r2, r6, #1
 800988e:	1e61      	subs	r1, r4, #1
 8009890:	900a      	str	r0, [sp, #40]	; 0x28
 8009892:	9424      	str	r4, [sp, #144]	; 0x90
 8009894:	b292      	uxth	r2, r2
 8009896:	b289      	uxth	r1, r1
 8009898:	9c05      	ldr	r4, [sp, #20]
 800989a:	930b      	str	r3, [sp, #44]	; 0x2c
 800989c:	1e43      	subs	r3, r0, #1
 800989e:	1c48      	adds	r0, r1, #1
 80098a0:	1c51      	adds	r1, r2, #1
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	901b      	str	r0, [sp, #108]	; 0x6c
 80098a6:	1ea0      	subs	r0, r4, #2
 80098a8:	2401      	movs	r4, #1
 80098aa:	4084      	lsls	r4, r0
 80098ac:	9412      	str	r4, [sp, #72]	; 0x48
 80098ae:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 80098b0:	4260      	negs	r0, r4
 80098b2:	b284      	uxth	r4, r0
 80098b4:	9430      	str	r4, [sp, #192]	; 0xc0
 80098b6:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80098b8:	f104 3cff 	add.w	ip, r4, #4294967295
 80098bc:	08a0      	lsrs	r0, r4, #2
 80098be:	f024 0403 	bic.w	r4, r4, #3
 80098c2:	0080      	lsls	r0, r0, #2
 80098c4:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
 80098c8:	9422      	str	r4, [sp, #136]	; 0x88
 80098ca:	9c6e      	ldr	r4, [sp, #440]	; 0x1b8
 80098cc:	9027      	str	r0, [sp, #156]	; 0x9c
 80098ce:	f104 0020 	add.w	r0, r4, #32
 80098d2:	011c      	lsls	r4, r3, #4
 80098d4:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 80098d8:	9429      	str	r4, [sp, #164]	; 0xa4
 80098da:	2400      	movs	r4, #0
 80098dc:	920c      	str	r2, [sp, #48]	; 0x30
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	0112      	lsls	r2, r2, #4
 80098e2:	920e      	str	r2, [sp, #56]	; 0x38
 80098e4:	fb03 b20b 	mla	r2, r3, fp, fp
 80098e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098ea:	fb03 f305 	mul.w	r3, r3, r5
 80098ee:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80098f0:	0052      	lsls	r2, r2, #1
 80098f2:	9337      	str	r3, [sp, #220]	; 0xdc
 80098f4:	f00b 0303 	and.w	r3, fp, #3
 80098f8:	920f      	str	r2, [sp, #60]	; 0x3c
 80098fa:	931e      	str	r3, [sp, #120]	; 0x78
 80098fc:	4663      	mov	r3, ip
 80098fe:	1b5b      	subs	r3, r3, r5
 8009900:	4625      	mov	r5, r4
 8009902:	9326      	str	r3, [sp, #152]	; 0x98
 8009904:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8009908:	9328      	str	r3, [sp, #160]	; 0xa0
 800990a:	008b      	lsls	r3, r1, #2
 800990c:	932a      	str	r3, [sp, #168]	; 0xa8
 800990e:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 8009910:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8009914:	9339      	str	r3, [sp, #228]	; 0xe4
 8009916:	00b3      	lsls	r3, r6, #2
 8009918:	465e      	mov	r6, fp
 800991a:	9338      	str	r3, [sp, #224]	; 0xe0
 800991c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800991e:	0043      	lsls	r3, r0, #1
 8009920:	932e      	str	r3, [sp, #184]	; 0xb8
 8009922:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8009926:	ee08 3a10 	vmov	s16, r3
 800992a:	a846      	add	r0, sp, #280	; 0x118
 800992c:	f001 ff02 	bl	800b734 <ai_padding_opt_phase1>
 8009930:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 8429 	beq.w	800a18a <st_sssa8_convolve_dw+0xa06>
 8009938:	b2a3      	uxth	r3, r4
 800993a:	9336      	str	r3, [sp, #216]	; 0xd8
 800993c:	e9dd 3231 	ldrd	r3, r2, [sp, #196]	; 0xc4
 8009940:	1a9b      	subs	r3, r3, r2
 8009942:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8009944:	fb02 3305 	mla	r3, r2, r5, r3
 8009948:	f9bd 20c0 	ldrsh.w	r2, [sp, #192]	; 0xc0
 800994c:	9310      	str	r3, [sp, #64]	; 0x40
 800994e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8009950:	9220      	str	r2, [sp, #128]	; 0x80
 8009952:	425b      	negs	r3, r3
 8009954:	b29b      	uxth	r3, r3
 8009956:	9318      	str	r3, [sp, #96]	; 0x60
 8009958:	2300      	movs	r3, #0
 800995a:	4619      	mov	r1, r3
 800995c:	9a46      	ldr	r2, [sp, #280]	; 0x118
 800995e:	2a00      	cmp	r2, #0
 8009960:	f000 81fd 	beq.w	8009d5e <st_sssa8_convolve_dw+0x5da>
 8009964:	3a01      	subs	r2, #1
 8009966:	9246      	str	r2, [sp, #280]	; 0x118
 8009968:	2201      	movs	r2, #1
 800996a:	f8ad 213e 	strh.w	r2, [sp, #318]	; 0x13e
 800996e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009970:	2a01      	cmp	r2, #1
 8009972:	f000 8266 	beq.w	8009e42 <st_sssa8_convolve_dw+0x6be>
 8009976:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009978:	2a04      	cmp	r2, #4
 800997a:	f000 8398 	beq.w	800a0ae <st_sssa8_convolve_dw+0x92a>
 800997e:	2a02      	cmp	r2, #2
 8009980:	9820      	ldr	r0, [sp, #128]	; 0x80
 8009982:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009984:	f000 82aa 	beq.w	8009edc <st_sssa8_convolve_dw+0x758>
 8009988:	4282      	cmp	r2, r0
 800998a:	f340 83f3 	ble.w	800a174 <st_sssa8_convolve_dw+0x9f0>
 800998e:	b29b      	uxth	r3, r3
 8009990:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009992:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8009994:	931c      	str	r3, [sp, #112]	; 0x70
 8009996:	fb01 2100 	mla	r1, r1, r0, r2
 800999a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800999c:	1acf      	subs	r7, r1, r3
 800999e:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 80099a2:	42bb      	cmp	r3, r7
 80099a4:	9309      	str	r3, [sp, #36]	; 0x24
 80099a6:	da39      	bge.n	8009a1c <st_sssa8_convolve_dw+0x298>
 80099a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80099aa:	46b3      	mov	fp, r6
 80099ac:	f8cd 80d4 	str.w	r8, [sp, #212]	; 0xd4
 80099b0:	ee18 aa10 	vmov	sl, s16
 80099b4:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 80099b8:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 80099bc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80099be:	9702      	str	r7, [sp, #8]
 80099c0:	9304      	str	r3, [sp, #16]
 80099c2:	9a04      	ldr	r2, [sp, #16]
 80099c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80099c6:	0fd2      	lsrs	r2, r2, #31
 80099c8:	4299      	cmp	r1, r3
 80099ca:	bfd8      	it	le
 80099cc:	f042 0201 	orrle.w	r2, r2, #1
 80099d0:	fb08 f303 	mul.w	r3, r8, r3
 80099d4:	9203      	str	r2, [sp, #12]
 80099d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099d8:	9307      	str	r3, [sp, #28]
 80099da:	4614      	mov	r4, r2
 80099dc:	0fe3      	lsrs	r3, r4, #31
 80099de:	4590      	cmp	r8, r2
 80099e0:	bfd8      	it	le
 80099e2:	f043 0301 	orrle.w	r3, r3, #1
 80099e6:	b91b      	cbnz	r3, 80099f0 <st_sssa8_convolve_dw+0x26c>
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f000 8149 	beq.w	8009c82 <st_sssa8_convolve_dw+0x4fe>
 80099f0:	465a      	mov	r2, fp
 80099f2:	4649      	mov	r1, r9
 80099f4:	4650      	mov	r0, sl
 80099f6:	f001 feb7 	bl	800b768 <st_uint8_fill>
 80099fa:	3401      	adds	r4, #1
 80099fc:	9b02      	ldr	r3, [sp, #8]
 80099fe:	44d9      	add	r9, fp
 8009a00:	b224      	sxth	r4, r4
 8009a02:	429c      	cmp	r4, r3
 8009a04:	4622      	mov	r2, r4
 8009a06:	dbe9      	blt.n	80099dc <st_sssa8_convolve_dw+0x258>
 8009a08:	9b04      	ldr	r3, [sp, #16]
 8009a0a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	b21b      	sxth	r3, r3
 8009a10:	428b      	cmp	r3, r1
 8009a12:	9304      	str	r3, [sp, #16]
 8009a14:	dbd5      	blt.n	80099c2 <st_sssa8_convolve_dw+0x23e>
 8009a16:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
 8009a1a:	465e      	mov	r6, fp
 8009a1c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f000 81d7 	beq.w	8009dd2 <st_sssa8_convolve_dw+0x64e>
 8009a24:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 8009a26:	46b3      	mov	fp, r6
 8009a28:	9d76      	ldr	r5, [sp, #472]	; 0x1d8
 8009a2a:	f103 0e10 	add.w	lr, r3, #16
 8009a2e:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 8009a30:	462f      	mov	r7, r5
 8009a32:	3304      	adds	r3, #4
 8009a34:	f8cd e010 	str.w	lr, [sp, #16]
 8009a38:	f8dd e0a0 	ldr.w	lr, [sp, #160]	; 0xa0
 8009a3c:	9303      	str	r3, [sp, #12]
 8009a3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a40:	9302      	str	r3, [sp, #8]
 8009a42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009a44:	3320      	adds	r3, #32
 8009a46:	930d      	str	r3, [sp, #52]	; 0x34
 8009a48:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 8009a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a4e:	9b05      	ldr	r3, [sp, #20]
 8009a50:	f1c3 0301 	rsb	r3, r3, #1
 8009a54:	931a      	str	r3, [sp, #104]	; 0x68
 8009a56:	9b04      	ldr	r3, [sp, #16]
 8009a58:	9a02      	ldr	r2, [sp, #8]
 8009a5a:	e953 5404 	ldrd	r5, r4, [r3, #-16]
 8009a5e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a64:	b3ab      	cbz	r3, 8009ad2 <st_sssa8_convolve_dw+0x34e>
 8009a66:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8009a68:	f107 0310 	add.w	r3, r7, #16
 8009a6c:	9707      	str	r7, [sp, #28]
 8009a6e:	eb07 0c06 	add.w	ip, r7, r6
 8009a72:	465e      	mov	r6, fp
 8009a74:	f8d2 b000 	ldr.w	fp, [r2]
 8009a78:	f852 9006 	ldr.w	r9, [r2, r6]
 8009a7c:	4472      	add	r2, lr
 8009a7e:	eacb 4a09 	pkhbt	sl, fp, r9, lsl #16
 8009a82:	f853 7c10 	ldr.w	r7, [r3, #-16]
 8009a86:	eac9 492b 	pkhtb	r9, r9, fp, asr #16
 8009a8a:	fa28 fb8a 	sxtab16	fp, r8, sl
 8009a8e:	fb27 550b 	smlad	r5, r7, fp, r5
 8009a92:	ea4f 2a3a 	mov.w	sl, sl, ror #8
 8009a96:	f853 7c0c 	ldr.w	r7, [r3, #-12]
 8009a9a:	fa28 fa8a 	sxtab16	sl, r8, sl
 8009a9e:	fb27 440a 	smlad	r4, r7, sl, r4
 8009aa2:	f853 7c08 	ldr.w	r7, [r3, #-8]
 8009aa6:	fa28 fa89 	sxtab16	sl, r8, r9
 8009aaa:	fb27 000a 	smlad	r0, r7, sl, r0
 8009aae:	ea4f 2939 	mov.w	r9, r9, ror #8
 8009ab2:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8009ab6:	fa28 f989 	sxtab16	r9, r8, r9
 8009aba:	fb27 1109 	smlad	r1, r7, r9, r1
 8009abe:	3310      	adds	r3, #16
 8009ac0:	459c      	cmp	ip, r3
 8009ac2:	d1d7      	bne.n	8009a74 <st_sssa8_convolve_dw+0x2f0>
 8009ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ac6:	46b3      	mov	fp, r6
 8009ac8:	9f07      	ldr	r7, [sp, #28]
 8009aca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009acc:	441f      	add	r7, r3
 8009ace:	9b02      	ldr	r3, [sp, #8]
 8009ad0:	189a      	adds	r2, r3, r2
 8009ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ad4:	b1e3      	cbz	r3, 8009b10 <st_sssa8_convolve_dw+0x38c>
 8009ad6:	6813      	ldr	r3, [r2, #0]
 8009ad8:	3708      	adds	r7, #8
 8009ada:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009adc:	b25a      	sxtb	r2, r3
 8009ade:	f837 cc08 	ldrh.w	ip, [r7, #-8]
 8009ae2:	f837 9c06 	ldrh.w	r9, [r7, #-6]
 8009ae6:	1b92      	subs	r2, r2, r6
 8009ae8:	f837 ac04 	ldrh.w	sl, [r7, #-4]
 8009aec:	fb1c 5502 	smlabb	r5, ip, r2, r5
 8009af0:	f343 2207 	sbfx	r2, r3, #8, #8
 8009af4:	1b92      	subs	r2, r2, r6
 8009af6:	fb19 4402 	smlabb	r4, r9, r2, r4
 8009afa:	f343 4207 	sbfx	r2, r3, #16, #8
 8009afe:	ebc6 6323 	rsb	r3, r6, r3, asr #24
 8009b02:	1b92      	subs	r2, r2, r6
 8009b04:	fb1a 0002 	smlabb	r0, sl, r2, r0
 8009b08:	f837 2c02 	ldrh.w	r2, [r7, #-2]
 8009b0c:	fb12 1103 	smlabb	r1, r2, r3, r1
 8009b10:	9b05      	ldr	r3, [sp, #20]
 8009b12:	2b15      	cmp	r3, #21
 8009b14:	dd5e      	ble.n	8009bd4 <st_sssa8_convolve_dw+0x450>
 8009b16:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8009b18:	9b08      	ldr	r3, [sp, #32]
 8009b1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b1c:	fb55 2503 	smmla	r5, r5, r3, r2
 8009b20:	fb54 2c03 	smmla	ip, r4, r3, r2
 8009b24:	4135      	asrs	r5, r6
 8009b26:	9c06      	ldr	r4, [sp, #24]
 8009b28:	fb50 2003 	smmla	r0, r0, r3, r2
 8009b2c:	4425      	add	r5, r4
 8009b2e:	fb51 2103 	smmla	r1, r1, r3, r2
 8009b32:	f305 0507 	ssat	r5, #8, r5
 8009b36:	9b03      	ldr	r3, [sp, #12]
 8009b38:	fa4c f406 	asr.w	r4, ip, r6
 8009b3c:	9a06      	ldr	r2, [sp, #24]
 8009b3e:	f803 5c04 	strb.w	r5, [r3, #-4]
 8009b42:	18a3      	adds	r3, r4, r2
 8009b44:	f303 0307 	ssat	r3, #8, r3
 8009b48:	9c03      	ldr	r4, [sp, #12]
 8009b4a:	4130      	asrs	r0, r6
 8009b4c:	f804 3c03 	strb.w	r3, [r4, #-3]
 8009b50:	1883      	adds	r3, r0, r2
 8009b52:	f303 0307 	ssat	r3, #8, r3
 8009b56:	4131      	asrs	r1, r6
 8009b58:	f804 3c02 	strb.w	r3, [r4, #-2]
 8009b5c:	188b      	adds	r3, r1, r2
 8009b5e:	f303 0307 	ssat	r3, #8, r3
 8009b62:	4622      	mov	r2, r4
 8009b64:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009b68:	3204      	adds	r2, #4
 8009b6a:	9b04      	ldr	r3, [sp, #16]
 8009b6c:	9203      	str	r2, [sp, #12]
 8009b6e:	3310      	adds	r3, #16
 8009b70:	9a02      	ldr	r2, [sp, #8]
 8009b72:	9304      	str	r3, [sp, #16]
 8009b74:	3204      	adds	r2, #4
 8009b76:	9202      	str	r2, [sp, #8]
 8009b78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	f47f af6b 	bne.w	8009a56 <st_sssa8_convolve_dw+0x2d2>
 8009b80:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 8009b82:	463d      	mov	r5, r7
 8009b84:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8009b86:	465e      	mov	r6, fp
 8009b88:	4413      	add	r3, r2
 8009b8a:	9373      	str	r3, [sp, #460]	; 0x1cc
 8009b8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f040 8201 	bne.w	8009f96 <st_sssa8_convolve_dw+0x812>
 8009b94:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b96:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8009b98:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009b9a:	440a      	add	r2, r1
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	b292      	uxth	r2, r2
 8009ba0:	b21b      	sxth	r3, r3
 8009ba2:	9218      	str	r2, [sp, #96]	; 0x60
 8009ba4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	f73f aed7 	bgt.w	800995c <st_sssa8_convolve_dw+0x1d8>
 8009bae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8009bb0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8009bb2:	9c36      	ldr	r4, [sp, #216]	; 0xd8
 8009bb4:	4413      	add	r3, r2
 8009bb6:	3401      	adds	r4, #1
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	b224      	sxth	r4, r4
 8009bbc:	9330      	str	r3, [sp, #192]	; 0xc0
 8009bbe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8009bc0:	4625      	mov	r5, r4
 8009bc2:	42a3      	cmp	r3, r4
 8009bc4:	f73f aeb1 	bgt.w	800992a <st_sssa8_convolve_dw+0x1a6>
 8009bc8:	2000      	movs	r0, #0
 8009bca:	b05b      	add	sp, #364	; 0x16c
 8009bcc:	ecbd 8b02 	vpop	{d8}
 8009bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	dd23      	ble.n	8009c20 <st_sssa8_convolve_dw+0x49c>
 8009bd8:	9a08      	ldr	r2, [sp, #32]
 8009bda:	006d      	lsls	r5, r5, #1
 8009bdc:	9e06      	ldr	r6, [sp, #24]
 8009bde:	0064      	lsls	r4, r4, #1
 8009be0:	fb55 6502 	smmla	r5, r5, r2, r6
 8009be4:	0040      	lsls	r0, r0, #1
 8009be6:	411d      	asrs	r5, r3
 8009be8:	0049      	lsls	r1, r1, #1
 8009bea:	fb54 6402 	smmla	r4, r4, r2, r6
 8009bee:	fb50 6002 	smmla	r0, r0, r2, r6
 8009bf2:	fb51 6102 	smmla	r1, r1, r2, r6
 8009bf6:	f305 0507 	ssat	r5, #8, r5
 8009bfa:	9a03      	ldr	r2, [sp, #12]
 8009bfc:	411c      	asrs	r4, r3
 8009bfe:	f802 5c04 	strb.w	r5, [r2, #-4]
 8009c02:	f304 0407 	ssat	r4, #8, r4
 8009c06:	4118      	asrs	r0, r3
 8009c08:	f802 4c03 	strb.w	r4, [r2, #-3]
 8009c0c:	f300 0007 	ssat	r0, #8, r0
 8009c10:	4119      	asrs	r1, r3
 8009c12:	f802 0c02 	strb.w	r0, [r2, #-2]
 8009c16:	f301 0107 	ssat	r1, #8, r1
 8009c1a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009c1e:	e7a3      	b.n	8009b68 <st_sssa8_convolve_dw+0x3e4>
 8009c20:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c22:	fa05 f302 	lsl.w	r3, r5, r2
 8009c26:	f303 031f 	ssat	r3, #32, r3
 8009c2a:	9e08      	ldr	r6, [sp, #32]
 8009c2c:	fb53 f316 	smmulr	r3, r3, r6
 8009c30:	4615      	mov	r5, r2
 8009c32:	fa04 f202 	lsl.w	r2, r4, r2
 8009c36:	f302 021f 	ssat	r2, #32, r2
 8009c3a:	fb52 f216 	smmulr	r2, r2, r6
 8009c3e:	40a8      	lsls	r0, r5
 8009c40:	f300 001f 	ssat	r0, #32, r0
 8009c44:	fb50 f016 	smmulr	r0, r0, r6
 8009c48:	40a9      	lsls	r1, r5
 8009c4a:	f301 011f 	ssat	r1, #32, r1
 8009c4e:	fb51 f116 	smmulr	r1, r1, r6
 8009c52:	9c06      	ldr	r4, [sp, #24]
 8009c54:	4423      	add	r3, r4
 8009c56:	f303 0307 	ssat	r3, #8, r3
 8009c5a:	9d03      	ldr	r5, [sp, #12]
 8009c5c:	f805 3c04 	strb.w	r3, [r5, #-4]
 8009c60:	18a3      	adds	r3, r4, r2
 8009c62:	f303 0307 	ssat	r3, #8, r3
 8009c66:	f805 3c03 	strb.w	r3, [r5, #-3]
 8009c6a:	1823      	adds	r3, r4, r0
 8009c6c:	f303 0307 	ssat	r3, #8, r3
 8009c70:	f805 3c02 	strb.w	r3, [r5, #-2]
 8009c74:	1863      	adds	r3, r4, r1
 8009c76:	f303 0307 	ssat	r3, #8, r3
 8009c7a:	462a      	mov	r2, r5
 8009c7c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8009c80:	e772      	b.n	8009b68 <st_sssa8_convolve_dw+0x3e4>
 8009c82:	9b07      	ldr	r3, [sp, #28]
 8009c84:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8009c86:	441a      	add	r2, r3
 8009c88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c8a:	fb03 1502 	mla	r5, r3, r2, r1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f43f aeb3 	beq.w	80099fa <st_sssa8_convolve_dw+0x276>
 8009c94:	2e00      	cmp	r6, #0
 8009c96:	f43f aeb0 	beq.w	80099fa <st_sssa8_convolve_dw+0x276>
 8009c9a:	4648      	mov	r0, r9
 8009c9c:	464a      	mov	r2, r9
 8009c9e:	ee07 aa90 	vmov	s15, sl
 8009ca2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8009ca6:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 8009caa:	eb05 0e03 	add.w	lr, r5, r3
 8009cae:	46c3      	mov	fp, r8
 8009cb0:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 8009cb4:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 8009cb8:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8009cbc:	f8dd a09c 	ldr.w	sl, [sp, #156]	; 0x9c
 8009cc0:	941a      	str	r4, [sp, #104]	; 0x68
 8009cc2:	3501      	adds	r5, #1
 8009cc4:	4614      	mov	r4, r2
 8009cc6:	42aa      	cmp	r2, r5
 8009cc8:	f105 31ff 	add.w	r1, r5, #4294967295
 8009ccc:	4432      	add	r2, r6
 8009cce:	bf34      	ite	cc
 8009cd0:	2300      	movcc	r3, #0
 8009cd2:	2301      	movcs	r3, #1
 8009cd4:	428a      	cmp	r2, r1
 8009cd6:	bf98      	it	ls
 8009cd8:	f043 0301 	orrls.w	r3, r3, #1
 8009cdc:	b393      	cbz	r3, 8009d44 <st_sssa8_convolve_dw+0x5c0>
 8009cde:	f1b8 0f07 	cmp.w	r8, #7
 8009ce2:	d92f      	bls.n	8009d44 <st_sssa8_convolve_dw+0x5c0>
 8009ce4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ce8:	2100      	movs	r1, #0
 8009cea:	eb00 070a 	add.w	r7, r0, sl
 8009cee:	f363 0107 	bfi	r1, r3, #0, #8
 8009cf2:	f363 210f 	bfi	r1, r3, #8, #8
 8009cf6:	f363 4117 	bfi	r1, r3, #16, #8
 8009cfa:	f363 611f 	bfi	r1, r3, #24, #8
 8009cfe:	4603      	mov	r3, r0
 8009d00:	f843 1b04 	str.w	r1, [r3], #4
 8009d04:	429f      	cmp	r7, r3
 8009d06:	d1fb      	bne.n	8009d00 <st_sssa8_convolve_dw+0x57c>
 8009d08:	4566      	cmp	r6, ip
 8009d0a:	eb04 030c 	add.w	r3, r4, ip
 8009d0e:	d00d      	beq.n	8009d2c <st_sssa8_convolve_dw+0x5a8>
 8009d10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009d14:	f804 100c 	strb.w	r1, [r4, ip]
 8009d18:	f1b9 0f00 	cmp.w	r9, #0
 8009d1c:	d006      	beq.n	8009d2c <st_sssa8_convolve_dw+0x5a8>
 8009d1e:	f1b9 0f01 	cmp.w	r9, #1
 8009d22:	7059      	strb	r1, [r3, #1]
 8009d24:	d002      	beq.n	8009d2c <st_sssa8_convolve_dw+0x5a8>
 8009d26:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009d2a:	7099      	strb	r1, [r3, #2]
 8009d2c:	45ae      	cmp	lr, r5
 8009d2e:	4430      	add	r0, r6
 8009d30:	d1c7      	bne.n	8009cc2 <st_sssa8_convolve_dw+0x53e>
 8009d32:	46d8      	mov	r8, fp
 8009d34:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8009d38:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009d3a:	ee17 aa90 	vmov	sl, s15
 8009d3e:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8009d42:	e65a      	b.n	80099fa <st_sssa8_convolve_dw+0x276>
 8009d44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d48:	f804 3b01 	strb.w	r3, [r4], #1
 8009d4c:	4294      	cmp	r4, r2
 8009d4e:	d0ed      	beq.n	8009d2c <st_sssa8_convolve_dw+0x5a8>
 8009d50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d54:	f804 3b01 	strb.w	r3, [r4], #1
 8009d58:	4294      	cmp	r4, r2
 8009d5a:	d1f3      	bne.n	8009d44 <st_sssa8_convolve_dw+0x5c0>
 8009d5c:	e7e6      	b.n	8009d2c <st_sssa8_convolve_dw+0x5a8>
 8009d5e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8009d60:	2a00      	cmp	r2, #0
 8009d62:	d064      	beq.n	8009e2e <st_sssa8_convolve_dw+0x6aa>
 8009d64:	3a01      	subs	r2, #1
 8009d66:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009d68:	9247      	str	r2, [sp, #284]	; 0x11c
 8009d6a:	2801      	cmp	r0, #1
 8009d6c:	f8bd 213c 	ldrh.w	r2, [sp, #316]	; 0x13c
 8009d70:	f8ad 213e 	strh.w	r2, [sp, #318]	; 0x13e
 8009d74:	f47f adff 	bne.w	8009976 <st_sssa8_convolve_dw+0x1f2>
 8009d78:	2a01      	cmp	r2, #1
 8009d7a:	d062      	beq.n	8009e42 <st_sssa8_convolve_dw+0x6be>
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009d80:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	; 0x60
 8009d84:	931c      	str	r3, [sp, #112]	; 0x70
 8009d86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	f77f ae47 	ble.w	8009a1c <st_sssa8_convolve_dw+0x298>
 8009d8e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009d90:	4614      	mov	r4, r2
 8009d92:	f8cd 8008 	str.w	r8, [sp, #8]
 8009d96:	4610      	mov	r0, r2
 8009d98:	46b8      	mov	r8, r7
 8009d9a:	9603      	str	r6, [sp, #12]
 8009d9c:	9f37      	ldr	r7, [sp, #220]	; 0xdc
 8009d9e:	4699      	mov	r9, r3
 8009da0:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8009da4:	f8dd b0b4 	ldr.w	fp, [sp, #180]	; 0xb4
 8009da8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009daa:	3401      	adds	r4, #1
 8009dac:	fb00 500b 	mla	r0, r0, fp, r5
 8009db0:	4641      	mov	r1, r8
 8009db2:	463a      	mov	r2, r7
 8009db4:	b224      	sxth	r4, r4
 8009db6:	fb06 a000 	mla	r0, r6, r0, sl
 8009dba:	f003 fed9 	bl	800db70 <arm_copy_q7>
 8009dbe:	44b8      	add	r8, r7
 8009dc0:	454c      	cmp	r4, r9
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	dbf1      	blt.n	8009daa <st_sssa8_convolve_dw+0x626>
 8009dc6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009dc8:	e9dd 8602 	ldrd	r8, r6, [sp, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f47f ae29 	bne.w	8009a24 <st_sssa8_convolve_dw+0x2a0>
 8009dd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f43f aedd 	beq.w	8009b94 <st_sssa8_convolve_dw+0x410>
 8009dda:	2e01      	cmp	r6, #1
 8009ddc:	f040 81d8 	bne.w	800a190 <st_sssa8_convolve_dw+0xa0c>
 8009de0:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 8009de2:	f103 0c01 	add.w	ip, r3, #1
 8009de6:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 8009de8:	6819      	ldr	r1, [r3, #0]
 8009dea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009dec:	b173      	cbz	r3, 8009e0c <st_sssa8_convolve_dw+0x688>
 8009dee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009df0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009df2:	f9bd 7058 	ldrsh.w	r7, [sp, #88]	; 0x58
 8009df6:	18d5      	adds	r5, r2, r3
 8009df8:	9876      	ldr	r0, [sp, #472]	; 0x1d8
 8009dfa:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8009dfe:	f830 4b02 	ldrh.w	r4, [r0], #2
 8009e02:	1bdb      	subs	r3, r3, r7
 8009e04:	4295      	cmp	r5, r2
 8009e06:	fb13 1104 	smlabb	r1, r3, r4, r1
 8009e0a:	d1f6      	bne.n	8009dfa <st_sssa8_convolve_dw+0x676>
 8009e0c:	9b05      	ldr	r3, [sp, #20]
 8009e0e:	2b15      	cmp	r3, #21
 8009e10:	f340 8125 	ble.w	800a05e <st_sssa8_convolve_dw+0x8da>
 8009e14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e16:	9b08      	ldr	r3, [sp, #32]
 8009e18:	fb51 2303 	smmla	r3, r1, r3, r2
 8009e1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e1e:	4113      	asrs	r3, r2
 8009e20:	9a06      	ldr	r2, [sp, #24]
 8009e22:	4413      	add	r3, r2
 8009e24:	f303 0307 	ssat	r3, #8, r3
 8009e28:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8009e2c:	e104      	b.n	800a038 <st_sssa8_convolve_dw+0x8b4>
 8009e2e:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8009e30:	3a01      	subs	r2, #1
 8009e32:	9248      	str	r2, [sp, #288]	; 0x120
 8009e34:	2201      	movs	r2, #1
 8009e36:	f8ad 213e 	strh.w	r2, [sp, #318]	; 0x13e
 8009e3a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e3c:	2a01      	cmp	r2, #1
 8009e3e:	f47f ad9a 	bne.w	8009976 <st_sssa8_convolve_dw+0x1f2>
 8009e42:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009e44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e46:	4290      	cmp	r0, r2
 8009e48:	f340 8194 	ble.w	800a174 <st_sssa8_convolve_dw+0x9f0>
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8009e50:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8009e52:	931c      	str	r3, [sp, #112]	; 0x70
 8009e54:	fb01 0104 	mla	r1, r1, r4, r0
 8009e58:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8009e5a:	1acd      	subs	r5, r1, r3
 8009e5c:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 8009e60:	42ab      	cmp	r3, r5
 8009e62:	9304      	str	r3, [sp, #16]
 8009e64:	f6bf adda 	bge.w	8009a1c <st_sssa8_convolve_dw+0x298>
 8009e68:	f8cd 801c 	str.w	r8, [sp, #28]
 8009e6c:	4693      	mov	fp, r2
 8009e6e:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8009e72:	4613      	mov	r3, r2
 8009e74:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8009e76:	46b1      	mov	r9, r6
 8009e78:	ee18 8a10 	vmov	r8, s16
 8009e7c:	ea4f 76db 	mov.w	r6, fp, lsr #31
 8009e80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e82:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	bfd8      	it	le
 8009e8a:	f046 0601 	orrle.w	r6, r6, #1
 8009e8e:	fb07 f303 	mul.w	r3, r7, r3
 8009e92:	4664      	mov	r4, ip
 8009e94:	9303      	str	r3, [sp, #12]
 8009e96:	9602      	str	r6, [sp, #8]
 8009e98:	4567      	cmp	r7, ip
 8009e9a:	464a      	mov	r2, r9
 8009e9c:	4651      	mov	r1, sl
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	bfcc      	ite	gt
 8009ea2:	2300      	movgt	r3, #0
 8009ea4:	2301      	movle	r3, #1
 8009ea6:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 8009eaa:	d103      	bne.n	8009eb4 <st_sssa8_convolve_dw+0x730>
 8009eac:	9b02      	ldr	r3, [sp, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f000 80f3 	beq.w	800a09a <st_sssa8_convolve_dw+0x916>
 8009eb4:	f001 fc58 	bl	800b768 <st_uint8_fill>
 8009eb8:	3401      	adds	r4, #1
 8009eba:	44ca      	add	sl, r9
 8009ebc:	b224      	sxth	r4, r4
 8009ebe:	42ac      	cmp	r4, r5
 8009ec0:	46a4      	mov	ip, r4
 8009ec2:	dbe9      	blt.n	8009e98 <st_sssa8_convolve_dw+0x714>
 8009ec4:	f10b 0b01 	add.w	fp, fp, #1
 8009ec8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009eca:	fa0f fb8b 	sxth.w	fp, fp
 8009ece:	4593      	cmp	fp, r2
 8009ed0:	465b      	mov	r3, fp
 8009ed2:	dbd3      	blt.n	8009e7c <st_sssa8_convolve_dw+0x6f8>
 8009ed4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8009ed8:	464e      	mov	r6, r9
 8009eda:	e59f      	b.n	8009a1c <st_sssa8_convolve_dw+0x298>
 8009edc:	4282      	cmp	r2, r0
 8009ede:	f340 8149 	ble.w	800a174 <st_sssa8_convolve_dw+0x9f0>
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009ee6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8009ee8:	931c      	str	r3, [sp, #112]	; 0x70
 8009eea:	fb01 2100 	mla	r1, r1, r0, r2
 8009eee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8009ef0:	1acd      	subs	r5, r1, r3
 8009ef2:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 8009ef6:	42ab      	cmp	r3, r5
 8009ef8:	9303      	str	r3, [sp, #12]
 8009efa:	f6bf ad8f 	bge.w	8009a1c <st_sssa8_convolve_dw+0x298>
 8009efe:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009f02:	f8cd 8010 	str.w	r8, [sp, #16]
 8009f06:	46b0      	mov	r8, r6
 8009f08:	46d1      	mov	r9, sl
 8009f0a:	4653      	mov	r3, sl
 8009f0c:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8009f10:	ee18 aa10 	vmov	sl, s16
 8009f14:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8009f16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f18:	9903      	ldr	r1, [sp, #12]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	fb03 f307 	mul.w	r3, r3, r7
 8009f20:	460c      	mov	r4, r1
 8009f22:	bfcc      	ite	gt
 8009f24:	2600      	movgt	r6, #0
 8009f26:	2601      	movle	r6, #1
 8009f28:	9302      	str	r3, [sp, #8]
 8009f2a:	ea46 76d9 	orr.w	r6, r6, r9, lsr #31
 8009f2e:	0fe3      	lsrs	r3, r4, #31
 8009f30:	428f      	cmp	r7, r1
 8009f32:	bfd8      	it	le
 8009f34:	f043 0301 	orrle.w	r3, r3, #1
 8009f38:	b903      	cbnz	r3, 8009f3c <st_sssa8_convolve_dw+0x7b8>
 8009f3a:	b1b6      	cbz	r6, 8009f6a <st_sssa8_convolve_dw+0x7e6>
 8009f3c:	4642      	mov	r2, r8
 8009f3e:	4659      	mov	r1, fp
 8009f40:	4650      	mov	r0, sl
 8009f42:	f001 fc11 	bl	800b768 <st_uint8_fill>
 8009f46:	3401      	adds	r4, #1
 8009f48:	44c3      	add	fp, r8
 8009f4a:	b224      	sxth	r4, r4
 8009f4c:	42ac      	cmp	r4, r5
 8009f4e:	4621      	mov	r1, r4
 8009f50:	dbed      	blt.n	8009f2e <st_sssa8_convolve_dw+0x7aa>
 8009f52:	f109 0901 	add.w	r9, r9, #1
 8009f56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f58:	fa0f f989 	sxth.w	r9, r9
 8009f5c:	4591      	cmp	r9, r2
 8009f5e:	464b      	mov	r3, r9
 8009f60:	dbd9      	blt.n	8009f16 <st_sssa8_convolve_dw+0x792>
 8009f62:	4646      	mov	r6, r8
 8009f64:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009f68:	e558      	b.n	8009a1c <st_sssa8_convolve_dw+0x298>
 8009f6a:	9b02      	ldr	r3, [sp, #8]
 8009f6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f6e:	440b      	add	r3, r1
 8009f70:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8009f72:	fb02 1303 	mla	r3, r2, r3, r1
 8009f76:	2a00      	cmp	r2, #0
 8009f78:	d0e5      	beq.n	8009f46 <st_sssa8_convolve_dw+0x7c2>
 8009f7a:	eb03 0c02 	add.w	ip, r3, r2
 8009f7e:	4658      	mov	r0, fp
 8009f80:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009f84:	4563      	cmp	r3, ip
 8009f86:	ea4f 2201 	mov.w	r2, r1, lsl #8
 8009f8a:	fa32 f281 	uxtab16	r2, r2, r1
 8009f8e:	f820 2b02 	strh.w	r2, [r0], #2
 8009f92:	d1f5      	bne.n	8009f80 <st_sssa8_convolve_dw+0x7fc>
 8009f94:	e7d7      	b.n	8009f46 <st_sssa8_convolve_dw+0x7c2>
 8009f96:	e9dd 7e38 	ldrd	r7, lr, [sp, #224]	; 0xe0
 8009f9a:	eb03 0907 	add.w	r9, r3, r7
 8009f9e:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 8009fa0:	f8cd 8008 	str.w	r8, [sp, #8]
 8009fa4:	f103 0c01 	add.w	ip, r3, #1
 8009fa8:	9b05      	ldr	r3, [sp, #20]
 8009faa:	fa1f f989 	uxth.w	r9, r9
 8009fae:	f9bd b058 	ldrsh.w	fp, [sp, #88]	; 0x58
 8009fb2:	f1c3 0a01 	rsb	sl, r3, #1
 8009fb6:	4698      	mov	r8, r3
 8009fb8:	1c7b      	adds	r3, r7, #1
 8009fba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009fbc:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009fc0:	443a      	add	r2, r7
 8009fc2:	b29f      	uxth	r7, r3
 8009fc4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f000 80d7 	beq.w	800a17a <st_sssa8_convolve_dw+0x9f6>
 8009fcc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009fce:	18ec      	adds	r4, r5, r3
 8009fd0:	f992 3000 	ldrsb.w	r3, [r2]
 8009fd4:	4432      	add	r2, r6
 8009fd6:	f835 0b02 	ldrh.w	r0, [r5], #2
 8009fda:	eba3 030b 	sub.w	r3, r3, fp
 8009fde:	42a5      	cmp	r5, r4
 8009fe0:	fb10 1103 	smlabb	r1, r0, r3, r1
 8009fe4:	d1f4      	bne.n	8009fd0 <st_sssa8_convolve_dw+0x84c>
 8009fe6:	f1b8 0f15 	cmp.w	r8, #21
 8009fea:	dd11      	ble.n	800a010 <st_sssa8_convolve_dw+0x88c>
 8009fec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009fee:	9b08      	ldr	r3, [sp, #32]
 8009ff0:	fb51 2303 	smmla	r3, r1, r3, r2
 8009ff4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ff6:	4113      	asrs	r3, r2
 8009ff8:	9a06      	ldr	r2, [sp, #24]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f303 0307 	ssat	r3, #8, r3
 800a000:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800a004:	454f      	cmp	r7, r9
 800a006:	f10c 0c01 	add.w	ip, ip, #1
 800a00a:	d013      	beq.n	800a034 <st_sssa8_convolve_dw+0x8b0>
 800a00c:	4625      	mov	r5, r4
 800a00e:	e7d3      	b.n	8009fb8 <st_sssa8_convolve_dw+0x834>
 800a010:	f1b8 0f00 	cmp.w	r8, #0
 800a014:	dd15      	ble.n	800a042 <st_sssa8_convolve_dw+0x8be>
 800a016:	004b      	lsls	r3, r1, #1
 800a018:	9a08      	ldr	r2, [sp, #32]
 800a01a:	9906      	ldr	r1, [sp, #24]
 800a01c:	fb53 1302 	smmla	r3, r3, r2, r1
 800a020:	fa43 f308 	asr.w	r3, r3, r8
 800a024:	f303 0307 	ssat	r3, #8, r3
 800a028:	454f      	cmp	r7, r9
 800a02a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800a02e:	f10c 0c01 	add.w	ip, ip, #1
 800a032:	d1eb      	bne.n	800a00c <st_sssa8_convolve_dw+0x888>
 800a034:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a038:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 800a03a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a03c:	4413      	add	r3, r2
 800a03e:	9373      	str	r3, [sp, #460]	; 0x1cc
 800a040:	e5a8      	b.n	8009b94 <st_sssa8_convolve_dw+0x410>
 800a042:	fa01 f30a 	lsl.w	r3, r1, sl
 800a046:	f303 031f 	ssat	r3, #32, r3
 800a04a:	9a08      	ldr	r2, [sp, #32]
 800a04c:	fb53 f312 	smmulr	r3, r3, r2
 800a050:	9a06      	ldr	r2, [sp, #24]
 800a052:	4413      	add	r3, r2
 800a054:	f303 0307 	ssat	r3, #8, r3
 800a058:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800a05c:	e7d2      	b.n	800a004 <st_sssa8_convolve_dw+0x880>
 800a05e:	2b00      	cmp	r3, #0
 800a060:	461a      	mov	r2, r3
 800a062:	dd0a      	ble.n	800a07a <st_sssa8_convolve_dw+0x8f6>
 800a064:	004b      	lsls	r3, r1, #1
 800a066:	9806      	ldr	r0, [sp, #24]
 800a068:	9908      	ldr	r1, [sp, #32]
 800a06a:	fb53 0301 	smmla	r3, r3, r1, r0
 800a06e:	4113      	asrs	r3, r2
 800a070:	f303 0307 	ssat	r3, #8, r3
 800a074:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800a078:	e7de      	b.n	800a038 <st_sssa8_convolve_dw+0x8b4>
 800a07a:	f1c3 0301 	rsb	r3, r3, #1
 800a07e:	fa01 f303 	lsl.w	r3, r1, r3
 800a082:	f303 031f 	ssat	r3, #32, r3
 800a086:	9a08      	ldr	r2, [sp, #32]
 800a088:	fb53 f312 	smmulr	r3, r3, r2
 800a08c:	9a06      	ldr	r2, [sp, #24]
 800a08e:	4413      	add	r3, r2
 800a090:	f303 0307 	ssat	r3, #8, r3
 800a094:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800a098:	e7ce      	b.n	800a038 <st_sssa8_convolve_dw+0x8b4>
 800a09a:	9b03      	ldr	r3, [sp, #12]
 800a09c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a09e:	eb03 000c 	add.w	r0, r3, ip
 800a0a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0a4:	fb02 3000 	mla	r0, r2, r0, r3
 800a0a8:	f003 fd62 	bl	800db70 <arm_copy_q7>
 800a0ac:	e704      	b.n	8009eb8 <st_sssa8_convolve_dw+0x734>
 800a0ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a0b0:	9820      	ldr	r0, [sp, #128]	; 0x80
 800a0b2:	4282      	cmp	r2, r0
 800a0b4:	dd5e      	ble.n	800a174 <st_sssa8_convolve_dw+0x9f0>
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800a0ba:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800a0bc:	931c      	str	r3, [sp, #112]	; 0x70
 800a0be:	fb01 2100 	mla	r1, r1, r0, r2
 800a0c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a0c4:	1acd      	subs	r5, r1, r3
 800a0c6:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 800a0ca:	42ab      	cmp	r3, r5
 800a0cc:	9303      	str	r3, [sp, #12]
 800a0ce:	f6bf aca5 	bge.w	8009a1c <st_sssa8_convolve_dw+0x298>
 800a0d2:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 800a0d6:	f8cd 8010 	str.w	r8, [sp, #16]
 800a0da:	46b0      	mov	r8, r6
 800a0dc:	46cb      	mov	fp, r9
 800a0de:	464b      	mov	r3, r9
 800a0e0:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 800a0e4:	ee18 9a10 	vmov	r9, s16
 800a0e8:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 800a0ea:	ea4f 76db 	mov.w	r6, fp, lsr #31
 800a0ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	bfd8      	it	le
 800a0f4:	f046 0601 	orrle.w	r6, r6, #1
 800a0f8:	fb03 f307 	mul.w	r3, r3, r7
 800a0fc:	9302      	str	r3, [sp, #8]
 800a0fe:	9b03      	ldr	r3, [sp, #12]
 800a100:	461c      	mov	r4, r3
 800a102:	429f      	cmp	r7, r3
 800a104:	bfcc      	ite	gt
 800a106:	2200      	movgt	r2, #0
 800a108:	2201      	movle	r2, #1
 800a10a:	ea52 72d4 	orrs.w	r2, r2, r4, lsr #31
 800a10e:	d100      	bne.n	800a112 <st_sssa8_convolve_dw+0x98e>
 800a110:	b1b6      	cbz	r6, 800a140 <st_sssa8_convolve_dw+0x9bc>
 800a112:	4642      	mov	r2, r8
 800a114:	4651      	mov	r1, sl
 800a116:	4648      	mov	r0, r9
 800a118:	f001 fb26 	bl	800b768 <st_uint8_fill>
 800a11c:	3401      	adds	r4, #1
 800a11e:	44c2      	add	sl, r8
 800a120:	b224      	sxth	r4, r4
 800a122:	42ac      	cmp	r4, r5
 800a124:	4623      	mov	r3, r4
 800a126:	dbec      	blt.n	800a102 <st_sssa8_convolve_dw+0x97e>
 800a128:	f10b 0b01 	add.w	fp, fp, #1
 800a12c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a12e:	fa0f fb8b 	sxth.w	fp, fp
 800a132:	4593      	cmp	fp, r2
 800a134:	465b      	mov	r3, fp
 800a136:	dbd8      	blt.n	800a0ea <st_sssa8_convolve_dw+0x966>
 800a138:	4646      	mov	r6, r8
 800a13a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a13e:	e46d      	b.n	8009a1c <st_sssa8_convolve_dw+0x298>
 800a140:	9a02      	ldr	r2, [sp, #8]
 800a142:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a144:	4413      	add	r3, r2
 800a146:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a148:	fb01 2203 	mla	r2, r1, r3, r2
 800a14c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d0e4      	beq.n	800a11c <st_sssa8_convolve_dw+0x998>
 800a152:	18d0      	adds	r0, r2, r3
 800a154:	4651      	mov	r1, sl
 800a156:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a15a:	4282      	cmp	r2, r0
 800a15c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800a160:	eac3 4303 	pkhbt	r3, r3, r3, lsl #16
 800a164:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800a168:	fa33 f38c 	uxtab16	r3, r3, ip
 800a16c:	f841 3b04 	str.w	r3, [r1], #4
 800a170:	d1f1      	bne.n	800a156 <st_sssa8_convolve_dw+0x9d2>
 800a172:	e7d3      	b.n	800a11c <st_sssa8_convolve_dw+0x998>
 800a174:	b29b      	uxth	r3, r3
 800a176:	931c      	str	r3, [sp, #112]	; 0x70
 800a178:	e450      	b.n	8009a1c <st_sssa8_convolve_dw+0x298>
 800a17a:	462c      	mov	r4, r5
 800a17c:	e733      	b.n	8009fe6 <st_sssa8_convolve_dw+0x862>
 800a17e:	2301      	movs	r3, #1
 800a180:	f7ff bb69 	b.w	8009856 <st_sssa8_convolve_dw+0xd2>
 800a184:	9306      	str	r3, [sp, #24]
 800a186:	f7ff bb38 	b.w	80097fa <st_sssa8_convolve_dw+0x76>
 800a18a:	b2a3      	uxth	r3, r4
 800a18c:	9336      	str	r3, [sp, #216]	; 0xd8
 800a18e:	e50e      	b.n	8009bae <st_sssa8_convolve_dw+0x42a>
 800a190:	f8dd e1b8 	ldr.w	lr, [sp, #440]	; 0x1b8
 800a194:	9d76      	ldr	r5, [sp, #472]	; 0x1d8
 800a196:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800a198:	e6ff      	b.n	8009f9a <st_sssa8_convolve_dw+0x816>
 800a19a:	bf00      	nop

0800a19c <st_sssa8_convolve_rank1upd>:
 800a19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a0:	b085      	sub	sp, #20
 800a1a2:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800a1a6:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 800a1aa:	fb13 f304 	smulbb	r3, r3, r4
 800a1ae:	fb13 f500 	smulbb	r5, r3, r0
 800a1b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1b4:	2a00      	cmp	r2, #0
 800a1b6:	d073      	beq.n	800a2a0 <st_sssa8_convolve_rank1upd+0x104>
 800a1b8:	b2ad      	uxth	r5, r5
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800a1c0:	ea4f 0995 	mov.w	r9, r5, lsr #2
 800a1c4:	eb03 0a85 	add.w	sl, r3, r5, lsl #2
 800a1c8:	f005 0503 	and.w	r5, r5, #3
 800a1cc:	f1a9 0381 	sub.w	r3, r9, #129	; 0x81
 800a1d0:	eb08 0782 	add.w	r7, r8, r2, lsl #2
 800a1d4:	1e69      	subs	r1, r5, #1
 800a1d6:	f1a9 0280 	sub.w	r2, r9, #128	; 0x80
 800a1da:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800a1de:	b289      	uxth	r1, r1
 800a1e0:	9100      	str	r1, [sp, #0]
 800a1e2:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 800a1e6:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 800a1ea:	b292      	uxth	r2, r2
 800a1ec:	9202      	str	r2, [sp, #8]
 800a1ee:	025a      	lsls	r2, r3, #9
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1f6:	025b      	lsls	r3, r3, #9
 800a1f8:	9203      	str	r2, [sp, #12]
 800a1fa:	9301      	str	r3, [sp, #4]
 800a1fc:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800a200:	d953      	bls.n	800a2aa <st_sssa8_convolve_rank1upd+0x10e>
 800a202:	9b03      	ldr	r3, [sp, #12]
 800a204:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800a208:	2600      	movs	r6, #0
 800a20a:	eb04 0c03 	add.w	ip, r4, r3
 800a20e:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 800a212:	2200      	movs	r2, #0
 800a214:	f851 3b04 	ldr.w	r3, [r1], #4
 800a218:	fa2f fe83 	sxtb16	lr, r3
 800a21c:	4281      	cmp	r1, r0
 800a21e:	ea4f 2333 	mov.w	r3, r3, ror #8
 800a222:	fa92 f21e 	qadd16	r2, r2, lr
 800a226:	fa2f f383 	sxtb16	r3, r3
 800a22a:	fa92 f213 	qadd16	r2, r2, r3
 800a22e:	d1f1      	bne.n	800a214 <st_sssa8_convolve_rank1upd+0x78>
 800a230:	f501 7000 	add.w	r0, r1, #512	; 0x200
 800a234:	b213      	sxth	r3, r2
 800a236:	4560      	cmp	r0, ip
 800a238:	eb03 4222 	add.w	r2, r3, r2, asr #16
 800a23c:	4416      	add	r6, r2
 800a23e:	d1e6      	bne.n	800a20e <st_sssa8_convolve_rank1upd+0x72>
 800a240:	9b01      	ldr	r3, [sp, #4]
 800a242:	18e1      	adds	r1, r4, r3
 800a244:	9c02      	ldr	r4, [sp, #8]
 800a246:	b374      	cbz	r4, 800a2a6 <st_sssa8_convolve_rank1upd+0x10a>
 800a248:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800a24c:	2200      	movs	r2, #0
 800a24e:	f851 3b04 	ldr.w	r3, [r1], #4
 800a252:	fa2f f083 	sxtb16	r0, r3
 800a256:	428c      	cmp	r4, r1
 800a258:	ea4f 2333 	mov.w	r3, r3, ror #8
 800a25c:	fa92 f210 	qadd16	r2, r2, r0
 800a260:	fa2f f383 	sxtb16	r3, r3
 800a264:	fa92 f213 	qadd16	r2, r2, r3
 800a268:	d1f1      	bne.n	800a24e <st_sssa8_convolve_rank1upd+0xb2>
 800a26a:	b213      	sxth	r3, r2
 800a26c:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800a270:	441e      	add	r6, r3
 800a272:	b16d      	cbz	r5, 800a290 <st_sssa8_convolve_rank1upd+0xf4>
 800a274:	f994 3000 	ldrsb.w	r3, [r4]
 800a278:	441e      	add	r6, r3
 800a27a:	9b00      	ldr	r3, [sp, #0]
 800a27c:	b13b      	cbz	r3, 800a28e <st_sssa8_convolve_rank1upd+0xf2>
 800a27e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800a282:	2d02      	cmp	r5, #2
 800a284:	441e      	add	r6, r3
 800a286:	d002      	beq.n	800a28e <st_sssa8_convolve_rank1upd+0xf2>
 800a288:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800a28c:	441e      	add	r6, r3
 800a28e:	442c      	add	r4, r5
 800a290:	f858 3b04 	ldr.w	r3, [r8], #4
 800a294:	fb0b 3616 	mls	r6, fp, r6, r3
 800a298:	45b8      	cmp	r8, r7
 800a29a:	f84a 6b04 	str.w	r6, [sl], #4
 800a29e:	d1ad      	bne.n	800a1fc <st_sssa8_convolve_rank1upd+0x60>
 800a2a0:	b005      	add	sp, #20
 800a2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	e7e3      	b.n	800a272 <st_sssa8_convolve_rank1upd+0xd6>
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	2600      	movs	r6, #0
 800a2ae:	464c      	mov	r4, r9
 800a2b0:	e7c9      	b.n	800a246 <st_sssa8_convolve_rank1upd+0xaa>
 800a2b2:	bf00      	nop

0800a2b4 <st_sssa8_convolve>:
 800a2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	ed2d 8b06 	vpush	{d8-d10}
 800a2bc:	b0cb      	sub	sp, #300	; 0x12c
 800a2be:	469a      	mov	sl, r3
 800a2c0:	4689      	mov	r9, r1
 800a2c2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800a2c4:	900a      	str	r0, [sp, #40]	; 0x28
 800a2c6:	9207      	str	r2, [sp, #28]
 800a2c8:	f8bd 0174 	ldrh.w	r0, [sp, #372]	; 0x174
 800a2cc:	f8bd 2170 	ldrh.w	r2, [sp, #368]	; 0x170
 800a2d0:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a2d4:	fb12 f300 	smulbb	r3, r2, r0
 800a2d8:	901e      	str	r0, [sp, #120]	; 0x78
 800a2da:	f8bd 41a0 	ldrh.w	r4, [sp, #416]	; 0x1a0
 800a2de:	fb13 f30a 	smulbb	r3, r3, sl
 800a2e2:	9214      	str	r2, [sp, #80]	; 0x50
 800a2e4:	940f      	str	r4, [sp, #60]	; 0x3c
 800a2e6:	1e4a      	subs	r2, r1, #1
 800a2e8:	b298      	uxth	r0, r3
 800a2ea:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800a2ec:	f8bd 41a4 	ldrh.w	r4, [sp, #420]	; 0x1a4
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	921c      	str	r2, [sp, #112]	; 0x70
 800a2f4:	b292      	uxth	r2, r2
 800a2f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800a2f8:	f8bd 316c 	ldrh.w	r3, [sp, #364]	; 0x16c
 800a2fc:	2a14      	cmp	r2, #20
 800a2fe:	941d      	str	r4, [sp, #116]	; 0x74
 800a300:	ee09 3a10 	vmov	s18, r3
 800a304:	f8bd 3178 	ldrh.w	r3, [sp, #376]	; 0x178
 800a308:	9c6a      	ldr	r4, [sp, #424]	; 0x1a8
 800a30a:	9312      	str	r3, [sp, #72]	; 0x48
 800a30c:	f8bd 317c 	ldrh.w	r3, [sp, #380]	; 0x17c
 800a310:	9015      	str	r0, [sp, #84]	; 0x54
 800a312:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800a316:	931f      	str	r3, [sp, #124]	; 0x7c
 800a318:	f8bd 3180 	ldrh.w	r3, [sp, #384]	; 0x180
 800a31c:	ee0a 0a10 	vmov	s20, r0
 800a320:	f99d 8194 	ldrsb.w	r8, [sp, #404]	; 0x194
 800a324:	930d      	str	r3, [sp, #52]	; 0x34
 800a326:	f8bd 3184 	ldrh.w	r3, [sp, #388]	; 0x184
 800a32a:	9118      	str	r1, [sp, #96]	; 0x60
 800a32c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a32e:	f99d 3198 	ldrsb.w	r3, [sp, #408]	; 0x198
 800a332:	f200 8163 	bhi.w	800a5fc <st_sssa8_convolve+0x348>
 800a336:	2201      	movs	r2, #1
 800a338:	408b      	lsls	r3, r1
 800a33a:	408a      	lsls	r2, r1
 800a33c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800a340:	9316      	str	r3, [sp, #88]	; 0x58
 800a342:	9b07      	ldr	r3, [sp, #28]
 800a344:	a940      	add	r1, sp, #256	; 0x100
 800a346:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a348:	a836      	add	r0, sp, #216	; 0xd8
 800a34a:	932b      	str	r3, [sp, #172]	; 0xac
 800a34c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a34e:	fb0a f502 	mul.w	r5, sl, r2
 800a352:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800a354:	9330      	str	r3, [sp, #192]	; 0xc0
 800a356:	ee08 5a90 	vmov	s17, r5
 800a35a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a35c:	9234      	str	r2, [sp, #208]	; 0xd0
 800a35e:	aa2a      	add	r2, sp, #168	; 0xa8
 800a360:	932f      	str	r3, [sp, #188]	; 0xbc
 800a362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a364:	f8cd 90b0 	str.w	r9, [sp, #176]	; 0xb0
 800a368:	9342      	str	r3, [sp, #264]	; 0x108
 800a36a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a36c:	9433      	str	r4, [sp, #204]	; 0xcc
 800a36e:	9343      	str	r3, [sp, #268]	; 0x10c
 800a370:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a372:	9344      	str	r3, [sp, #272]	; 0x110
 800a374:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a376:	9345      	str	r3, [sp, #276]	; 0x114
 800a378:	ab32      	add	r3, sp, #200	; 0xc8
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	ab2e      	add	r3, sp, #184	; 0xb8
 800a37e:	f001 f97f 	bl	800b680 <ai_padding_opt_init>
 800a382:	ee19 2a10 	vmov	r2, s18
 800a386:	996a      	ldr	r1, [sp, #424]	; 0x1a8
 800a388:	fb05 2304 	mla	r3, r5, r4, r2
 800a38c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a390:	ee09 3a90 	vmov	s19, r3
 800a394:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a396:	fb02 f303 	mul.w	r3, r2, r3
 800a39a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a39e:	f340 82e8 	ble.w	800a972 <st_sssa8_convolve+0x6be>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	9325      	str	r3, [sp, #148]	; 0x94
 800a3a6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a3a8:	ee19 1a10 	vmov	r1, s18
 800a3ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3ae:	fb02 f303 	mul.w	r3, r2, r3
 800a3b2:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 800a3b4:	fb01 2303 	mla	r3, r1, r3, r2
 800a3b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a3ba:	4299      	cmp	r1, r3
 800a3bc:	f080 8120 	bcs.w	800a600 <st_sssa8_convolve+0x34c>
 800a3c0:	9b07      	ldr	r3, [sp, #28]
 800a3c2:	fb03 f209 	mul.w	r2, r3, r9
 800a3c6:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800a3c8:	fb0a 1202 	mla	r2, sl, r2, r1
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	bf2c      	ite	cs
 800a3d0:	2200      	movcs	r2, #0
 800a3d2:	2201      	movcc	r2, #1
 800a3d4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a3d6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a3da:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3de:	ee19 1a10 	vmov	r1, s18
 800a3e2:	f023 0301 	bic.w	r3, r3, #1
 800a3e6:	428b      	cmp	r3, r1
 800a3e8:	bf28      	it	cs
 800a3ea:	460b      	movcs	r3, r1
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	931a      	str	r3, [sp, #104]	; 0x68
 800a3f0:	f240 8119 	bls.w	800a626 <st_sssa8_convolve+0x372>
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	ee19 3a10 	vmov	r3, s18
 800a3fa:	fbb1 f1f0 	udiv	r1, r1, r0
 800a3fe:	fb00 3311 	mls	r3, r0, r1, r3
 800a402:	b289      	uxth	r1, r1
 800a404:	b29b      	uxth	r3, r3
 800a406:	9120      	str	r1, [sp, #128]	; 0x80
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 80fb 	beq.w	800a604 <st_sssa8_convolve+0x350>
 800a40e:	2a00      	cmp	r2, #0
 800a410:	f040 834e 	bne.w	800aab0 <st_sssa8_convolve+0x7fc>
 800a414:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a416:	fa0f f888 	sxth.w	r8, r8
 800a41a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a41c:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 800a420:	fb03 f30a 	mul.w	r3, r3, sl
 800a424:	ee0a 8a90 	vmov	s21, r8
 800a428:	ed8d 9a22 	vstr	s18, [sp, #136]	; 0x88
 800a42c:	46d0      	mov	r8, sl
 800a42e:	fb02 f303 	mul.w	r3, r2, r3
 800a432:	9a6a      	ldr	r2, [sp, #424]	; 0x1a8
 800a434:	46da      	mov	sl, fp
 800a436:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a43a:	9311      	str	r3, [sp, #68]	; 0x44
 800a43c:	ee18 3a90 	vmov	r3, s17
 800a440:	005b      	lsls	r3, r3, #1
 800a442:	9313      	str	r3, [sp, #76]	; 0x4c
 800a444:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 80d0 	beq.w	800a5ec <st_sssa8_convolve+0x338>
 800a44c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f000 80a9 	beq.w	800a5a6 <st_sssa8_convolve+0x2f2>
 800a454:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a456:	2400      	movs	r4, #0
 800a458:	9f6a      	ldr	r7, [sp, #424]	; 0x1a8
 800a45a:	425b      	negs	r3, r3
 800a45c:	4625      	mov	r5, r4
 800a45e:	46bb      	mov	fp, r7
 800a460:	ee1a 7a90 	vmov	r7, s21
 800a464:	b29b      	uxth	r3, r3
 800a466:	931c      	str	r3, [sp, #112]	; 0x70
 800a468:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800a46a:	9319      	str	r3, [sp, #100]	; 0x64
 800a46c:	a836      	add	r0, sp, #216	; 0xd8
 800a46e:	f001 f961 	bl	800b734 <ai_padding_opt_phase1>
 800a472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 8303 	beq.w	800aa80 <st_sssa8_convolve+0x7cc>
 800a47a:	b2a3      	uxth	r3, r4
 800a47c:	2000      	movs	r0, #0
 800a47e:	9321      	str	r3, [sp, #132]	; 0x84
 800a480:	4601      	mov	r1, r0
 800a482:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 800a486:	1a9a      	subs	r2, r3, r2
 800a488:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a48a:	fb03 2305 	mla	r3, r3, r5, r2
 800a48e:	9309      	str	r3, [sp, #36]	; 0x24
 800a490:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a492:	425a      	negs	r2, r3
 800a494:	b293      	uxth	r3, r2
 800a496:	930c      	str	r3, [sp, #48]	; 0x30
 800a498:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800a49c:	9310      	str	r3, [sp, #64]	; 0x40
 800a49e:	465b      	mov	r3, fp
 800a4a0:	46d3      	mov	fp, sl
 800a4a2:	469a      	mov	sl, r3
 800a4a4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800a4a6:	2a00      	cmp	r2, #0
 800a4a8:	f000 8277 	beq.w	800a99a <st_sssa8_convolve+0x6e6>
 800a4ac:	3a01      	subs	r2, #1
 800a4ae:	9236      	str	r2, [sp, #216]	; 0xd8
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 800a4b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	f280 827b 	bge.w	800a9b6 <st_sssa8_convolve+0x702>
 800a4c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4c4:	fb01 3102 	mla	r1, r1, r2, r3
 800a4c8:	b283      	uxth	r3, r0
 800a4ca:	930e      	str	r3, [sp, #56]	; 0x38
 800a4cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4ce:	1acd      	subs	r5, r1, r3
 800a4d0:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800a4d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4d8:	461a      	mov	r2, r3
 800a4da:	9306      	str	r3, [sp, #24]
 800a4dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4de:	42ab      	cmp	r3, r5
 800a4e0:	da21      	bge.n	800a526 <st_sssa8_convolve+0x272>
 800a4e2:	9907      	ldr	r1, [sp, #28]
 800a4e4:	461c      	mov	r4, r3
 800a4e6:	469c      	mov	ip, r3
 800a4e8:	4291      	cmp	r1, r2
 800a4ea:	fb09 f202 	mul.w	r2, r9, r2
 800a4ee:	bfcc      	ite	gt
 800a4f0:	2600      	movgt	r6, #0
 800a4f2:	2601      	movle	r6, #1
 800a4f4:	9208      	str	r2, [sp, #32]
 800a4f6:	9a06      	ldr	r2, [sp, #24]
 800a4f8:	ea46 76d2 	orr.w	r6, r6, r2, lsr #31
 800a4fc:	45e1      	cmp	r9, ip
 800a4fe:	4642      	mov	r2, r8
 800a500:	4651      	mov	r1, sl
 800a502:	4638      	mov	r0, r7
 800a504:	bfcc      	ite	gt
 800a506:	2300      	movgt	r3, #0
 800a508:	2301      	movle	r3, #1
 800a50a:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 800a50e:	d102      	bne.n	800a516 <st_sssa8_convolve+0x262>
 800a510:	2e00      	cmp	r6, #0
 800a512:	f000 8239 	beq.w	800a988 <st_sssa8_convolve+0x6d4>
 800a516:	f003 fb7b 	bl	800dc10 <arm_fill_q15>
 800a51a:	3401      	adds	r4, #1
 800a51c:	44da      	add	sl, fp
 800a51e:	b224      	sxth	r4, r4
 800a520:	42ac      	cmp	r4, r5
 800a522:	46a4      	mov	ip, r4
 800a524:	dbea      	blt.n	800a4fc <st_sssa8_convolve+0x248>
 800a526:	9b06      	ldr	r3, [sp, #24]
 800a528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a52a:	3301      	adds	r3, #1
 800a52c:	b21b      	sxth	r3, r3
 800a52e:	428b      	cmp	r3, r1
 800a530:	461a      	mov	r2, r3
 800a532:	9306      	str	r3, [sp, #24]
 800a534:	dbd2      	blt.n	800a4dc <st_sssa8_convolve+0x228>
 800a536:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a538:	4553      	cmp	r3, sl
 800a53a:	f000 8242 	beq.w	800a9c2 <st_sssa8_convolve+0x70e>
 800a53e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a540:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a544:	3001      	adds	r0, #1
 800a546:	441a      	add	r2, r3
 800a548:	b200      	sxth	r0, r0
 800a54a:	b293      	uxth	r3, r2
 800a54c:	4601      	mov	r1, r0
 800a54e:	930c      	str	r3, [sp, #48]	; 0x30
 800a550:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a552:	4283      	cmp	r3, r0
 800a554:	dca6      	bgt.n	800a4a4 <st_sssa8_convolve+0x1f0>
 800a556:	4653      	mov	r3, sl
 800a558:	46da      	mov	sl, fp
 800a55a:	469b      	mov	fp, r3
 800a55c:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800a55e:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 800a562:	3401      	adds	r4, #1
 800a564:	441a      	add	r2, r3
 800a566:	b224      	sxth	r4, r4
 800a568:	b293      	uxth	r3, r2
 800a56a:	4625      	mov	r5, r4
 800a56c:	931c      	str	r3, [sp, #112]	; 0x70
 800a56e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a570:	42a3      	cmp	r3, r4
 800a572:	f73f af7b 	bgt.w	800a46c <st_sssa8_convolve+0x1b8>
 800a576:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 800a578:	455b      	cmp	r3, fp
 800a57a:	d014      	beq.n	800a5a6 <st_sssa8_convolve+0x2f2>
 800a57c:	4619      	mov	r1, r3
 800a57e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a580:	ee1a 2a10 	vmov	r2, s20
 800a584:	ee19 0a90 	vmov	r0, s19
 800a588:	9305      	str	r3, [sp, #20]
 800a58a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a58c:	9304      	str	r3, [sp, #16]
 800a58e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a590:	9303      	str	r3, [sp, #12]
 800a592:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a594:	9302      	str	r3, [sp, #8]
 800a596:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a598:	9301      	str	r3, [sp, #4]
 800a59a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	ee19 3a10 	vmov	r3, s18
 800a5a2:	f002 fe7b 	bl	800d29c <st_sssa8_nn_mat_mult_kernel_single_opt>
 800a5a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a5a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5aa:	1a9b      	subs	r3, r3, r2
 800a5ac:	b299      	uxth	r1, r3
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	428a      	cmp	r2, r1
 800a5b2:	9122      	str	r1, [sp, #136]	; 0x88
 800a5b4:	bf28      	it	cs
 800a5b6:	460b      	movcs	r3, r1
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	b16b      	cbz	r3, 800a5d8 <st_sssa8_convolve+0x324>
 800a5bc:	995a      	ldr	r1, [sp, #360]	; 0x168
 800a5be:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a5c0:	fb00 1102 	mla	r1, r0, r2, r1
 800a5c4:	915a      	str	r1, [sp, #360]	; 0x168
 800a5c6:	ee1a 1a10 	vmov	r1, s20
 800a5ca:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a5ce:	ee0a 1a10 	vmov	s20, r1
 800a5d2:	9967      	ldr	r1, [sp, #412]	; 0x19c
 800a5d4:	4411      	add	r1, r2
 800a5d6:	9167      	str	r1, [sp, #412]	; 0x19c
 800a5d8:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a5da:	1e4a      	subs	r2, r1, #1
 800a5dc:	b292      	uxth	r2, r2
 800a5de:	b1e1      	cbz	r1, 800a61a <st_sssa8_convolve+0x366>
 800a5e0:	931a      	str	r3, [sp, #104]	; 0x68
 800a5e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a5e4:	9220      	str	r2, [sp, #128]	; 0x80
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f47f af30 	bne.w	800a44c <st_sssa8_convolve+0x198>
 800a5ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a5ee:	ee19 1a90 	vmov	r1, s19
 800a5f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a5f4:	985a      	ldr	r0, [sp, #360]	; 0x168
 800a5f6:	f001 f973 	bl	800b8e0 <st_int8_to16_dual>
 800a5fa:	e727      	b.n	800a44c <st_sssa8_convolve+0x198>
 800a5fc:	9316      	str	r3, [sp, #88]	; 0x58
 800a5fe:	e6a0      	b.n	800a342 <st_sssa8_convolve+0x8e>
 800a600:	2200      	movs	r2, #0
 800a602:	e6e7      	b.n	800a3d4 <st_sssa8_convolve+0x120>
 800a604:	2a00      	cmp	r2, #0
 800a606:	f040 8257 	bne.w	800aab8 <st_sssa8_convolve+0x804>
 800a60a:	1e4b      	subs	r3, r1, #1
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	9320      	str	r3, [sp, #128]	; 0x80
 800a610:	ee19 3a10 	vmov	r3, s18
 800a614:	4283      	cmp	r3, r0
 800a616:	f4bf aefd 	bcs.w	800a414 <st_sssa8_convolve+0x160>
 800a61a:	2000      	movs	r0, #0
 800a61c:	b04b      	add	sp, #300	; 0x12c
 800a61e:	ecbd 8b06 	vpop	{d8-d10}
 800a622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a626:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d0f6      	beq.n	800a61a <st_sssa8_convolve+0x366>
 800a62c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a62e:	fa0f f888 	sxth.w	r8, r8
 800a632:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a634:	2400      	movs	r4, #0
 800a636:	fb03 f30a 	mul.w	r3, r3, sl
 800a63a:	4647      	mov	r7, r8
 800a63c:	4625      	mov	r5, r4
 800a63e:	46c8      	mov	r8, r9
 800a640:	fb02 f303 	mul.w	r3, r2, r3
 800a644:	9a6a      	ldr	r2, [sp, #424]	; 0x1a8
 800a646:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a64a:	4693      	mov	fp, r2
 800a64c:	9310      	str	r3, [sp, #64]	; 0x40
 800a64e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a650:	425b      	negs	r3, r3
 800a652:	b29b      	uxth	r3, r3
 800a654:	9319      	str	r3, [sp, #100]	; 0x64
 800a656:	ee18 3a90 	vmov	r3, s17
 800a65a:	005b      	lsls	r3, r3, #1
 800a65c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a65e:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800a662:	4699      	mov	r9, r3
 800a664:	a836      	add	r0, sp, #216	; 0xd8
 800a666:	f001 f865 	bl	800b734 <ai_padding_opt_phase1>
 800a66a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f000 820e 	beq.w	800aa8e <st_sssa8_convolve+0x7da>
 800a672:	b2a3      	uxth	r3, r4
 800a674:	2000      	movs	r0, #0
 800a676:	931a      	str	r3, [sp, #104]	; 0x68
 800a678:	4601      	mov	r1, r0
 800a67a:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 800a67e:	1a9a      	subs	r2, r3, r2
 800a680:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a682:	fb05 2303 	mla	r3, r5, r3, r2
 800a686:	9309      	str	r3, [sp, #36]	; 0x24
 800a688:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a68a:	425a      	negs	r2, r3
 800a68c:	b293      	uxth	r3, r2
 800a68e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a690:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 800a694:	9311      	str	r3, [sp, #68]	; 0x44
 800a696:	465b      	mov	r3, fp
 800a698:	46cb      	mov	fp, r9
 800a69a:	4699      	mov	r9, r3
 800a69c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800a69e:	2a00      	cmp	r2, #0
 800a6a0:	f000 80fb 	beq.w	800a89a <st_sssa8_convolve+0x5e6>
 800a6a4:	3a01      	subs	r2, #1
 800a6a6:	9236      	str	r2, [sp, #216]	; 0xd8
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 800a6ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	f280 80ff 	bge.w	800a8b6 <st_sssa8_convolve+0x602>
 800a6b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6bc:	fb01 3102 	mla	r1, r1, r2, r3
 800a6c0:	b283      	uxth	r3, r0
 800a6c2:	930e      	str	r3, [sp, #56]	; 0x38
 800a6c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6c6:	1acd      	subs	r5, r1, r3
 800a6c8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 800a6cc:	930c      	str	r3, [sp, #48]	; 0x30
 800a6ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	9306      	str	r3, [sp, #24]
 800a6d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6d6:	42ab      	cmp	r3, r5
 800a6d8:	da20      	bge.n	800a71c <st_sssa8_convolve+0x468>
 800a6da:	9907      	ldr	r1, [sp, #28]
 800a6dc:	461c      	mov	r4, r3
 800a6de:	469e      	mov	lr, r3
 800a6e0:	4291      	cmp	r1, r2
 800a6e2:	fb02 f208 	mul.w	r2, r2, r8
 800a6e6:	bfcc      	ite	gt
 800a6e8:	2600      	movgt	r6, #0
 800a6ea:	2601      	movle	r6, #1
 800a6ec:	9208      	str	r2, [sp, #32]
 800a6ee:	9a06      	ldr	r2, [sp, #24]
 800a6f0:	ea46 76d2 	orr.w	r6, r6, r2, lsr #31
 800a6f4:	0fe3      	lsrs	r3, r4, #31
 800a6f6:	4652      	mov	r2, sl
 800a6f8:	4649      	mov	r1, r9
 800a6fa:	4638      	mov	r0, r7
 800a6fc:	45f0      	cmp	r8, lr
 800a6fe:	bfd8      	it	le
 800a700:	f043 0301 	orrle.w	r3, r3, #1
 800a704:	b913      	cbnz	r3, 800a70c <st_sssa8_convolve+0x458>
 800a706:	2e00      	cmp	r6, #0
 800a708:	f000 80be 	beq.w	800a888 <st_sssa8_convolve+0x5d4>
 800a70c:	f003 fa80 	bl	800dc10 <arm_fill_q15>
 800a710:	3401      	adds	r4, #1
 800a712:	44d9      	add	r9, fp
 800a714:	b224      	sxth	r4, r4
 800a716:	42ac      	cmp	r4, r5
 800a718:	46a6      	mov	lr, r4
 800a71a:	dbeb      	blt.n	800a6f4 <st_sssa8_convolve+0x440>
 800a71c:	9b06      	ldr	r3, [sp, #24]
 800a71e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a720:	3301      	adds	r3, #1
 800a722:	b21b      	sxth	r3, r3
 800a724:	428b      	cmp	r3, r1
 800a726:	461a      	mov	r2, r3
 800a728:	9306      	str	r3, [sp, #24]
 800a72a:	dbd3      	blt.n	800a6d4 <st_sssa8_convolve+0x420>
 800a72c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a72e:	454b      	cmp	r3, r9
 800a730:	f000 80c7 	beq.w	800a8c2 <st_sssa8_convolve+0x60e>
 800a734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a738:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a73a:	441a      	add	r2, r3
 800a73c:	3001      	adds	r0, #1
 800a73e:	b293      	uxth	r3, r2
 800a740:	b200      	sxth	r0, r0
 800a742:	930b      	str	r3, [sp, #44]	; 0x2c
 800a744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a746:	4601      	mov	r1, r0
 800a748:	4283      	cmp	r3, r0
 800a74a:	dca7      	bgt.n	800a69c <st_sssa8_convolve+0x3e8>
 800a74c:	464b      	mov	r3, r9
 800a74e:	46d9      	mov	r9, fp
 800a750:	469b      	mov	fp, r3
 800a752:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a756:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800a758:	441a      	add	r2, r3
 800a75a:	3401      	adds	r4, #1
 800a75c:	b293      	uxth	r3, r2
 800a75e:	b224      	sxth	r4, r4
 800a760:	9319      	str	r3, [sp, #100]	; 0x64
 800a762:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a764:	4625      	mov	r5, r4
 800a766:	42a3      	cmp	r3, r4
 800a768:	f73f af7c 	bgt.w	800a664 <st_sssa8_convolve+0x3b0>
 800a76c:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 800a76e:	455b      	cmp	r3, fp
 800a770:	f43f af53 	beq.w	800a61a <st_sssa8_convolve+0x366>
 800a774:	ee19 3a10 	vmov	r3, s18
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f43f af4e 	beq.w	800a61a <st_sssa8_convolve+0x366>
 800a77e:	f103 0901 	add.w	r9, r3, #1
 800a782:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800a784:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a786:	ee1a ea10 	vmov	lr, s20
 800a78a:	4499      	add	r9, r3
 800a78c:	1c5e      	adds	r6, r3, #1
 800a78e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a790:	f1a2 0a02 	sub.w	sl, r2, #2
 800a794:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800a798:	f003 0103 	and.w	r1, r3, #3
 800a79c:	2301      	movs	r3, #1
 800a79e:	f101 3bff 	add.w	fp, r1, #4294967295
 800a7a2:	fa03 fa0a 	lsl.w	sl, r3, sl
 800a7a6:	f108 33ff 	add.w	r3, r8, #4294967295
 800a7aa:	fa1f fb8b 	uxth.w	fp, fp
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	0098      	lsls	r0, r3, #2
 800a7b4:	9007      	str	r0, [sp, #28]
 800a7b6:	986a      	ldr	r0, [sp, #424]	; 0x1a8
 800a7b8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a7bc:	985a      	ldr	r0, [sp, #360]	; 0x168
 800a7be:	9306      	str	r3, [sp, #24]
 800a7c0:	f1c2 0301 	rsb	r3, r2, #1
 800a7c4:	e9cd 3808 	strd	r3, r8, [sp, #32]
 800a7c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ca:	f85e 3b04 	ldr.w	r3, [lr], #4
 800a7ce:	2a00      	cmp	r2, #0
 800a7d0:	d044      	beq.n	800a85c <st_sssa8_convolve+0x5a8>
 800a7d2:	9a07      	ldr	r2, [sp, #28]
 800a7d4:	9c6a      	ldr	r4, [sp, #424]	; 0x1a8
 800a7d6:	1885      	adds	r5, r0, r2
 800a7d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7dc:	fa2f f792 	sxtb16	r7, r2, ror #8
 800a7e0:	fa2f f282 	sxtb16	r2, r2
 800a7e4:	f8d4 8000 	ldr.w	r8, [r4]
 800a7e8:	eac7 4c22 	pkhtb	ip, r7, r2, asr #16
 800a7ec:	eac2 4207 	pkhbt	r2, r2, r7, lsl #16
 800a7f0:	fb22 3308 	smlad	r3, r2, r8, r3
 800a7f4:	6862      	ldr	r2, [r4, #4]
 800a7f6:	3408      	adds	r4, #8
 800a7f8:	fb2c 3302 	smlad	r3, ip, r2, r3
 800a7fc:	42a8      	cmp	r0, r5
 800a7fe:	d1eb      	bne.n	800a7d8 <st_sssa8_convolve+0x524>
 800a800:	9a06      	ldr	r2, [sp, #24]
 800a802:	b379      	cbz	r1, 800a864 <st_sssa8_convolve+0x5b0>
 800a804:	f995 0000 	ldrsb.w	r0, [r5]
 800a808:	8814      	ldrh	r4, [r2, #0]
 800a80a:	fb14 3300 	smlabb	r3, r4, r0, r3
 800a80e:	f1bb 0f00 	cmp.w	fp, #0
 800a812:	d00b      	beq.n	800a82c <st_sssa8_convolve+0x578>
 800a814:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800a818:	2902      	cmp	r1, #2
 800a81a:	8854      	ldrh	r4, [r2, #2]
 800a81c:	fb14 3300 	smlabb	r3, r4, r0, r3
 800a820:	d004      	beq.n	800a82c <st_sssa8_convolve+0x578>
 800a822:	8890      	ldrh	r0, [r2, #4]
 800a824:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800a828:	fb10 3302 	smlabb	r3, r0, r2, r3
 800a82c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a82e:	1868      	adds	r0, r5, r1
 800a830:	2a15      	cmp	r2, #21
 800a832:	dd1b      	ble.n	800a86c <st_sssa8_convolve+0x5b8>
 800a834:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a836:	fb53 a302 	smmla	r3, r3, r2, sl
 800a83a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a83c:	4113      	asrs	r3, r2
 800a83e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a840:	4413      	add	r3, r2
 800a842:	f303 0307 	ssat	r3, #8, r3
 800a846:	f806 3c01 	strb.w	r3, [r6, #-1]
 800a84a:	3601      	adds	r6, #1
 800a84c:	45b1      	cmp	r9, r6
 800a84e:	f43f aee4 	beq.w	800a61a <st_sssa8_convolve+0x366>
 800a852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a854:	f85e 3b04 	ldr.w	r3, [lr], #4
 800a858:	2a00      	cmp	r2, #0
 800a85a:	d1ba      	bne.n	800a7d2 <st_sssa8_convolve+0x51e>
 800a85c:	4605      	mov	r5, r0
 800a85e:	9a6a      	ldr	r2, [sp, #424]	; 0x1a8
 800a860:	2900      	cmp	r1, #0
 800a862:	d1cf      	bne.n	800a804 <st_sssa8_convolve+0x550>
 800a864:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a866:	4628      	mov	r0, r5
 800a868:	2a15      	cmp	r2, #21
 800a86a:	dce3      	bgt.n	800a834 <st_sssa8_convolve+0x580>
 800a86c:	2a00      	cmp	r2, #0
 800a86e:	f340 8111 	ble.w	800aa94 <st_sssa8_convolve+0x7e0>
 800a872:	005b      	lsls	r3, r3, #1
 800a874:	e9dd 5416 	ldrd	r5, r4, [sp, #88]	; 0x58
 800a878:	fb53 5304 	smmla	r3, r3, r4, r5
 800a87c:	4113      	asrs	r3, r2
 800a87e:	f303 0307 	ssat	r3, #8, r3
 800a882:	f806 3c01 	strb.w	r3, [r6, #-1]
 800a886:	e7e0      	b.n	800a84a <st_sssa8_convolve+0x596>
 800a888:	9b08      	ldr	r3, [sp, #32]
 800a88a:	eb03 000e 	add.w	r0, r3, lr
 800a88e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a890:	fb0a 3000 	mla	r0, sl, r0, r3
 800a894:	f000 ffc2 	bl	800b81c <st_int8_to16_no_shift>
 800a898:	e73a      	b.n	800a710 <st_sssa8_convolve+0x45c>
 800a89a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800a89c:	2a00      	cmp	r2, #0
 800a89e:	d133      	bne.n	800a908 <st_sssa8_convolve+0x654>
 800a8a0:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800a8a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8a4:	3a01      	subs	r2, #1
 800a8a6:	9238      	str	r2, [sp, #224]	; 0xe0
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 800a8ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	f6ff af01 	blt.w	800a6b8 <st_sssa8_convolve+0x404>
 800a8b6:	b283      	uxth	r3, r0
 800a8b8:	930e      	str	r3, [sp, #56]	; 0x38
 800a8ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8bc:	454b      	cmp	r3, r9
 800a8be:	f47f af39 	bne.w	800a734 <st_sssa8_convolve+0x480>
 800a8c2:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800a8c4:	ee1a 2a10 	vmov	r2, s20
 800a8c8:	996a      	ldr	r1, [sp, #424]	; 0x1a8
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a8ce:	985a      	ldr	r0, [sp, #360]	; 0x168
 800a8d0:	9303      	str	r3, [sp, #12]
 800a8d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8d4:	9302      	str	r3, [sp, #8]
 800a8d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a8d8:	9301      	str	r3, [sp, #4]
 800a8da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	ee19 3a10 	vmov	r3, s18
 800a8e2:	f001 f8e7 	bl	800bab4 <st_sssa8_nn_mat_mult_kernel>
 800a8e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a8ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8ec:	440b      	add	r3, r1
 800a8ee:	9067      	str	r0, [sp, #412]	; 0x19c
 800a8f0:	3201      	adds	r2, #1
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	b210      	sxth	r0, r2
 800a8f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8fa:	4601      	mov	r1, r0
 800a8fc:	4283      	cmp	r3, r0
 800a8fe:	f340 80c2 	ble.w	800aa86 <st_sssa8_convolve+0x7d2>
 800a902:	f8dd 91a8 	ldr.w	r9, [sp, #424]	; 0x1a8
 800a906:	e6c9      	b.n	800a69c <st_sssa8_convolve+0x3e8>
 800a908:	3a01      	subs	r2, #1
 800a90a:	9237      	str	r2, [sp, #220]	; 0xdc
 800a90c:	f8bd 20fc 	ldrh.w	r2, [sp, #252]	; 0xfc
 800a910:	2a01      	cmp	r2, #1
 800a912:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 800a916:	f43f aeca 	beq.w	800a6ae <st_sssa8_convolve+0x3fa>
 800a91a:	b283      	uxth	r3, r0
 800a91c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a91e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a920:	f9bd 402c 	ldrsh.w	r4, [sp, #44]	; 0x2c
 800a924:	4288      	cmp	r0, r1
 800a926:	930e      	str	r3, [sp, #56]	; 0x38
 800a928:	f6bf af00 	bge.w	800a72c <st_sssa8_convolve+0x478>
 800a92c:	ee08 7a10 	vmov	s16, r7
 800a930:	f8cd b020 	str.w	fp, [sp, #32]
 800a934:	464f      	mov	r7, r9
 800a936:	46c3      	mov	fp, r8
 800a938:	4605      	mov	r5, r0
 800a93a:	ee18 2a90 	vmov	r2, s17
 800a93e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800a940:	4688      	mov	r8, r1
 800a942:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800a946:	3501      	adds	r5, #1
 800a948:	fb00 400b 	mla	r0, r0, fp, r4
 800a94c:	4639      	mov	r1, r7
 800a94e:	9206      	str	r2, [sp, #24]
 800a950:	b22d      	sxth	r5, r5
 800a952:	fb0a 9000 	mla	r0, sl, r0, r9
 800a956:	f000 ff61 	bl	800b81c <st_int8_to16_no_shift>
 800a95a:	4437      	add	r7, r6
 800a95c:	4545      	cmp	r5, r8
 800a95e:	4628      	mov	r0, r5
 800a960:	9a06      	ldr	r2, [sp, #24]
 800a962:	dbf0      	blt.n	800a946 <st_sssa8_convolve+0x692>
 800a964:	46b9      	mov	r9, r7
 800a966:	46d8      	mov	r8, fp
 800a968:	ee18 7a10 	vmov	r7, s16
 800a96c:	f8dd b020 	ldr.w	fp, [sp, #32]
 800a970:	e6dc      	b.n	800a72c <st_sssa8_convolve+0x478>
 800a972:	ee19 3a10 	vmov	r3, s18
 800a976:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a978:	ee19 1a90 	vmov	r1, s19
 800a97c:	985a      	ldr	r0, [sp, #360]	; 0x168
 800a97e:	f000 ffaf 	bl	800b8e0 <st_int8_to16_dual>
 800a982:	2301      	movs	r3, #1
 800a984:	9325      	str	r3, [sp, #148]	; 0x94
 800a986:	e50e      	b.n	800a3a6 <st_sssa8_convolve+0xf2>
 800a988:	9b08      	ldr	r3, [sp, #32]
 800a98a:	eb03 000c 	add.w	r0, r3, ip
 800a98e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a990:	fb08 3000 	mla	r0, r8, r0, r3
 800a994:	f000 ff42 	bl	800b81c <st_int8_to16_no_shift>
 800a998:	e5bf      	b.n	800a51a <st_sssa8_convolve+0x266>
 800a99a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800a99c:	2a00      	cmp	r2, #0
 800a99e:	d135      	bne.n	800aa0c <st_sssa8_convolve+0x758>
 800a9a0:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800a9a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9a4:	3a01      	subs	r2, #1
 800a9a6:	9238      	str	r2, [sp, #224]	; 0xe0
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 800a9ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	f6ff ad85 	blt.w	800a4c0 <st_sssa8_convolve+0x20c>
 800a9b6:	b283      	uxth	r3, r0
 800a9b8:	930e      	str	r3, [sp, #56]	; 0x38
 800a9ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9bc:	4553      	cmp	r3, sl
 800a9be:	f47f adbe 	bne.w	800a53e <st_sssa8_convolve+0x28a>
 800a9c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9c4:	ee1a 2a10 	vmov	r2, s20
 800a9c8:	996a      	ldr	r1, [sp, #424]	; 0x1a8
 800a9ca:	ee19 0a90 	vmov	r0, s19
 800a9ce:	9305      	str	r3, [sp, #20]
 800a9d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a9d2:	9304      	str	r3, [sp, #16]
 800a9d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9d6:	9303      	str	r3, [sp, #12]
 800a9d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a9da:	9302      	str	r3, [sp, #8]
 800a9dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9de:	9301      	str	r3, [sp, #4]
 800a9e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	ee19 3a10 	vmov	r3, s18
 800a9e8:	f002 f984 	bl	800ccf4 <st_sssa8_nn_mat_mult_kernel_opt>
 800a9ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9ee:	9019      	str	r0, [sp, #100]	; 0x64
 800a9f0:	3201      	adds	r2, #1
 800a9f2:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 800a9f6:	b210      	sxth	r0, r2
 800a9f8:	440b      	add	r3, r1
 800a9fa:	4601      	mov	r1, r0
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	930c      	str	r3, [sp, #48]	; 0x30
 800aa00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa02:	4283      	cmp	r3, r0
 800aa04:	dd38      	ble.n	800aa78 <st_sssa8_convolve+0x7c4>
 800aa06:	f8dd a1a8 	ldr.w	sl, [sp, #424]	; 0x1a8
 800aa0a:	e54b      	b.n	800a4a4 <st_sssa8_convolve+0x1f0>
 800aa0c:	3a01      	subs	r2, #1
 800aa0e:	9237      	str	r2, [sp, #220]	; 0xdc
 800aa10:	f8bd 20fc 	ldrh.w	r2, [sp, #252]	; 0xfc
 800aa14:	2a01      	cmp	r2, #1
 800aa16:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 800aa1a:	f43f ad4c 	beq.w	800a4b6 <st_sssa8_convolve+0x202>
 800aa1e:	b283      	uxth	r3, r0
 800aa20:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa22:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	; 0x30
 800aa26:	930e      	str	r3, [sp, #56]	; 0x38
 800aa28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa2a:	428b      	cmp	r3, r1
 800aa2c:	f6bf ad83 	bge.w	800a536 <st_sssa8_convolve+0x282>
 800aa30:	ee08 7a10 	vmov	s16, r7
 800aa34:	f8cd b020 	str.w	fp, [sp, #32]
 800aa38:	4657      	mov	r7, sl
 800aa3a:	46cb      	mov	fp, r9
 800aa3c:	461d      	mov	r5, r3
 800aa3e:	4618      	mov	r0, r3
 800aa40:	ee18 2a90 	vmov	r2, s17
 800aa44:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800aa46:	4689      	mov	r9, r1
 800aa48:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800aa4c:	3501      	adds	r5, #1
 800aa4e:	fb00 400b 	mla	r0, r0, fp, r4
 800aa52:	4639      	mov	r1, r7
 800aa54:	9206      	str	r2, [sp, #24]
 800aa56:	b22d      	sxth	r5, r5
 800aa58:	fb08 a000 	mla	r0, r8, r0, sl
 800aa5c:	f000 fede 	bl	800b81c <st_int8_to16_no_shift>
 800aa60:	4437      	add	r7, r6
 800aa62:	454d      	cmp	r5, r9
 800aa64:	4628      	mov	r0, r5
 800aa66:	9a06      	ldr	r2, [sp, #24]
 800aa68:	dbf0      	blt.n	800aa4c <st_sssa8_convolve+0x798>
 800aa6a:	46ba      	mov	sl, r7
 800aa6c:	46d9      	mov	r9, fp
 800aa6e:	ee18 7a10 	vmov	r7, s16
 800aa72:	f8dd b020 	ldr.w	fp, [sp, #32]
 800aa76:	e55e      	b.n	800a536 <st_sssa8_convolve+0x282>
 800aa78:	46da      	mov	sl, fp
 800aa7a:	f8dd b1a8 	ldr.w	fp, [sp, #424]	; 0x1a8
 800aa7e:	e56d      	b.n	800a55c <st_sssa8_convolve+0x2a8>
 800aa80:	b2a3      	uxth	r3, r4
 800aa82:	9321      	str	r3, [sp, #132]	; 0x84
 800aa84:	e56a      	b.n	800a55c <st_sssa8_convolve+0x2a8>
 800aa86:	46d9      	mov	r9, fp
 800aa88:	f8dd b1a8 	ldr.w	fp, [sp, #424]	; 0x1a8
 800aa8c:	e661      	b.n	800a752 <st_sssa8_convolve+0x49e>
 800aa8e:	b2a3      	uxth	r3, r4
 800aa90:	931a      	str	r3, [sp, #104]	; 0x68
 800aa92:	e65e      	b.n	800a752 <st_sssa8_convolve+0x49e>
 800aa94:	9a08      	ldr	r2, [sp, #32]
 800aa96:	4093      	lsls	r3, r2
 800aa98:	f303 031f 	ssat	r3, #32, r3
 800aa9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa9e:	fb53 f312 	smmulr	r3, r3, r2
 800aaa2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f303 0307 	ssat	r3, #8, r3
 800aaaa:	f806 3c01 	strb.w	r3, [r6, #-1]
 800aaae:	e6cc      	b.n	800a84a <st_sssa8_convolve+0x596>
 800aab0:	460b      	mov	r3, r1
 800aab2:	3301      	adds	r3, #1
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	9320      	str	r3, [sp, #128]	; 0x80
 800aab8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f43f adad 	beq.w	800a61a <st_sssa8_convolve+0x366>
 800aac0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aac2:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 800aac6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aac8:	2400      	movs	r4, #0
 800aaca:	fb03 f30a 	mul.w	r3, r3, sl
 800aace:	fa0f f888 	sxth.w	r8, r8
 800aad2:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 800aad6:	4625      	mov	r5, r4
 800aad8:	fb02 f303 	mul.w	r3, r2, r3
 800aadc:	9a6a      	ldr	r2, [sp, #424]	; 0x1a8
 800aade:	46d3      	mov	fp, sl
 800aae0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aae4:	9311      	str	r3, [sp, #68]	; 0x44
 800aae6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aae8:	3b01      	subs	r3, #1
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	9329      	str	r3, [sp, #164]	; 0xa4
 800aaee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aaf0:	425b      	negs	r3, r3
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	9326      	str	r3, [sp, #152]	; 0x98
 800aaf6:	ee18 3a90 	vmov	r3, s17
 800aafa:	005b      	lsls	r3, r3, #1
 800aafc:	9313      	str	r3, [sp, #76]	; 0x4c
 800aafe:	a836      	add	r0, sp, #216	; 0xd8
 800ab00:	f000 fe18 	bl	800b734 <ai_padding_opt_phase1>
 800ab04:	ee19 3a10 	vmov	r3, s18
 800ab08:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 800ab0a:	fb05 f303 	mul.w	r3, r5, r3
 800ab0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ab10:	fb01 2303 	mla	r3, r1, r3, r2
 800ab14:	9321      	str	r3, [sp, #132]	; 0x84
 800ab16:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f000 8150 	beq.w	800adbe <st_sssa8_convolve+0xb0a>
 800ab1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 8157 	beq.w	800add4 <st_sssa8_convolve+0xb20>
 800ab26:	b2a3      	uxth	r3, r4
 800ab28:	eef0 aa4a 	vmov.f32	s21, s20
 800ab2c:	46ca      	mov	sl, r9
 800ab2e:	ee08 8a10 	vmov	s16, r8
 800ab32:	9328      	str	r3, [sp, #160]	; 0xa0
 800ab34:	ed8d 9a24 	vstr	s18, [sp, #144]	; 0x90
 800ab38:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 800ab3c:	1a9b      	subs	r3, r3, r2
 800ab3e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ab40:	fb05 3302 	mla	r3, r5, r2, r3
 800ab44:	9309      	str	r3, [sp, #36]	; 0x24
 800ab46:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
 800ab4a:	9310      	str	r3, [sp, #64]	; 0x40
 800ab4c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ab4e:	9323      	str	r3, [sp, #140]	; 0x8c
 800ab50:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ab52:	9319      	str	r3, [sp, #100]	; 0x64
 800ab54:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 800ab56:	9327      	str	r3, [sp, #156]	; 0x9c
 800ab58:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800ab5a:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800ab5c:	9337      	str	r3, [sp, #220]	; 0xdc
 800ab5e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800ab60:	9236      	str	r2, [sp, #216]	; 0xd8
 800ab62:	9338      	str	r3, [sp, #224]	; 0xe0
 800ab64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f000 80ee 	beq.w	800ad48 <st_sssa8_convolve+0xa94>
 800ab6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab6e:	2000      	movs	r0, #0
 800ab70:	9e6a      	ldr	r6, [sp, #424]	; 0x1a8
 800ab72:	425b      	negs	r3, r3
 800ab74:	4601      	mov	r1, r0
 800ab76:	4637      	mov	r7, r6
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	930c      	str	r3, [sp, #48]	; 0x30
 800ab7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab7e:	931c      	str	r3, [sp, #112]	; 0x70
 800ab80:	2a00      	cmp	r2, #0
 800ab82:	d060      	beq.n	800ac46 <st_sssa8_convolve+0x992>
 800ab84:	3a01      	subs	r2, #1
 800ab86:	9236      	str	r2, [sp, #216]	; 0xd8
 800ab88:	2201      	movs	r2, #1
 800ab8a:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 800ab8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab92:	4293      	cmp	r3, r2
 800ab94:	dd64      	ble.n	800ac60 <st_sssa8_convolve+0x9ac>
 800ab96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab98:	ee18 8a10 	vmov	r8, s16
 800ab9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab9e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800aba0:	fb01 3102 	mla	r1, r1, r2, r3
 800aba4:	b283      	uxth	r3, r0
 800aba6:	930e      	str	r3, [sp, #56]	; 0x38
 800aba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abaa:	1acd      	subs	r5, r1, r3
 800abac:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800abb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800abb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abb4:	4699      	mov	r9, r3
 800abb6:	461a      	mov	r2, r3
 800abb8:	465b      	mov	r3, fp
 800abba:	46cb      	mov	fp, r9
 800abbc:	4699      	mov	r9, r3
 800abbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abc0:	42a9      	cmp	r1, r5
 800abc2:	da25      	bge.n	800ac10 <st_sssa8_convolve+0x95c>
 800abc4:	9b07      	ldr	r3, [sp, #28]
 800abc6:	460c      	mov	r4, r1
 800abc8:	f8cd b018 	str.w	fp, [sp, #24]
 800abcc:	468c      	mov	ip, r1
 800abce:	4293      	cmp	r3, r2
 800abd0:	fb0a f202 	mul.w	r2, sl, r2
 800abd4:	bfcc      	ite	gt
 800abd6:	2300      	movgt	r3, #0
 800abd8:	2301      	movle	r3, #1
 800abda:	9208      	str	r2, [sp, #32]
 800abdc:	ea43 73db 	orr.w	r3, r3, fp, lsr #31
 800abe0:	469b      	mov	fp, r3
 800abe2:	45e2      	cmp	sl, ip
 800abe4:	464a      	mov	r2, r9
 800abe6:	4639      	mov	r1, r7
 800abe8:	4640      	mov	r0, r8
 800abea:	bfcc      	ite	gt
 800abec:	2300      	movgt	r3, #0
 800abee:	2301      	movle	r3, #1
 800abf0:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 800abf4:	d102      	bne.n	800abfc <st_sssa8_convolve+0x948>
 800abf6:	f1bb 0f00 	cmp.w	fp, #0
 800abfa:	d05a      	beq.n	800acb2 <st_sssa8_convolve+0x9fe>
 800abfc:	f003 f808 	bl	800dc10 <arm_fill_q15>
 800ac00:	3401      	adds	r4, #1
 800ac02:	4437      	add	r7, r6
 800ac04:	b224      	sxth	r4, r4
 800ac06:	42ac      	cmp	r4, r5
 800ac08:	46a4      	mov	ip, r4
 800ac0a:	dbea      	blt.n	800abe2 <st_sssa8_convolve+0x92e>
 800ac0c:	f8dd b018 	ldr.w	fp, [sp, #24]
 800ac10:	f10b 0b01 	add.w	fp, fp, #1
 800ac14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac16:	fa0f fb8b 	sxth.w	fp, fp
 800ac1a:	459b      	cmp	fp, r3
 800ac1c:	465a      	mov	r2, fp
 800ac1e:	dbce      	blt.n	800abbe <st_sssa8_convolve+0x90a>
 800ac20:	46cb      	mov	fp, r9
 800ac22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac24:	42bb      	cmp	r3, r7
 800ac26:	d020      	beq.n	800ac6a <st_sssa8_convolve+0x9b6>
 800ac28:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ac2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac2e:	3001      	adds	r0, #1
 800ac30:	441a      	add	r2, r3
 800ac32:	b200      	sxth	r0, r0
 800ac34:	b293      	uxth	r3, r2
 800ac36:	4601      	mov	r1, r0
 800ac38:	930c      	str	r3, [sp, #48]	; 0x30
 800ac3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac3c:	4283      	cmp	r3, r0
 800ac3e:	dd6b      	ble.n	800ad18 <st_sssa8_convolve+0xa64>
 800ac40:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800ac42:	2a00      	cmp	r2, #0
 800ac44:	d19e      	bne.n	800ab84 <st_sssa8_convolve+0x8d0>
 800ac46:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800ac48:	2a00      	cmp	r2, #0
 800ac4a:	d13b      	bne.n	800acc4 <st_sssa8_convolve+0xa10>
 800ac4c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800ac4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac50:	3a01      	subs	r2, #1
 800ac52:	9238      	str	r2, [sp, #224]	; 0xe0
 800ac54:	2201      	movs	r2, #1
 800ac56:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 800ac5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	dc9a      	bgt.n	800ab96 <st_sssa8_convolve+0x8e2>
 800ac60:	b283      	uxth	r3, r0
 800ac62:	930e      	str	r3, [sp, #56]	; 0x38
 800ac64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac66:	42bb      	cmp	r3, r7
 800ac68:	d1de      	bne.n	800ac28 <st_sssa8_convolve+0x974>
 800ac6a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ac6c:	ee1a 2a90 	vmov	r2, s21
 800ac70:	996a      	ldr	r1, [sp, #424]	; 0x1a8
 800ac72:	ee19 0a90 	vmov	r0, s19
 800ac76:	9305      	str	r3, [sp, #20]
 800ac78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ac7a:	9304      	str	r3, [sp, #16]
 800ac7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac7e:	9303      	str	r3, [sp, #12]
 800ac80:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ac82:	9302      	str	r3, [sp, #8]
 800ac84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac86:	9301      	str	r3, [sp, #4]
 800ac88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	ee19 3a10 	vmov	r3, s18
 800ac90:	f002 f830 	bl	800ccf4 <st_sssa8_nn_mat_mult_kernel_opt>
 800ac94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac96:	901c      	str	r0, [sp, #112]	; 0x70
 800ac98:	3201      	adds	r2, #1
 800ac9a:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 800ac9e:	b210      	sxth	r0, r2
 800aca0:	440b      	add	r3, r1
 800aca2:	4601      	mov	r1, r0
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	930c      	str	r3, [sp, #48]	; 0x30
 800aca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acaa:	4283      	cmp	r3, r0
 800acac:	dd4c      	ble.n	800ad48 <st_sssa8_convolve+0xa94>
 800acae:	9f6a      	ldr	r7, [sp, #424]	; 0x1a8
 800acb0:	e7c6      	b.n	800ac40 <st_sssa8_convolve+0x98c>
 800acb2:	9b08      	ldr	r3, [sp, #32]
 800acb4:	eb03 000c 	add.w	r0, r3, ip
 800acb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acba:	fb09 3000 	mla	r0, r9, r0, r3
 800acbe:	f000 fdad 	bl	800b81c <st_int8_to16_no_shift>
 800acc2:	e79d      	b.n	800ac00 <st_sssa8_convolve+0x94c>
 800acc4:	3a01      	subs	r2, #1
 800acc6:	9237      	str	r2, [sp, #220]	; 0xdc
 800acc8:	f8bd 20fc 	ldrh.w	r2, [sp, #252]	; 0xfc
 800accc:	2a01      	cmp	r2, #1
 800acce:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 800acd2:	f43f af5c 	beq.w	800ab8e <st_sssa8_convolve+0x8da>
 800acd6:	b283      	uxth	r3, r0
 800acd8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800acda:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	; 0x30
 800acde:	930e      	str	r3, [sp, #56]	; 0x38
 800ace0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ace2:	429e      	cmp	r6, r3
 800ace4:	dd9d      	ble.n	800ac22 <st_sssa8_convolve+0x96e>
 800ace6:	46b8      	mov	r8, r7
 800ace8:	461d      	mov	r5, r3
 800acea:	4618      	mov	r0, r3
 800acec:	ee18 2a90 	vmov	r2, s17
 800acf0:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800acf4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800acf6:	3501      	adds	r5, #1
 800acf8:	fb00 400a 	mla	r0, r0, sl, r4
 800acfc:	4641      	mov	r1, r8
 800acfe:	9206      	str	r2, [sp, #24]
 800ad00:	b22d      	sxth	r5, r5
 800ad02:	fb0b 7000 	mla	r0, fp, r0, r7
 800ad06:	f000 fd89 	bl	800b81c <st_int8_to16_no_shift>
 800ad0a:	44c8      	add	r8, r9
 800ad0c:	42b5      	cmp	r5, r6
 800ad0e:	4628      	mov	r0, r5
 800ad10:	9a06      	ldr	r2, [sp, #24]
 800ad12:	dbf0      	blt.n	800acf6 <st_sssa8_convolve+0xa42>
 800ad14:	4647      	mov	r7, r8
 800ad16:	e784      	b.n	800ac22 <st_sssa8_convolve+0x96e>
 800ad18:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 800ad1a:	429f      	cmp	r7, r3
 800ad1c:	d014      	beq.n	800ad48 <st_sssa8_convolve+0xa94>
 800ad1e:	4619      	mov	r1, r3
 800ad20:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ad22:	ee1a 2a90 	vmov	r2, s21
 800ad26:	ee19 0a90 	vmov	r0, s19
 800ad2a:	9305      	str	r3, [sp, #20]
 800ad2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ad2e:	9304      	str	r3, [sp, #16]
 800ad30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad32:	9303      	str	r3, [sp, #12]
 800ad34:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ad36:	9302      	str	r3, [sp, #8]
 800ad38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad3a:	9301      	str	r3, [sp, #4]
 800ad3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	ee19 3a10 	vmov	r3, s18
 800ad44:	f002 faaa 	bl	800d29c <st_sssa8_nn_mat_mult_kernel_single_opt>
 800ad48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad4c:	9921      	ldr	r1, [sp, #132]	; 0x84
 800ad4e:	1a9b      	subs	r3, r3, r2
 800ad50:	4411      	add	r1, r2
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	9121      	str	r1, [sp, #132]	; 0x84
 800ad56:	429a      	cmp	r2, r3
 800ad58:	9324      	str	r3, [sp, #144]	; 0x90
 800ad5a:	bf28      	it	cs
 800ad5c:	461a      	movcs	r2, r3
 800ad5e:	b294      	uxth	r4, r2
 800ad60:	b954      	cbnz	r4, 800ad78 <st_sssa8_convolve+0xac4>
 800ad62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad64:	3b01      	subs	r3, #1
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	461a      	mov	r2, r3
 800ad6a:	9323      	str	r3, [sp, #140]	; 0x8c
 800ad6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d013      	beq.n	800ad9c <st_sssa8_convolve+0xae8>
 800ad74:	9419      	str	r4, [sp, #100]	; 0x64
 800ad76:	e6ef      	b.n	800ab58 <st_sssa8_convolve+0x8a4>
 800ad78:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800ad7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad7e:	fb02 1003 	mla	r0, r2, r3, r1
 800ad82:	ee1a 1a90 	vmov	r1, s21
 800ad86:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ad8a:	ee19 1a90 	vmov	r1, s19
 800ad8e:	9027      	str	r0, [sp, #156]	; 0x9c
 800ad90:	ee0a 3a90 	vmov	s21, r3
 800ad94:	4623      	mov	r3, r4
 800ad96:	f000 fda3 	bl	800b8e0 <st_int8_to16_dual>
 800ad9a:	e7e2      	b.n	800ad62 <st_sssa8_convolve+0xaae>
 800ad9c:	46d1      	mov	r9, sl
 800ad9e:	ee18 8a10 	vmov	r8, s16
 800ada2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ada4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ada6:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800ada8:	4413      	add	r3, r2
 800adaa:	3401      	adds	r4, #1
 800adac:	b29b      	uxth	r3, r3
 800adae:	b224      	sxth	r4, r4
 800adb0:	9326      	str	r3, [sp, #152]	; 0x98
 800adb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800adb4:	4625      	mov	r5, r4
 800adb6:	42a3      	cmp	r3, r4
 800adb8:	f73f aea1 	bgt.w	800aafe <st_sssa8_convolve+0x84a>
 800adbc:	e42d      	b.n	800a61a <st_sssa8_convolve+0x366>
 800adbe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800adc0:	ee19 1a90 	vmov	r1, s19
 800adc4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800adc6:	985a      	ldr	r0, [sp, #360]	; 0x168
 800adc8:	f000 fd8a 	bl	800b8e0 <st_int8_to16_dual>
 800adcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800adce:	2b00      	cmp	r3, #0
 800add0:	f47f aea9 	bne.w	800ab26 <st_sssa8_convolve+0x872>
 800add4:	b2a3      	uxth	r3, r4
 800add6:	9328      	str	r3, [sp, #160]	; 0xa0
 800add8:	e7e3      	b.n	800ada2 <st_sssa8_convolve+0xaee>
 800adda:	bf00      	nop

0800addc <st_sssa8_convolve_rgb>:
 800addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade0:	ed2d 8b02 	vpush	{d8}
 800ade4:	b0c7      	sub	sp, #284	; 0x11c
 800ade6:	2a03      	cmp	r2, #3
 800ade8:	4682      	mov	sl, r0
 800adea:	468b      	mov	fp, r1
 800adec:	931a      	str	r3, [sp, #104]	; 0x68
 800adee:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
 800adf2:	f8bd 414c 	ldrh.w	r4, [sp, #332]	; 0x14c
 800adf6:	9312      	str	r3, [sp, #72]	; 0x48
 800adf8:	f8bd 3150 	ldrh.w	r3, [sp, #336]	; 0x150
 800adfc:	f8bd 5170 	ldrh.w	r5, [sp, #368]	; 0x170
 800ae00:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae02:	f8bd 3154 	ldrh.w	r3, [sp, #340]	; 0x154
 800ae06:	f99d 6164 	ldrsb.w	r6, [sp, #356]	; 0x164
 800ae0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae0c:	9410      	str	r4, [sp, #64]	; 0x40
 800ae0e:	f99d 3168 	ldrsb.w	r3, [sp, #360]	; 0x168
 800ae12:	950e      	str	r5, [sp, #56]	; 0x38
 800ae14:	e9dd 1057 	ldrd	r1, r0, [sp, #348]	; 0x15c
 800ae18:	f040 83ca 	bne.w	800b5b0 <st_sssa8_convolve_rgb+0x7d4>
 800ae1c:	680a      	ldr	r2, [r1, #0]
 800ae1e:	f9b0 0000 	ldrsh.w	r0, [r0]
 800ae22:	9216      	str	r2, [sp, #88]	; 0x58
 800ae24:	fb14 f204 	smulbb	r2, r4, r4
 800ae28:	4601      	mov	r1, r0
 800ae2a:	9017      	str	r0, [sp, #92]	; 0x5c
 800ae2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ae30:	b294      	uxth	r4, r2
 800ae32:	1e42      	subs	r2, r0, #1
 800ae34:	985d      	ldr	r0, [sp, #372]	; 0x174
 800ae36:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae38:	b292      	uxth	r2, r2
 800ae3a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800ae3e:	9413      	str	r4, [sp, #76]	; 0x4c
 800ae40:	2a14      	cmp	r2, #20
 800ae42:	901e      	str	r0, [sp, #120]	; 0x78
 800ae44:	f240 83ac 	bls.w	800b5a0 <st_sssa8_convolve_rgb+0x7c4>
 800ae48:	9314      	str	r3, [sp, #80]	; 0x50
 800ae4a:	462b      	mov	r3, r5
 800ae4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae4e:	a932      	add	r1, sp, #200	; 0xc8
 800ae50:	a83c      	add	r0, sp, #240	; 0xf0
 800ae52:	fb02 f402 	mul.w	r4, r2, r2
 800ae56:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
 800ae5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae5c:	0065      	lsls	r5, r4, #1
 800ae5e:	e9cd 3334 	strd	r3, r3, [sp, #208]	; 0xd0
 800ae62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae64:	e9cd 3336 	strd	r3, r3, [sp, #216]	; 0xd8
 800ae68:	ab2e      	add	r3, sp, #184	; 0xb8
 800ae6a:	e9cd 222f 	strd	r2, r2, [sp, #188]	; 0xbc
 800ae6e:	9300      	str	r3, [sp, #0]
 800ae70:	aa26      	add	r2, sp, #152	; 0x98
 800ae72:	ab2a      	add	r3, sp, #168	; 0xa8
 800ae74:	e9cd bb27 	strd	fp, fp, [sp, #156]	; 0x9c
 800ae78:	f000 fc02 	bl	800b680 <ai_padding_opt_init>
 800ae7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae7e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ae82:	995d      	ldr	r1, [sp, #372]	; 0x174
 800ae84:	4413      	add	r3, r2
 800ae86:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ae8a:	ee08 3a10 	vmov	s16, r3
 800ae8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae90:	fb02 f303 	mul.w	r3, r2, r3
 800ae94:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800ae98:	f340 8378 	ble.w	800b58c <st_sssa8_convolve_rgb+0x7b0>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	9321      	str	r3, [sp, #132]	; 0x84
 800aea0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aea2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800aea6:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aeac:	f023 0301 	bic.w	r3, r3, #1
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	bf28      	it	cs
 800aeb4:	4613      	movcs	r3, r2
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	931f      	str	r3, [sp, #124]	; 0x7c
 800aeba:	f240 81a4 	bls.w	800b206 <st_sssa8_convolve_rgb+0x42a>
 800aebe:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800aec0:	4613      	mov	r3, r2
 800aec2:	fbb2 f2f1 	udiv	r2, r2, r1
 800aec6:	fb01 3312 	mls	r3, r1, r2, r3
 800aeca:	b292      	uxth	r2, r2
 800aecc:	b29b      	uxth	r3, r3
 800aece:	921d      	str	r2, [sp, #116]	; 0x74
 800aed0:	b11b      	cbz	r3, 800aeda <st_sssa8_convolve_rgb+0xfe>
 800aed2:	4613      	mov	r3, r2
 800aed4:	3301      	adds	r3, #1
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	931d      	str	r3, [sp, #116]	; 0x74
 800aeda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f000 8184 	beq.w	800b1ea <st_sssa8_convolve_rgb+0x40e>
 800aee2:	442c      	add	r4, r5
 800aee4:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 800aee6:	b235      	sxth	r5, r6
 800aee8:	2600      	movs	r6, #0
 800aeea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aeee:	4657      	mov	r7, sl
 800aef0:	4634      	mov	r4, r6
 800aef2:	46aa      	mov	sl, r5
 800aef4:	9311      	str	r3, [sp, #68]	; 0x44
 800aef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aef8:	425b      	negs	r3, r3
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aefe:	3b01      	subs	r3, #1
 800af00:	9224      	str	r2, [sp, #144]	; 0x90
 800af02:	9220      	str	r2, [sp, #128]	; 0x80
 800af04:	b29b      	uxth	r3, r3
 800af06:	9325      	str	r3, [sp, #148]	; 0x94
 800af08:	a83c      	add	r0, sp, #240	; 0xf0
 800af0a:	f000 fc13 	bl	800b734 <ai_padding_opt_phase1>
 800af0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af10:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 800af12:	fb04 f303 	mul.w	r3, r4, r3
 800af16:	990e      	ldr	r1, [sp, #56]	; 0x38
 800af18:	fb01 2303 	mla	r3, r1, r3, r2
 800af1c:	9319      	str	r3, [sp, #100]	; 0x64
 800af1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 8168 	beq.w	800b1f6 <st_sssa8_convolve_rgb+0x41a>
 800af26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 814f 	beq.w	800b1cc <st_sssa8_convolve_rgb+0x3f0>
 800af2e:	b2b3      	uxth	r3, r6
 800af30:	9323      	str	r3, [sp, #140]	; 0x8c
 800af32:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 800af36:	1a9b      	subs	r3, r3, r2
 800af38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af3a:	fb04 3302 	mla	r3, r4, r2, r3
 800af3e:	9308      	str	r3, [sp, #32]
 800af40:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
 800af44:	930d      	str	r3, [sp, #52]	; 0x34
 800af46:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800af48:	931b      	str	r3, [sp, #108]	; 0x6c
 800af4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af4c:	931c      	str	r3, [sp, #112]	; 0x70
 800af4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800af50:	9315      	str	r3, [sp, #84]	; 0x54
 800af52:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800af54:	9322      	str	r3, [sp, #136]	; 0x88
 800af56:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800af58:	ee08 3a90 	vmov	s17, r3
 800af5c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800af5e:	2000      	movs	r0, #0
 800af60:	9919      	ldr	r1, [sp, #100]	; 0x64
 800af62:	933d      	str	r3, [sp, #244]	; 0xf4
 800af64:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800af66:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800af68:	933e      	str	r3, [sp, #248]	; 0xf8
 800af6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800af6c:	9118      	str	r1, [sp, #96]	; 0x60
 800af6e:	4601      	mov	r1, r0
 800af70:	9309      	str	r3, [sp, #36]	; 0x24
 800af72:	923c      	str	r2, [sp, #240]	; 0xf0
 800af74:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 800af76:	2a00      	cmp	r2, #0
 800af78:	d05b      	beq.n	800b032 <st_sssa8_convolve_rgb+0x256>
 800af7a:	3a01      	subs	r2, #1
 800af7c:	923c      	str	r2, [sp, #240]	; 0xf0
 800af7e:	2201      	movs	r2, #1
 800af80:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800af84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af86:	9c08      	ldr	r4, [sp, #32]
 800af88:	42a2      	cmp	r2, r4
 800af8a:	da5f      	bge.n	800b04c <st_sssa8_convolve_rgb+0x270>
 800af8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800af90:	970a      	str	r7, [sp, #40]	; 0x28
 800af92:	fb01 2104 	mla	r1, r1, r4, r2
 800af96:	b282      	uxth	r2, r0
 800af98:	920c      	str	r2, [sp, #48]	; 0x30
 800af9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af9c:	1a8d      	subs	r5, r1, r2
 800af9e:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 800afa2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800afa4:	4690      	mov	r8, r2
 800afa6:	4689      	mov	r9, r1
 800afa8:	45a8      	cmp	r8, r5
 800afaa:	da26      	bge.n	800affa <st_sssa8_convolve_rgb+0x21e>
 800afac:	ea4f 7ed9 	mov.w	lr, r9, lsr #31
 800afb0:	1d9a      	adds	r2, r3, #6
 800afb2:	4640      	mov	r0, r8
 800afb4:	fb01 f30b 	mul.w	r3, r1, fp
 800afb8:	458b      	cmp	fp, r1
 800afba:	bfd8      	it	le
 800afbc:	f04e 0e01 	orrle.w	lr, lr, #1
 800afc0:	4646      	mov	r6, r8
 800afc2:	9307      	str	r3, [sp, #28]
 800afc4:	2400      	movs	r4, #0
 800afc6:	0fc1      	lsrs	r1, r0, #31
 800afc8:	1c47      	adds	r7, r0, #1
 800afca:	4613      	mov	r3, r2
 800afcc:	f36a 040f 	bfi	r4, sl, #0, #16
 800afd0:	45b3      	cmp	fp, r6
 800afd2:	bfd8      	it	le
 800afd4:	f041 0101 	orrle.w	r1, r1, #1
 800afd8:	f1a2 0c06 	sub.w	ip, r2, #6
 800afdc:	f36a 441f 	bfi	r4, sl, #16, #16
 800afe0:	b911      	cbnz	r1, 800afe8 <st_sssa8_convolve_rgb+0x20c>
 800afe2:	f1be 0f00 	cmp.w	lr, #0
 800afe6:	d059      	beq.n	800b09c <st_sssa8_convolve_rgb+0x2c0>
 800afe8:	b238      	sxth	r0, r7
 800afea:	f842 4c04 	str.w	r4, [r2, #-4]
 800afee:	f822 ac06 	strh.w	sl, [r2, #-6]
 800aff2:	3206      	adds	r2, #6
 800aff4:	42a8      	cmp	r0, r5
 800aff6:	4606      	mov	r6, r0
 800aff8:	dbe4      	blt.n	800afc4 <st_sssa8_convolve_rgb+0x1e8>
 800affa:	f109 0901 	add.w	r9, r9, #1
 800affe:	9a08      	ldr	r2, [sp, #32]
 800b000:	fa0f f989 	sxth.w	r9, r9
 800b004:	4591      	cmp	r9, r2
 800b006:	4649      	mov	r1, r9
 800b008:	dbce      	blt.n	800afa8 <st_sssa8_convolve_rgb+0x1cc>
 800b00a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b00c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b00e:	429a      	cmp	r2, r3
 800b010:	d021      	beq.n	800b056 <st_sssa8_convolve_rgb+0x27a>
 800b012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b014:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b016:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b018:	440a      	add	r2, r1
 800b01a:	3001      	adds	r0, #1
 800b01c:	b292      	uxth	r2, r2
 800b01e:	b200      	sxth	r0, r0
 800b020:	9209      	str	r2, [sp, #36]	; 0x24
 800b022:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b024:	4601      	mov	r1, r0
 800b026:	4282      	cmp	r2, r0
 800b028:	f340 808f 	ble.w	800b14a <st_sssa8_convolve_rgb+0x36e>
 800b02c:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800b02e:	2a00      	cmp	r2, #0
 800b030:	d1a3      	bne.n	800af7a <st_sssa8_convolve_rgb+0x19e>
 800b032:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800b034:	2a00      	cmp	r2, #0
 800b036:	d14c      	bne.n	800b0d2 <st_sssa8_convolve_rgb+0x2f6>
 800b038:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800b03a:	9c08      	ldr	r4, [sp, #32]
 800b03c:	3a01      	subs	r2, #1
 800b03e:	923e      	str	r2, [sp, #248]	; 0xf8
 800b040:	2201      	movs	r2, #1
 800b042:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800b046:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b048:	42a2      	cmp	r2, r4
 800b04a:	db9f      	blt.n	800af8c <st_sssa8_convolve_rgb+0x1b0>
 800b04c:	b282      	uxth	r2, r0
 800b04e:	920c      	str	r2, [sp, #48]	; 0x30
 800b050:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b052:	429a      	cmp	r2, r3
 800b054:	d1dd      	bne.n	800b012 <st_sssa8_convolve_rgb+0x236>
 800b056:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b058:	ee18 2a90 	vmov	r2, s17
 800b05c:	995d      	ldr	r1, [sp, #372]	; 0x174
 800b05e:	ee18 0a10 	vmov	r0, s16
 800b062:	9305      	str	r3, [sp, #20]
 800b064:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b066:	9304      	str	r3, [sp, #16]
 800b068:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b06a:	9303      	str	r3, [sp, #12]
 800b06c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b06e:	9302      	str	r3, [sp, #8]
 800b070:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b072:	9301      	str	r3, [sp, #4]
 800b074:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b07a:	f001 fe3b 	bl	800ccf4 <st_sssa8_nn_mat_mult_kernel_opt>
 800b07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b080:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b082:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b084:	440b      	add	r3, r1
 800b086:	9018      	str	r0, [sp, #96]	; 0x60
 800b088:	3201      	adds	r2, #1
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	b210      	sxth	r0, r2
 800b08e:	9309      	str	r3, [sp, #36]	; 0x24
 800b090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b092:	4601      	mov	r1, r0
 800b094:	4283      	cmp	r3, r0
 800b096:	dd6f      	ble.n	800b178 <st_sssa8_convolve_rgb+0x39c>
 800b098:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 800b09a:	e7c7      	b.n	800b02c <st_sssa8_convolve_rgb+0x250>
 800b09c:	9b07      	ldr	r3, [sp, #28]
 800b09e:	3001      	adds	r0, #1
 800b0a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b0a2:	441e      	add	r6, r3
 800b0a4:	b200      	sxth	r0, r0
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	3206      	adds	r2, #6
 800b0aa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800b0ae:	42a8      	cmp	r0, r5
 800b0b0:	5989      	ldr	r1, [r1, r6]
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	fa2f f481 	sxtb16	r4, r1
 800b0b8:	ea4f 2131 	mov.w	r1, r1, ror #8
 800b0bc:	fa2f f181 	sxtb16	r1, r1
 800b0c0:	eac1 0104 	pkhbt	r1, r1, r4
 800b0c4:	f8cc 1002 	str.w	r1, [ip, #2]
 800b0c8:	f822 4c0c 	strh.w	r4, [r2, #-12]
 800b0cc:	f6ff af7a 	blt.w	800afc4 <st_sssa8_convolve_rgb+0x1e8>
 800b0d0:	e793      	b.n	800affa <st_sssa8_convolve_rgb+0x21e>
 800b0d2:	3a01      	subs	r2, #1
 800b0d4:	923d      	str	r2, [sp, #244]	; 0xf4
 800b0d6:	f8bd 2114 	ldrh.w	r2, [sp, #276]	; 0x114
 800b0da:	2a01      	cmp	r2, #1
 800b0dc:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800b0e0:	f43f af50 	beq.w	800af84 <st_sssa8_convolve_rgb+0x1a8>
 800b0e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0e6:	9c08      	ldr	r4, [sp, #32]
 800b0e8:	42a2      	cmp	r2, r4
 800b0ea:	daaf      	bge.n	800b04c <st_sssa8_convolve_rgb+0x270>
 800b0ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b0ee:	46a6      	mov	lr, r4
 800b0f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b0f2:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 800b0f6:	fb01 2104 	mla	r1, r1, r4, r2
 800b0fa:	b282      	uxth	r2, r0
 800b0fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b0fe:	920c      	str	r2, [sp, #48]	; 0x30
 800b100:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b102:	4626      	mov	r6, r4
 800b104:	1a8d      	subs	r5, r1, r2
 800b106:	45ac      	cmp	ip, r5
 800b108:	da19      	bge.n	800b13e <st_sssa8_convolve_rgb+0x362>
 800b10a:	fb04 f00b 	mul.w	r0, r4, fp
 800b10e:	4661      	mov	r1, ip
 800b110:	4662      	mov	r2, ip
 800b112:	4402      	add	r2, r0
 800b114:	3101      	adds	r1, #1
 800b116:	3306      	adds	r3, #6
 800b118:	b209      	sxth	r1, r1
 800b11a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b11e:	42a9      	cmp	r1, r5
 800b120:	58ba      	ldr	r2, [r7, r2]
 800b122:	fa2f f482 	sxtb16	r4, r2
 800b126:	ea4f 2232 	mov.w	r2, r2, ror #8
 800b12a:	f823 4c06 	strh.w	r4, [r3, #-6]
 800b12e:	fa2f f282 	sxtb16	r2, r2
 800b132:	eac2 0204 	pkhbt	r2, r2, r4
 800b136:	f843 2c04 	str.w	r2, [r3, #-4]
 800b13a:	460a      	mov	r2, r1
 800b13c:	dbe9      	blt.n	800b112 <st_sssa8_convolve_rgb+0x336>
 800b13e:	3601      	adds	r6, #1
 800b140:	b236      	sxth	r6, r6
 800b142:	4576      	cmp	r6, lr
 800b144:	4634      	mov	r4, r6
 800b146:	dbde      	blt.n	800b106 <st_sssa8_convolve_rgb+0x32a>
 800b148:	e760      	b.n	800b00c <st_sssa8_convolve_rgb+0x230>
 800b14a:	9a5d      	ldr	r2, [sp, #372]	; 0x174
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d013      	beq.n	800b178 <st_sssa8_convolve_rgb+0x39c>
 800b150:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b152:	4611      	mov	r1, r2
 800b154:	ee18 0a10 	vmov	r0, s16
 800b158:	ee18 2a90 	vmov	r2, s17
 800b15c:	9305      	str	r3, [sp, #20]
 800b15e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b160:	9304      	str	r3, [sp, #16]
 800b162:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b164:	9303      	str	r3, [sp, #12]
 800b166:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b168:	9302      	str	r3, [sp, #8]
 800b16a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b16c:	9301      	str	r3, [sp, #4]
 800b16e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b174:	f002 f892 	bl	800d29c <st_sssa8_nn_mat_mult_kernel_single_opt>
 800b178:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b17a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b17c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b17e:	1a9b      	subs	r3, r3, r2
 800b180:	4411      	add	r1, r2
 800b182:	b29b      	uxth	r3, r3
 800b184:	9119      	str	r1, [sp, #100]	; 0x64
 800b186:	429a      	cmp	r2, r3
 800b188:	931c      	str	r3, [sp, #112]	; 0x70
 800b18a:	bf28      	it	cs
 800b18c:	461a      	movcs	r2, r3
 800b18e:	b294      	uxth	r4, r2
 800b190:	b954      	cbnz	r4, 800b1a8 <st_sssa8_convolve_rgb+0x3cc>
 800b192:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b194:	3b01      	subs	r3, #1
 800b196:	b29b      	uxth	r3, r3
 800b198:	461a      	mov	r2, r3
 800b19a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b19c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d015      	beq.n	800b1d0 <st_sssa8_convolve_rgb+0x3f4>
 800b1a4:	9415      	str	r4, [sp, #84]	; 0x54
 800b1a6:	e6d9      	b.n	800af5c <st_sssa8_convolve_rgb+0x180>
 800b1a8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b1aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b1ae:	fb02 1003 	mla	r0, r2, r3, r1
 800b1b2:	ee18 1a90 	vmov	r1, s17
 800b1b6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b1ba:	ee18 1a10 	vmov	r1, s16
 800b1be:	9022      	str	r0, [sp, #136]	; 0x88
 800b1c0:	ee08 3a90 	vmov	s17, r3
 800b1c4:	4623      	mov	r3, r4
 800b1c6:	f000 fb8b 	bl	800b8e0 <st_int8_to16_dual>
 800b1ca:	e7e2      	b.n	800b192 <st_sssa8_convolve_rgb+0x3b6>
 800b1cc:	b2b3      	uxth	r3, r6
 800b1ce:	9323      	str	r3, [sp, #140]	; 0x8c
 800b1d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b1d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1d4:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800b1d6:	4413      	add	r3, r2
 800b1d8:	3601      	adds	r6, #1
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	b236      	sxth	r6, r6
 800b1de:	9320      	str	r3, [sp, #128]	; 0x80
 800b1e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1e2:	4634      	mov	r4, r6
 800b1e4:	42b3      	cmp	r3, r6
 800b1e6:	f73f ae8f 	bgt.w	800af08 <st_sssa8_convolve_rgb+0x12c>
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	b047      	add	sp, #284	; 0x11c
 800b1ee:	ecbd 8b02 	vpop	{d8}
 800b1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b1f8:	ee18 1a10 	vmov	r1, s16
 800b1fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b1fe:	981a      	ldr	r0, [sp, #104]	; 0x68
 800b200:	f000 fb6e 	bl	800b8e0 <st_int8_to16_dual>
 800b204:	e68f      	b.n	800af26 <st_sssa8_convolve_rgb+0x14a>
 800b206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d0ee      	beq.n	800b1ea <st_sssa8_convolve_rgb+0x40e>
 800b20c:	442c      	add	r4, r5
 800b20e:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 800b210:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b212:	b231      	sxth	r1, r6
 800b214:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b218:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b21a:	2600      	movs	r6, #0
 800b21c:	9f5d      	ldr	r7, [sp, #372]	; 0x174
 800b21e:	9318      	str	r3, [sp, #96]	; 0x60
 800b220:	4253      	negs	r3, r2
 800b222:	4688      	mov	r8, r1
 800b224:	1a82      	subs	r2, r0, r2
 800b226:	b29b      	uxth	r3, r3
 800b228:	9615      	str	r6, [sp, #84]	; 0x54
 800b22a:	921c      	str	r2, [sp, #112]	; 0x70
 800b22c:	9319      	str	r3, [sp, #100]	; 0x64
 800b22e:	9311      	str	r3, [sp, #68]	; 0x44
 800b230:	465b      	mov	r3, fp
 800b232:	46d3      	mov	fp, sl
 800b234:	469a      	mov	sl, r3
 800b236:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b238:	a83c      	add	r0, sp, #240	; 0xf0
 800b23a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b23c:	fb02 3306 	mla	r3, r2, r6, r3
 800b240:	2600      	movs	r6, #0
 800b242:	9307      	str	r3, [sp, #28]
 800b244:	f000 fa76 	bl	800b734 <ai_padding_opt_phase1>
 800b248:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 800b24c:	930c      	str	r3, [sp, #48]	; 0x30
 800b24e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b250:	9309      	str	r3, [sp, #36]	; 0x24
 800b252:	4633      	mov	r3, r6
 800b254:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800b256:	2a00      	cmp	r2, #0
 800b258:	f000 8119 	beq.w	800b48e <st_sssa8_convolve_rgb+0x6b2>
 800b25c:	3a01      	subs	r2, #1
 800b25e:	923c      	str	r2, [sp, #240]	; 0xf0
 800b260:	2201      	movs	r2, #1
 800b262:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800b266:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b268:	9907      	ldr	r1, [sp, #28]
 800b26a:	428a      	cmp	r2, r1
 800b26c:	f280 811d 	bge.w	800b4aa <st_sssa8_convolve_rgb+0x6ce>
 800b270:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b272:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b274:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800b278:	fb03 2301 	mla	r3, r3, r1, r2
 800b27c:	b2b2      	uxth	r2, r6
 800b27e:	920a      	str	r2, [sp, #40]	; 0x28
 800b280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b282:	1a98      	subs	r0, r3, r2
 800b284:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 800b288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b28a:	469b      	mov	fp, r3
 800b28c:	4691      	mov	r9, r2
 800b28e:	4583      	cmp	fp, r0
 800b290:	da2d      	bge.n	800b2ee <st_sssa8_convolve_rgb+0x512>
 800b292:	4592      	cmp	sl, r2
 800b294:	fb02 f20a 	mul.w	r2, r2, sl
 800b298:	f107 0306 	add.w	r3, r7, #6
 800b29c:	465c      	mov	r4, fp
 800b29e:	bfcc      	ite	gt
 800b2a0:	f04f 0e00 	movgt.w	lr, #0
 800b2a4:	f04f 0e01 	movle.w	lr, #1
 800b2a8:	9208      	str	r2, [sp, #32]
 800b2aa:	465a      	mov	r2, fp
 800b2ac:	ea4e 7ed9 	orr.w	lr, lr, r9, lsr #31
 800b2b0:	45a2      	cmp	sl, r4
 800b2b2:	f04f 0100 	mov.w	r1, #0
 800b2b6:	f102 0601 	add.w	r6, r2, #1
 800b2ba:	f1a3 0c06 	sub.w	ip, r3, #6
 800b2be:	bfcc      	ite	gt
 800b2c0:	2500      	movgt	r5, #0
 800b2c2:	2501      	movle	r5, #1
 800b2c4:	f368 010f 	bfi	r1, r8, #0, #16
 800b2c8:	461f      	mov	r7, r3
 800b2ca:	ea55 75d2 	orrs.w	r5, r5, r2, lsr #31
 800b2ce:	f368 411f 	bfi	r1, r8, #16, #16
 800b2d2:	d103      	bne.n	800b2dc <st_sssa8_convolve_rgb+0x500>
 800b2d4:	f1be 0f00 	cmp.w	lr, #0
 800b2d8:	f000 80bf 	beq.w	800b45a <st_sssa8_convolve_rgb+0x67e>
 800b2dc:	b232      	sxth	r2, r6
 800b2de:	f843 1c04 	str.w	r1, [r3, #-4]
 800b2e2:	f823 8c06 	strh.w	r8, [r3, #-6]
 800b2e6:	3306      	adds	r3, #6
 800b2e8:	4282      	cmp	r2, r0
 800b2ea:	4614      	mov	r4, r2
 800b2ec:	dbe0      	blt.n	800b2b0 <st_sssa8_convolve_rgb+0x4d4>
 800b2ee:	f109 0901 	add.w	r9, r9, #1
 800b2f2:	9b07      	ldr	r3, [sp, #28]
 800b2f4:	fa0f f989 	sxth.w	r9, r9
 800b2f8:	4599      	cmp	r9, r3
 800b2fa:	464a      	mov	r2, r9
 800b2fc:	dbc7      	blt.n	800b28e <st_sssa8_convolve_rgb+0x4b2>
 800b2fe:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800b302:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b304:	42bb      	cmp	r3, r7
 800b306:	f000 80d6 	beq.w	800b4b6 <st_sssa8_convolve_rgb+0x6da>
 800b30a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b30e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b310:	3601      	adds	r6, #1
 800b312:	4413      	add	r3, r2
 800b314:	b236      	sxth	r6, r6
 800b316:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b318:	b29b      	uxth	r3, r3
 800b31a:	42b2      	cmp	r2, r6
 800b31c:	9309      	str	r3, [sp, #36]	; 0x24
 800b31e:	4633      	mov	r3, r6
 800b320:	dc98      	bgt.n	800b254 <st_sssa8_convolve_rgb+0x478>
 800b322:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b326:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b328:	440b      	add	r3, r1
 800b32a:	3201      	adds	r2, #1
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	b212      	sxth	r2, r2
 800b330:	9311      	str	r3, [sp, #68]	; 0x44
 800b332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b334:	4616      	mov	r6, r2
 800b336:	9215      	str	r2, [sp, #84]	; 0x54
 800b338:	4293      	cmp	r3, r2
 800b33a:	f73f af7c 	bgt.w	800b236 <st_sssa8_convolve_rgb+0x45a>
 800b33e:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 800b340:	42bb      	cmp	r3, r7
 800b342:	f43f af52 	beq.w	800b1ea <st_sssa8_convolve_rgb+0x40e>
 800b346:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b348:	2b00      	cmp	r3, #0
 800b34a:	f43f af4e 	beq.w	800b1ea <st_sssa8_convolve_rgb+0x40e>
 800b34e:	f103 0901 	add.w	r9, r3, #1
 800b352:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b354:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b356:	f1a3 0e04 	sub.w	lr, r3, #4
 800b35a:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 800b35c:	f1a2 0a02 	sub.w	sl, r2, #2
 800b360:	4499      	add	r9, r3
 800b362:	1c5e      	adds	r6, r3, #1
 800b364:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b366:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800b36a:	f003 0103 	and.w	r1, r3, #3
 800b36e:	2301      	movs	r3, #1
 800b370:	f101 3bff 	add.w	fp, r1, #4294967295
 800b374:	fa03 fa0a 	lsl.w	sl, r3, sl
 800b378:	f108 33ff 	add.w	r3, r8, #4294967295
 800b37c:	fa1f fb8b 	uxth.w	fp, fp
 800b380:	b29b      	uxth	r3, r3
 800b382:	3301      	adds	r3, #1
 800b384:	0098      	lsls	r0, r3, #2
 800b386:	9007      	str	r0, [sp, #28]
 800b388:	985d      	ldr	r0, [sp, #372]	; 0x174
 800b38a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b38e:	981a      	ldr	r0, [sp, #104]	; 0x68
 800b390:	9308      	str	r3, [sp, #32]
 800b392:	f1c2 0301 	rsb	r3, r2, #1
 800b396:	e9cd 3809 	strd	r3, r8, [sp, #36]	; 0x24
 800b39a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b39c:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 800b3a0:	2a00      	cmp	r2, #0
 800b3a2:	d044      	beq.n	800b42e <st_sssa8_convolve_rgb+0x652>
 800b3a4:	9a07      	ldr	r2, [sp, #28]
 800b3a6:	9c5d      	ldr	r4, [sp, #372]	; 0x174
 800b3a8:	1885      	adds	r5, r0, r2
 800b3aa:	f850 2b04 	ldr.w	r2, [r0], #4
 800b3ae:	fa2f f792 	sxtb16	r7, r2, ror #8
 800b3b2:	fa2f f282 	sxtb16	r2, r2
 800b3b6:	f8d4 8000 	ldr.w	r8, [r4]
 800b3ba:	eac7 4c22 	pkhtb	ip, r7, r2, asr #16
 800b3be:	eac2 4207 	pkhbt	r2, r2, r7, lsl #16
 800b3c2:	fb22 3308 	smlad	r3, r2, r8, r3
 800b3c6:	6862      	ldr	r2, [r4, #4]
 800b3c8:	3408      	adds	r4, #8
 800b3ca:	fb2c 3302 	smlad	r3, ip, r2, r3
 800b3ce:	4285      	cmp	r5, r0
 800b3d0:	d1eb      	bne.n	800b3aa <st_sssa8_convolve_rgb+0x5ce>
 800b3d2:	9a08      	ldr	r2, [sp, #32]
 800b3d4:	b379      	cbz	r1, 800b436 <st_sssa8_convolve_rgb+0x65a>
 800b3d6:	f995 0000 	ldrsb.w	r0, [r5]
 800b3da:	8814      	ldrh	r4, [r2, #0]
 800b3dc:	fb14 3300 	smlabb	r3, r4, r0, r3
 800b3e0:	f1bb 0f00 	cmp.w	fp, #0
 800b3e4:	d00b      	beq.n	800b3fe <st_sssa8_convolve_rgb+0x622>
 800b3e6:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800b3ea:	2902      	cmp	r1, #2
 800b3ec:	8854      	ldrh	r4, [r2, #2]
 800b3ee:	fb14 3300 	smlabb	r3, r4, r0, r3
 800b3f2:	d004      	beq.n	800b3fe <st_sssa8_convolve_rgb+0x622>
 800b3f4:	8890      	ldrh	r0, [r2, #4]
 800b3f6:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800b3fa:	fb10 3302 	smlabb	r3, r0, r2, r3
 800b3fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b400:	1868      	adds	r0, r5, r1
 800b402:	2a15      	cmp	r2, #21
 800b404:	dd1b      	ble.n	800b43e <st_sssa8_convolve_rgb+0x662>
 800b406:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b408:	fb53 a302 	smmla	r3, r3, r2, sl
 800b40c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b40e:	4113      	asrs	r3, r2
 800b410:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b412:	4413      	add	r3, r2
 800b414:	f303 0307 	ssat	r3, #8, r3
 800b418:	f806 3c01 	strb.w	r3, [r6, #-1]
 800b41c:	3601      	adds	r6, #1
 800b41e:	45b1      	cmp	r9, r6
 800b420:	f43f aee3 	beq.w	800b1ea <st_sssa8_convolve_rgb+0x40e>
 800b424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b426:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 800b42a:	2a00      	cmp	r2, #0
 800b42c:	d1ba      	bne.n	800b3a4 <st_sssa8_convolve_rgb+0x5c8>
 800b42e:	4605      	mov	r5, r0
 800b430:	9a5d      	ldr	r2, [sp, #372]	; 0x174
 800b432:	2900      	cmp	r1, #0
 800b434:	d1cf      	bne.n	800b3d6 <st_sssa8_convolve_rgb+0x5fa>
 800b436:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b438:	4628      	mov	r0, r5
 800b43a:	2a15      	cmp	r2, #21
 800b43c:	dce3      	bgt.n	800b406 <st_sssa8_convolve_rgb+0x62a>
 800b43e:	2a00      	cmp	r2, #0
 800b440:	f340 8096 	ble.w	800b570 <st_sssa8_convolve_rgb+0x794>
 800b444:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800b446:	005b      	lsls	r3, r3, #1
 800b448:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800b44a:	fb53 5304 	smmla	r3, r3, r4, r5
 800b44e:	4113      	asrs	r3, r2
 800b450:	f303 0307 	ssat	r3, #8, r3
 800b454:	f806 3c01 	strb.w	r3, [r6, #-1]
 800b458:	e7e0      	b.n	800b41c <st_sssa8_convolve_rgb+0x640>
 800b45a:	9908      	ldr	r1, [sp, #32]
 800b45c:	3201      	adds	r2, #1
 800b45e:	3306      	adds	r3, #6
 800b460:	440c      	add	r4, r1
 800b462:	b212      	sxth	r2, r2
 800b464:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b466:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800b46a:	4282      	cmp	r2, r0
 800b46c:	5909      	ldr	r1, [r1, r4]
 800b46e:	4614      	mov	r4, r2
 800b470:	fa2f f581 	sxtb16	r5, r1
 800b474:	ea4f 2131 	mov.w	r1, r1, ror #8
 800b478:	fa2f f181 	sxtb16	r1, r1
 800b47c:	eac1 0105 	pkhbt	r1, r1, r5
 800b480:	f8cc 1002 	str.w	r1, [ip, #2]
 800b484:	f823 5c0c 	strh.w	r5, [r3, #-12]
 800b488:	f6ff af12 	blt.w	800b2b0 <st_sssa8_convolve_rgb+0x4d4>
 800b48c:	e72f      	b.n	800b2ee <st_sssa8_convolve_rgb+0x512>
 800b48e:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800b490:	2a00      	cmp	r2, #0
 800b492:	d130      	bne.n	800b4f6 <st_sssa8_convolve_rgb+0x71a>
 800b494:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800b496:	9907      	ldr	r1, [sp, #28]
 800b498:	3a01      	subs	r2, #1
 800b49a:	923e      	str	r2, [sp, #248]	; 0xf8
 800b49c:	2201      	movs	r2, #1
 800b49e:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800b4a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4a4:	428a      	cmp	r2, r1
 800b4a6:	f6ff aee3 	blt.w	800b270 <st_sssa8_convolve_rgb+0x494>
 800b4aa:	b2b3      	uxth	r3, r6
 800b4ac:	930a      	str	r3, [sp, #40]	; 0x28
 800b4ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b4b0:	42bb      	cmp	r3, r7
 800b4b2:	f47f af2a 	bne.w	800b30a <st_sssa8_convolve_rgb+0x52e>
 800b4b6:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 800b4b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4be:	995d      	ldr	r1, [sp, #372]	; 0x174
 800b4c0:	9303      	str	r3, [sp, #12]
 800b4c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b4c4:	981a      	ldr	r0, [sp, #104]	; 0x68
 800b4c6:	9302      	str	r3, [sp, #8]
 800b4c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4ca:	9301      	str	r3, [sp, #4]
 800b4cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4d2:	f000 faef 	bl	800bab4 <st_sssa8_nn_mat_mult_kernel>
 800b4d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4dc:	3601      	adds	r6, #1
 800b4de:	9f5d      	ldr	r7, [sp, #372]	; 0x174
 800b4e0:	4413      	add	r3, r2
 800b4e2:	b236      	sxth	r6, r6
 800b4e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	905b      	str	r0, [sp, #364]	; 0x16c
 800b4ea:	42b2      	cmp	r2, r6
 800b4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ee:	4633      	mov	r3, r6
 800b4f0:	f73f aeb0 	bgt.w	800b254 <st_sssa8_convolve_rgb+0x478>
 800b4f4:	e715      	b.n	800b322 <st_sssa8_convolve_rgb+0x546>
 800b4f6:	3a01      	subs	r2, #1
 800b4f8:	923d      	str	r2, [sp, #244]	; 0xf4
 800b4fa:	f8bd 2114 	ldrh.w	r2, [sp, #276]	; 0x114
 800b4fe:	2a01      	cmp	r2, #1
 800b500:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800b504:	f43f aeaf 	beq.w	800b266 <st_sssa8_convolve_rgb+0x48a>
 800b508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b50a:	9907      	ldr	r1, [sp, #28]
 800b50c:	428a      	cmp	r2, r1
 800b50e:	dacc      	bge.n	800b4aa <st_sssa8_convolve_rgb+0x6ce>
 800b510:	4610      	mov	r0, r2
 800b512:	468c      	mov	ip, r1
 800b514:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b516:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b518:	4605      	mov	r5, r0
 800b51a:	fb03 2301 	mla	r3, r3, r1, r2
 800b51e:	b2b2      	uxth	r2, r6
 800b520:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 800b524:	920a      	str	r2, [sp, #40]	; 0x28
 800b526:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b528:	1a9c      	subs	r4, r3, r2
 800b52a:	42a6      	cmp	r6, r4
 800b52c:	da1a      	bge.n	800b564 <st_sssa8_convolve_rgb+0x788>
 800b52e:	fb00 f10a 	mul.w	r1, r0, sl
 800b532:	4632      	mov	r2, r6
 800b534:	4633      	mov	r3, r6
 800b536:	440b      	add	r3, r1
 800b538:	3201      	adds	r2, #1
 800b53a:	3706      	adds	r7, #6
 800b53c:	b212      	sxth	r2, r2
 800b53e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b542:	42a2      	cmp	r2, r4
 800b544:	f85b 3003 	ldr.w	r3, [fp, r3]
 800b548:	fa2f f083 	sxtb16	r0, r3
 800b54c:	ea4f 2333 	mov.w	r3, r3, ror #8
 800b550:	f827 0c06 	strh.w	r0, [r7, #-6]
 800b554:	fa2f f383 	sxtb16	r3, r3
 800b558:	eac3 0300 	pkhbt	r3, r3, r0
 800b55c:	f847 3c04 	str.w	r3, [r7, #-4]
 800b560:	4613      	mov	r3, r2
 800b562:	dbe8      	blt.n	800b536 <st_sssa8_convolve_rgb+0x75a>
 800b564:	3501      	adds	r5, #1
 800b566:	b22d      	sxth	r5, r5
 800b568:	4565      	cmp	r5, ip
 800b56a:	4628      	mov	r0, r5
 800b56c:	dbdd      	blt.n	800b52a <st_sssa8_convolve_rgb+0x74e>
 800b56e:	e6c8      	b.n	800b302 <st_sssa8_convolve_rgb+0x526>
 800b570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b572:	4093      	lsls	r3, r2
 800b574:	f303 031f 	ssat	r3, #32, r3
 800b578:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b57a:	fb53 f312 	smmulr	r3, r3, r2
 800b57e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b580:	4413      	add	r3, r2
 800b582:	f303 0307 	ssat	r3, #8, r3
 800b586:	f806 3c01 	strb.w	r3, [r6, #-1]
 800b58a:	e747      	b.n	800b41c <st_sssa8_convolve_rgb+0x640>
 800b58c:	4613      	mov	r3, r2
 800b58e:	ee18 1a10 	vmov	r1, s16
 800b592:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b594:	981a      	ldr	r0, [sp, #104]	; 0x68
 800b596:	f000 f9a3 	bl	800b8e0 <st_int8_to16_dual>
 800b59a:	2301      	movs	r3, #1
 800b59c:	9321      	str	r3, [sp, #132]	; 0x84
 800b59e:	e47f      	b.n	800aea0 <st_sssa8_convolve_rgb+0xc4>
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	408b      	lsls	r3, r1
 800b5a4:	408a      	lsls	r2, r1
 800b5a6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800b5aa:	9314      	str	r3, [sp, #80]	; 0x50
 800b5ac:	462b      	mov	r3, r5
 800b5ae:	e44d      	b.n	800ae4c <st_sssa8_convolve_rgb+0x70>
 800b5b0:	f06f 0002 	mvn.w	r0, #2
 800b5b4:	e61a      	b.n	800b1ec <st_sssa8_convolve_rgb+0x410>
 800b5b6:	bf00      	nop

0800b5b8 <st_sssa8_convolve_1x1_WeightsPrefetch>:
 800b5b8:	fb02 fc01 	mul.w	ip, r2, r1
 800b5bc:	b510      	push	{r4, lr}
 800b5be:	685c      	ldr	r4, [r3, #4]
 800b5c0:	ebb4 0f4c 	cmp.w	r4, ip, lsl #1
 800b5c4:	da01      	bge.n	800b5ca <st_sssa8_convolve_1x1_WeightsPrefetch+0x12>
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	bd10      	pop	{r4, pc}
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f000 fdac 	bl	800c128 <st_sssa8_fullW_prefetch>
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	bd10      	pop	{r4, pc}

0800b5d4 <st_sssa8_convolve_1x1>:
 800b5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d8:	b08b      	sub	sp, #44	; 0x2c
 800b5da:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
 800b5de:	f8bd 6054 	ldrh.w	r6, [sp, #84]	; 0x54
 800b5e2:	2d01      	cmp	r5, #1
 800b5e4:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
 800b5e8:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800b5ec:	f8bd e064 	ldrh.w	lr, [sp, #100]	; 0x64
 800b5f0:	f8bd a068 	ldrh.w	sl, [sp, #104]	; 0x68
 800b5f4:	f8bd b06c 	ldrh.w	fp, [sp, #108]	; 0x6c
 800b5f8:	f99d 807c 	ldrsb.w	r8, [sp, #124]	; 0x7c
 800b5fc:	f99d c080 	ldrsb.w	ip, [sp, #128]	; 0x80
 800b600:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800b602:	d139      	bne.n	800b678 <st_sssa8_convolve_1x1+0xa4>
 800b604:	2f01      	cmp	r7, #1
 800b606:	d137      	bne.n	800b678 <st_sssa8_convolve_1x1+0xa4>
 800b608:	ea59 050e 	orrs.w	r5, r9, lr
 800b60c:	d134      	bne.n	800b678 <st_sssa8_convolve_1x1+0xa4>
 800b60e:	f1ba 0f01 	cmp.w	sl, #1
 800b612:	d131      	bne.n	800b678 <st_sssa8_convolve_1x1+0xa4>
 800b614:	f1bb 0f01 	cmp.w	fp, #1
 800b618:	d12e      	bne.n	800b678 <st_sssa8_convolve_1x1+0xa4>
 800b61a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800b61c:	f9b5 7000 	ldrsh.w	r7, [r5]
 800b620:	e9d4 5e00 	ldrd	r5, lr, [r4]
 800b624:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800b626:	f8d4 9000 	ldr.w	r9, [r4]
 800b62a:	1e7c      	subs	r4, r7, #1
 800b62c:	b2a4      	uxth	r4, r4
 800b62e:	2c14      	cmp	r4, #20
 800b630:	d91b      	bls.n	800b66a <st_sssa8_convolve_1x1+0x96>
 800b632:	4664      	mov	r4, ip
 800b634:	9304      	str	r3, [sp, #16]
 800b636:	fb06 f303 	mul.w	r3, r6, r3
 800b63a:	fb01 f202 	mul.w	r2, r1, r2
 800b63e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b640:	ebbe 0f43 	cmp.w	lr, r3, lsl #1
 800b644:	9507      	str	r5, [sp, #28]
 800b646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b648:	bfb8      	it	lt
 800b64a:	2500      	movlt	r5, #0
 800b64c:	f8cd 9000 	str.w	r9, [sp]
 800b650:	9603      	str	r6, [sp, #12]
 800b652:	9508      	str	r5, [sp, #32]
 800b654:	e9cd 7201 	strd	r7, r2, [sp, #4]
 800b658:	e9cd 8405 	strd	r8, r4, [sp, #20]
 800b65c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b65e:	f000 fe65 	bl	800c32c <st_sssa8_nn_mat_mult_nt_t>
 800b662:	2000      	movs	r0, #0
 800b664:	b00b      	add	sp, #44	; 0x2c
 800b666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b66a:	2401      	movs	r4, #1
 800b66c:	fa0c fc07 	lsl.w	ip, ip, r7
 800b670:	40bc      	lsls	r4, r7
 800b672:	eb0c 0454 	add.w	r4, ip, r4, lsr #1
 800b676:	e7dd      	b.n	800b634 <st_sssa8_convolve_1x1+0x60>
 800b678:	f06f 0002 	mvn.w	r0, #2
 800b67c:	e7f2      	b.n	800b664 <st_sssa8_convolve_1x1+0x90>
 800b67e:	bf00      	nop

0800b680 <ai_padding_opt_init>:
 800b680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b684:	2700      	movs	r7, #0
 800b686:	9c07      	ldr	r4, [sp, #28]
 800b688:	e9c0 7700 	strd	r7, r7, [r0]
 800b68c:	6087      	str	r7, [r0, #8]
 800b68e:	46b9      	mov	r9, r7
 800b690:	690d      	ldr	r5, [r1, #16]
 800b692:	f1c5 0c00 	rsb	ip, r5, #0
 800b696:	689d      	ldr	r5, [r3, #8]
 800b698:	42bd      	cmp	r5, r7
 800b69a:	dd1c      	ble.n	800b6d6 <ai_padding_opt_init+0x56>
 800b69c:	463e      	mov	r6, r7
 800b69e:	46be      	mov	lr, r7
 800b6a0:	e010      	b.n	800b6c4 <ai_padding_opt_init+0x44>
 800b6a2:	6895      	ldr	r5, [r2, #8]
 800b6a4:	eba5 080c 	sub.w	r8, r5, ip
 800b6a8:	68a5      	ldr	r5, [r4, #8]
 800b6aa:	45a8      	cmp	r8, r5
 800b6ac:	da10      	bge.n	800b6d0 <ai_padding_opt_init+0x50>
 800b6ae:	f109 0901 	add.w	r9, r9, #1
 800b6b2:	f8c0 9008 	str.w	r9, [r0, #8]
 800b6b6:	688d      	ldr	r5, [r1, #8]
 800b6b8:	f10e 0e01 	add.w	lr, lr, #1
 800b6bc:	44ac      	add	ip, r5
 800b6be:	689d      	ldr	r5, [r3, #8]
 800b6c0:	4575      	cmp	r5, lr
 800b6c2:	dd09      	ble.n	800b6d8 <ai_padding_opt_init+0x58>
 800b6c4:	f1bc 0f00 	cmp.w	ip, #0
 800b6c8:	daeb      	bge.n	800b6a2 <ai_padding_opt_init+0x22>
 800b6ca:	3601      	adds	r6, #1
 800b6cc:	6006      	str	r6, [r0, #0]
 800b6ce:	e7f2      	b.n	800b6b6 <ai_padding_opt_init+0x36>
 800b6d0:	3701      	adds	r7, #1
 800b6d2:	6047      	str	r7, [r0, #4]
 800b6d4:	e7ef      	b.n	800b6b6 <ai_padding_opt_init+0x36>
 800b6d6:	463e      	mov	r6, r7
 800b6d8:	2500      	movs	r5, #0
 800b6da:	f8c0 9014 	str.w	r9, [r0, #20]
 800b6de:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800b6e2:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800b6e6:	6205      	str	r5, [r0, #32]
 800b6e8:	694e      	ldr	r6, [r1, #20]
 800b6ea:	f1c6 0c00 	rsb	ip, r6, #0
 800b6ee:	685e      	ldr	r6, [r3, #4]
 800b6f0:	42ae      	cmp	r6, r5
 800b6f2:	dd1c      	ble.n	800b72e <ai_padding_opt_init+0xae>
 800b6f4:	46ae      	mov	lr, r5
 800b6f6:	e00f      	b.n	800b718 <ai_padding_opt_init+0x98>
 800b6f8:	6855      	ldr	r5, [r2, #4]
 800b6fa:	6866      	ldr	r6, [r4, #4]
 800b6fc:	eba5 050c 	sub.w	r5, r5, ip
 800b700:	42b5      	cmp	r5, r6
 800b702:	da10      	bge.n	800b726 <ai_padding_opt_init+0xa6>
 800b704:	6a05      	ldr	r5, [r0, #32]
 800b706:	3501      	adds	r5, #1
 800b708:	6205      	str	r5, [r0, #32]
 800b70a:	68cd      	ldr	r5, [r1, #12]
 800b70c:	f10e 0e01 	add.w	lr, lr, #1
 800b710:	44ac      	add	ip, r5
 800b712:	685d      	ldr	r5, [r3, #4]
 800b714:	4575      	cmp	r5, lr
 800b716:	dd0a      	ble.n	800b72e <ai_padding_opt_init+0xae>
 800b718:	f1bc 0f00 	cmp.w	ip, #0
 800b71c:	daec      	bge.n	800b6f8 <ai_padding_opt_init+0x78>
 800b71e:	6985      	ldr	r5, [r0, #24]
 800b720:	3501      	adds	r5, #1
 800b722:	6185      	str	r5, [r0, #24]
 800b724:	e7f1      	b.n	800b70a <ai_padding_opt_init+0x8a>
 800b726:	69c5      	ldr	r5, [r0, #28]
 800b728:	3501      	adds	r5, #1
 800b72a:	61c5      	str	r5, [r0, #28]
 800b72c:	e7ed      	b.n	800b70a <ai_padding_opt_init+0x8a>
 800b72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b732:	bf00      	nop

0800b734 <ai_padding_opt_phase1>:
 800b734:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800b738:	b923      	cbnz	r3, 800b744 <ai_padding_opt_phase1+0x10>
 800b73a:	b17a      	cbz	r2, 800b75c <ai_padding_opt_phase1+0x28>
 800b73c:	3a01      	subs	r2, #1
 800b73e:	8483      	strh	r3, [r0, #36]	; 0x24
 800b740:	61c2      	str	r2, [r0, #28]
 800b742:	e004      	b.n	800b74e <ai_padding_opt_phase1+0x1a>
 800b744:	b152      	cbz	r2, 800b75c <ai_padding_opt_phase1+0x28>
 800b746:	2201      	movs	r2, #1
 800b748:	3b01      	subs	r3, #1
 800b74a:	8482      	strh	r2, [r0, #36]	; 0x24
 800b74c:	6183      	str	r3, [r0, #24]
 800b74e:	68c3      	ldr	r3, [r0, #12]
 800b750:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800b754:	6003      	str	r3, [r0, #0]
 800b756:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800b75a:	4770      	bx	lr
 800b75c:	6a03      	ldr	r3, [r0, #32]
 800b75e:	2201      	movs	r2, #1
 800b760:	3b01      	subs	r3, #1
 800b762:	8482      	strh	r2, [r0, #36]	; 0x24
 800b764:	6203      	str	r3, [r0, #32]
 800b766:	e7f2      	b.n	800b74e <ai_padding_opt_phase1+0x1a>

0800b768 <st_uint8_fill>:
 800b768:	078b      	lsls	r3, r1, #30
 800b76a:	468c      	mov	ip, r1
 800b76c:	d00a      	beq.n	800b784 <st_uint8_fill+0x1c>
 800b76e:	b912      	cbnz	r2, 800b776 <st_uint8_fill+0xe>
 800b770:	e04d      	b.n	800b80e <st_uint8_fill+0xa6>
 800b772:	2a00      	cmp	r2, #0
 800b774:	d04c      	beq.n	800b810 <st_uint8_fill+0xa8>
 800b776:	f80c 0b01 	strb.w	r0, [ip], #1
 800b77a:	f01c 0f03 	tst.w	ip, #3
 800b77e:	f102 32ff 	add.w	r2, r2, #4294967295
 800b782:	d1f6      	bne.n	800b772 <st_uint8_fill+0xa>
 800b784:	b510      	push	{r4, lr}
 800b786:	0404      	lsls	r4, r0, #16
 800b788:	0911      	lsrs	r1, r2, #4
 800b78a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 800b78e:	ea44 0400 	orr.w	r4, r4, r0
 800b792:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 800b796:	d03d      	beq.n	800b814 <st_uint8_fill+0xac>
 800b798:	1e4b      	subs	r3, r1, #1
 800b79a:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 800b79e:	2b04      	cmp	r3, #4
 800b7a0:	f10c 0310 	add.w	r3, ip, #16
 800b7a4:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800b7a8:	d922      	bls.n	800b7f0 <st_uint8_fill+0x88>
 800b7aa:	f01c 0f07 	tst.w	ip, #7
 800b7ae:	d11f      	bne.n	800b7f0 <st_uint8_fill+0x88>
 800b7b0:	e943 4404 	strd	r4, r4, [r3, #-16]
 800b7b4:	e943 4402 	strd	r4, r4, [r3, #-8]
 800b7b8:	3310      	adds	r3, #16
 800b7ba:	428b      	cmp	r3, r1
 800b7bc:	d1f8      	bne.n	800b7b0 <st_uint8_fill+0x48>
 800b7be:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800b7c2:	44f4      	add	ip, lr
 800b7c4:	f002 0203 	and.w	r2, r2, #3
 800b7c8:	b15b      	cbz	r3, 800b7e2 <st_uint8_fill+0x7a>
 800b7ca:	1e59      	subs	r1, r3, #1
 800b7cc:	f8cc 4000 	str.w	r4, [ip]
 800b7d0:	d005      	beq.n	800b7de <st_uint8_fill+0x76>
 800b7d2:	2901      	cmp	r1, #1
 800b7d4:	f8cc 4004 	str.w	r4, [ip, #4]
 800b7d8:	bf18      	it	ne
 800b7da:	f8cc 4008 	strne.w	r4, [ip, #8]
 800b7de:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 800b7e2:	b1b2      	cbz	r2, 800b812 <st_uint8_fill+0xaa>
 800b7e4:	4601      	mov	r1, r0
 800b7e6:	4660      	mov	r0, ip
 800b7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7ec:	f002 bc50 	b.w	800e090 <memset>
 800b7f0:	e943 4404 	strd	r4, r4, [r3, #-16]
 800b7f4:	e943 4402 	strd	r4, r4, [r3, #-8]
 800b7f8:	3310      	adds	r3, #16
 800b7fa:	428b      	cmp	r3, r1
 800b7fc:	d0df      	beq.n	800b7be <st_uint8_fill+0x56>
 800b7fe:	e943 4404 	strd	r4, r4, [r3, #-16]
 800b802:	e943 4402 	strd	r4, r4, [r3, #-8]
 800b806:	3310      	adds	r3, #16
 800b808:	428b      	cmp	r3, r1
 800b80a:	d1f1      	bne.n	800b7f0 <st_uint8_fill+0x88>
 800b80c:	e7d7      	b.n	800b7be <st_uint8_fill+0x56>
 800b80e:	4770      	bx	lr
 800b810:	4770      	bx	lr
 800b812:	bd10      	pop	{r4, pc}
 800b814:	0893      	lsrs	r3, r2, #2
 800b816:	f002 0203 	and.w	r2, r2, #3
 800b81a:	e7d5      	b.n	800b7c8 <st_uint8_fill+0x60>

0800b81c <st_int8_to16_no_shift>:
 800b81c:	b570      	push	{r4, r5, r6, lr}
 800b81e:	f1b2 0410 	subs.w	r4, r2, #16
 800b822:	f04f 0e00 	mov.w	lr, #0
 800b826:	d438      	bmi.n	800b89a <st_int8_to16_no_shift+0x7e>
 800b828:	f8d0 c000 	ldr.w	ip, [r0]
 800b82c:	6843      	ldr	r3, [r0, #4]
 800b82e:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800b832:	fa2f fc8c 	sxtb16	ip, ip
 800b836:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800b83a:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800b83e:	fa2f f593 	sxtb16	r5, r3, ror #8
 800b842:	3010      	adds	r0, #16
 800b844:	604e      	str	r6, [r1, #4]
 800b846:	f8c1 c000 	str.w	ip, [r1]
 800b84a:	fa2f f383 	sxtb16	r3, r3
 800b84e:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800b852:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800b856:	60ce      	str	r6, [r1, #12]
 800b858:	608b      	str	r3, [r1, #8]
 800b85a:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800b85e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b862:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800b866:	fa2f fc8c 	sxtb16	ip, ip
 800b86a:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800b86e:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800b872:	fa2f f593 	sxtb16	r5, r3, ror #8
 800b876:	f10e 0e10 	add.w	lr, lr, #16
 800b87a:	f8c1 c010 	str.w	ip, [r1, #16]
 800b87e:	614e      	str	r6, [r1, #20]
 800b880:	3120      	adds	r1, #32
 800b882:	45a6      	cmp	lr, r4
 800b884:	fa2f f383 	sxtb16	r3, r3
 800b888:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 800b88c:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800b890:	f841 cc04 	str.w	ip, [r1, #-4]
 800b894:	f841 3c08 	str.w	r3, [r1, #-8]
 800b898:	ddc6      	ble.n	800b828 <st_int8_to16_no_shift+0xc>
 800b89a:	1f16      	subs	r6, r2, #4
 800b89c:	4576      	cmp	r6, lr
 800b89e:	db12      	blt.n	800b8c6 <st_int8_to16_no_shift+0xaa>
 800b8a0:	f850 3b04 	ldr.w	r3, [r0], #4
 800b8a4:	fa2f f493 	sxtb16	r4, r3, ror #8
 800b8a8:	f10e 0e04 	add.w	lr, lr, #4
 800b8ac:	3108      	adds	r1, #8
 800b8ae:	fa2f f383 	sxtb16	r3, r3
 800b8b2:	45b6      	cmp	lr, r6
 800b8b4:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 800b8b8:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 800b8bc:	f841 5c04 	str.w	r5, [r1, #-4]
 800b8c0:	f841 3c08 	str.w	r3, [r1, #-8]
 800b8c4:	ddec      	ble.n	800b8a0 <st_int8_to16_no_shift+0x84>
 800b8c6:	4572      	cmp	r2, lr
 800b8c8:	dd08      	ble.n	800b8dc <st_int8_to16_no_shift+0xc0>
 800b8ca:	eba2 020e 	sub.w	r2, r2, lr
 800b8ce:	4402      	add	r2, r0
 800b8d0:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800b8d4:	4290      	cmp	r0, r2
 800b8d6:	f821 3b02 	strh.w	r3, [r1], #2
 800b8da:	d1f9      	bne.n	800b8d0 <st_int8_to16_no_shift+0xb4>
 800b8dc:	bd70      	pop	{r4, r5, r6, pc}
 800b8de:	bf00      	nop

0800b8e0 <st_int8_to16_dual>:
 800b8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e4:	4698      	mov	r8, r3
 800b8e6:	085b      	lsrs	r3, r3, #1
 800b8e8:	eb00 0c02 	add.w	ip, r0, r2
 800b8ec:	f000 80b9 	beq.w	800ba62 <st_int8_to16_dual+0x182>
 800b8f0:	f1a2 0710 	sub.w	r7, r2, #16
 800b8f4:	1f16      	subs	r6, r2, #4
 800b8f6:	2f00      	cmp	r7, #0
 800b8f8:	f04f 0500 	mov.w	r5, #0
 800b8fc:	db73      	blt.n	800b9e6 <st_int8_to16_dual+0x106>
 800b8fe:	f8d0 e000 	ldr.w	lr, [r0]
 800b902:	f8dc 4000 	ldr.w	r4, [ip]
 800b906:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800b90a:	fa2f fe8e 	sxtb16	lr, lr
 800b90e:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800b912:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800b916:	fa2f f994 	sxtb16	r9, r4, ror #8
 800b91a:	f8c1 e000 	str.w	lr, [r1]
 800b91e:	f8c1 a008 	str.w	sl, [r1, #8]
 800b922:	fa2f f484 	sxtb16	r4, r4
 800b926:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800b92a:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800b92e:	f8c1 e00c 	str.w	lr, [r1, #12]
 800b932:	604c      	str	r4, [r1, #4]
 800b934:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800b938:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800b93c:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800b940:	fa2f fe8e 	sxtb16	lr, lr
 800b944:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800b948:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800b94c:	fa2f f994 	sxtb16	r9, r4, ror #8
 800b950:	f8c1 e010 	str.w	lr, [r1, #16]
 800b954:	f8c1 a018 	str.w	sl, [r1, #24]
 800b958:	fa2f f484 	sxtb16	r4, r4
 800b95c:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800b960:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800b964:	f8c1 e01c 	str.w	lr, [r1, #28]
 800b968:	614c      	str	r4, [r1, #20]
 800b96a:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800b96e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800b972:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800b976:	fa2f fe8e 	sxtb16	lr, lr
 800b97a:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800b97e:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800b982:	fa2f f994 	sxtb16	r9, r4, ror #8
 800b986:	3010      	adds	r0, #16
 800b988:	f10c 0c10 	add.w	ip, ip, #16
 800b98c:	f8c1 e020 	str.w	lr, [r1, #32]
 800b990:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 800b994:	fa2f f484 	sxtb16	r4, r4
 800b998:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800b99c:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800b9a0:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 800b9a4:	624c      	str	r4, [r1, #36]	; 0x24
 800b9a6:	f850 ec04 	ldr.w	lr, [r0, #-4]
 800b9aa:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800b9ae:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800b9b2:	fa2f fe8e 	sxtb16	lr, lr
 800b9b6:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 800b9ba:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800b9be:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800b9c2:	3510      	adds	r5, #16
 800b9c4:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 800b9c8:	f8c1 9038 	str.w	r9, [r1, #56]	; 0x38
 800b9cc:	3140      	adds	r1, #64	; 0x40
 800b9ce:	42bd      	cmp	r5, r7
 800b9d0:	fa2f f484 	sxtb16	r4, r4
 800b9d4:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 800b9d8:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800b9dc:	f841 ec04 	str.w	lr, [r1, #-4]
 800b9e0:	f841 4c0c 	str.w	r4, [r1, #-12]
 800b9e4:	dd8b      	ble.n	800b8fe <st_int8_to16_dual+0x1e>
 800b9e6:	42ae      	cmp	r6, r5
 800b9e8:	db1e      	blt.n	800ba28 <st_int8_to16_dual+0x148>
 800b9ea:	f850 4b04 	ldr.w	r4, [r0], #4
 800b9ee:	f85c eb04 	ldr.w	lr, [ip], #4
 800b9f2:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800b9f6:	fa2f f484 	sxtb16	r4, r4
 800b9fa:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 800b9fe:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800ba02:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800ba06:	3504      	adds	r5, #4
 800ba08:	600c      	str	r4, [r1, #0]
 800ba0a:	f8c1 9008 	str.w	r9, [r1, #8]
 800ba0e:	3110      	adds	r1, #16
 800ba10:	42b5      	cmp	r5, r6
 800ba12:	fa2f fe8e 	sxtb16	lr, lr
 800ba16:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 800ba1a:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800ba1e:	f841 4c04 	str.w	r4, [r1, #-4]
 800ba22:	f841 ec0c 	str.w	lr, [r1, #-12]
 800ba26:	dde0      	ble.n	800b9ea <st_int8_to16_dual+0x10a>
 800ba28:	42aa      	cmp	r2, r5
 800ba2a:	dd40      	ble.n	800baae <st_int8_to16_dual+0x1ce>
 800ba2c:	1b55      	subs	r5, r2, r5
 800ba2e:	1d0c      	adds	r4, r1, #4
 800ba30:	46e6      	mov	lr, ip
 800ba32:	eb00 0a05 	add.w	sl, r0, r5
 800ba36:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800ba3a:	3404      	adds	r4, #4
 800ba3c:	f824 9c08 	strh.w	r9, [r4, #-8]
 800ba40:	4550      	cmp	r0, sl
 800ba42:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 800ba46:	f824 9c06 	strh.w	r9, [r4, #-6]
 800ba4a:	d1f4      	bne.n	800ba36 <st_int8_to16_dual+0x156>
 800ba4c:	44ac      	add	ip, r5
 800ba4e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800ba52:	3b01      	subs	r3, #1
 800ba54:	eb0a 0002 	add.w	r0, sl, r2
 800ba58:	4494      	add	ip, r2
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f47f af4a 	bne.w	800b8f6 <st_int8_to16_dual+0x16>
 800ba62:	f018 0f01 	tst.w	r8, #1
 800ba66:	d020      	beq.n	800baaa <st_int8_to16_dual+0x1ca>
 800ba68:	1f17      	subs	r7, r2, #4
 800ba6a:	f04f 0400 	mov.w	r4, #0
 800ba6e:	d411      	bmi.n	800ba94 <st_int8_to16_dual+0x1b4>
 800ba70:	f850 3b04 	ldr.w	r3, [r0], #4
 800ba74:	fa2f f593 	sxtb16	r5, r3, ror #8
 800ba78:	3404      	adds	r4, #4
 800ba7a:	3108      	adds	r1, #8
 800ba7c:	fa2f f383 	sxtb16	r3, r3
 800ba80:	42a7      	cmp	r7, r4
 800ba82:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800ba86:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800ba8a:	f841 6c04 	str.w	r6, [r1, #-4]
 800ba8e:	f841 3c08 	str.w	r3, [r1, #-8]
 800ba92:	daed      	bge.n	800ba70 <st_int8_to16_dual+0x190>
 800ba94:	42a2      	cmp	r2, r4
 800ba96:	dd08      	ble.n	800baaa <st_int8_to16_dual+0x1ca>
 800ba98:	1b13      	subs	r3, r2, r4
 800ba9a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800ba9e:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800baa2:	f821 2b02 	strh.w	r2, [r1], #2
 800baa6:	428b      	cmp	r3, r1
 800baa8:	d1f9      	bne.n	800ba9e <st_int8_to16_dual+0x1be>
 800baaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baae:	4682      	mov	sl, r0
 800bab0:	e7cf      	b.n	800ba52 <st_int8_to16_dual+0x172>
 800bab2:	bf00      	nop

0800bab4 <st_sssa8_nn_mat_mult_kernel>:
 800bab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	b09f      	sub	sp, #124	; 0x7c
 800baba:	4680      	mov	r8, r0
 800babc:	0858      	lsrs	r0, r3, #1
 800babe:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800bac0:	f8bd 40a0 	ldrh.w	r4, [sp, #160]	; 0xa0
 800bac4:	f9bd 50a4 	ldrsh.w	r5, [sp, #164]	; 0xa4
 800bac8:	441e      	add	r6, r3
 800baca:	931b      	str	r3, [sp, #108]	; 0x6c
 800bacc:	9110      	str	r1, [sp, #64]	; 0x40
 800bace:	921a      	str	r2, [sp, #104]	; 0x68
 800bad0:	9407      	str	r4, [sp, #28]
 800bad2:	950f      	str	r5, [sp, #60]	; 0x3c
 800bad4:	9619      	str	r6, [sp, #100]	; 0x64
 800bad6:	901d      	str	r0, [sp, #116]	; 0x74
 800bad8:	f000 820b 	beq.w	800bef2 <st_sssa8_nn_mat_mult_kernel+0x43e>
 800badc:	460f      	mov	r7, r1
 800bade:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 800bae2:	4694      	mov	ip, r2
 800bae4:	1e42      	subs	r2, r0, #1
 800bae6:	9111      	str	r1, [sp, #68]	; 0x44
 800bae8:	2001      	movs	r0, #1
 800baea:	1ea9      	subs	r1, r5, #2
 800baec:	f1a4 0310 	sub.w	r3, r4, #16
 800baf0:	b292      	uxth	r2, r2
 800baf2:	4088      	lsls	r0, r1
 800baf4:	091b      	lsrs	r3, r3, #4
 800baf6:	f10c 0110 	add.w	r1, ip, #16
 800bafa:	9017      	str	r0, [sp, #92]	; 0x5c
 800bafc:	4660      	mov	r0, ip
 800bafe:	3301      	adds	r3, #1
 800bb00:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800bb04:	3008      	adds	r0, #8
 800bb06:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bb08:	9213      	str	r2, [sp, #76]	; 0x4c
 800bb0a:	4622      	mov	r2, r4
 800bb0c:	9008      	str	r0, [sp, #32]
 800bb0e:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 800bb12:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800bb14:	3c03      	subs	r4, #3
 800bb16:	9115      	str	r1, [sp, #84]	; 0x54
 800bb18:	3002      	adds	r0, #2
 800bb1a:	9412      	str	r4, [sp, #72]	; 0x48
 800bb1c:	9009      	str	r0, [sp, #36]	; 0x24
 800bb1e:	1cb0      	adds	r0, r6, #2
 800bb20:	900a      	str	r0, [sp, #40]	; 0x28
 800bb22:	0118      	lsls	r0, r3, #4
 800bb24:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 800bb28:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb2a:	9314      	str	r3, [sp, #80]	; 0x50
 800bb2c:	1f13      	subs	r3, r2, #4
 800bb2e:	9316      	str	r3, [sp, #88]	; 0x58
 800bb30:	f1c5 0301 	rsb	r3, r5, #1
 800bb34:	931c      	str	r3, [sp, #112]	; 0x70
 800bb36:	1e6b      	subs	r3, r5, #1
 800bb38:	9318      	str	r3, [sp, #96]	; 0x60
 800bb3a:	9b07      	ldr	r3, [sp, #28]
 800bb3c:	9908      	ldr	r1, [sp, #32]
 800bb3e:	eb08 0503 	add.w	r5, r8, r3
 800bb42:	2b0f      	cmp	r3, #15
 800bb44:	e951 2a02 	ldrd	r2, sl, [r1, #-8]
 800bb48:	9503      	str	r5, [sp, #12]
 800bb4a:	f340 82ad 	ble.w	800c0a8 <st_sssa8_nn_mat_mult_kernel+0x5f4>
 800bb4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb50:	46d6      	mov	lr, sl
 800bb52:	4691      	mov	r9, r2
 800bb54:	9501      	str	r5, [sp, #4]
 800bb56:	4443      	add	r3, r8
 800bb58:	e9dd 0410 	ldrd	r0, r4, [sp, #64]	; 0x40
 800bb5c:	9302      	str	r3, [sp, #8]
 800bb5e:	9000      	str	r0, [sp, #0]
 800bb60:	9b00      	ldr	r3, [sp, #0]
 800bb62:	f8d4 c000 	ldr.w	ip, [r4]
 800bb66:	681f      	ldr	r7, [r3, #0]
 800bb68:	f8d8 1000 	ldr.w	r1, [r8]
 800bb6c:	fa2f f391 	sxtb16	r3, r1, ror #8
 800bb70:	9801      	ldr	r0, [sp, #4]
 800bb72:	fa2f f181 	sxtb16	r1, r1
 800bb76:	6805      	ldr	r5, [r0, #0]
 800bb78:	eac3 4b21 	pkhtb	fp, r3, r1, asr #16
 800bb7c:	eac1 4103 	pkhbt	r1, r1, r3, lsl #16
 800bb80:	fa2f f695 	sxtb16	r6, r5, ror #8
 800bb84:	fa2f f585 	sxtb16	r5, r5
 800bb88:	eac6 4325 	pkhtb	r3, r6, r5, asr #16
 800bb8c:	eac5 4506 	pkhbt	r5, r5, r6, lsl #16
 800bb90:	fb21 2207 	smlad	r2, r1, r7, r2
 800bb94:	fb21 910c 	smlad	r1, r1, ip, r9
 800bb98:	fb25 a707 	smlad	r7, r5, r7, sl
 800bb9c:	fb25 e50c 	smlad	r5, r5, ip, lr
 800bba0:	9e00      	ldr	r6, [sp, #0]
 800bba2:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800bba6:	f8d6 a004 	ldr.w	sl, [r6, #4]
 800bbaa:	fb2b 260a 	smlad	r6, fp, sl, r2
 800bbae:	fb2b 1b0e 	smlad	fp, fp, lr, r1
 800bbb2:	fb23 770a 	smlad	r7, r3, sl, r7
 800bbb6:	fb23 5e0e 	smlad	lr, r3, lr, r5
 800bbba:	9b00      	ldr	r3, [sp, #0]
 800bbbc:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800bbc0:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800bbc4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bbc8:	fa2f f995 	sxtb16	r9, r5, ror #8
 800bbcc:	fa2f f585 	sxtb16	r5, r5
 800bbd0:	6843      	ldr	r3, [r0, #4]
 800bbd2:	eac9 4125 	pkhtb	r1, r9, r5, asr #16
 800bbd6:	eac5 4509 	pkhbt	r5, r5, r9, lsl #16
 800bbda:	fa2f f993 	sxtb16	r9, r3, ror #8
 800bbde:	fa2f f383 	sxtb16	r3, r3
 800bbe2:	eac9 4223 	pkhtb	r2, r9, r3, asr #16
 800bbe6:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 800bbea:	fb25 660a 	smlad	r6, r5, sl, r6
 800bbee:	fb25 bb0c 	smlad	fp, r5, ip, fp
 800bbf2:	fb23 7a0a 	smlad	sl, r3, sl, r7
 800bbf6:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800bbfa:	9b00      	ldr	r3, [sp, #0]
 800bbfc:	68e5      	ldr	r5, [r4, #12]
 800bbfe:	68df      	ldr	r7, [r3, #12]
 800bc00:	fb21 6607 	smlad	r6, r1, r7, r6
 800bc04:	fb21 b105 	smlad	r1, r1, r5, fp
 800bc08:	fb22 aa07 	smlad	sl, r2, r7, sl
 800bc0c:	fb22 cc05 	smlad	ip, r2, r5, ip
 800bc10:	691f      	ldr	r7, [r3, #16]
 800bc12:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800bc16:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800bc1a:	fa2f f592 	sxtb16	r5, r2, ror #8
 800bc1e:	fa2f f282 	sxtb16	r2, r2
 800bc22:	6883      	ldr	r3, [r0, #8]
 800bc24:	eac5 4922 	pkhtb	r9, r5, r2, asr #16
 800bc28:	eac2 4205 	pkhbt	r2, r2, r5, lsl #16
 800bc2c:	fa2f f593 	sxtb16	r5, r3, ror #8
 800bc30:	fa2f f383 	sxtb16	r3, r3
 800bc34:	eac5 4b23 	pkhtb	fp, r5, r3, asr #16
 800bc38:	eac3 4505 	pkhbt	r5, r3, r5, lsl #16
 800bc3c:	fb22 6607 	smlad	r6, r2, r7, r6
 800bc40:	fb22 120e 	smlad	r2, r2, lr, r1
 800bc44:	fb25 a707 	smlad	r7, r5, r7, sl
 800bc48:	fb25 c50e 	smlad	r5, r5, lr, ip
 800bc4c:	9b00      	ldr	r3, [sp, #0]
 800bc4e:	6961      	ldr	r1, [r4, #20]
 800bc50:	f8d3 a014 	ldr.w	sl, [r3, #20]
 800bc54:	fb29 660a 	smlad	r6, r9, sl, r6
 800bc58:	fb29 2901 	smlad	r9, r9, r1, r2
 800bc5c:	fb2b 770a 	smlad	r7, fp, sl, r7
 800bc60:	fb2b 5501 	smlad	r5, fp, r1, r5
 800bc64:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800bc68:	f108 0810 	add.w	r8, r8, #16
 800bc6c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800bc70:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800bc74:	fa2f f291 	sxtb16	r2, r1, ror #8
 800bc78:	68c3      	ldr	r3, [r0, #12]
 800bc7a:	3010      	adds	r0, #16
 800bc7c:	fa2f f181 	sxtb16	r1, r1
 800bc80:	9001      	str	r0, [sp, #4]
 800bc82:	eac2 4b21 	pkhtb	fp, r2, r1, asr #16
 800bc86:	eac1 4102 	pkhbt	r1, r1, r2, lsl #16
 800bc8a:	fa2f f293 	sxtb16	r2, r3, ror #8
 800bc8e:	fa2f f383 	sxtb16	r3, r3
 800bc92:	eac2 4c23 	pkhtb	ip, r2, r3, asr #16
 800bc96:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 800bc9a:	fb21 660a 	smlad	r6, r1, sl, r6
 800bc9e:	fb21 990e 	smlad	r9, r1, lr, r9
 800bca2:	fb23 7a0a 	smlad	sl, r3, sl, r7
 800bca6:	fb23 530e 	smlad	r3, r3, lr, r5
 800bcaa:	9a00      	ldr	r2, [sp, #0]
 800bcac:	3420      	adds	r4, #32
 800bcae:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800bcb2:	69d1      	ldr	r1, [r2, #28]
 800bcb4:	3220      	adds	r2, #32
 800bcb6:	9200      	str	r2, [sp, #0]
 800bcb8:	fb2b 6201 	smlad	r2, fp, r1, r6
 800bcbc:	fb2b 990e 	smlad	r9, fp, lr, r9
 800bcc0:	fb2c aa01 	smlad	sl, ip, r1, sl
 800bcc4:	fb2c 3e0e 	smlad	lr, ip, lr, r3
 800bcc8:	9b02      	ldr	r3, [sp, #8]
 800bcca:	4598      	cmp	r8, r3
 800bccc:	f47f af48 	bne.w	800bb60 <st_sssa8_nn_mat_mult_kernel+0xac>
 800bcd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bcd2:	9b03      	ldr	r3, [sp, #12]
 800bcd4:	440b      	add	r3, r1
 800bcd6:	9303      	str	r3, [sp, #12]
 800bcd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcda:	9304      	str	r3, [sp, #16]
 800bcdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcde:	e9cd 1305 	strd	r1, r3, [sp, #20]
 800bce2:	460b      	mov	r3, r1
 800bce4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bce6:	4299      	cmp	r1, r3
 800bce8:	f340 81ec 	ble.w	800c0c4 <st_sssa8_nn_mat_mult_kernel+0x610>
 800bcec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bcee:	9d02      	ldr	r5, [sp, #8]
 800bcf0:	1acb      	subs	r3, r1, r3
 800bcf2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bcf6:	9c04      	ldr	r4, [sp, #16]
 800bcf8:	089b      	lsrs	r3, r3, #2
 800bcfa:	9806      	ldr	r0, [sp, #24]
 800bcfc:	930d      	str	r3, [sp, #52]	; 0x34
 800bcfe:	3301      	adds	r3, #1
 800bd00:	0099      	lsls	r1, r3, #2
 800bd02:	930c      	str	r3, [sp, #48]	; 0x30
 800bd04:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800bd08:	910e      	str	r1, [sp, #56]	; 0x38
 800bd0a:	e9cd b300 	strd	fp, r3, [sp]
 800bd0e:	f8d0 8000 	ldr.w	r8, [r0]
 800bd12:	f8d4 c000 	ldr.w	ip, [r4]
 800bd16:	f855 1b04 	ldr.w	r1, [r5], #4
 800bd1a:	fa2f f691 	sxtb16	r6, r1, ror #8
 800bd1e:	9f00      	ldr	r7, [sp, #0]
 800bd20:	fa2f f181 	sxtb16	r1, r1
 800bd24:	f857 3b04 	ldr.w	r3, [r7], #4
 800bd28:	9700      	str	r7, [sp, #0]
 800bd2a:	eac6 4721 	pkhtb	r7, r6, r1, asr #16
 800bd2e:	eac1 4106 	pkhbt	r1, r1, r6, lsl #16
 800bd32:	fa2f fb93 	sxtb16	fp, r3, ror #8
 800bd36:	fa2f f383 	sxtb16	r3, r3
 800bd3a:	eacb 4623 	pkhtb	r6, fp, r3, asr #16
 800bd3e:	eac3 430b 	pkhbt	r3, r3, fp, lsl #16
 800bd42:	fb21 2208 	smlad	r2, r1, r8, r2
 800bd46:	fb21 990c 	smlad	r9, r1, ip, r9
 800bd4a:	fb23 aa08 	smlad	sl, r3, r8, sl
 800bd4e:	fb23 e30c 	smlad	r3, r3, ip, lr
 800bd52:	6841      	ldr	r1, [r0, #4]
 800bd54:	3408      	adds	r4, #8
 800bd56:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800bd5a:	3008      	adds	r0, #8
 800bd5c:	fb27 2201 	smlad	r2, r7, r1, r2
 800bd60:	fb27 990e 	smlad	r9, r7, lr, r9
 800bd64:	fb26 aa01 	smlad	sl, r6, r1, sl
 800bd68:	fb26 3e0e 	smlad	lr, r6, lr, r3
 800bd6c:	9b01      	ldr	r3, [sp, #4]
 800bd6e:	429d      	cmp	r5, r3
 800bd70:	d1cd      	bne.n	800bd0e <st_sssa8_nn_mat_mult_kernel+0x25a>
 800bd72:	9b03      	ldr	r3, [sp, #12]
 800bd74:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bd76:	440b      	add	r3, r1
 800bd78:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bd7a:	9303      	str	r3, [sp, #12]
 800bd7c:	9b05      	ldr	r3, [sp, #20]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800bd84:	9904      	ldr	r1, [sp, #16]
 800bd86:	9305      	str	r3, [sp, #20]
 800bd88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd8a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd8e:	9104      	str	r1, [sp, #16]
 800bd90:	9906      	ldr	r1, [sp, #24]
 800bd92:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800bd96:	9306      	str	r3, [sp, #24]
 800bd98:	9c07      	ldr	r4, [sp, #28]
 800bd9a:	9d05      	ldr	r5, [sp, #20]
 800bd9c:	42ac      	cmp	r4, r5
 800bd9e:	dd58      	ble.n	800be52 <st_sssa8_nn_mat_mult_kernel+0x39e>
 800bda0:	9e01      	ldr	r6, [sp, #4]
 800bda2:	9f06      	ldr	r7, [sp, #24]
 800bda4:	9b03      	ldr	r3, [sp, #12]
 800bda6:	f9b7 1000 	ldrsh.w	r1, [r7]
 800bdaa:	f993 3000 	ldrsb.w	r3, [r3]
 800bdae:	f996 0000 	ldrsb.w	r0, [r6]
 800bdb2:	fb11 aa03 	smlabb	sl, r1, r3, sl
 800bdb6:	fb11 2200 	smlabb	r2, r1, r0, r2
 800bdba:	9904      	ldr	r1, [sp, #16]
 800bdbc:	f9b1 1000 	ldrsh.w	r1, [r1]
 800bdc0:	fb11 ee03 	smlabb	lr, r1, r3, lr
 800bdc4:	1c6b      	adds	r3, r5, #1
 800bdc6:	fb11 9900 	smlabb	r9, r1, r0, r9
 800bdca:	429c      	cmp	r4, r3
 800bdcc:	dd3b      	ble.n	800be46 <st_sssa8_nn_mat_mult_kernel+0x392>
 800bdce:	9b03      	ldr	r3, [sp, #12]
 800bdd0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800bdd4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800bdd8:	f996 0001 	ldrsb.w	r0, [r6, #1]
 800bddc:	fb11 aa03 	smlabb	sl, r1, r3, sl
 800bde0:	fb11 2200 	smlabb	r2, r1, r0, r2
 800bde4:	9904      	ldr	r1, [sp, #16]
 800bde6:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bdea:	fb11 ee03 	smlabb	lr, r1, r3, lr
 800bdee:	1cab      	adds	r3, r5, #2
 800bdf0:	fb11 9900 	smlabb	r9, r1, r0, r9
 800bdf4:	429c      	cmp	r4, r3
 800bdf6:	dd26      	ble.n	800be46 <st_sssa8_nn_mat_mult_kernel+0x392>
 800bdf8:	9b03      	ldr	r3, [sp, #12]
 800bdfa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800bdfe:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800be02:	f996 0002 	ldrsb.w	r0, [r6, #2]
 800be06:	fb11 aa03 	smlabb	sl, r1, r3, sl
 800be0a:	fb11 2200 	smlabb	r2, r1, r0, r2
 800be0e:	9904      	ldr	r1, [sp, #16]
 800be10:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800be14:	fb11 ee03 	smlabb	lr, r1, r3, lr
 800be18:	1ceb      	adds	r3, r5, #3
 800be1a:	fb11 9900 	smlabb	r9, r1, r0, r9
 800be1e:	429c      	cmp	r4, r3
 800be20:	dd11      	ble.n	800be46 <st_sssa8_nn_mat_mult_kernel+0x392>
 800be22:	9903      	ldr	r1, [sp, #12]
 800be24:	9804      	ldr	r0, [sp, #16]
 800be26:	f991 1003 	ldrsb.w	r1, [r1, #3]
 800be2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be2e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800be32:	fb13 aa01 	smlabb	sl, r3, r1, sl
 800be36:	fb10 ee01 	smlabb	lr, r0, r1, lr
 800be3a:	f996 1003 	ldrsb.w	r1, [r6, #3]
 800be3e:	fb13 2201 	smlabb	r2, r3, r1, r2
 800be42:	fb10 9901 	smlabb	r9, r0, r1, r9
 800be46:	9905      	ldr	r1, [sp, #20]
 800be48:	9b07      	ldr	r3, [sp, #28]
 800be4a:	1a5b      	subs	r3, r3, r1
 800be4c:	9901      	ldr	r1, [sp, #4]
 800be4e:	4419      	add	r1, r3
 800be50:	9101      	str	r1, [sp, #4]
 800be52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be54:	2b15      	cmp	r3, #21
 800be56:	f340 80c5 	ble.w	800bfe4 <st_sssa8_nn_mat_mult_kernel+0x530>
 800be5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be5c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800be5e:	fb52 3201 	smmla	r2, r2, r1, r3
 800be62:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be64:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800be66:	410a      	asrs	r2, r1
 800be68:	fb59 3900 	smmla	r9, r9, r0, r3
 800be6c:	982b      	ldr	r0, [sp, #172]	; 0xac
 800be6e:	4402      	add	r2, r0
 800be70:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800be72:	fb5a 3700 	smmla	r7, sl, r0, r3
 800be76:	fb5e 3e00 	smmla	lr, lr, r0, r3
 800be7a:	f302 0207 	ssat	r2, #8, r2
 800be7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be80:	fa47 f301 	asr.w	r3, r7, r1
 800be84:	f800 2c02 	strb.w	r2, [r0, #-2]
 800be88:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800be8a:	4413      	add	r3, r2
 800be8c:	f303 0307 	ssat	r3, #8, r3
 800be90:	fa49 f901 	asr.w	r9, r9, r1
 800be94:	f800 3c01 	strb.w	r3, [r0, #-1]
 800be98:	eb09 0302 	add.w	r3, r9, r2
 800be9c:	f303 0307 	ssat	r3, #8, r3
 800bea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bea2:	fa4e fe01 	asr.w	lr, lr, r1
 800bea6:	f802 3c02 	strb.w	r3, [r2, #-2]
 800beaa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800beac:	4473      	add	r3, lr
 800beae:	f303 0307 	ssat	r3, #8, r3
 800beb2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800beb6:	9a01      	ldr	r2, [sp, #4]
 800beb8:	9907      	ldr	r1, [sp, #28]
 800beba:	9b08      	ldr	r3, [sp, #32]
 800bebc:	440a      	add	r2, r1
 800bebe:	3308      	adds	r3, #8
 800bec0:	4690      	mov	r8, r2
 800bec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bec4:	9308      	str	r3, [sp, #32]
 800bec6:	3202      	adds	r2, #2
 800bec8:	9209      	str	r2, [sp, #36]	; 0x24
 800beca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800becc:	3202      	adds	r2, #2
 800bece:	920a      	str	r2, [sp, #40]	; 0x28
 800bed0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bed2:	4293      	cmp	r3, r2
 800bed4:	f47f ae31 	bne.w	800bb3a <st_sssa8_nn_mat_mult_kernel+0x86>
 800bed8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800beda:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800bedc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800bee0:	922c      	str	r2, [sp, #176]	; 0xb0
 800bee2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bee4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800bee8:	9219      	str	r2, [sp, #100]	; 0x64
 800beea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800beec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bef0:	931a      	str	r3, [sp, #104]	; 0x68
 800bef2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bef4:	07db      	lsls	r3, r3, #31
 800bef6:	d56f      	bpl.n	800bfd8 <st_sssa8_nn_mat_mult_kernel+0x524>
 800bef8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800befa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	9b07      	ldr	r3, [sp, #28]
 800bf00:	ea5f 0993 	movs.w	r9, r3, lsr #2
 800bf04:	eb04 0e43 	add.w	lr, r4, r3, lsl #1
 800bf08:	f000 810b 	beq.w	800c122 <st_sssa8_nn_mat_mult_kernel+0x66e>
 800bf0c:	eb08 0c89 	add.w	ip, r8, r9, lsl #2
 800bf10:	4675      	mov	r5, lr
 800bf12:	4610      	mov	r0, r2
 800bf14:	f858 3b04 	ldr.w	r3, [r8], #4
 800bf18:	fa2f f793 	sxtb16	r7, r3, ror #8
 800bf1c:	fa2f f383 	sxtb16	r3, r3
 800bf20:	6821      	ldr	r1, [r4, #0]
 800bf22:	eac7 4623 	pkhtb	r6, r7, r3, asr #16
 800bf26:	eac3 4307 	pkhbt	r3, r3, r7, lsl #16
 800bf2a:	fb23 2201 	smlad	r2, r3, r1, r2
 800bf2e:	6829      	ldr	r1, [r5, #0]
 800bf30:	fb23 0301 	smlad	r3, r3, r1, r0
 800bf34:	6861      	ldr	r1, [r4, #4]
 800bf36:	3508      	adds	r5, #8
 800bf38:	f855 0c04 	ldr.w	r0, [r5, #-4]
 800bf3c:	3408      	adds	r4, #8
 800bf3e:	fb26 2201 	smlad	r2, r6, r1, r2
 800bf42:	fb26 3000 	smlad	r0, r6, r0, r3
 800bf46:	45c4      	cmp	ip, r8
 800bf48:	d1e4      	bne.n	800bf14 <st_sssa8_nn_mat_mult_kernel+0x460>
 800bf4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf4c:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800bf50:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800bf54:	9310      	str	r3, [sp, #64]	; 0x40
 800bf56:	9b07      	ldr	r3, [sp, #28]
 800bf58:	f013 0303 	ands.w	r3, r3, #3
 800bf5c:	d020      	beq.n	800bfa0 <st_sssa8_nn_mat_mult_kernel+0x4ec>
 800bf5e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bf60:	3b01      	subs	r3, #1
 800bf62:	f99c 1000 	ldrsb.w	r1, [ip]
 800bf66:	882c      	ldrh	r4, [r5, #0]
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	fb14 2201 	smlabb	r2, r4, r1, r2
 800bf6e:	f8be 4000 	ldrh.w	r4, [lr]
 800bf72:	fb14 0001 	smlabb	r0, r4, r1, r0
 800bf76:	b19b      	cbz	r3, 800bfa0 <st_sssa8_nn_mat_mult_kernel+0x4ec>
 800bf78:	f99c 1001 	ldrsb.w	r1, [ip, #1]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	886c      	ldrh	r4, [r5, #2]
 800bf80:	fb14 2201 	smlabb	r2, r4, r1, r2
 800bf84:	f8be 4002 	ldrh.w	r4, [lr, #2]
 800bf88:	fb14 0001 	smlabb	r0, r4, r1, r0
 800bf8c:	d008      	beq.n	800bfa0 <st_sssa8_nn_mat_mult_kernel+0x4ec>
 800bf8e:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 800bf92:	88a9      	ldrh	r1, [r5, #4]
 800bf94:	fb11 2203 	smlabb	r2, r1, r3, r2
 800bf98:	f8be 1004 	ldrh.w	r1, [lr, #4]
 800bf9c:	fb11 0003 	smlabb	r0, r1, r3, r0
 800bfa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfa2:	2b15      	cmp	r3, #21
 800bfa4:	f340 8091 	ble.w	800c0ca <st_sssa8_nn_mat_mult_kernel+0x616>
 800bfa8:	1e9c      	subs	r4, r3, #2
 800bfaa:	1e59      	subs	r1, r3, #1
 800bfac:	2301      	movs	r3, #1
 800bfae:	40a3      	lsls	r3, r4
 800bfb0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800bfb2:	fb52 3204 	smmla	r2, r2, r4, r3
 800bfb6:	fb50 3304 	smmla	r3, r0, r4, r3
 800bfba:	410a      	asrs	r2, r1
 800bfbc:	982b      	ldr	r0, [sp, #172]	; 0xac
 800bfbe:	4402      	add	r2, r0
 800bfc0:	f302 0207 	ssat	r2, #8, r2
 800bfc4:	410b      	asrs	r3, r1
 800bfc6:	4403      	add	r3, r0
 800bfc8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800bfca:	f800 2b01 	strb.w	r2, [r0], #1
 800bfce:	f303 0307 	ssat	r3, #8, r3
 800bfd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bfd4:	902c      	str	r0, [sp, #176]	; 0xb0
 800bfd6:	7013      	strb	r3, [r2, #0]
 800bfd8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bfda:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800bfdc:	4418      	add	r0, r3
 800bfde:	b01f      	add	sp, #124	; 0x7c
 800bfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	dd2a      	ble.n	800c03e <st_sssa8_nn_mat_mult_kernel+0x58a>
 800bfe8:	ea4f 074a 	mov.w	r7, sl, lsl #1
 800bfec:	0052      	lsls	r2, r2, #1
 800bfee:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800bff2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800bff6:	e9dd 102a 	ldrd	r1, r0, [sp, #168]	; 0xa8
 800bffa:	fb52 0201 	smmla	r2, r2, r1, r0
 800bffe:	fb59 0901 	smmla	r9, r9, r1, r0
 800c002:	411a      	asrs	r2, r3
 800c004:	fb57 0a01 	smmla	sl, r7, r1, r0
 800c008:	fb5e 0e01 	smmla	lr, lr, r1, r0
 800c00c:	f302 0207 	ssat	r2, #8, r2
 800c010:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c012:	fa4a f703 	asr.w	r7, sl, r3
 800c016:	f801 2c02 	strb.w	r2, [r1, #-2]
 800c01a:	f307 0707 	ssat	r7, #8, r7
 800c01e:	fa49 f903 	asr.w	r9, r9, r3
 800c022:	f801 7c01 	strb.w	r7, [r1, #-1]
 800c026:	f309 0907 	ssat	r9, #8, r9
 800c02a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c02c:	fa4e fe03 	asr.w	lr, lr, r3
 800c030:	f802 9c02 	strb.w	r9, [r2, #-2]
 800c034:	f30e 0e07 	ssat	lr, #8, lr
 800c038:	f802 ec01 	strb.w	lr, [r2, #-1]
 800c03c:	e73b      	b.n	800beb6 <st_sssa8_nn_mat_mult_kernel+0x402>
 800c03e:	981c      	ldr	r0, [sp, #112]	; 0x70
 800c040:	4082      	lsls	r2, r0
 800c042:	f302 021f 	ssat	r2, #32, r2
 800c046:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c048:	fb52 f213 	smmulr	r2, r2, r3
 800c04c:	fa09 f300 	lsl.w	r3, r9, r0
 800c050:	f303 031f 	ssat	r3, #32, r3
 800c054:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800c056:	fb53 f311 	smmulr	r3, r3, r1
 800c05a:	fa0a f100 	lsl.w	r1, sl, r0
 800c05e:	f301 011f 	ssat	r1, #32, r1
 800c062:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800c064:	fb51 f114 	smmulr	r1, r1, r4
 800c068:	fa0e fe00 	lsl.w	lr, lr, r0
 800c06c:	f30e 001f 	ssat	r0, #32, lr
 800c070:	fb50 f014 	smmulr	r0, r0, r4
 800c074:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800c076:	4422      	add	r2, r4
 800c078:	f302 0207 	ssat	r2, #8, r2
 800c07c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c07e:	f804 2c02 	strb.w	r2, [r4, #-2]
 800c082:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800c084:	4411      	add	r1, r2
 800c086:	f301 0107 	ssat	r1, #8, r1
 800c08a:	4413      	add	r3, r2
 800c08c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c090:	f303 0307 	ssat	r3, #8, r3
 800c094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c096:	f802 3c02 	strb.w	r3, [r2, #-2]
 800c09a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800c09c:	4418      	add	r0, r3
 800c09e:	f300 0007 	ssat	r0, #8, r0
 800c0a2:	f802 0c01 	strb.w	r0, [r2, #-1]
 800c0a6:	e706      	b.n	800beb6 <st_sssa8_nn_mat_mult_kernel+0x402>
 800c0a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0aa:	46d6      	mov	lr, sl
 800c0ac:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c0ae:	4691      	mov	r9, r2
 800c0b0:	9304      	str	r3, [sp, #16]
 800c0b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0b4:	f8cd 8008 	str.w	r8, [sp, #8]
 800c0b8:	9306      	str	r3, [sp, #24]
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	4299      	cmp	r1, r3
 800c0be:	9305      	str	r3, [sp, #20]
 800c0c0:	f73f ae14 	bgt.w	800bcec <st_sssa8_nn_mat_mult_kernel+0x238>
 800c0c4:	9b02      	ldr	r3, [sp, #8]
 800c0c6:	9301      	str	r3, [sp, #4]
 800c0c8:	e666      	b.n	800bd98 <st_sssa8_nn_mat_mult_kernel+0x2e4>
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	dd0c      	ble.n	800c0ea <st_sssa8_nn_mat_mult_kernel+0x636>
 800c0d0:	0043      	lsls	r3, r0, #1
 800c0d2:	0052      	lsls	r2, r2, #1
 800c0d4:	e9dd 042a 	ldrd	r0, r4, [sp, #168]	; 0xa8
 800c0d8:	fb52 4200 	smmla	r2, r2, r0, r4
 800c0dc:	fb53 4300 	smmla	r3, r3, r0, r4
 800c0e0:	410a      	asrs	r2, r1
 800c0e2:	f302 0207 	ssat	r2, #8, r2
 800c0e6:	410b      	asrs	r3, r1
 800c0e8:	e76e      	b.n	800bfc8 <st_sssa8_nn_mat_mult_kernel+0x514>
 800c0ea:	f1c3 0301 	rsb	r3, r3, #1
 800c0ee:	409a      	lsls	r2, r3
 800c0f0:	f302 021f 	ssat	r2, #32, r2
 800c0f4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800c0f6:	fb52 f211 	smmulr	r2, r2, r1
 800c0fa:	fa00 f303 	lsl.w	r3, r0, r3
 800c0fe:	f303 031f 	ssat	r3, #32, r3
 800c102:	fb53 f311 	smmulr	r3, r3, r1
 800c106:	992b      	ldr	r1, [sp, #172]	; 0xac
 800c108:	440a      	add	r2, r1
 800c10a:	f302 0207 	ssat	r2, #8, r2
 800c10e:	440b      	add	r3, r1
 800c110:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800c112:	f801 2b01 	strb.w	r2, [r1], #1
 800c116:	f303 0307 	ssat	r3, #8, r3
 800c11a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c11c:	912c      	str	r1, [sp, #176]	; 0xb0
 800c11e:	7013      	strb	r3, [r2, #0]
 800c120:	e75a      	b.n	800bfd8 <st_sssa8_nn_mat_mult_kernel+0x524>
 800c122:	46c4      	mov	ip, r8
 800c124:	4610      	mov	r0, r2
 800c126:	e716      	b.n	800bf56 <st_sssa8_nn_mat_mult_kernel+0x4a2>

0800c128 <st_sssa8_fullW_prefetch>:
 800c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	b087      	sub	sp, #28
 800c12e:	eb00 0802 	add.w	r8, r0, r2
 800c132:	9105      	str	r1, [sp, #20]
 800c134:	1049      	asrs	r1, r1, #1
 800c136:	9100      	str	r1, [sp, #0]
 800c138:	f000 80e1 	beq.w	800c2fe <st_sssa8_fullW_prefetch+0x1d6>
 800c13c:	f1a2 0110 	sub.w	r1, r2, #16
 800c140:	1ed4      	subs	r4, r2, #3
 800c142:	0909      	lsrs	r1, r1, #4
 800c144:	9402      	str	r4, [sp, #8]
 800c146:	1f14      	subs	r4, r2, #4
 800c148:	3101      	adds	r1, #1
 800c14a:	9404      	str	r4, [sp, #16]
 800c14c:	ea4f 1b01 	mov.w	fp, r1, lsl #4
 800c150:	0189      	lsls	r1, r1, #6
 800c152:	9103      	str	r1, [sp, #12]
 800c154:	2a0f      	cmp	r2, #15
 800c156:	f340 80e4 	ble.w	800c322 <st_sssa8_fullW_prefetch+0x1fa>
 800c15a:	eb00 060b 	add.w	r6, r0, fp
 800c15e:	4645      	mov	r5, r8
 800c160:	461c      	mov	r4, r3
 800c162:	6801      	ldr	r1, [r0, #0]
 800c164:	3010      	adds	r0, #16
 800c166:	682f      	ldr	r7, [r5, #0]
 800c168:	3440      	adds	r4, #64	; 0x40
 800c16a:	fa2f fc81 	sxtb16	ip, r1
 800c16e:	3510      	adds	r5, #16
 800c170:	f844 cc40 	str.w	ip, [r4, #-64]
 800c174:	ea4f 2131 	mov.w	r1, r1, ror #8
 800c178:	42b0      	cmp	r0, r6
 800c17a:	fa2f f181 	sxtb16	r1, r1
 800c17e:	f844 1c3c 	str.w	r1, [r4, #-60]
 800c182:	ea4f 2137 	mov.w	r1, r7, ror #8
 800c186:	fa2f f787 	sxtb16	r7, r7
 800c18a:	fa2f f181 	sxtb16	r1, r1
 800c18e:	f844 7c38 	str.w	r7, [r4, #-56]
 800c192:	f844 1c34 	str.w	r1, [r4, #-52]
 800c196:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 800c19a:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 800c19e:	ea4f 2c31 	mov.w	ip, r1, ror #8
 800c1a2:	fa2f f181 	sxtb16	r1, r1
 800c1a6:	fa2f fc8c 	sxtb16	ip, ip
 800c1aa:	f844 1c28 	str.w	r1, [r4, #-40]
 800c1ae:	f844 cc24 	str.w	ip, [r4, #-36]
 800c1b2:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800c1b6:	fa2f f787 	sxtb16	r7, r7
 800c1ba:	f844 7c30 	str.w	r7, [r4, #-48]
 800c1be:	fa2f f78c 	sxtb16	r7, ip
 800c1c2:	f844 7c2c 	str.w	r7, [r4, #-44]
 800c1c6:	f850 7c08 	ldr.w	r7, [r0, #-8]
 800c1ca:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800c1ce:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800c1d2:	fa2f f787 	sxtb16	r7, r7
 800c1d6:	fa2f fc8c 	sxtb16	ip, ip
 800c1da:	f844 7c20 	str.w	r7, [r4, #-32]
 800c1de:	ea4f 2731 	mov.w	r7, r1, ror #8
 800c1e2:	f844 cc1c 	str.w	ip, [r4, #-28]
 800c1e6:	fa2f f787 	sxtb16	r7, r7
 800c1ea:	fa2f f181 	sxtb16	r1, r1
 800c1ee:	f844 7c14 	str.w	r7, [r4, #-20]
 800c1f2:	f844 1c18 	str.w	r1, [r4, #-24]
 800c1f6:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800c1fa:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800c1fe:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800c202:	fa2f f787 	sxtb16	r7, r7
 800c206:	fa2f fc8c 	sxtb16	ip, ip
 800c20a:	f844 7c10 	str.w	r7, [r4, #-16]
 800c20e:	ea4f 2731 	mov.w	r7, r1, ror #8
 800c212:	f844 cc0c 	str.w	ip, [r4, #-12]
 800c216:	fa2f f787 	sxtb16	r7, r7
 800c21a:	fa2f f181 	sxtb16	r1, r1
 800c21e:	f844 7c04 	str.w	r7, [r4, #-4]
 800c222:	f844 1c08 	str.w	r1, [r4, #-8]
 800c226:	d19c      	bne.n	800c162 <st_sssa8_fullW_prefetch+0x3a>
 800c228:	9903      	ldr	r1, [sp, #12]
 800c22a:	44d8      	add	r8, fp
 800c22c:	46de      	mov	lr, fp
 800c22e:	440b      	add	r3, r1
 800c230:	9902      	ldr	r1, [sp, #8]
 800c232:	4571      	cmp	r1, lr
 800c234:	dd73      	ble.n	800c31e <st_sssa8_fullW_prefetch+0x1f6>
 800c236:	9904      	ldr	r1, [sp, #16]
 800c238:	4647      	mov	r7, r8
 800c23a:	461c      	mov	r4, r3
 800c23c:	eba1 090e 	sub.w	r9, r1, lr
 800c240:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800c244:	f109 0a01 	add.w	sl, r9, #1
 800c248:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800c24c:	9101      	str	r1, [sp, #4]
 800c24e:	eb06 018a 	add.w	r1, r6, sl, lsl #2
 800c252:	f856 0b04 	ldr.w	r0, [r6], #4
 800c256:	3410      	adds	r4, #16
 800c258:	f857 5b04 	ldr.w	r5, [r7], #4
 800c25c:	fa2f fc80 	sxtb16	ip, r0
 800c260:	428e      	cmp	r6, r1
 800c262:	ea4f 2030 	mov.w	r0, r0, ror #8
 800c266:	fa2f f080 	sxtb16	r0, r0
 800c26a:	f844 0c0c 	str.w	r0, [r4, #-12]
 800c26e:	ea4f 2035 	mov.w	r0, r5, ror #8
 800c272:	fa2f f585 	sxtb16	r5, r5
 800c276:	f844 cc10 	str.w	ip, [r4, #-16]
 800c27a:	f844 5c08 	str.w	r5, [r4, #-8]
 800c27e:	fa2f f080 	sxtb16	r0, r0
 800c282:	f844 0c04 	str.w	r0, [r4, #-4]
 800c286:	d1e4      	bne.n	800c252 <st_sssa8_fullW_prefetch+0x12a>
 800c288:	9801      	ldr	r0, [sp, #4]
 800c28a:	f10e 0e04 	add.w	lr, lr, #4
 800c28e:	eb03 130a 	add.w	r3, r3, sl, lsl #4
 800c292:	4480      	add	r8, r0
 800c294:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800c298:	4572      	cmp	r2, lr
 800c29a:	dd29      	ble.n	800c2f0 <st_sssa8_fullW_prefetch+0x1c8>
 800c29c:	f991 0000 	ldrsb.w	r0, [r1]
 800c2a0:	8018      	strh	r0, [r3, #0]
 800c2a2:	f998 0000 	ldrsb.w	r0, [r8]
 800c2a6:	8058      	strh	r0, [r3, #2]
 800c2a8:	f10e 0001 	add.w	r0, lr, #1
 800c2ac:	4282      	cmp	r2, r0
 800c2ae:	dd19      	ble.n	800c2e4 <st_sssa8_fullW_prefetch+0x1bc>
 800c2b0:	f991 0001 	ldrsb.w	r0, [r1, #1]
 800c2b4:	8098      	strh	r0, [r3, #4]
 800c2b6:	f998 0001 	ldrsb.w	r0, [r8, #1]
 800c2ba:	80d8      	strh	r0, [r3, #6]
 800c2bc:	f10e 0002 	add.w	r0, lr, #2
 800c2c0:	4282      	cmp	r2, r0
 800c2c2:	dd0f      	ble.n	800c2e4 <st_sssa8_fullW_prefetch+0x1bc>
 800c2c4:	f991 0002 	ldrsb.w	r0, [r1, #2]
 800c2c8:	8118      	strh	r0, [r3, #8]
 800c2ca:	f10e 0003 	add.w	r0, lr, #3
 800c2ce:	f998 4002 	ldrsb.w	r4, [r8, #2]
 800c2d2:	4282      	cmp	r2, r0
 800c2d4:	815c      	strh	r4, [r3, #10]
 800c2d6:	dd05      	ble.n	800c2e4 <st_sssa8_fullW_prefetch+0x1bc>
 800c2d8:	f991 0003 	ldrsb.w	r0, [r1, #3]
 800c2dc:	8198      	strh	r0, [r3, #12]
 800c2de:	f998 0003 	ldrsb.w	r0, [r8, #3]
 800c2e2:	81d8      	strh	r0, [r3, #14]
 800c2e4:	eba2 0e0e 	sub.w	lr, r2, lr
 800c2e8:	4471      	add	r1, lr
 800c2ea:	44f0      	add	r8, lr
 800c2ec:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 800c2f0:	1888      	adds	r0, r1, r2
 800c2f2:	9900      	ldr	r1, [sp, #0]
 800c2f4:	4490      	add	r8, r2
 800c2f6:	3901      	subs	r1, #1
 800c2f8:	9100      	str	r1, [sp, #0]
 800c2fa:	f47f af2b 	bne.w	800c154 <st_sssa8_fullW_prefetch+0x2c>
 800c2fe:	9905      	ldr	r1, [sp, #20]
 800c300:	07c9      	lsls	r1, r1, #31
 800c302:	d509      	bpl.n	800c318 <st_sssa8_fullW_prefetch+0x1f0>
 800c304:	2a00      	cmp	r2, #0
 800c306:	dd07      	ble.n	800c318 <st_sssa8_fullW_prefetch+0x1f0>
 800c308:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c30c:	f910 1b01 	ldrsb.w	r1, [r0], #1
 800c310:	f823 1b02 	strh.w	r1, [r3], #2
 800c314:	4293      	cmp	r3, r2
 800c316:	d1f9      	bne.n	800c30c <st_sssa8_fullW_prefetch+0x1e4>
 800c318:	b007      	add	sp, #28
 800c31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c31e:	4631      	mov	r1, r6
 800c320:	e7ba      	b.n	800c298 <st_sssa8_fullW_prefetch+0x170>
 800c322:	4606      	mov	r6, r0
 800c324:	f04f 0e00 	mov.w	lr, #0
 800c328:	e782      	b.n	800c230 <st_sssa8_fullW_prefetch+0x108>
 800c32a:	bf00      	nop

0800c32c <st_sssa8_nn_mat_mult_nt_t>:
 800c32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	b0ab      	sub	sp, #172	; 0xac
 800c332:	469c      	mov	ip, r3
 800c334:	901e      	str	r0, [sp, #120]	; 0x78
 800c336:	f9bd 50d4 	ldrsh.w	r5, [sp, #212]	; 0xd4
 800c33a:	9122      	str	r1, [sp, #136]	; 0x88
 800c33c:	9229      	str	r2, [sp, #164]	; 0xa4
 800c33e:	9314      	str	r3, [sp, #80]	; 0x50
 800c340:	9508      	str	r5, [sp, #32]
 800c342:	e9dd 043b 	ldrd	r0, r4, [sp, #236]	; 0xec
 800c346:	2c00      	cmp	r4, #0
 800c348:	bf18      	it	ne
 800c34a:	4620      	movne	r0, r4
 800c34c:	903b      	str	r0, [sp, #236]	; 0xec
 800c34e:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800c350:	2801      	cmp	r0, #1
 800c352:	f340 84ca 	ble.w	800ccea <st_sssa8_nn_mat_mult_nt_t+0x9be>
 800c356:	9838      	ldr	r0, [sp, #224]	; 0xe0
 800c358:	4688      	mov	r8, r1
 800c35a:	4696      	mov	lr, r2
 800c35c:	9f38      	ldr	r7, [sp, #224]	; 0xe0
 800c35e:	f1a0 0310 	sub.w	r3, r0, #16
 800c362:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800c364:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 800c366:	10bf      	asrs	r7, r7, #2
 800c368:	1e82      	subs	r2, r0, #2
 800c36a:	0919      	lsrs	r1, r3, #4
 800c36c:	f023 000f 	bic.w	r0, r3, #15
 800c370:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800c372:	0852      	lsrs	r2, r2, #1
 800c374:	f004 0403 	and.w	r4, r4, #3
 800c378:	105b      	asrs	r3, r3, #1
 800c37a:	3101      	adds	r1, #1
 800c37c:	1c56      	adds	r6, r2, #1
 800c37e:	2201      	movs	r2, #1
 800c380:	931d      	str	r3, [sp, #116]	; 0x74
 800c382:	1eab      	subs	r3, r5, #2
 800c384:	9628      	str	r6, [sp, #160]	; 0xa0
 800c386:	fa02 f503 	lsl.w	r5, r2, r3
 800c38a:	9424      	str	r4, [sp, #144]	; 0x90
 800c38c:	9723      	str	r7, [sp, #140]	; 0x8c
 800c38e:	9515      	str	r5, [sp, #84]	; 0x54
 800c390:	9d37      	ldr	r5, [sp, #220]	; 0xdc
 800c392:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 800c396:	4095      	lsls	r5, r2
 800c398:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800c39a:	f022 0303 	bic.w	r3, r2, #3
 800c39e:	4642      	mov	r2, r8
 800c3a0:	950d      	str	r5, [sp, #52]	; 0x34
 800c3a2:	18d3      	adds	r3, r2, r3
 800c3a4:	931a      	str	r3, [sp, #104]	; 0x68
 800c3a6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c3a8:	3314      	adds	r3, #20
 800c3aa:	1818      	adds	r0, r3, r0
 800c3ac:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c3ae:	9012      	str	r0, [sp, #72]	; 0x48
 800c3b0:	f06f 0003 	mvn.w	r0, #3
 800c3b4:	1ac0      	subs	r0, r0, r3
 800c3b6:	9013      	str	r0, [sp, #76]	; 0x4c
 800c3b8:	f1a3 000f 	sub.w	r0, r3, #15
 800c3bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800c3be:	9836      	ldr	r0, [sp, #216]	; 0xd8
 800c3c0:	f000 0001 	and.w	r0, r0, #1
 800c3c4:	901f      	str	r0, [sp, #124]	; 0x7c
 800c3c6:	0058      	lsls	r0, r3, #1
 800c3c8:	9019      	str	r0, [sp, #100]	; 0x64
 800c3ca:	0098      	lsls	r0, r3, #2
 800c3cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c3ce:	9021      	str	r0, [sp, #132]	; 0x84
 800c3d0:	eb0c 0046 	add.w	r0, ip, r6, lsl #1
 800c3d4:	fb05 f303 	mul.w	r3, r5, r3
 800c3d8:	901b      	str	r0, [sp, #108]	; 0x6c
 800c3da:	0138      	lsls	r0, r7, #4
 800c3dc:	9320      	str	r3, [sp, #128]	; 0x80
 800c3de:	9025      	str	r0, [sp, #148]	; 0x94
 800c3e0:	1e60      	subs	r0, r4, #1
 800c3e2:	9027      	str	r0, [sp, #156]	; 0x9c
 800c3e4:	1ea0      	subs	r0, r4, #2
 800c3e6:	9026      	str	r0, [sp, #152]	; 0x98
 800c3e8:	0108      	lsls	r0, r1, #4
 800c3ea:	0189      	lsls	r1, r1, #6
 800c3ec:	9011      	str	r0, [sp, #68]	; 0x44
 800c3ee:	911c      	str	r1, [sp, #112]	; 0x70
 800c3f0:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 800c3f4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c3f6:	3b03      	subs	r3, #3
 800c3f8:	930c      	str	r3, [sp, #48]	; 0x30
 800c3fa:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	f000 83c9 	beq.w	800cb94 <st_sssa8_nn_mat_mult_nt_t+0x868>
 800c402:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800c404:	2b00      	cmp	r3, #0
 800c406:	f040 8378 	bne.w	800cafa <st_sssa8_nn_mat_mult_nt_t+0x7ce>
 800c40a:	461a      	mov	r2, r3
 800c40c:	4618      	mov	r0, r3
 800c40e:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c410:	680b      	ldr	r3, [r1, #0]
 800c412:	18c3      	adds	r3, r0, r3
 800c414:	9309      	str	r3, [sp, #36]	; 0x24
 800c416:	684b      	ldr	r3, [r1, #4]
 800c418:	18d3      	adds	r3, r2, r3
 800c41a:	930a      	str	r3, [sp, #40]	; 0x28
 800c41c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f000 8419 	beq.w	800cc56 <st_sssa8_nn_mat_mult_nt_t+0x92a>
 800c424:	9304      	str	r3, [sp, #16]
 800c426:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c428:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c42a:	3304      	adds	r3, #4
 800c42c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800c42e:	1c51      	adds	r1, r2, #1
 800c430:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800c434:	930f      	str	r3, [sp, #60]	; 0x3c
 800c436:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c438:	9103      	str	r1, [sp, #12]
 800c43a:	3b04      	subs	r3, #4
 800c43c:	993b      	ldr	r1, [sp, #236]	; 0xec
 800c43e:	9202      	str	r2, [sp, #8]
 800c440:	9310      	str	r3, [sp, #64]	; 0x40
 800c442:	4401      	add	r1, r0
 800c444:	9b08      	ldr	r3, [sp, #32]
 800c446:	910e      	str	r1, [sp, #56]	; 0x38
 800c448:	f1c3 0301 	rsb	r3, r3, #1
 800c44c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c44e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c450:	2b00      	cmp	r3, #0
 800c452:	f340 8250 	ble.w	800c8f6 <st_sssa8_nn_mat_mult_nt_t+0x5ca>
 800c456:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c45a:	eb0b 0703 	add.w	r7, fp, r3
 800c45e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c460:	f8cd b014 	str.w	fp, [sp, #20]
 800c464:	4604      	mov	r4, r0
 800c466:	445b      	add	r3, fp
 800c468:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800c46a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800c46e:	9301      	str	r3, [sp, #4]
 800c470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c472:	4619      	mov	r1, r3
 800c474:	f85b c007 	ldr.w	ip, [fp, r7]
 800c478:	eb0b 0e07 	add.w	lr, fp, r7
 800c47c:	6832      	ldr	r2, [r6, #0]
 800c47e:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800c482:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800c486:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800c48a:	fa2f f58c 	sxtb16	r5, ip
 800c48e:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 800c492:	fb25 0002 	smlad	r0, r5, r2, r0
 800c496:	fb2c 0009 	smlad	r0, ip, r9, r0
 800c49a:	fb25 350a 	smlad	r5, r5, sl, r3
 800c49e:	fb2c 5508 	smlad	r5, ip, r8, r5
 800c4a2:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800c4a6:	fa2f fc83 	sxtb16	ip, r3
 800c4aa:	fa2f f393 	sxtb16	r3, r3, ror #8
 800c4ae:	fb2c 4202 	smlad	r2, ip, r2, r4
 800c4b2:	fb2c 110a 	smlad	r1, ip, sl, r1
 800c4b6:	fb23 2209 	smlad	r2, r3, r9, r2
 800c4ba:	f8d6 9010 	ldr.w	r9, [r6, #16]
 800c4be:	6974      	ldr	r4, [r6, #20]
 800c4c0:	fb23 1808 	smlad	r8, r3, r8, r1
 800c4c4:	f8de 1004 	ldr.w	r1, [lr, #4]
 800c4c8:	69b3      	ldr	r3, [r6, #24]
 800c4ca:	f8d6 a01c 	ldr.w	sl, [r6, #28]
 800c4ce:	fa2f fc81 	sxtb16	ip, r1
 800c4d2:	fa2f f191 	sxtb16	r1, r1, ror #8
 800c4d6:	fb2c 0009 	smlad	r0, ip, r9, r0
 800c4da:	fb21 0004 	smlad	r0, r1, r4, r0
 800c4de:	fb2c 5c03 	smlad	ip, ip, r3, r5
 800c4e2:	fb21 cc0a 	smlad	ip, r1, sl, ip
 800c4e6:	683d      	ldr	r5, [r7, #0]
 800c4e8:	fa2f f185 	sxtb16	r1, r5
 800c4ec:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c4f0:	fb21 2909 	smlad	r9, r1, r9, r2
 800c4f4:	fb21 8803 	smlad	r8, r1, r3, r8
 800c4f8:	fb25 9904 	smlad	r9, r5, r4, r9
 800c4fc:	6a34      	ldr	r4, [r6, #32]
 800c4fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c500:	fb25 8a0a 	smlad	sl, r5, sl, r8
 800c504:	f8de 2008 	ldr.w	r2, [lr, #8]
 800c508:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 800c50c:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 800c50e:	fa2f f182 	sxtb16	r1, r2
 800c512:	fa2f f292 	sxtb16	r2, r2, ror #8
 800c516:	fb21 0004 	smlad	r0, r1, r4, r0
 800c51a:	fb22 0003 	smlad	r0, r2, r3, r0
 800c51e:	fb21 c108 	smlad	r1, r1, r8, ip
 800c522:	fb22 1205 	smlad	r2, r2, r5, r1
 800c526:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800c52a:	fa2f f18c 	sxtb16	r1, ip
 800c52e:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 800c532:	fb21 9404 	smlad	r4, r1, r4, r9
 800c536:	fb21 aa08 	smlad	sl, r1, r8, sl
 800c53a:	fb2c 4903 	smlad	r9, ip, r3, r4
 800c53e:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
 800c542:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800c544:	fb2c a505 	smlad	r5, ip, r5, sl
 800c548:	f8de 300c 	ldr.w	r3, [lr, #12]
 800c54c:	3640      	adds	r6, #64	; 0x40
 800c54e:	f856 ac08 	ldr.w	sl, [r6, #-8]
 800c552:	f856 ec04 	ldr.w	lr, [r6, #-4]
 800c556:	fa2f f183 	sxtb16	r1, r3
 800c55a:	fa2f f393 	sxtb16	r3, r3, ror #8
 800c55e:	fb21 0008 	smlad	r0, r1, r8, r0
 800c562:	fb23 0004 	smlad	r0, r3, r4, r0
 800c566:	fb21 220a 	smlad	r2, r1, sl, r2
 800c56a:	fb23 230e 	smlad	r3, r3, lr, r2
 800c56e:	68b9      	ldr	r1, [r7, #8]
 800c570:	fa2f f281 	sxtb16	r2, r1
 800c574:	fa2f f191 	sxtb16	r1, r1, ror #8
 800c578:	fb22 9908 	smlad	r9, r2, r8, r9
 800c57c:	fb22 550a 	smlad	r5, r2, sl, r5
 800c580:	fb21 9404 	smlad	r4, r1, r4, r9
 800c584:	fb21 510e 	smlad	r1, r1, lr, r5
 800c588:	3710      	adds	r7, #16
 800c58a:	9a01      	ldr	r2, [sp, #4]
 800c58c:	42ba      	cmp	r2, r7
 800c58e:	f47f af71 	bne.w	800c474 <st_sssa8_nn_mat_mult_nt_t+0x148>
 800c592:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c594:	f8dd b014 	ldr.w	fp, [sp, #20]
 800c598:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c59a:	4692      	mov	sl, r2
 800c59c:	4493      	add	fp, r2
 800c59e:	9501      	str	r5, [sp, #4]
 800c5a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5a2:	4592      	cmp	sl, r2
 800c5a4:	f280 81a5 	bge.w	800c8f2 <st_sssa8_nn_mat_mult_nt_t+0x5c6>
 800c5a8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800c5aa:	f8cd a01c 	str.w	sl, [sp, #28]
 800c5ae:	eba5 020a 	sub.w	r2, r5, sl
 800c5b2:	46aa      	mov	sl, r5
 800c5b4:	0892      	lsrs	r2, r2, #2
 800c5b6:	4616      	mov	r6, r2
 800c5b8:	9206      	str	r2, [sp, #24]
 800c5ba:	9a01      	ldr	r2, [sp, #4]
 800c5bc:	3601      	adds	r6, #1
 800c5be:	eb0b 0986 	add.w	r9, fp, r6, lsl #2
 800c5c2:	9605      	str	r6, [sp, #20]
 800c5c4:	f8d2 8000 	ldr.w	r8, [r2]
 800c5c8:	3210      	adds	r2, #16
 800c5ca:	f85b 5b04 	ldr.w	r5, [fp], #4
 800c5ce:	f852 cc0c 	ldr.w	ip, [r2, #-12]
 800c5d2:	f852 ec08 	ldr.w	lr, [r2, #-8]
 800c5d6:	f852 7c04 	ldr.w	r7, [r2, #-4]
 800c5da:	fa2f f685 	sxtb16	r6, r5
 800c5de:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c5e2:	fb26 0008 	smlad	r0, r6, r8, r0
 800c5e6:	fb25 000c 	smlad	r0, r5, ip, r0
 800c5ea:	fb26 330e 	smlad	r3, r6, lr, r3
 800c5ee:	fb25 3307 	smlad	r3, r5, r7, r3
 800c5f2:	f85b 500a 	ldr.w	r5, [fp, sl]
 800c5f6:	fa2f f685 	sxtb16	r6, r5
 800c5fa:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c5fe:	fb26 4408 	smlad	r4, r6, r8, r4
 800c602:	fb26 110e 	smlad	r1, r6, lr, r1
 800c606:	fb25 440c 	smlad	r4, r5, ip, r4
 800c60a:	fb25 1107 	smlad	r1, r5, r7, r1
 800c60e:	45cb      	cmp	fp, r9
 800c610:	d1d8      	bne.n	800c5c4 <st_sssa8_nn_mat_mult_nt_t+0x298>
 800c612:	9a01      	ldr	r2, [sp, #4]
 800c614:	9d05      	ldr	r5, [sp, #20]
 800c616:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c61a:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800c61e:	9d06      	ldr	r5, [sp, #24]
 800c620:	9201      	str	r2, [sp, #4]
 800c622:	f10a 0204 	add.w	r2, sl, #4
 800c626:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 800c62a:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800c62c:	4552      	cmp	r2, sl
 800c62e:	dd58      	ble.n	800c6e2 <st_sssa8_nn_mat_mult_nt_t+0x3b6>
 800c630:	9f01      	ldr	r7, [sp, #4]
 800c632:	f999 2000 	ldrsb.w	r2, [r9]
 800c636:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 800c63a:	f9b7 6000 	ldrsh.w	r6, [r7]
 800c63e:	fb15 3302 	smlabb	r3, r5, r2, r3
 800c642:	fb16 0002 	smlabb	r0, r6, r2, r0
 800c646:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800c648:	f919 2002 	ldrsb.w	r2, [r9, r2]
 800c64c:	fb15 1102 	smlabb	r1, r5, r2, r1
 800c650:	9d38      	ldr	r5, [sp, #224]	; 0xe0
 800c652:	fb16 4402 	smlabb	r4, r6, r2, r4
 800c656:	f10a 0201 	add.w	r2, sl, #1
 800c65a:	4295      	cmp	r5, r2
 800c65c:	dd3d      	ble.n	800c6da <st_sssa8_nn_mat_mult_nt_t+0x3ae>
 800c65e:	eb09 0205 	add.w	r2, r9, r5
 800c662:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 800c666:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 800c66a:	f992 2001 	ldrsb.w	r2, [r2, #1]
 800c66e:	fb16 4402 	smlabb	r4, r6, r2, r4
 800c672:	fb15 1102 	smlabb	r1, r5, r2, r1
 800c676:	f999 2001 	ldrsb.w	r2, [r9, #1]
 800c67a:	fb16 0002 	smlabb	r0, r6, r2, r0
 800c67e:	9e38      	ldr	r6, [sp, #224]	; 0xe0
 800c680:	fb15 3302 	smlabb	r3, r5, r2, r3
 800c684:	f10a 0202 	add.w	r2, sl, #2
 800c688:	f109 0502 	add.w	r5, r9, #2
 800c68c:	4296      	cmp	r6, r2
 800c68e:	dd24      	ble.n	800c6da <st_sssa8_nn_mat_mult_nt_t+0x3ae>
 800c690:	57aa      	ldrsb	r2, [r5, r6]
 800c692:	f9b7 6008 	ldrsh.w	r6, [r7, #8]
 800c696:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 800c69a:	fb16 4402 	smlabb	r4, r6, r2, r4
 800c69e:	fb15 1102 	smlabb	r1, r5, r2, r1
 800c6a2:	f999 2002 	ldrsb.w	r2, [r9, #2]
 800c6a6:	fb16 0002 	smlabb	r0, r6, r2, r0
 800c6aa:	9e38      	ldr	r6, [sp, #224]	; 0xe0
 800c6ac:	fb15 3302 	smlabb	r3, r5, r2, r3
 800c6b0:	f10a 0203 	add.w	r2, sl, #3
 800c6b4:	f109 0503 	add.w	r5, r9, #3
 800c6b8:	4296      	cmp	r6, r2
 800c6ba:	dd0e      	ble.n	800c6da <st_sssa8_nn_mat_mult_nt_t+0x3ae>
 800c6bc:	57ad      	ldrsb	r5, [r5, r6]
 800c6be:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c6c2:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 800c6c6:	fb12 4405 	smlabb	r4, r2, r5, r4
 800c6ca:	fb16 1105 	smlabb	r1, r6, r5, r1
 800c6ce:	f999 5003 	ldrsb.w	r5, [r9, #3]
 800c6d2:	fb12 0005 	smlabb	r0, r2, r5, r0
 800c6d6:	fb16 3305 	smlabb	r3, r6, r5, r3
 800c6da:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800c6dc:	eba2 020a 	sub.w	r2, r2, sl
 800c6e0:	4491      	add	r9, r2
 800c6e2:	9a08      	ldr	r2, [sp, #32]
 800c6e4:	2a15      	cmp	r2, #21
 800c6e6:	f340 80a8 	ble.w	800c83a <st_sssa8_nn_mat_mult_nt_t+0x50e>
 800c6ea:	3a01      	subs	r2, #1
 800c6ec:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c6ee:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 800c6f0:	fb50 5006 	smmla	r0, r0, r6, r5
 800c6f4:	fb54 5406 	smmla	r4, r4, r6, r5
 800c6f8:	4110      	asrs	r0, r2
 800c6fa:	fb53 5306 	smmla	r3, r3, r6, r5
 800c6fe:	fb51 5106 	smmla	r1, r1, r6, r5
 800c702:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
 800c704:	4428      	add	r0, r5
 800c706:	f300 0007 	ssat	r0, #8, r0
 800c70a:	9d03      	ldr	r5, [sp, #12]
 800c70c:	4113      	asrs	r3, r2
 800c70e:	f805 0c01 	strb.w	r0, [r5, #-1]
 800c712:	983a      	ldr	r0, [sp, #232]	; 0xe8
 800c714:	4403      	add	r3, r0
 800c716:	f303 0307 	ssat	r3, #8, r3
 800c71a:	9802      	ldr	r0, [sp, #8]
 800c71c:	4114      	asrs	r4, r2
 800c71e:	7043      	strb	r3, [r0, #1]
 800c720:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800c722:	18e3      	adds	r3, r4, r3
 800c724:	f303 0307 	ssat	r3, #8, r3
 800c728:	4111      	asrs	r1, r2
 800c72a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800c72c:	5483      	strb	r3, [r0, r2]
 800c72e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800c730:	4419      	add	r1, r3
 800c732:	f301 0207 	ssat	r2, #8, r1
 800c736:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c738:	54ea      	strb	r2, [r5, r3]
 800c73a:	4603      	mov	r3, r0
 800c73c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c73e:	4413      	add	r3, r2
 800c740:	9302      	str	r3, [sp, #8]
 800c742:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c744:	eb09 0b03 	add.w	fp, r9, r3
 800c748:	9b03      	ldr	r3, [sp, #12]
 800c74a:	4413      	add	r3, r2
 800c74c:	9303      	str	r3, [sp, #12]
 800c74e:	9b04      	ldr	r3, [sp, #16]
 800c750:	3b01      	subs	r3, #1
 800c752:	9304      	str	r3, [sp, #16]
 800c754:	f47f ae7b 	bne.w	800c44e <st_sssa8_nn_mat_mult_nt_t+0x122>
 800c758:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c75a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c75c:	eb03 0a02 	add.w	sl, r3, r2
 800c760:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c762:	2b00      	cmp	r3, #0
 800c764:	f040 80d0 	bne.w	800c908 <st_sssa8_nn_mat_mult_nt_t+0x5dc>
 800c768:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 800c76c:	4413      	add	r3, r2
 800c76e:	9318      	str	r3, [sp, #96]	; 0x60
 800c770:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c772:	3302      	adds	r3, #2
 800c774:	9314      	str	r3, [sp, #80]	; 0x50
 800c776:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800c778:	b11b      	cbz	r3, 800c782 <st_sssa8_nn_mat_mult_nt_t+0x456>
 800c77a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800c77c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c77e:	4413      	add	r3, r2
 800c780:	933b      	str	r3, [sp, #236]	; 0xec
 800c782:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c784:	3308      	adds	r3, #8
 800c786:	9316      	str	r3, [sp, #88]	; 0x58
 800c788:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 800c78c:	4413      	add	r3, r2
 800c78e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c790:	931a      	str	r3, [sp, #104]	; 0x68
 800c792:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c794:	4293      	cmp	r3, r2
 800c796:	f47f ae30 	bne.w	800c3fa <st_sssa8_nn_mat_mult_nt_t+0xce>
 800c79a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c79c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c79e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800c7a0:	fb01 3302 	mla	r3, r1, r2, r3
 800c7a4:	9322      	str	r3, [sp, #136]	; 0x88
 800c7a6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c7a8:	07db      	lsls	r3, r3, #31
 800c7aa:	d542      	bpl.n	800c832 <st_sssa8_nn_mat_mult_nt_t+0x506>
 800c7ac:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	dd3f      	ble.n	800c832 <st_sssa8_nn_mat_mult_nt_t+0x506>
 800c7b2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c7b4:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 800c7b8:	9a08      	ldr	r2, [sp, #32]
 800c7ba:	2500      	movs	r5, #0
 800c7bc:	441e      	add	r6, r3
 800c7be:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c7c0:	1e97      	subs	r7, r2, #2
 800c7c2:	f1c2 0e01 	rsb	lr, r2, #1
 800c7c6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	f102 3cff 	add.w	ip, r2, #4294967295
 800c7d0:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 800c7d4:	fa03 f707 	lsl.w	r7, r3, r7
 800c7d8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c7da:	4693      	mov	fp, r2
 800c7dc:	f8cd e004 	str.w	lr, [sp, #4]
 800c7e0:	e9dd a838 	ldrd	sl, r8, [sp, #224]	; 0xe0
 800c7e4:	f1ba 0f00 	cmp.w	sl, #0
 800c7e8:	6832      	ldr	r2, [r6, #0]
 800c7ea:	dd0d      	ble.n	800c808 <st_sssa8_nn_mat_mult_nt_t+0x4dc>
 800c7ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7ee:	eb01 0e0a 	add.w	lr, r1, sl
 800c7f2:	1e58      	subs	r0, r3, #1
 800c7f4:	f911 3b01 	ldrsb.w	r3, [r1], #1
 800c7f8:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 800c7fc:	eba3 0308 	sub.w	r3, r3, r8
 800c800:	4571      	cmp	r1, lr
 800c802:	fb04 2203 	mla	r2, r4, r3, r2
 800c806:	d1f5      	bne.n	800c7f4 <st_sssa8_nn_mat_mult_nt_t+0x4c8>
 800c808:	f1bb 0f15 	cmp.w	fp, #21
 800c80c:	f340 8228 	ble.w	800cc60 <st_sssa8_nn_mat_mult_nt_t+0x934>
 800c810:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800c812:	fb52 7303 	smmla	r3, r2, r3, r7
 800c816:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800c818:	fa43 f30c 	asr.w	r3, r3, ip
 800c81c:	4413      	add	r3, r2
 800c81e:	f303 0307 	ssat	r3, #8, r3
 800c822:	f889 3000 	strb.w	r3, [r9]
 800c826:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c828:	3501      	adds	r5, #1
 800c82a:	4499      	add	r9, r3
 800c82c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800c82e:	42ab      	cmp	r3, r5
 800c830:	d1d8      	bne.n	800c7e4 <st_sssa8_nn_mat_mult_nt_t+0x4b8>
 800c832:	2000      	movs	r0, #0
 800c834:	b02b      	add	sp, #172	; 0xac
 800c836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83a:	2a00      	cmp	r2, #0
 800c83c:	dd23      	ble.n	800c886 <st_sssa8_nn_mat_mult_nt_t+0x55a>
 800c83e:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800c840:	0040      	lsls	r0, r0, #1
 800c842:	9e3a      	ldr	r6, [sp, #232]	; 0xe8
 800c844:	0064      	lsls	r4, r4, #1
 800c846:	fb50 6005 	smmla	r0, r0, r5, r6
 800c84a:	005b      	lsls	r3, r3, #1
 800c84c:	4110      	asrs	r0, r2
 800c84e:	0049      	lsls	r1, r1, #1
 800c850:	fb54 6405 	smmla	r4, r4, r5, r6
 800c854:	fb53 6305 	smmla	r3, r3, r5, r6
 800c858:	fb51 6105 	smmla	r1, r1, r5, r6
 800c85c:	f300 0007 	ssat	r0, #8, r0
 800c860:	9d03      	ldr	r5, [sp, #12]
 800c862:	4113      	asrs	r3, r2
 800c864:	f805 0c01 	strb.w	r0, [r5, #-1]
 800c868:	f303 0307 	ssat	r3, #8, r3
 800c86c:	9802      	ldr	r0, [sp, #8]
 800c86e:	4114      	asrs	r4, r2
 800c870:	7043      	strb	r3, [r0, #1]
 800c872:	f304 0407 	ssat	r4, #8, r4
 800c876:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c878:	4111      	asrs	r1, r2
 800c87a:	54c4      	strb	r4, [r0, r3]
 800c87c:	f301 0107 	ssat	r1, #8, r1
 800c880:	54e9      	strb	r1, [r5, r3]
 800c882:	4603      	mov	r3, r0
 800c884:	e75a      	b.n	800c73c <st_sssa8_nn_mat_mult_nt_t+0x410>
 800c886:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800c888:	fa00 f205 	lsl.w	r2, r0, r5
 800c88c:	f302 021f 	ssat	r2, #32, r2
 800c890:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800c892:	fb52 f210 	smmulr	r2, r2, r0
 800c896:	fa04 f005 	lsl.w	r0, r4, r5
 800c89a:	f300 001f 	ssat	r0, #32, r0
 800c89e:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 800c8a0:	fb50 f014 	smmulr	r0, r0, r4
 800c8a4:	462c      	mov	r4, r5
 800c8a6:	40ab      	lsls	r3, r5
 800c8a8:	f303 031f 	ssat	r3, #32, r3
 800c8ac:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800c8ae:	fb53 f315 	smmulr	r3, r3, r5
 800c8b2:	40a1      	lsls	r1, r4
 800c8b4:	f301 011f 	ssat	r1, #32, r1
 800c8b8:	fb51 f115 	smmulr	r1, r1, r5
 800c8bc:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800c8be:	4422      	add	r2, r4
 800c8c0:	f302 0207 	ssat	r2, #8, r2
 800c8c4:	9c03      	ldr	r4, [sp, #12]
 800c8c6:	f804 2c01 	strb.w	r2, [r4, #-1]
 800c8ca:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800c8cc:	4413      	add	r3, r2
 800c8ce:	f303 0307 	ssat	r3, #8, r3
 800c8d2:	9a02      	ldr	r2, [sp, #8]
 800c8d4:	7053      	strb	r3, [r2, #1]
 800c8d6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800c8d8:	4418      	add	r0, r3
 800c8da:	f300 0007 	ssat	r0, #8, r0
 800c8de:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c8e0:	54d0      	strb	r0, [r2, r3]
 800c8e2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800c8e4:	4419      	add	r1, r3
 800c8e6:	f301 0107 	ssat	r1, #8, r1
 800c8ea:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c8ec:	54e1      	strb	r1, [r4, r3]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	e724      	b.n	800c73c <st_sssa8_nn_mat_mult_nt_t+0x410>
 800c8f2:	46d9      	mov	r9, fp
 800c8f4:	e699      	b.n	800c62a <st_sssa8_nn_mat_mult_nt_t+0x2fe>
 800c8f6:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800c8f8:	f04f 0a00 	mov.w	sl, #0
 800c8fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8fe:	9301      	str	r3, [sp, #4]
 800c900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c902:	4604      	mov	r4, r0
 800c904:	4619      	mov	r1, r3
 800c906:	e64b      	b.n	800c5a0 <st_sssa8_nn_mat_mult_nt_t+0x274>
 800c908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f340 81e8 	ble.w	800cce0 <st_sssa8_nn_mat_mult_nt_t+0x9b4>
 800c910:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c912:	e9dd 5209 	ldrd	r5, r2, [sp, #36]	; 0x24
 800c916:	eb0b 0e03 	add.w	lr, fp, r3
 800c91a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800c91c:	f8db 1000 	ldr.w	r1, [fp]
 800c920:	fa2f f081 	sxtb16	r0, r1
 800c924:	fa2f f191 	sxtb16	r1, r1, ror #8
 800c928:	681c      	ldr	r4, [r3, #0]
 800c92a:	fb20 5404 	smlad	r4, r0, r4, r5
 800c92e:	685d      	ldr	r5, [r3, #4]
 800c930:	fb21 4505 	smlad	r5, r1, r5, r4
 800c934:	689c      	ldr	r4, [r3, #8]
 800c936:	fb20 2204 	smlad	r2, r0, r4, r2
 800c93a:	68d8      	ldr	r0, [r3, #12]
 800c93c:	fb21 2100 	smlad	r1, r1, r0, r2
 800c940:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c944:	fa2f f082 	sxtb16	r0, r2
 800c948:	fa2f f292 	sxtb16	r2, r2, ror #8
 800c94c:	691c      	ldr	r4, [r3, #16]
 800c94e:	fb20 5404 	smlad	r4, r0, r4, r5
 800c952:	695d      	ldr	r5, [r3, #20]
 800c954:	fb22 4505 	smlad	r5, r2, r5, r4
 800c958:	699c      	ldr	r4, [r3, #24]
 800c95a:	fb20 1004 	smlad	r0, r0, r4, r1
 800c95e:	69d9      	ldr	r1, [r3, #28]
 800c960:	fb22 0201 	smlad	r2, r2, r1, r0
 800c964:	f8db 1008 	ldr.w	r1, [fp, #8]
 800c968:	fa2f f081 	sxtb16	r0, r1
 800c96c:	fa2f f191 	sxtb16	r1, r1, ror #8
 800c970:	6a1c      	ldr	r4, [r3, #32]
 800c972:	fb20 5404 	smlad	r4, r0, r4, r5
 800c976:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800c978:	fb21 4606 	smlad	r6, r1, r6, r4
 800c97c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800c97e:	fb20 2004 	smlad	r0, r0, r4, r2
 800c982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c984:	fb21 0102 	smlad	r1, r1, r2, r0
 800c988:	f8db 500c 	ldr.w	r5, [fp, #12]
 800c98c:	3340      	adds	r3, #64	; 0x40
 800c98e:	f853 4c10 	ldr.w	r4, [r3, #-16]
 800c992:	f10b 0b10 	add.w	fp, fp, #16
 800c996:	f853 8c0c 	ldr.w	r8, [r3, #-12]
 800c99a:	f853 cc08 	ldr.w	ip, [r3, #-8]
 800c99e:	f853 7c04 	ldr.w	r7, [r3, #-4]
 800c9a2:	fa2f f085 	sxtb16	r0, r5
 800c9a6:	fa2f f295 	sxtb16	r2, r5, ror #8
 800c9aa:	fb20 6404 	smlad	r4, r0, r4, r6
 800c9ae:	fb22 4508 	smlad	r5, r2, r8, r4
 800c9b2:	fb20 110c 	smlad	r1, r0, ip, r1
 800c9b6:	fb22 1207 	smlad	r2, r2, r7, r1
 800c9ba:	45de      	cmp	lr, fp
 800c9bc:	d1ae      	bne.n	800c91c <st_sssa8_nn_mat_mult_nt_t+0x5f0>
 800c9be:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800c9c0:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 800c9c4:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 800c9c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c9ca:	eb03 0c02 	add.w	ip, r3, r2
 800c9ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9d0:	4573      	cmp	r3, lr
 800c9d2:	f340 8183 	ble.w	800ccdc <st_sssa8_nn_mat_mult_nt_t+0x9b0>
 800c9d6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c9d8:	f1a3 0904 	sub.w	r9, r3, #4
 800c9dc:	4663      	mov	r3, ip
 800c9de:	eba9 090e 	sub.w	r9, r9, lr
 800c9e2:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800c9e6:	f109 0801 	add.w	r8, r9, #1
 800c9ea:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 800c9ee:	eb0b 0788 	add.w	r7, fp, r8, lsl #2
 800c9f2:	e9cd ae01 	strd	sl, lr, [sp, #4]
 800c9f6:	6818      	ldr	r0, [r3, #0]
 800c9f8:	3310      	adds	r3, #16
 800c9fa:	f85b 2b04 	ldr.w	r2, [fp], #4
 800c9fe:	f853 ac0c 	ldr.w	sl, [r3, #-12]
 800ca02:	f853 ec08 	ldr.w	lr, [r3, #-8]
 800ca06:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800ca0a:	fa2f f182 	sxtb16	r1, r2
 800ca0e:	fa2f f292 	sxtb16	r2, r2, ror #8
 800ca12:	fb21 4400 	smlad	r4, r1, r0, r4
 800ca16:	fb22 440a 	smlad	r4, r2, sl, r4
 800ca1a:	fb21 550e 	smlad	r5, r1, lr, r5
 800ca1e:	fb22 5506 	smlad	r5, r2, r6, r5
 800ca22:	45bb      	cmp	fp, r7
 800ca24:	d1e7      	bne.n	800c9f6 <st_sssa8_nn_mat_mult_nt_t+0x6ca>
 800ca26:	eb0c 1c08 	add.w	ip, ip, r8, lsl #4
 800ca2a:	e9dd ae01 	ldrd	sl, lr, [sp, #4]
 800ca2e:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 800ca32:	f10e 0e04 	add.w	lr, lr, #4
 800ca36:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800ca3a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800ca3c:	4573      	cmp	r3, lr
 800ca3e:	dd40      	ble.n	800cac2 <st_sssa8_nn_mat_mult_nt_t+0x796>
 800ca40:	f997 3000 	ldrsb.w	r3, [r7]
 800ca44:	f8bc 2000 	ldrh.w	r2, [ip]
 800ca48:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ca4c:	fb12 1103 	smlabb	r1, r2, r3, r1
 800ca50:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ca54:	fb12 0003 	smlabb	r0, r2, r3, r0
 800ca58:	f10e 0301 	add.w	r3, lr, #1
 800ca5c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800ca5e:	9109      	str	r1, [sp, #36]	; 0x24
 800ca60:	429a      	cmp	r2, r3
 800ca62:	900a      	str	r0, [sp, #40]	; 0x28
 800ca64:	dd2d      	ble.n	800cac2 <st_sssa8_nn_mat_mult_nt_t+0x796>
 800ca66:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800ca6a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 800ca6e:	fb12 1103 	smlabb	r1, r2, r3, r1
 800ca72:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800ca76:	fb12 0003 	smlabb	r0, r2, r3, r0
 800ca7a:	f10e 0302 	add.w	r3, lr, #2
 800ca7e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800ca80:	9109      	str	r1, [sp, #36]	; 0x24
 800ca82:	429a      	cmp	r2, r3
 800ca84:	900a      	str	r0, [sp, #40]	; 0x28
 800ca86:	dd1c      	ble.n	800cac2 <st_sssa8_nn_mat_mult_nt_t+0x796>
 800ca88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ca8c:	f10e 0e03 	add.w	lr, lr, #3
 800ca90:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 800ca94:	fb12 1103 	smlabb	r1, r2, r3, r1
 800ca98:	f8bc 200a 	ldrh.w	r2, [ip, #10]
 800ca9c:	fb12 0003 	smlabb	r0, r2, r3, r0
 800caa0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800caa2:	9109      	str	r1, [sp, #36]	; 0x24
 800caa4:	4573      	cmp	r3, lr
 800caa6:	900a      	str	r0, [sp, #40]	; 0x28
 800caa8:	dd0b      	ble.n	800cac2 <st_sssa8_nn_mat_mult_nt_t+0x796>
 800caaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800caae:	f8bc 200c 	ldrh.w	r2, [ip, #12]
 800cab2:	fb12 1203 	smlabb	r2, r2, r3, r1
 800cab6:	9209      	str	r2, [sp, #36]	; 0x24
 800cab8:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 800cabc:	fb12 0303 	smlabb	r3, r2, r3, r0
 800cac0:	930a      	str	r3, [sp, #40]	; 0x28
 800cac2:	9908      	ldr	r1, [sp, #32]
 800cac4:	2915      	cmp	r1, #21
 800cac6:	f340 80af 	ble.w	800cc28 <st_sssa8_nn_mat_mult_nt_t+0x8fc>
 800caca:	3901      	subs	r1, #1
 800cacc:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800cace:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cad0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cad2:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 800cad4:	fb52 3200 	smmla	r2, r2, r0, r3
 800cad8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cada:	410a      	asrs	r2, r1
 800cadc:	fb50 3304 	smmla	r3, r0, r4, r3
 800cae0:	983a      	ldr	r0, [sp, #232]	; 0xe8
 800cae2:	4402      	add	r2, r0
 800cae4:	f302 0207 	ssat	r2, #8, r2
 800cae8:	410b      	asrs	r3, r1
 800caea:	f88a 2000 	strb.w	r2, [sl]
 800caee:	4403      	add	r3, r0
 800caf0:	f303 0307 	ssat	r3, #8, r3
 800caf4:	f88a 3001 	strb.w	r3, [sl, #1]
 800caf8:	e636      	b.n	800c768 <st_sssa8_nn_mat_mult_nt_t+0x43c>
 800cafa:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800cafc:	2900      	cmp	r1, #0
 800cafe:	f000 80e9 	beq.w	800ccd4 <st_sssa8_nn_mat_mult_nt_t+0x9a8>
 800cb02:	2300      	movs	r3, #0
 800cb04:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800cb06:	4618      	mov	r0, r3
 800cb08:	3210      	adds	r2, #16
 800cb0a:	f932 4c10 	ldrsh.w	r4, [r2, #-16]
 800cb0e:	3901      	subs	r1, #1
 800cb10:	f102 0210 	add.w	r2, r2, #16
 800cb14:	eba0 0004 	sub.w	r0, r0, r4
 800cb18:	f932 4c18 	ldrsh.w	r4, [r2, #-24]
 800cb1c:	eba3 0304 	sub.w	r3, r3, r4
 800cb20:	f932 4c1e 	ldrsh.w	r4, [r2, #-30]
 800cb24:	eba0 0004 	sub.w	r0, r0, r4
 800cb28:	f932 4c16 	ldrsh.w	r4, [r2, #-22]
 800cb2c:	eba3 0304 	sub.w	r3, r3, r4
 800cb30:	f932 4c1c 	ldrsh.w	r4, [r2, #-28]
 800cb34:	eba0 0004 	sub.w	r0, r0, r4
 800cb38:	f932 4c14 	ldrsh.w	r4, [r2, #-20]
 800cb3c:	eba3 0304 	sub.w	r3, r3, r4
 800cb40:	f932 4c1a 	ldrsh.w	r4, [r2, #-26]
 800cb44:	eba0 0004 	sub.w	r0, r0, r4
 800cb48:	f932 4c12 	ldrsh.w	r4, [r2, #-18]
 800cb4c:	eba3 0304 	sub.w	r3, r3, r4
 800cb50:	d1db      	bne.n	800cb0a <st_sssa8_nn_mat_mult_nt_t+0x7de>
 800cb52:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800cb54:	9925      	ldr	r1, [sp, #148]	; 0x94
 800cb56:	440a      	add	r2, r1
 800cb58:	9924      	ldr	r1, [sp, #144]	; 0x90
 800cb5a:	b1a9      	cbz	r1, 800cb88 <st_sssa8_nn_mat_mult_nt_t+0x85c>
 800cb5c:	f9b2 1000 	ldrsh.w	r1, [r2]
 800cb60:	1a40      	subs	r0, r0, r1
 800cb62:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800cb66:	1a5b      	subs	r3, r3, r1
 800cb68:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800cb6a:	b169      	cbz	r1, 800cb88 <st_sssa8_nn_mat_mult_nt_t+0x85c>
 800cb6c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800cb70:	1a40      	subs	r0, r0, r1
 800cb72:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800cb76:	1a5b      	subs	r3, r3, r1
 800cb78:	9926      	ldr	r1, [sp, #152]	; 0x98
 800cb7a:	b129      	cbz	r1, 800cb88 <st_sssa8_nn_mat_mult_nt_t+0x85c>
 800cb7c:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 800cb80:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800cb84:	1a40      	subs	r0, r0, r1
 800cb86:	1a9b      	subs	r3, r3, r2
 800cb88:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800cb8a:	fb02 f000 	mul.w	r0, r2, r0
 800cb8e:	fb03 f202 	mul.w	r2, r3, r2
 800cb92:	e43c      	b.n	800c40e <st_sssa8_nn_mat_mult_nt_t+0xe2>
 800cb94:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800cb96:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800cb98:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800cb9a:	18ec      	adds	r4, r5, r3
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	f000 80a6 	beq.w	800ccee <st_sssa8_nn_mat_mult_nt_t+0x9c2>
 800cba2:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800cba4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cba8:	3210      	adds	r2, #16
 800cbaa:	f854 1b04 	ldr.w	r1, [r4], #4
 800cbae:	3801      	subs	r0, #1
 800cbb0:	fa2f f683 	sxtb16	r6, r3
 800cbb4:	ea4f 2333 	mov.w	r3, r3, ror #8
 800cbb8:	f842 6c10 	str.w	r6, [r2, #-16]
 800cbbc:	fa2f f383 	sxtb16	r3, r3
 800cbc0:	f842 3c0c 	str.w	r3, [r2, #-12]
 800cbc4:	ea4f 2331 	mov.w	r3, r1, ror #8
 800cbc8:	fa2f f181 	sxtb16	r1, r1
 800cbcc:	fa2f f383 	sxtb16	r3, r3
 800cbd0:	f842 1c08 	str.w	r1, [r2, #-8]
 800cbd4:	f842 3c04 	str.w	r3, [r2, #-4]
 800cbd8:	d1e4      	bne.n	800cba4 <st_sssa8_nn_mat_mult_nt_t+0x878>
 800cbda:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800cbdc:	981a      	ldr	r0, [sp, #104]	; 0x68
 800cbde:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800cbe0:	9938      	ldr	r1, [sp, #224]	; 0xe0
 800cbe2:	4413      	add	r3, r2
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	180c      	adds	r4, r1, r0
 800cbe8:	9924      	ldr	r1, [sp, #144]	; 0x90
 800cbea:	2900      	cmp	r1, #0
 800cbec:	f43f ac09 	beq.w	800c402 <st_sssa8_nn_mat_mult_nt_t+0xd6>
 800cbf0:	f992 1000 	ldrsb.w	r1, [r2]
 800cbf4:	8019      	strh	r1, [r3, #0]
 800cbf6:	f994 1000 	ldrsb.w	r1, [r4]
 800cbfa:	8059      	strh	r1, [r3, #2]
 800cbfc:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800cbfe:	2900      	cmp	r1, #0
 800cc00:	f43f abff 	beq.w	800c402 <st_sssa8_nn_mat_mult_nt_t+0xd6>
 800cc04:	f992 1001 	ldrsb.w	r1, [r2, #1]
 800cc08:	8099      	strh	r1, [r3, #4]
 800cc0a:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800cc0e:	80d9      	strh	r1, [r3, #6]
 800cc10:	9926      	ldr	r1, [sp, #152]	; 0x98
 800cc12:	2900      	cmp	r1, #0
 800cc14:	f43f abf5 	beq.w	800c402 <st_sssa8_nn_mat_mult_nt_t+0xd6>
 800cc18:	f992 2002 	ldrsb.w	r2, [r2, #2]
 800cc1c:	811a      	strh	r2, [r3, #8]
 800cc1e:	f994 2002 	ldrsb.w	r2, [r4, #2]
 800cc22:	815a      	strh	r2, [r3, #10]
 800cc24:	f7ff bbed 	b.w	800c402 <st_sssa8_nn_mat_mult_nt_t+0xd6>
 800cc28:	2900      	cmp	r1, #0
 800cc2a:	dd37      	ble.n	800cc9c <st_sssa8_nn_mat_mult_nt_t+0x970>
 800cc2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc30:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800cc32:	005b      	lsls	r3, r3, #1
 800cc34:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800cc36:	0052      	lsls	r2, r2, #1
 800cc38:	fb53 4300 	smmla	r3, r3, r0, r4
 800cc3c:	fb52 4200 	smmla	r2, r2, r0, r4
 800cc40:	410b      	asrs	r3, r1
 800cc42:	f303 0307 	ssat	r3, #8, r3
 800cc46:	410a      	asrs	r2, r1
 800cc48:	f88a 3000 	strb.w	r3, [sl]
 800cc4c:	f302 0307 	ssat	r3, #8, r2
 800cc50:	f88a 3001 	strb.w	r3, [sl, #1]
 800cc54:	e588      	b.n	800c768 <st_sssa8_nn_mat_mult_nt_t+0x43c>
 800cc56:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800cc5a:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 800cc5e:	e57f      	b.n	800c760 <st_sssa8_nn_mat_mult_nt_t+0x434>
 800cc60:	f1bb 0f00 	cmp.w	fp, #0
 800cc64:	dd0b      	ble.n	800cc7e <st_sssa8_nn_mat_mult_nt_t+0x952>
 800cc66:	0053      	lsls	r3, r2, #1
 800cc68:	983a      	ldr	r0, [sp, #232]	; 0xe8
 800cc6a:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800cc6c:	fb53 0302 	smmla	r3, r3, r2, r0
 800cc70:	fa43 f30b 	asr.w	r3, r3, fp
 800cc74:	f303 0307 	ssat	r3, #8, r3
 800cc78:	f889 3000 	strb.w	r3, [r9]
 800cc7c:	e5d3      	b.n	800c826 <st_sssa8_nn_mat_mult_nt_t+0x4fa>
 800cc7e:	9b01      	ldr	r3, [sp, #4]
 800cc80:	fa02 f303 	lsl.w	r3, r2, r3
 800cc84:	f303 031f 	ssat	r3, #32, r3
 800cc88:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800cc8a:	fb53 f312 	smmulr	r3, r3, r2
 800cc8e:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800cc90:	4413      	add	r3, r2
 800cc92:	f303 0307 	ssat	r3, #8, r3
 800cc96:	f889 3000 	strb.w	r3, [r9]
 800cc9a:	e5c4      	b.n	800c826 <st_sssa8_nn_mat_mult_nt_t+0x4fa>
 800cc9c:	f1c1 0301 	rsb	r3, r1, #1
 800cca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cca2:	409a      	lsls	r2, r3
 800cca4:	f302 021f 	ssat	r2, #32, r2
 800cca8:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800ccaa:	fb52 f211 	smmulr	r2, r2, r1
 800ccae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ccb0:	4099      	lsls	r1, r3
 800ccb2:	f301 031f 	ssat	r3, #32, r1
 800ccb6:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800ccb8:	fb53 f311 	smmulr	r3, r3, r1
 800ccbc:	993a      	ldr	r1, [sp, #232]	; 0xe8
 800ccbe:	440a      	add	r2, r1
 800ccc0:	f302 0207 	ssat	r2, #8, r2
 800ccc4:	440b      	add	r3, r1
 800ccc6:	f88a 2000 	strb.w	r2, [sl]
 800ccca:	f303 0307 	ssat	r3, #8, r3
 800ccce:	f88a 3001 	strb.w	r3, [sl, #1]
 800ccd2:	e549      	b.n	800c768 <st_sssa8_nn_mat_mult_nt_t+0x43c>
 800ccd4:	4608      	mov	r0, r1
 800ccd6:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800ccd8:	460b      	mov	r3, r1
 800ccda:	e73d      	b.n	800cb58 <st_sssa8_nn_mat_mult_nt_t+0x82c>
 800ccdc:	465f      	mov	r7, fp
 800ccde:	e6ac      	b.n	800ca3a <st_sssa8_nn_mat_mult_nt_t+0x70e>
 800cce0:	f8dd c0ec 	ldr.w	ip, [sp, #236]	; 0xec
 800cce4:	f04f 0e00 	mov.w	lr, #0
 800cce8:	e671      	b.n	800c9ce <st_sssa8_nn_mat_mult_nt_t+0x6a2>
 800ccea:	931b      	str	r3, [sp, #108]	; 0x6c
 800ccec:	e55b      	b.n	800c7a6 <st_sssa8_nn_mat_mult_nt_t+0x47a>
 800ccee:	462a      	mov	r2, r5
 800ccf0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800ccf2:	e779      	b.n	800cbe8 <st_sssa8_nn_mat_mult_nt_t+0x8bc>

0800ccf4 <st_sssa8_nn_mat_mult_kernel_opt>:
 800ccf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf8:	b09b      	sub	sp, #108	; 0x6c
 800ccfa:	4683      	mov	fp, r0
 800ccfc:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 800cd00:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 800cd02:	f8bd 4094 	ldrh.w	r4, [sp, #148]	; 0x94
 800cd06:	0870      	lsrs	r0, r6, #1
 800cd08:	f9bd 5098 	ldrsh.w	r5, [sp, #152]	; 0x98
 800cd0c:	441f      	add	r7, r3
 800cd0e:	9318      	str	r3, [sp, #96]	; 0x60
 800cd10:	9616      	str	r6, [sp, #88]	; 0x58
 800cd12:	9109      	str	r1, [sp, #36]	; 0x24
 800cd14:	9215      	str	r2, [sp, #84]	; 0x54
 800cd16:	9404      	str	r4, [sp, #16]
 800cd18:	9508      	str	r5, [sp, #32]
 800cd1a:	9714      	str	r7, [sp, #80]	; 0x50
 800cd1c:	9019      	str	r0, [sp, #100]	; 0x64
 800cd1e:	f000 81a5 	beq.w	800d06c <st_sssa8_nn_mat_mult_kernel_opt+0x378>
 800cd22:	460e      	mov	r6, r1
 800cd24:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 800cd28:	4694      	mov	ip, r2
 800cd2a:	1e42      	subs	r2, r0, #1
 800cd2c:	910a      	str	r1, [sp, #40]	; 0x28
 800cd2e:	2001      	movs	r0, #1
 800cd30:	1ea9      	subs	r1, r5, #2
 800cd32:	f1a4 0310 	sub.w	r3, r4, #16
 800cd36:	b292      	uxth	r2, r2
 800cd38:	46d9      	mov	r9, fp
 800cd3a:	4088      	lsls	r0, r1
 800cd3c:	091b      	lsrs	r3, r3, #4
 800cd3e:	f10c 0110 	add.w	r1, ip, #16
 800cd42:	9012      	str	r0, [sp, #72]	; 0x48
 800cd44:	4660      	mov	r0, ip
 800cd46:	3301      	adds	r3, #1
 800cd48:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800cd4c:	3008      	adds	r0, #8
 800cd4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cd50:	920c      	str	r2, [sp, #48]	; 0x30
 800cd52:	4622      	mov	r2, r4
 800cd54:	9001      	str	r0, [sp, #4]
 800cd56:	3c03      	subs	r4, #3
 800cd58:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800cd5a:	940b      	str	r4, [sp, #44]	; 0x2c
 800cd5c:	3002      	adds	r0, #2
 800cd5e:	9003      	str	r0, [sp, #12]
 800cd60:	1cb8      	adds	r0, r7, #2
 800cd62:	9002      	str	r0, [sp, #8]
 800cd64:	eb06 1043 	add.w	r0, r6, r3, lsl #5
 800cd68:	9010      	str	r0, [sp, #64]	; 0x40
 800cd6a:	0198      	lsls	r0, r3, #6
 800cd6c:	900d      	str	r0, [sp, #52]	; 0x34
 800cd6e:	0118      	lsls	r0, r3, #4
 800cd70:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 800cd74:	900f      	str	r0, [sp, #60]	; 0x3c
 800cd76:	930e      	str	r3, [sp, #56]	; 0x38
 800cd78:	1f13      	subs	r3, r2, #4
 800cd7a:	9311      	str	r3, [sp, #68]	; 0x44
 800cd7c:	f1c5 0301 	rsb	r3, r5, #1
 800cd80:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd82:	1e6b      	subs	r3, r5, #1
 800cd84:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd86:	9904      	ldr	r1, [sp, #16]
 800cd88:	9a01      	ldr	r2, [sp, #4]
 800cd8a:	290f      	cmp	r1, #15
 800cd8c:	e952 3202 	ldrd	r3, r2, [r2, #-8]
 800cd90:	f340 823e 	ble.w	800d210 <st_sssa8_nn_mat_mult_kernel_opt+0x51c>
 800cd94:	464d      	mov	r5, r9
 800cd96:	4611      	mov	r1, r2
 800cd98:	4618      	mov	r0, r3
 800cd9a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800cd9c:	e9dd 4709 	ldrd	r4, r7, [sp, #36]	; 0x24
 800cda0:	f8d4 e000 	ldr.w	lr, [r4]
 800cda4:	f8d7 a000 	ldr.w	sl, [r7]
 800cda8:	f8d5 c000 	ldr.w	ip, [r5]
 800cdac:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800cdb0:	fb2c 330e 	smlad	r3, ip, lr, r3
 800cdb4:	fb2c 000a 	smlad	r0, ip, sl, r0
 800cdb8:	fb28 2e0e 	smlad	lr, r8, lr, r2
 800cdbc:	fb28 110a 	smlad	r1, r8, sl, r1
 800cdc0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800cdc4:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800cdc8:	68aa      	ldr	r2, [r5, #8]
 800cdca:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 800cdce:	fb22 330c 	smlad	r3, r2, ip, r3
 800cdd2:	fb22 0008 	smlad	r0, r2, r8, r0
 800cdd6:	fb2b ee0c 	smlad	lr, fp, ip, lr
 800cdda:	fb2b 1808 	smlad	r8, fp, r8, r1
 800cdde:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800cde2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800cde6:	692a      	ldr	r2, [r5, #16]
 800cde8:	f8d5 a014 	ldr.w	sl, [r5, #20]
 800cdec:	fb22 330c 	smlad	r3, r2, ip, r3
 800cdf0:	fb22 000b 	smlad	r0, r2, fp, r0
 800cdf4:	fb2a ee0c 	smlad	lr, sl, ip, lr
 800cdf8:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 800cdfc:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800ce00:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800ce04:	f8d5 8018 	ldr.w	r8, [r5, #24]
 800ce08:	69e9      	ldr	r1, [r5, #28]
 800ce0a:	fb28 330c 	smlad	r3, r8, ip, r3
 800ce0e:	fb28 000a 	smlad	r0, r8, sl, r0
 800ce12:	fb21 ec0c 	smlad	ip, r1, ip, lr
 800ce16:	fb21 ba0a 	smlad	sl, r1, sl, fp
 800ce1a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800ce1e:	6939      	ldr	r1, [r7, #16]
 800ce20:	f8d5 8020 	ldr.w	r8, [r5, #32]
 800ce24:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ce26:	fb28 330e 	smlad	r3, r8, lr, r3
 800ce2a:	fb28 0001 	smlad	r0, r8, r1, r0
 800ce2e:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800ce32:	fb22 a101 	smlad	r1, r2, r1, sl
 800ce36:	f8d4 e014 	ldr.w	lr, [r4, #20]
 800ce3a:	f8d7 a014 	ldr.w	sl, [r7, #20]
 800ce3e:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
 800ce42:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ce44:	fb28 330e 	smlad	r3, r8, lr, r3
 800ce48:	fb28 000a 	smlad	r0, r8, sl, r0
 800ce4c:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800ce50:	fb22 120a 	smlad	r2, r2, sl, r1
 800ce54:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800ce58:	f8d7 b018 	ldr.w	fp, [r7, #24]
 800ce5c:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800ce60:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800ce62:	fb28 330e 	smlad	r3, r8, lr, r3
 800ce66:	fb28 080b 	smlad	r8, r8, fp, r0
 800ce6a:	fb21 ce0e 	smlad	lr, r1, lr, ip
 800ce6e:	fb21 210b 	smlad	r1, r1, fp, r2
 800ce72:	69e2      	ldr	r2, [r4, #28]
 800ce74:	3720      	adds	r7, #32
 800ce76:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800ce78:	3420      	adds	r4, #32
 800ce7a:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
 800ce7e:	3540      	adds	r5, #64	; 0x40
 800ce80:	f857 bc04 	ldr.w	fp, [r7, #-4]
 800ce84:	fb20 3302 	smlad	r3, r0, r2, r3
 800ce88:	fb20 800b 	smlad	r0, r0, fp, r8
 800ce8c:	fb2c e202 	smlad	r2, ip, r2, lr
 800ce90:	fb2c 110b 	smlad	r1, ip, fp, r1
 800ce94:	42a6      	cmp	r6, r4
 800ce96:	d183      	bne.n	800cda0 <st_sssa8_nn_mat_mult_kernel_opt+0xac>
 800ce98:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ce9a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800ce9e:	44a9      	add	r9, r5
 800cea0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800cea2:	9500      	str	r5, [sp, #0]
 800cea4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800cea6:	45ab      	cmp	fp, r5
 800cea8:	f280 81bd 	bge.w	800d226 <st_sssa8_nn_mat_mult_kernel_opt+0x532>
 800ceac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ceae:	f8dd c000 	ldr.w	ip, [sp]
 800ceb2:	eba5 050b 	sub.w	r5, r5, fp
 800ceb6:	08ad      	lsrs	r5, r5, #2
 800ceb8:	462e      	mov	r6, r5
 800ceba:	9507      	str	r5, [sp, #28]
 800cebc:	464d      	mov	r5, r9
 800cebe:	3601      	adds	r6, #1
 800cec0:	00f7      	lsls	r7, r6, #3
 800cec2:	9606      	str	r6, [sp, #24]
 800cec4:	eb04 08c6 	add.w	r8, r4, r6, lsl #3
 800cec8:	9705      	str	r7, [sp, #20]
 800ceca:	f8d4 e000 	ldr.w	lr, [r4]
 800cece:	f8dc 7000 	ldr.w	r7, [ip]
 800ced2:	f8d5 a000 	ldr.w	sl, [r5]
 800ced6:	686e      	ldr	r6, [r5, #4]
 800ced8:	fb2a 330e 	smlad	r3, sl, lr, r3
 800cedc:	fb2a 0007 	smlad	r0, sl, r7, r0
 800cee0:	fb26 220e 	smlad	r2, r6, lr, r2
 800cee4:	fb26 1107 	smlad	r1, r6, r7, r1
 800cee8:	6867      	ldr	r7, [r4, #4]
 800ceea:	f10c 0c08 	add.w	ip, ip, #8
 800ceee:	68ae      	ldr	r6, [r5, #8]
 800cef0:	3408      	adds	r4, #8
 800cef2:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800cef6:	3510      	adds	r5, #16
 800cef8:	f85c ac04 	ldr.w	sl, [ip, #-4]
 800cefc:	fb26 3307 	smlad	r3, r6, r7, r3
 800cf00:	fb26 000a 	smlad	r0, r6, sl, r0
 800cf04:	fb2e 2207 	smlad	r2, lr, r7, r2
 800cf08:	fb2e 110a 	smlad	r1, lr, sl, r1
 800cf0c:	4544      	cmp	r4, r8
 800cf0e:	d1dc      	bne.n	800ceca <st_sssa8_nn_mat_mult_kernel_opt+0x1d6>
 800cf10:	9c06      	ldr	r4, [sp, #24]
 800cf12:	f10b 0b04 	add.w	fp, fp, #4
 800cf16:	9d05      	ldr	r5, [sp, #20]
 800cf18:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 800cf1c:	9c00      	ldr	r4, [sp, #0]
 800cf1e:	442c      	add	r4, r5
 800cf20:	9400      	str	r4, [sp, #0]
 800cf22:	9c07      	ldr	r4, [sp, #28]
 800cf24:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 800cf28:	9f04      	ldr	r7, [sp, #16]
 800cf2a:	455f      	cmp	r7, fp
 800cf2c:	dd54      	ble.n	800cfd8 <st_sssa8_nn_mat_mult_kernel_opt+0x2e4>
 800cf2e:	f9b8 5000 	ldrsh.w	r5, [r8]
 800cf32:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
 800cf36:	f9b9 6000 	ldrsh.w	r6, [r9]
 800cf3a:	fb05 2204 	mla	r2, r5, r4, r2
 800cf3e:	fb06 3305 	mla	r3, r6, r5, r3
 800cf42:	9d00      	ldr	r5, [sp, #0]
 800cf44:	f9b5 5000 	ldrsh.w	r5, [r5]
 800cf48:	fb05 1104 	mla	r1, r5, r4, r1
 800cf4c:	f10b 0401 	add.w	r4, fp, #1
 800cf50:	fb06 0005 	mla	r0, r6, r5, r0
 800cf54:	42a7      	cmp	r7, r4
 800cf56:	dd3a      	ble.n	800cfce <st_sssa8_nn_mat_mult_kernel_opt+0x2da>
 800cf58:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800cf5c:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 800cf60:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 800cf64:	fb05 2204 	mla	r2, r5, r4, r2
 800cf68:	fb06 3305 	mla	r3, r6, r5, r3
 800cf6c:	9d00      	ldr	r5, [sp, #0]
 800cf6e:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 800cf72:	fb05 1104 	mla	r1, r5, r4, r1
 800cf76:	f10b 0402 	add.w	r4, fp, #2
 800cf7a:	fb06 0005 	mla	r0, r6, r5, r0
 800cf7e:	42a7      	cmp	r7, r4
 800cf80:	dd25      	ble.n	800cfce <st_sssa8_nn_mat_mult_kernel_opt+0x2da>
 800cf82:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 800cf86:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 800cf8a:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 800cf8e:	fb05 2204 	mla	r2, r5, r4, r2
 800cf92:	fb06 3305 	mla	r3, r6, r5, r3
 800cf96:	9d00      	ldr	r5, [sp, #0]
 800cf98:	f9b5 5004 	ldrsh.w	r5, [r5, #4]
 800cf9c:	fb05 1104 	mla	r1, r5, r4, r1
 800cfa0:	f10b 0403 	add.w	r4, fp, #3
 800cfa4:	fb06 0005 	mla	r0, r6, r5, r0
 800cfa8:	42a7      	cmp	r7, r4
 800cfaa:	dd10      	ble.n	800cfce <st_sssa8_nn_mat_mult_kernel_opt+0x2da>
 800cfac:	9c00      	ldr	r4, [sp, #0]
 800cfae:	f9b8 5006 	ldrsh.w	r5, [r8, #6]
 800cfb2:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 800cfb6:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 800cfba:	fb04 3305 	mla	r3, r4, r5, r3
 800cfbe:	fb04 0006 	mla	r0, r4, r6, r0
 800cfc2:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 800cfc6:	fb05 2204 	mla	r2, r5, r4, r2
 800cfca:	fb06 1104 	mla	r1, r6, r4, r1
 800cfce:	9c04      	ldr	r4, [sp, #16]
 800cfd0:	eba4 0b0b 	sub.w	fp, r4, fp
 800cfd4:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 800cfd8:	9c08      	ldr	r4, [sp, #32]
 800cfda:	2c15      	cmp	r4, #21
 800cfdc:	f340 80bf 	ble.w	800d15e <st_sssa8_nn_mat_mult_kernel_opt+0x46a>
 800cfe0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800cfe2:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800cfe4:	fb53 4305 	smmla	r3, r3, r5, r4
 800cfe8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800cfea:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800cfec:	412b      	asrs	r3, r5
 800cfee:	fb50 4006 	smmla	r0, r0, r6, r4
 800cff2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800cff4:	4433      	add	r3, r6
 800cff6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800cff8:	fb52 4206 	smmla	r2, r2, r6, r4
 800cffc:	fb51 4106 	smmla	r1, r1, r6, r4
 800d000:	f303 0307 	ssat	r3, #8, r3
 800d004:	9c03      	ldr	r4, [sp, #12]
 800d006:	412a      	asrs	r2, r5
 800d008:	f804 3c02 	strb.w	r3, [r4, #-2]
 800d00c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d00e:	18d3      	adds	r3, r2, r3
 800d010:	f303 0307 	ssat	r3, #8, r3
 800d014:	4128      	asrs	r0, r5
 800d016:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d01a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d01c:	18c3      	adds	r3, r0, r3
 800d01e:	f303 0307 	ssat	r3, #8, r3
 800d022:	9a02      	ldr	r2, [sp, #8]
 800d024:	4129      	asrs	r1, r5
 800d026:	f802 3c02 	strb.w	r3, [r2, #-2]
 800d02a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d02c:	18cb      	adds	r3, r1, r3
 800d02e:	f303 0307 	ssat	r3, #8, r3
 800d032:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d036:	4622      	mov	r2, r4
 800d038:	3202      	adds	r2, #2
 800d03a:	9b01      	ldr	r3, [sp, #4]
 800d03c:	9203      	str	r2, [sp, #12]
 800d03e:	3308      	adds	r3, #8
 800d040:	9a02      	ldr	r2, [sp, #8]
 800d042:	9301      	str	r3, [sp, #4]
 800d044:	3202      	adds	r2, #2
 800d046:	9202      	str	r2, [sp, #8]
 800d048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d04a:	4293      	cmp	r3, r2
 800d04c:	f47f ae9b 	bne.w	800cd86 <st_sssa8_nn_mat_mult_kernel_opt+0x92>
 800d050:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d052:	46cb      	mov	fp, r9
 800d054:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800d056:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800d05a:	9229      	str	r2, [sp, #164]	; 0xa4
 800d05c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d05e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800d062:	9214      	str	r2, [sp, #80]	; 0x50
 800d064:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d066:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d06a:	9315      	str	r3, [sp, #84]	; 0x54
 800d06c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d06e:	07db      	lsls	r3, r3, #31
 800d070:	d56c      	bpl.n	800d14c <st_sssa8_nn_mat_mult_kernel_opt+0x458>
 800d072:	9a04      	ldr	r2, [sp, #16]
 800d074:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d076:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d078:	0896      	lsrs	r6, r2, #2
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	eb00 0742 	add.w	r7, r0, r2, lsl #1
 800d080:	f000 8109 	beq.w	800d296 <st_sssa8_nn_mat_mult_kernel_opt+0x5a2>
 800d084:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800d088:	463c      	mov	r4, r7
 800d08a:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
 800d08e:	461a      	mov	r2, r3
 800d090:	f8db 5000 	ldr.w	r5, [fp]
 800d094:	f10b 0b08 	add.w	fp, fp, #8
 800d098:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 800d09c:	f8d0 c000 	ldr.w	ip, [r0]
 800d0a0:	fb25 330c 	smlad	r3, r5, ip, r3
 800d0a4:	f8d4 c000 	ldr.w	ip, [r4]
 800d0a8:	fb25 220c 	smlad	r2, r5, ip, r2
 800d0ac:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800d0b0:	3408      	adds	r4, #8
 800d0b2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800d0b6:	3008      	adds	r0, #8
 800d0b8:	fb21 330c 	smlad	r3, r1, ip, r3
 800d0bc:	fb21 2205 	smlad	r2, r1, r5, r2
 800d0c0:	45b3      	cmp	fp, r6
 800d0c2:	d1e5      	bne.n	800d090 <st_sssa8_nn_mat_mult_kernel_opt+0x39c>
 800d0c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0c6:	4477      	add	r7, lr
 800d0c8:	4471      	add	r1, lr
 800d0ca:	9109      	str	r1, [sp, #36]	; 0x24
 800d0cc:	9904      	ldr	r1, [sp, #16]
 800d0ce:	f011 0103 	ands.w	r1, r1, #3
 800d0d2:	d01d      	beq.n	800d110 <st_sssa8_nn_mat_mult_kernel_opt+0x41c>
 800d0d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d0d6:	3901      	subs	r1, #1
 800d0d8:	f9b6 0000 	ldrsh.w	r0, [r6]
 800d0dc:	882c      	ldrh	r4, [r5, #0]
 800d0de:	b289      	uxth	r1, r1
 800d0e0:	fb14 3300 	smlabb	r3, r4, r0, r3
 800d0e4:	883c      	ldrh	r4, [r7, #0]
 800d0e6:	fb14 2200 	smlabb	r2, r4, r0, r2
 800d0ea:	b189      	cbz	r1, 800d110 <st_sssa8_nn_mat_mult_kernel_opt+0x41c>
 800d0ec:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 800d0f0:	2901      	cmp	r1, #1
 800d0f2:	886c      	ldrh	r4, [r5, #2]
 800d0f4:	fb14 3300 	smlabb	r3, r4, r0, r3
 800d0f8:	887c      	ldrh	r4, [r7, #2]
 800d0fa:	fb14 2200 	smlabb	r2, r4, r0, r2
 800d0fe:	d007      	beq.n	800d110 <st_sssa8_nn_mat_mult_kernel_opt+0x41c>
 800d100:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 800d104:	88a8      	ldrh	r0, [r5, #4]
 800d106:	fb11 3300 	smlabb	r3, r1, r0, r3
 800d10a:	88b8      	ldrh	r0, [r7, #4]
 800d10c:	fb11 2200 	smlabb	r2, r1, r0, r2
 800d110:	9908      	ldr	r1, [sp, #32]
 800d112:	2915      	cmp	r1, #21
 800d114:	f340 8089 	ble.w	800d22a <st_sssa8_nn_mat_mult_kernel_opt+0x536>
 800d118:	1e8c      	subs	r4, r1, #2
 800d11a:	1e48      	subs	r0, r1, #1
 800d11c:	2101      	movs	r1, #1
 800d11e:	40a1      	lsls	r1, r4
 800d120:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800d122:	fb53 1404 	smmla	r4, r3, r4, r1
 800d126:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d128:	fb52 1303 	smmla	r3, r2, r3, r1
 800d12c:	fa44 f200 	asr.w	r2, r4, r0
 800d130:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800d132:	440a      	add	r2, r1
 800d134:	f302 0207 	ssat	r2, #8, r2
 800d138:	4103      	asrs	r3, r0
 800d13a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800d13c:	440b      	add	r3, r1
 800d13e:	f800 2b01 	strb.w	r2, [r0], #1
 800d142:	f303 0307 	ssat	r3, #8, r3
 800d146:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d148:	9029      	str	r0, [sp, #164]	; 0xa4
 800d14a:	7013      	strb	r3, [r2, #0]
 800d14c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d14e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d150:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 800d154:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d156:	4418      	add	r0, r3
 800d158:	b01b      	add	sp, #108	; 0x6c
 800d15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d15e:	2c00      	cmp	r4, #0
 800d160:	dd25      	ble.n	800d1ae <st_sssa8_nn_mat_mult_kernel_opt+0x4ba>
 800d162:	005b      	lsls	r3, r3, #1
 800d164:	0040      	lsls	r0, r0, #1
 800d166:	0052      	lsls	r2, r2, #1
 800d168:	0049      	lsls	r1, r1, #1
 800d16a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 800d16e:	fb53 6305 	smmla	r3, r3, r5, r6
 800d172:	fb50 6005 	smmla	r0, r0, r5, r6
 800d176:	4123      	asrs	r3, r4
 800d178:	fb52 6205 	smmla	r2, r2, r5, r6
 800d17c:	fb51 6105 	smmla	r1, r1, r5, r6
 800d180:	f303 0307 	ssat	r3, #8, r3
 800d184:	9d03      	ldr	r5, [sp, #12]
 800d186:	4122      	asrs	r2, r4
 800d188:	f805 3c02 	strb.w	r3, [r5, #-2]
 800d18c:	f302 0207 	ssat	r2, #8, r2
 800d190:	4120      	asrs	r0, r4
 800d192:	f805 2c01 	strb.w	r2, [r5, #-1]
 800d196:	f300 0007 	ssat	r0, #8, r0
 800d19a:	9b02      	ldr	r3, [sp, #8]
 800d19c:	4121      	asrs	r1, r4
 800d19e:	f803 0c02 	strb.w	r0, [r3, #-2]
 800d1a2:	f301 0107 	ssat	r1, #8, r1
 800d1a6:	462a      	mov	r2, r5
 800d1a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d1ac:	e744      	b.n	800d038 <st_sssa8_nn_mat_mult_kernel_opt+0x344>
 800d1ae:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800d1b0:	40a3      	lsls	r3, r4
 800d1b2:	f303 031f 	ssat	r3, #32, r3
 800d1b6:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800d1b8:	fb53 f315 	smmulr	r3, r3, r5
 800d1bc:	40a0      	lsls	r0, r4
 800d1be:	f300 001f 	ssat	r0, #32, r0
 800d1c2:	fb50 f015 	smmulr	r0, r0, r5
 800d1c6:	40a2      	lsls	r2, r4
 800d1c8:	f302 021f 	ssat	r2, #32, r2
 800d1cc:	fb52 f215 	smmulr	r2, r2, r5
 800d1d0:	40a1      	lsls	r1, r4
 800d1d2:	f301 011f 	ssat	r1, #32, r1
 800d1d6:	fb51 f115 	smmulr	r1, r1, r5
 800d1da:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800d1dc:	4423      	add	r3, r4
 800d1de:	f303 0307 	ssat	r3, #8, r3
 800d1e2:	9c03      	ldr	r4, [sp, #12]
 800d1e4:	f804 3c02 	strb.w	r3, [r4, #-2]
 800d1e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d1ea:	441a      	add	r2, r3
 800d1ec:	f302 0207 	ssat	r2, #8, r2
 800d1f0:	4418      	add	r0, r3
 800d1f2:	f804 2c01 	strb.w	r2, [r4, #-1]
 800d1f6:	f300 0007 	ssat	r0, #8, r0
 800d1fa:	9b02      	ldr	r3, [sp, #8]
 800d1fc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800d1fe:	f803 0c02 	strb.w	r0, [r3, #-2]
 800d202:	4411      	add	r1, r2
 800d204:	f301 0107 	ssat	r1, #8, r1
 800d208:	4622      	mov	r2, r4
 800d20a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d20e:	e713      	b.n	800d038 <st_sssa8_nn_mat_mult_kernel_opt+0x344>
 800d210:	f04f 0b00 	mov.w	fp, #0
 800d214:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d216:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d218:	4618      	mov	r0, r3
 800d21a:	45ab      	cmp	fp, r5
 800d21c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d21e:	9100      	str	r1, [sp, #0]
 800d220:	4611      	mov	r1, r2
 800d222:	f6ff ae43 	blt.w	800ceac <st_sssa8_nn_mat_mult_kernel_opt+0x1b8>
 800d226:	46a0      	mov	r8, r4
 800d228:	e67e      	b.n	800cf28 <st_sssa8_nn_mat_mult_kernel_opt+0x234>
 800d22a:	2900      	cmp	r1, #0
 800d22c:	4608      	mov	r0, r1
 800d22e:	dd15      	ble.n	800d25c <st_sssa8_nn_mat_mult_kernel_opt+0x568>
 800d230:	0059      	lsls	r1, r3, #1
 800d232:	0053      	lsls	r3, r2, #1
 800d234:	e9dd 2427 	ldrd	r2, r4, [sp, #156]	; 0x9c
 800d238:	fb51 4202 	smmla	r2, r1, r2, r4
 800d23c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800d23e:	4102      	asrs	r2, r0
 800d240:	fb53 4301 	smmla	r3, r3, r1, r4
 800d244:	f302 0207 	ssat	r2, #8, r2
 800d248:	4103      	asrs	r3, r0
 800d24a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800d24c:	f800 2b01 	strb.w	r2, [r0], #1
 800d250:	f303 0307 	ssat	r3, #8, r3
 800d254:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d256:	9029      	str	r0, [sp, #164]	; 0xa4
 800d258:	7013      	strb	r3, [r2, #0]
 800d25a:	e777      	b.n	800d14c <st_sssa8_nn_mat_mult_kernel_opt+0x458>
 800d25c:	f1c1 0101 	rsb	r1, r1, #1
 800d260:	408b      	lsls	r3, r1
 800d262:	f303 031f 	ssat	r3, #32, r3
 800d266:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800d268:	fb53 f310 	smmulr	r3, r3, r0
 800d26c:	fa02 f101 	lsl.w	r1, r2, r1
 800d270:	f301 011f 	ssat	r1, #32, r1
 800d274:	fb51 f110 	smmulr	r1, r1, r0
 800d278:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800d27a:	441a      	add	r2, r3
 800d27c:	f302 0207 	ssat	r2, #8, r2
 800d280:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d282:	440b      	add	r3, r1
 800d284:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800d286:	f801 2b01 	strb.w	r2, [r1], #1
 800d28a:	f303 0307 	ssat	r3, #8, r3
 800d28e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d290:	9129      	str	r1, [sp, #164]	; 0xa4
 800d292:	7013      	strb	r3, [r2, #0]
 800d294:	e75a      	b.n	800d14c <st_sssa8_nn_mat_mult_kernel_opt+0x458>
 800d296:	465e      	mov	r6, fp
 800d298:	461a      	mov	r2, r3
 800d29a:	e717      	b.n	800d0cc <st_sssa8_nn_mat_mult_kernel_opt+0x3d8>

0800d29c <st_sssa8_nn_mat_mult_kernel_single_opt>:
 800d29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a0:	b091      	sub	sp, #68	; 0x44
 800d2a2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800d2a6:	f9bd 5070 	ldrsh.w	r5, [sp, #112]	; 0x70
 800d2aa:	085c      	lsrs	r4, r3, #1
 800d2ac:	f8bd b06c 	ldrh.w	fp, [sp, #108]	; 0x6c
 800d2b0:	930e      	str	r3, [sp, #56]	; 0x38
 800d2b2:	9104      	str	r1, [sp, #16]
 800d2b4:	920c      	str	r2, [sp, #48]	; 0x30
 800d2b6:	9503      	str	r5, [sp, #12]
 800d2b8:	940f      	str	r4, [sp, #60]	; 0x3c
 800d2ba:	f000 819a 	beq.w	800d5f2 <st_sssa8_nn_mat_mult_kernel_single_opt+0x356>
 800d2be:	4617      	mov	r7, r2
 800d2c0:	468c      	mov	ip, r1
 800d2c2:	1e62      	subs	r2, r4, #1
 800d2c4:	1ea9      	subs	r1, r5, #2
 800d2c6:	2401      	movs	r4, #1
 800d2c8:	f1ab 0310 	sub.w	r3, fp, #16
 800d2cc:	b292      	uxth	r2, r2
 800d2ce:	f107 0908 	add.w	r9, r7, #8
 800d2d2:	fa04 f601 	lsl.w	r6, r4, r1
 800d2d6:	f107 0110 	add.w	r1, r7, #16
 800d2da:	091b      	lsrs	r3, r3, #4
 800d2dc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d2e0:	960a      	str	r6, [sp, #40]	; 0x28
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	9206      	str	r2, [sp, #24]
 800d2e6:	f1ab 0203 	sub.w	r2, fp, #3
 800d2ea:	eb0c 1743 	add.w	r7, ip, r3, lsl #5
 800d2ee:	9205      	str	r2, [sp, #20]
 800d2f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d2f2:	3202      	adds	r2, #2
 800d2f4:	9201      	str	r2, [sp, #4]
 800d2f6:	019a      	lsls	r2, r3, #6
 800d2f8:	011b      	lsls	r3, r3, #4
 800d2fa:	9207      	str	r2, [sp, #28]
 800d2fc:	9308      	str	r3, [sp, #32]
 800d2fe:	f1ab 0304 	sub.w	r3, fp, #4
 800d302:	9309      	str	r3, [sp, #36]	; 0x24
 800d304:	f1c5 0301 	rsb	r3, r5, #1
 800d308:	930d      	str	r3, [sp, #52]	; 0x34
 800d30a:	1e6b      	subs	r3, r5, #1
 800d30c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d30e:	f1bb 0f0f 	cmp.w	fp, #15
 800d312:	9c04      	ldr	r4, [sp, #16]
 800d314:	e959 2302 	ldrd	r2, r3, [r9, #-8]
 800d318:	f340 8144 	ble.w	800d5a4 <st_sssa8_nn_mat_mult_kernel_single_opt+0x308>
 800d31c:	4601      	mov	r1, r0
 800d31e:	f8d4 c000 	ldr.w	ip, [r4]
 800d322:	680e      	ldr	r6, [r1, #0]
 800d324:	fb26 220c 	smlad	r2, r6, ip, r2
 800d328:	684d      	ldr	r5, [r1, #4]
 800d32a:	fb25 330c 	smlad	r3, r5, ip, r3
 800d32e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800d332:	688e      	ldr	r6, [r1, #8]
 800d334:	fb26 260c 	smlad	r6, r6, ip, r2
 800d338:	68cd      	ldr	r5, [r1, #12]
 800d33a:	fb25 350c 	smlad	r5, r5, ip, r3
 800d33e:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800d342:	690a      	ldr	r2, [r1, #16]
 800d344:	fb22 660c 	smlad	r6, r2, ip, r6
 800d348:	694b      	ldr	r3, [r1, #20]
 800d34a:	fb23 550c 	smlad	r5, r3, ip, r5
 800d34e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800d352:	698a      	ldr	r2, [r1, #24]
 800d354:	fb22 620c 	smlad	r2, r2, ip, r6
 800d358:	69cb      	ldr	r3, [r1, #28]
 800d35a:	fb23 530c 	smlad	r3, r3, ip, r5
 800d35e:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800d362:	6a0e      	ldr	r6, [r1, #32]
 800d364:	fb26 220c 	smlad	r2, r6, ip, r2
 800d368:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800d36a:	fb25 330c 	smlad	r3, r5, ip, r3
 800d36e:	f8d4 c014 	ldr.w	ip, [r4, #20]
 800d372:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800d374:	fb26 260c 	smlad	r6, r6, ip, r2
 800d378:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 800d37a:	fb25 350c 	smlad	r5, r5, ip, r3
 800d37e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800d382:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800d384:	fb22 660c 	smlad	r6, r2, ip, r6
 800d388:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800d38a:	fb23 550c 	smlad	r5, r3, ip, r5
 800d38e:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800d392:	3140      	adds	r1, #64	; 0x40
 800d394:	f851 2c08 	ldr.w	r2, [r1, #-8]
 800d398:	3420      	adds	r4, #32
 800d39a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d39e:	fb22 620c 	smlad	r2, r2, ip, r6
 800d3a2:	fb23 530c 	smlad	r3, r3, ip, r5
 800d3a6:	42bc      	cmp	r4, r7
 800d3a8:	d1b9      	bne.n	800d31e <st_sssa8_nn_mat_mult_kernel_single_opt+0x82>
 800d3aa:	9907      	ldr	r1, [sp, #28]
 800d3ac:	463c      	mov	r4, r7
 800d3ae:	f8dd e020 	ldr.w	lr, [sp, #32]
 800d3b2:	4408      	add	r0, r1
 800d3b4:	9905      	ldr	r1, [sp, #20]
 800d3b6:	458e      	cmp	lr, r1
 800d3b8:	da25      	bge.n	800d406 <st_sssa8_nn_mat_mult_kernel_single_opt+0x16a>
 800d3ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d3bc:	eba1 0a0e 	sub.w	sl, r1, lr
 800d3c0:	4601      	mov	r1, r0
 800d3c2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 800d3c6:	f10a 0501 	add.w	r5, sl, #1
 800d3ca:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 800d3ce:	9502      	str	r5, [sp, #8]
 800d3d0:	6825      	ldr	r5, [r4, #0]
 800d3d2:	680e      	ldr	r6, [r1, #0]
 800d3d4:	fb26 2205 	smlad	r2, r6, r5, r2
 800d3d8:	684e      	ldr	r6, [r1, #4]
 800d3da:	fb26 3505 	smlad	r5, r6, r5, r3
 800d3de:	6866      	ldr	r6, [r4, #4]
 800d3e0:	3110      	adds	r1, #16
 800d3e2:	f851 cc08 	ldr.w	ip, [r1, #-8]
 800d3e6:	3408      	adds	r4, #8
 800d3e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3ec:	fb2c 2206 	smlad	r2, ip, r6, r2
 800d3f0:	fb23 5306 	smlad	r3, r3, r6, r5
 800d3f4:	45a0      	cmp	r8, r4
 800d3f6:	d1eb      	bne.n	800d3d0 <st_sssa8_nn_mat_mult_kernel_single_opt+0x134>
 800d3f8:	9902      	ldr	r1, [sp, #8]
 800d3fa:	f10e 0e04 	add.w	lr, lr, #4
 800d3fe:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800d402:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 800d406:	45f3      	cmp	fp, lr
 800d408:	dd2f      	ble.n	800d46a <st_sssa8_nn_mat_mult_kernel_single_opt+0x1ce>
 800d40a:	f9b4 1000 	ldrsh.w	r1, [r4]
 800d40e:	8805      	ldrh	r5, [r0, #0]
 800d410:	fb15 2201 	smlabb	r2, r5, r1, r2
 800d414:	8845      	ldrh	r5, [r0, #2]
 800d416:	fb11 3305 	smlabb	r3, r1, r5, r3
 800d41a:	f10e 0101 	add.w	r1, lr, #1
 800d41e:	458b      	cmp	fp, r1
 800d420:	dd1f      	ble.n	800d462 <st_sssa8_nn_mat_mult_kernel_single_opt+0x1c6>
 800d422:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d426:	8885      	ldrh	r5, [r0, #4]
 800d428:	fb15 2201 	smlabb	r2, r5, r1, r2
 800d42c:	88c5      	ldrh	r5, [r0, #6]
 800d42e:	fb11 3305 	smlabb	r3, r1, r5, r3
 800d432:	f10e 0102 	add.w	r1, lr, #2
 800d436:	458b      	cmp	fp, r1
 800d438:	dd13      	ble.n	800d462 <st_sssa8_nn_mat_mult_kernel_single_opt+0x1c6>
 800d43a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d43e:	8905      	ldrh	r5, [r0, #8]
 800d440:	fb15 2201 	smlabb	r2, r5, r1, r2
 800d444:	8945      	ldrh	r5, [r0, #10]
 800d446:	fb11 3305 	smlabb	r3, r1, r5, r3
 800d44a:	f10e 0103 	add.w	r1, lr, #3
 800d44e:	458b      	cmp	fp, r1
 800d450:	dd07      	ble.n	800d462 <st_sssa8_nn_mat_mult_kernel_single_opt+0x1c6>
 800d452:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800d456:	8984      	ldrh	r4, [r0, #12]
 800d458:	fb14 2201 	smlabb	r2, r4, r1, r2
 800d45c:	89c4      	ldrh	r4, [r0, #14]
 800d45e:	fb11 3304 	smlabb	r3, r1, r4, r3
 800d462:	ebab 0e0e 	sub.w	lr, fp, lr
 800d466:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 800d46a:	9903      	ldr	r1, [sp, #12]
 800d46c:	2915      	cmp	r1, #21
 800d46e:	dd6e      	ble.n	800d54e <st_sssa8_nn_mat_mult_kernel_single_opt+0x2b2>
 800d470:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d472:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800d474:	fb52 1204 	smmla	r2, r2, r4, r1
 800d478:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d47a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800d47c:	4122      	asrs	r2, r4
 800d47e:	fb53 1305 	smmla	r3, r3, r5, r1
 800d482:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d484:	440a      	add	r2, r1
 800d486:	f302 0207 	ssat	r2, #8, r2
 800d48a:	9901      	ldr	r1, [sp, #4]
 800d48c:	4123      	asrs	r3, r4
 800d48e:	f801 2c02 	strb.w	r2, [r1, #-2]
 800d492:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d494:	4413      	add	r3, r2
 800d496:	f303 0307 	ssat	r3, #8, r3
 800d49a:	f801 3c01 	strb.w	r3, [r1, #-1]
 800d49e:	460b      	mov	r3, r1
 800d4a0:	3302      	adds	r3, #2
 800d4a2:	f109 0908 	add.w	r9, r9, #8
 800d4a6:	9301      	str	r3, [sp, #4]
 800d4a8:	9b06      	ldr	r3, [sp, #24]
 800d4aa:	4599      	cmp	r9, r3
 800d4ac:	f47f af2f 	bne.w	800d30e <st_sssa8_nn_mat_mult_kernel_single_opt+0x72>
 800d4b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4b4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d4b8:	920c      	str	r2, [sp, #48]	; 0x30
 800d4ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d4bc:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800d4c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4c2:	07db      	lsls	r3, r3, #31
 800d4c4:	d53f      	bpl.n	800d546 <st_sssa8_nn_mat_mult_kernel_single_opt+0x2aa>
 800d4c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4c8:	ea5f 069b 	movs.w	r6, fp, lsr #2
 800d4cc:	681a      	ldr	r2, [r3, #0]
 800d4ce:	d014      	beq.n	800d4fa <st_sssa8_nn_mat_mult_kernel_single_opt+0x25e>
 800d4d0:	00f7      	lsls	r7, r6, #3
 800d4d2:	9b04      	ldr	r3, [sp, #16]
 800d4d4:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800d4d8:	6805      	ldr	r5, [r0, #0]
 800d4da:	3008      	adds	r0, #8
 800d4dc:	f850 4c04 	ldr.w	r4, [r0, #-4]
 800d4e0:	f8d3 c000 	ldr.w	ip, [r3]
 800d4e4:	fb25 220c 	smlad	r2, r5, ip, r2
 800d4e8:	685d      	ldr	r5, [r3, #4]
 800d4ea:	3308      	adds	r3, #8
 800d4ec:	fb24 2205 	smlad	r2, r4, r5, r2
 800d4f0:	4286      	cmp	r6, r0
 800d4f2:	d1f1      	bne.n	800d4d8 <st_sssa8_nn_mat_mult_kernel_single_opt+0x23c>
 800d4f4:	9b04      	ldr	r3, [sp, #16]
 800d4f6:	443b      	add	r3, r7
 800d4f8:	9304      	str	r3, [sp, #16]
 800d4fa:	f01b 0303 	ands.w	r3, fp, #3
 800d4fe:	d011      	beq.n	800d524 <st_sssa8_nn_mat_mult_kernel_single_opt+0x288>
 800d500:	3b01      	subs	r3, #1
 800d502:	9e04      	ldr	r6, [sp, #16]
 800d504:	8804      	ldrh	r4, [r0, #0]
 800d506:	8835      	ldrh	r5, [r6, #0]
 800d508:	b29b      	uxth	r3, r3
 800d50a:	fb15 2204 	smlabb	r2, r5, r4, r2
 800d50e:	b14b      	cbz	r3, 800d524 <st_sssa8_nn_mat_mult_kernel_single_opt+0x288>
 800d510:	8875      	ldrh	r5, [r6, #2]
 800d512:	2b01      	cmp	r3, #1
 800d514:	8844      	ldrh	r4, [r0, #2]
 800d516:	fb15 2204 	smlabb	r2, r5, r4, r2
 800d51a:	d003      	beq.n	800d524 <st_sssa8_nn_mat_mult_kernel_single_opt+0x288>
 800d51c:	8880      	ldrh	r0, [r0, #4]
 800d51e:	88b3      	ldrh	r3, [r6, #4]
 800d520:	fb10 2203 	smlabb	r2, r0, r3, r2
 800d524:	9b03      	ldr	r3, [sp, #12]
 800d526:	2b15      	cmp	r3, #21
 800d528:	dd3f      	ble.n	800d5aa <st_sssa8_nn_mat_mult_kernel_single_opt+0x30e>
 800d52a:	1e9c      	subs	r4, r3, #2
 800d52c:	1e58      	subs	r0, r3, #1
 800d52e:	2301      	movs	r3, #1
 800d530:	40a3      	lsls	r3, r4
 800d532:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800d534:	fb52 3304 	smmla	r3, r2, r4, r3
 800d538:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d53a:	4103      	asrs	r3, r0
 800d53c:	4413      	add	r3, r2
 800d53e:	f303 0307 	ssat	r3, #8, r3
 800d542:	f801 3b01 	strb.w	r3, [r1], #1
 800d546:	4608      	mov	r0, r1
 800d548:	b011      	add	sp, #68	; 0x44
 800d54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54e:	2900      	cmp	r1, #0
 800d550:	dd14      	ble.n	800d57c <st_sssa8_nn_mat_mult_kernel_single_opt+0x2e0>
 800d552:	0052      	lsls	r2, r2, #1
 800d554:	005b      	lsls	r3, r3, #1
 800d556:	e9dd 451d 	ldrd	r4, r5, [sp, #116]	; 0x74
 800d55a:	fb52 5204 	smmla	r2, r2, r4, r5
 800d55e:	fb53 5304 	smmla	r3, r3, r4, r5
 800d562:	410a      	asrs	r2, r1
 800d564:	f302 0207 	ssat	r2, #8, r2
 800d568:	9c01      	ldr	r4, [sp, #4]
 800d56a:	410b      	asrs	r3, r1
 800d56c:	f804 2c02 	strb.w	r2, [r4, #-2]
 800d570:	f303 0307 	ssat	r3, #8, r3
 800d574:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d578:	4623      	mov	r3, r4
 800d57a:	e791      	b.n	800d4a0 <st_sssa8_nn_mat_mult_kernel_single_opt+0x204>
 800d57c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d57e:	408a      	lsls	r2, r1
 800d580:	f302 021f 	ssat	r2, #32, r2
 800d584:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800d586:	fb52 f214 	smmulr	r2, r2, r4
 800d58a:	408b      	lsls	r3, r1
 800d58c:	f303 031f 	ssat	r3, #32, r3
 800d590:	fb53 f314 	smmulr	r3, r3, r4
 800d594:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d596:	440a      	add	r2, r1
 800d598:	f302 0207 	ssat	r2, #8, r2
 800d59c:	9901      	ldr	r1, [sp, #4]
 800d59e:	f801 2c02 	strb.w	r2, [r1, #-2]
 800d5a2:	e776      	b.n	800d492 <st_sssa8_nn_mat_mult_kernel_single_opt+0x1f6>
 800d5a4:	f04f 0e00 	mov.w	lr, #0
 800d5a8:	e704      	b.n	800d3b4 <st_sssa8_nn_mat_mult_kernel_single_opt+0x118>
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	dd0d      	ble.n	800d5cc <st_sssa8_nn_mat_mult_kernel_single_opt+0x330>
 800d5b0:	0053      	lsls	r3, r2, #1
 800d5b2:	e9dd 241d 	ldrd	r2, r4, [sp, #116]	; 0x74
 800d5b6:	fb53 4302 	smmla	r3, r3, r2, r4
 800d5ba:	4103      	asrs	r3, r0
 800d5bc:	f303 0307 	ssat	r3, #8, r3
 800d5c0:	f801 3b01 	strb.w	r3, [r1], #1
 800d5c4:	4608      	mov	r0, r1
 800d5c6:	b011      	add	sp, #68	; 0x44
 800d5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5cc:	f1c3 0301 	rsb	r3, r3, #1
 800d5d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5d4:	f303 031f 	ssat	r3, #32, r3
 800d5d8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d5da:	fb53 f312 	smmulr	r3, r3, r2
 800d5de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d5e0:	4413      	add	r3, r2
 800d5e2:	f303 0307 	ssat	r3, #8, r3
 800d5e6:	f801 3b01 	strb.w	r3, [r1], #1
 800d5ea:	4608      	mov	r0, r1
 800d5ec:	b011      	add	sp, #68	; 0x44
 800d5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5f2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800d5f4:	e764      	b.n	800d4c0 <st_sssa8_nn_mat_mult_kernel_single_opt+0x224>
 800d5f6:	bf00      	nop

0800d5f8 <st_int8_maxpool>:
 800d5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5fc:	b095      	sub	sp, #84	; 0x54
 800d5fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d602:	4692      	mov	sl, r2
 800d604:	ee80 6a20 	vdiv.f32	s12, s0, s1
 800d608:	9306      	str	r3, [sp, #24]
 800d60a:	f99d 30a0 	ldrsb.w	r3, [sp, #160]	; 0xa0
 800d60e:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 800d612:	ee07 3a90 	vmov	s15, r3
 800d616:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 800d61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d61e:	9103      	str	r1, [sp, #12]
 800d620:	9307      	str	r3, [sp, #28]
 800d622:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800d626:	f99d 109c 	ldrsb.w	r1, [sp, #156]	; 0x9c
 800d62a:	9308      	str	r3, [sp, #32]
 800d62c:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 800d630:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 800d634:	9309      	str	r3, [sp, #36]	; 0x24
 800d636:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800d63a:	9000      	str	r0, [sp, #0]
 800d63c:	930a      	str	r3, [sp, #40]	; 0x28
 800d63e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800d642:	9204      	str	r2, [sp, #16]
 800d644:	930b      	str	r3, [sp, #44]	; 0x2c
 800d646:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 800d64a:	9102      	str	r1, [sp, #8]
 800d64c:	930c      	str	r3, [sp, #48]	; 0x30
 800d64e:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800d652:	9305      	str	r3, [sp, #20]
 800d654:	f2c0 808c 	blt.w	800d770 <st_int8_maxpool+0x178>
 800d658:	2b00      	cmp	r3, #0
 800d65a:	f000 8086 	beq.w	800d76a <st_int8_maxpool+0x172>
 800d65e:	eeb4 0a60 	vcmp.f32	s0, s1
 800d662:	460a      	mov	r2, r1
 800d664:	ee17 1a90 	vmov	r1, s15
 800d668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d66c:	bf0c      	ite	eq
 800d66e:	2301      	moveq	r3, #1
 800d670:	2300      	movne	r3, #0
 800d672:	428a      	cmp	r2, r1
 800d674:	bf14      	ite	ne
 800d676:	2300      	movne	r3, #0
 800d678:	f003 0301 	andeq.w	r3, r3, #1
 800d67c:	9301      	str	r3, [sp, #4]
 800d67e:	9b04      	ldr	r3, [sp, #16]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d072      	beq.n	800d76a <st_int8_maxpool+0x172>
 800d684:	f1b9 0f00 	cmp.w	r9, #0
 800d688:	d06f      	beq.n	800d76a <st_int8_maxpool+0x172>
 800d68a:	f1b9 0f01 	cmp.w	r9, #1
 800d68e:	f040 81d2 	bne.w	800da36 <st_int8_maxpool+0x43e>
 800d692:	2300      	movs	r3, #0
 800d694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d698:	eddf 5a95 	vldr	s11, [pc, #596]	; 800d8f0 <st_int8_maxpool+0x2f8>
 800d69c:	469b      	mov	fp, r3
 800d69e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d6a2:	930d      	str	r3, [sp, #52]	; 0x34
 800d6a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6a6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800d6aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6ac:	fb0b fe03 	mul.w	lr, fp, r3
 800d6b0:	9b04      	ldr	r3, [sp, #16]
 800d6b2:	fb0b f303 	mul.w	r3, fp, r3
 800d6b6:	f04f 0b00 	mov.w	fp, #0
 800d6ba:	9303      	str	r3, [sp, #12]
 800d6bc:	ebae 0302 	sub.w	r3, lr, r2
 800d6c0:	eba2 0e0e 	sub.w	lr, r2, lr
 800d6c4:	9a06      	ldr	r2, [sp, #24]
 800d6c6:	455b      	cmp	r3, fp
 800d6c8:	46d8      	mov	r8, fp
 800d6ca:	eb0e 0c02 	add.w	ip, lr, r2
 800d6ce:	9a08      	ldr	r2, [sp, #32]
 800d6d0:	bfc8      	it	gt
 800d6d2:	46de      	movgt	lr, fp
 800d6d4:	4594      	cmp	ip, r2
 800d6d6:	4473      	add	r3, lr
 800d6d8:	bfa8      	it	ge
 800d6da:	4694      	movge	ip, r2
 800d6dc:	fb0a f303 	mul.w	r3, sl, r3
 800d6e0:	930e      	str	r3, [sp, #56]	; 0x38
 800d6e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d6e6:	fb08 f203 	mul.w	r2, r8, r3
 800d6ea:	9b03      	ldr	r3, [sp, #12]
 800d6ec:	4498      	add	r8, r3
 800d6ee:	1a53      	subs	r3, r2, r1
 800d6f0:	1a8a      	subs	r2, r1, r2
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	ebaa 0403 	sub.w	r4, sl, r3
 800d6f8:	bfd8      	it	le
 800d6fa:	4617      	movle	r7, r2
 800d6fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6fe:	bfc8      	it	gt
 800d700:	2700      	movgt	r7, #0
 800d702:	189d      	adds	r5, r3, r2
 800d704:	9b07      	ldr	r3, [sp, #28]
 800d706:	429c      	cmp	r4, r3
 800d708:	443d      	add	r5, r7
 800d70a:	bfa8      	it	ge
 800d70c:	461c      	movge	r4, r3
 800d70e:	45f4      	cmp	ip, lr
 800d710:	f340 80ea 	ble.w	800d8e8 <st_int8_maxpool+0x2f0>
 800d714:	9b00      	ldr	r3, [sp, #0]
 800d716:	4676      	mov	r6, lr
 800d718:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800d71c:	441d      	add	r5, r3
 800d71e:	42bc      	cmp	r4, r7
 800d720:	dd09      	ble.n	800d736 <st_int8_maxpool+0x13e>
 800d722:	462a      	mov	r2, r5
 800d724:	463b      	mov	r3, r7
 800d726:	f912 0b01 	ldrsb.w	r0, [r2], #1
 800d72a:	3301      	adds	r3, #1
 800d72c:	4281      	cmp	r1, r0
 800d72e:	bfb8      	it	lt
 800d730:	4601      	movlt	r1, r0
 800d732:	42a3      	cmp	r3, r4
 800d734:	d1f7      	bne.n	800d726 <st_int8_maxpool+0x12e>
 800d736:	3601      	adds	r6, #1
 800d738:	4455      	add	r5, sl
 800d73a:	4566      	cmp	r6, ip
 800d73c:	d1ef      	bne.n	800d71e <st_int8_maxpool+0x126>
 800d73e:	9b01      	ldr	r3, [sp, #4]
 800d740:	2b00      	cmp	r3, #0
 800d742:	f000 80b6 	beq.w	800d8b2 <st_int8_maxpool+0x2ba>
 800d746:	f809 1008 	strb.w	r1, [r9, r8]
 800d74a:	f10b 0b01 	add.w	fp, fp, #1
 800d74e:	9b04      	ldr	r3, [sp, #16]
 800d750:	fa0f fb8b 	sxth.w	fp, fp
 800d754:	455b      	cmp	r3, fp
 800d756:	46d8      	mov	r8, fp
 800d758:	dcc3      	bgt.n	800d6e2 <st_int8_maxpool+0xea>
 800d75a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d75c:	9a05      	ldr	r2, [sp, #20]
 800d75e:	3301      	adds	r3, #1
 800d760:	b21b      	sxth	r3, r3
 800d762:	429a      	cmp	r2, r3
 800d764:	469b      	mov	fp, r3
 800d766:	930d      	str	r3, [sp, #52]	; 0x34
 800d768:	dc9c      	bgt.n	800d6a4 <st_int8_maxpool+0xac>
 800d76a:	b015      	add	sp, #84	; 0x54
 800d76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d770:	2b00      	cmp	r3, #0
 800d772:	d0fa      	beq.n	800d76a <st_int8_maxpool+0x172>
 800d774:	eeb4 0a60 	vcmp.f32	s0, s1
 800d778:	ee17 0a90 	vmov	r0, s15
 800d77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d780:	bf0c      	ite	eq
 800d782:	2301      	moveq	r3, #1
 800d784:	2300      	movne	r3, #0
 800d786:	4281      	cmp	r1, r0
 800d788:	bf14      	ite	ne
 800d78a:	2300      	movne	r3, #0
 800d78c:	f003 0301 	andeq.w	r3, r3, #1
 800d790:	9301      	str	r3, [sp, #4]
 800d792:	2a00      	cmp	r2, #0
 800d794:	d0e9      	beq.n	800d76a <st_int8_maxpool+0x172>
 800d796:	f1b9 0f00 	cmp.w	r9, #0
 800d79a:	d0e6      	beq.n	800d76a <st_int8_maxpool+0x172>
 800d79c:	f1b9 0f01 	cmp.w	r9, #1
 800d7a0:	f040 80a8 	bne.w	800d8f4 <st_int8_maxpool+0x2fc>
 800d7a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	eddf 5a51 	vldr	s11, [pc, #324]	; 800d8f0 <st_int8_maxpool+0x2f8>
 800d7ae:	f8dd b000 	ldr.w	fp, [sp]
 800d7b2:	930d      	str	r3, [sp, #52]	; 0x34
 800d7b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7b6:	f04f 0900 	mov.w	r9, #0
 800d7ba:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800d7be:	fb03 fe02 	mul.w	lr, r3, r2
 800d7c2:	9a04      	ldr	r2, [sp, #16]
 800d7c4:	46c8      	mov	r8, r9
 800d7c6:	fb03 f302 	mul.w	r3, r3, r2
 800d7ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7cc:	9300      	str	r3, [sp, #0]
 800d7ce:	ebae 0302 	sub.w	r3, lr, r2
 800d7d2:	eba2 0e0e 	sub.w	lr, r2, lr
 800d7d6:	9a06      	ldr	r2, [sp, #24]
 800d7d8:	454b      	cmp	r3, r9
 800d7da:	eb0e 0c02 	add.w	ip, lr, r2
 800d7de:	9a08      	ldr	r2, [sp, #32]
 800d7e0:	bfc8      	it	gt
 800d7e2:	46ce      	movgt	lr, r9
 800d7e4:	4594      	cmp	ip, r2
 800d7e6:	4473      	add	r3, lr
 800d7e8:	bfa8      	it	ge
 800d7ea:	4694      	movge	ip, r2
 800d7ec:	fb0a f303 	mul.w	r3, sl, r3
 800d7f0:	930e      	str	r3, [sp, #56]	; 0x38
 800d7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d7f6:	fb08 f203 	mul.w	r2, r8, r3
 800d7fa:	9b00      	ldr	r3, [sp, #0]
 800d7fc:	4498      	add	r8, r3
 800d7fe:	1a53      	subs	r3, r2, r1
 800d800:	1a8a      	subs	r2, r1, r2
 800d802:	2b00      	cmp	r3, #0
 800d804:	ebaa 0403 	sub.w	r4, sl, r3
 800d808:	bfd8      	it	le
 800d80a:	4617      	movle	r7, r2
 800d80c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d80e:	bfc8      	it	gt
 800d810:	2700      	movgt	r7, #0
 800d812:	189d      	adds	r5, r3, r2
 800d814:	9b07      	ldr	r3, [sp, #28]
 800d816:	429c      	cmp	r4, r3
 800d818:	443d      	add	r5, r7
 800d81a:	bfa8      	it	ge
 800d81c:	461c      	movge	r4, r3
 800d81e:	45f4      	cmp	ip, lr
 800d820:	dd45      	ble.n	800d8ae <st_int8_maxpool+0x2b6>
 800d822:	445d      	add	r5, fp
 800d824:	4676      	mov	r6, lr
 800d826:	217f      	movs	r1, #127	; 0x7f
 800d828:	42bc      	cmp	r4, r7
 800d82a:	dd09      	ble.n	800d840 <st_int8_maxpool+0x248>
 800d82c:	462a      	mov	r2, r5
 800d82e:	463b      	mov	r3, r7
 800d830:	f912 0b01 	ldrsb.w	r0, [r2], #1
 800d834:	3301      	adds	r3, #1
 800d836:	4281      	cmp	r1, r0
 800d838:	bfa8      	it	ge
 800d83a:	4601      	movge	r1, r0
 800d83c:	429c      	cmp	r4, r3
 800d83e:	d1f7      	bne.n	800d830 <st_int8_maxpool+0x238>
 800d840:	3601      	adds	r6, #1
 800d842:	4455      	add	r5, sl
 800d844:	45b4      	cmp	ip, r6
 800d846:	d1ef      	bne.n	800d828 <st_int8_maxpool+0x230>
 800d848:	9b01      	ldr	r3, [sp, #4]
 800d84a:	b1a3      	cbz	r3, 800d876 <st_int8_maxpool+0x27e>
 800d84c:	9b03      	ldr	r3, [sp, #12]
 800d84e:	f803 1008 	strb.w	r1, [r3, r8]
 800d852:	f109 0901 	add.w	r9, r9, #1
 800d856:	9b04      	ldr	r3, [sp, #16]
 800d858:	fa0f f989 	sxth.w	r9, r9
 800d85c:	454b      	cmp	r3, r9
 800d85e:	46c8      	mov	r8, r9
 800d860:	dcc7      	bgt.n	800d7f2 <st_int8_maxpool+0x1fa>
 800d862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d864:	9a05      	ldr	r2, [sp, #20]
 800d866:	3301      	adds	r3, #1
 800d868:	b21b      	sxth	r3, r3
 800d86a:	429a      	cmp	r2, r3
 800d86c:	930d      	str	r3, [sp, #52]	; 0x34
 800d86e:	dca1      	bgt.n	800d7b4 <st_int8_maxpool+0x1bc>
 800d870:	b015      	add	sp, #84	; 0x54
 800d872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d876:	9b02      	ldr	r3, [sp, #8]
 800d878:	eef0 6a47 	vmov.f32	s13, s14
 800d87c:	1ac9      	subs	r1, r1, r3
 800d87e:	ee07 1a90 	vmov	s15, r1
 800d882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d886:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d88a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d892:	fe65 7a25 	vselge.f32	s15, s10, s11
 800d896:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d89a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800d89e:	ee17 3a90 	vmov	r3, s15
 800d8a2:	f303 0307 	ssat	r3, #8, r3
 800d8a6:	9a03      	ldr	r2, [sp, #12]
 800d8a8:	f802 3008 	strb.w	r3, [r2, r8]
 800d8ac:	e7d1      	b.n	800d852 <st_int8_maxpool+0x25a>
 800d8ae:	217f      	movs	r1, #127	; 0x7f
 800d8b0:	e7ca      	b.n	800d848 <st_int8_maxpool+0x250>
 800d8b2:	9b02      	ldr	r3, [sp, #8]
 800d8b4:	eef0 6a47 	vmov.f32	s13, s14
 800d8b8:	1ac9      	subs	r1, r1, r3
 800d8ba:	ee07 1a90 	vmov	s15, r1
 800d8be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8c2:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d8c6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ce:	fe65 7a25 	vselge.f32	s15, s10, s11
 800d8d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8da:	ee17 3a90 	vmov	r3, s15
 800d8de:	f303 0307 	ssat	r3, #8, r3
 800d8e2:	f809 3008 	strb.w	r3, [r9, r8]
 800d8e6:	e730      	b.n	800d74a <st_int8_maxpool+0x152>
 800d8e8:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800d8ec:	e727      	b.n	800d73e <st_int8_maxpool+0x146>
 800d8ee:	bf00      	nop
 800d8f0:	befffffc 	.word	0xbefffffc
 800d8f4:	f04f 0800 	mov.w	r8, #0
 800d8f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d8fc:	ed5f 5a04 	vldr	s11, [pc, #-16]	; 800d8f0 <st_int8_maxpool+0x2f8>
 800d900:	fb0a fb09 	mul.w	fp, sl, r9
 800d904:	4643      	mov	r3, r8
 800d906:	46c4      	mov	ip, r8
 800d908:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d90c:	9904      	ldr	r1, [sp, #16]
 800d90e:	2000      	movs	r0, #0
 800d910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d912:	9c08      	ldr	r4, [sp, #32]
 800d914:	fb03 f202 	mul.w	r2, r3, r2
 800d918:	fb03 f301 	mul.w	r3, r3, r1
 800d91c:	900d      	str	r0, [sp, #52]	; 0x34
 800d91e:	9310      	str	r3, [sp, #64]	; 0x40
 800d920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d922:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 800d926:	1ad1      	subs	r1, r2, r3
 800d928:	1a9b      	subs	r3, r3, r2
 800d92a:	9a06      	ldr	r2, [sp, #24]
 800d92c:	4281      	cmp	r1, r0
 800d92e:	441a      	add	r2, r3
 800d930:	bfc8      	it	gt
 800d932:	4603      	movgt	r3, r0
 800d934:	4294      	cmp	r4, r2
 800d936:	4419      	add	r1, r3
 800d938:	930f      	str	r3, [sp, #60]	; 0x3c
 800d93a:	bfa8      	it	ge
 800d93c:	4614      	movge	r4, r2
 800d93e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d940:	4602      	mov	r2, r0
 800d942:	fb03 f301 	mul.w	r3, r3, r1
 800d946:	46a2      	mov	sl, r4
 800d948:	9311      	str	r3, [sp, #68]	; 0x44
 800d94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d94c:	f04f 0e00 	mov.w	lr, #0
 800d950:	9c07      	ldr	r4, [sp, #28]
 800d952:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800d956:	fb02 f103 	mul.w	r1, r2, r3
 800d95a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d95c:	46f0      	mov	r8, lr
 800d95e:	441a      	add	r2, r3
 800d960:	9b03      	ldr	r3, [sp, #12]
 800d962:	fb09 3c02 	mla	ip, r9, r2, r3
 800d966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d968:	1a8b      	subs	r3, r1, r2
 800d96a:	1a51      	subs	r1, r2, r1
 800d96c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d96e:	2b00      	cmp	r3, #0
 800d970:	441a      	add	r2, r3
 800d972:	bfd8      	it	le
 800d974:	460f      	movle	r7, r1
 800d976:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d978:	bfc8      	it	gt
 800d97a:	2700      	movgt	r7, #0
 800d97c:	1acb      	subs	r3, r1, r3
 800d97e:	443a      	add	r2, r7
 800d980:	429c      	cmp	r4, r3
 800d982:	bfa8      	it	ge
 800d984:	461c      	movge	r4, r3
 800d986:	fb09 f302 	mul.w	r3, r9, r2
 800d98a:	9312      	str	r3, [sp, #72]	; 0x48
 800d98c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d98e:	4555      	cmp	r5, sl
 800d990:	da4f      	bge.n	800da32 <st_int8_maxpool+0x43a>
 800d992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d994:	217f      	movs	r1, #127	; 0x7f
 800d996:	eb08 0603 	add.w	r6, r8, r3
 800d99a:	9b00      	ldr	r3, [sp, #0]
 800d99c:	441e      	add	r6, r3
 800d99e:	42a7      	cmp	r7, r4
 800d9a0:	da0a      	bge.n	800d9b8 <st_int8_maxpool+0x3c0>
 800d9a2:	4632      	mov	r2, r6
 800d9a4:	463b      	mov	r3, r7
 800d9a6:	f992 0000 	ldrsb.w	r0, [r2]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	444a      	add	r2, r9
 800d9ae:	4281      	cmp	r1, r0
 800d9b0:	bfa8      	it	ge
 800d9b2:	4601      	movge	r1, r0
 800d9b4:	429c      	cmp	r4, r3
 800d9b6:	d1f6      	bne.n	800d9a6 <st_int8_maxpool+0x3ae>
 800d9b8:	3501      	adds	r5, #1
 800d9ba:	445e      	add	r6, fp
 800d9bc:	45aa      	cmp	sl, r5
 800d9be:	d1ee      	bne.n	800d99e <st_int8_maxpool+0x3a6>
 800d9c0:	9b01      	ldr	r3, [sp, #4]
 800d9c2:	b1db      	cbz	r3, 800d9fc <st_int8_maxpool+0x404>
 800d9c4:	f80c 1008 	strb.w	r1, [ip, r8]
 800d9c8:	f10e 0e01 	add.w	lr, lr, #1
 800d9cc:	fa0f fe8e 	sxth.w	lr, lr
 800d9d0:	45ce      	cmp	lr, r9
 800d9d2:	46f0      	mov	r8, lr
 800d9d4:	dbda      	blt.n	800d98c <st_int8_maxpool+0x394>
 800d9d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9d8:	9904      	ldr	r1, [sp, #16]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	b21b      	sxth	r3, r3
 800d9de:	428b      	cmp	r3, r1
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	930d      	str	r3, [sp, #52]	; 0x34
 800d9e4:	dbb1      	blt.n	800d94a <st_int8_maxpool+0x352>
 800d9e6:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800d9ea:	9a05      	ldr	r2, [sp, #20]
 800d9ec:	f10c 0301 	add.w	r3, ip, #1
 800d9f0:	fa0f fc83 	sxth.w	ip, r3
 800d9f4:	4594      	cmp	ip, r2
 800d9f6:	4663      	mov	r3, ip
 800d9f8:	db88      	blt.n	800d90c <st_int8_maxpool+0x314>
 800d9fa:	e6b6      	b.n	800d76a <st_int8_maxpool+0x172>
 800d9fc:	9b02      	ldr	r3, [sp, #8]
 800d9fe:	eef0 6a47 	vmov.f32	s13, s14
 800da02:	1ac9      	subs	r1, r1, r3
 800da04:	ee07 1a90 	vmov	s15, r1
 800da08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da0c:	eee7 6a86 	vfma.f32	s13, s15, s12
 800da10:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800da14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da18:	fe65 7a25 	vselge.f32	s15, s10, s11
 800da1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da24:	ee17 3a90 	vmov	r3, s15
 800da28:	f303 0307 	ssat	r3, #8, r3
 800da2c:	f80c 3008 	strb.w	r3, [ip, r8]
 800da30:	e7ca      	b.n	800d9c8 <st_int8_maxpool+0x3d0>
 800da32:	217f      	movs	r1, #127	; 0x7f
 800da34:	e7c4      	b.n	800d9c0 <st_int8_maxpool+0x3c8>
 800da36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800da3a:	2300      	movs	r3, #0
 800da3c:	ed5f 5a54 	vldr	s11, [pc, #-336]	; 800d8f0 <st_int8_maxpool+0x2f8>
 800da40:	fb0a fb09 	mul.w	fp, sl, r9
 800da44:	930e      	str	r3, [sp, #56]	; 0x38
 800da46:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800da4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da4c:	2000      	movs	r0, #0
 800da4e:	9c08      	ldr	r4, [sp, #32]
 800da50:	fb03 f102 	mul.w	r1, r3, r2
 800da54:	9a04      	ldr	r2, [sp, #16]
 800da56:	900f      	str	r0, [sp, #60]	; 0x3c
 800da58:	fb03 f302 	mul.w	r3, r3, r2
 800da5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da5e:	9312      	str	r3, [sp, #72]	; 0x48
 800da60:	1a8b      	subs	r3, r1, r2
 800da62:	1a51      	subs	r1, r2, r1
 800da64:	9a06      	ldr	r2, [sp, #24]
 800da66:	4283      	cmp	r3, r0
 800da68:	440a      	add	r2, r1
 800da6a:	bfc8      	it	gt
 800da6c:	4601      	movgt	r1, r0
 800da6e:	4294      	cmp	r4, r2
 800da70:	440b      	add	r3, r1
 800da72:	910d      	str	r1, [sp, #52]	; 0x34
 800da74:	bfa8      	it	ge
 800da76:	4614      	movge	r4, r2
 800da78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800da7a:	46a6      	mov	lr, r4
 800da7c:	fb02 f303 	mul.w	r3, r2, r3
 800da80:	4602      	mov	r2, r0
 800da82:	9313      	str	r3, [sp, #76]	; 0x4c
 800da84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da86:	f04f 0c00 	mov.w	ip, #0
 800da8a:	9c07      	ldr	r4, [sp, #28]
 800da8c:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800da90:	fb02 f103 	mul.w	r1, r2, r3
 800da94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800da96:	46e2      	mov	sl, ip
 800da98:	441a      	add	r2, r3
 800da9a:	9b03      	ldr	r3, [sp, #12]
 800da9c:	fb09 3802 	mla	r8, r9, r2, r3
 800daa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daa2:	1a8b      	subs	r3, r1, r2
 800daa4:	1a51      	subs	r1, r2, r1
 800daa6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	441a      	add	r2, r3
 800daac:	bfd8      	it	le
 800daae:	460f      	movle	r7, r1
 800dab0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dab2:	bfc8      	it	gt
 800dab4:	2700      	movgt	r7, #0
 800dab6:	1acb      	subs	r3, r1, r3
 800dab8:	443a      	add	r2, r7
 800daba:	429c      	cmp	r4, r3
 800dabc:	bfa8      	it	ge
 800dabe:	461c      	movge	r4, r3
 800dac0:	fb09 f302 	mul.w	r3, r9, r2
 800dac4:	9310      	str	r3, [sp, #64]	; 0x40
 800dac6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800dac8:	4576      	cmp	r6, lr
 800daca:	da4d      	bge.n	800db68 <st_int8_maxpool+0x570>
 800dacc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dace:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800dad2:	eb0a 0503 	add.w	r5, sl, r3
 800dad6:	9b00      	ldr	r3, [sp, #0]
 800dad8:	441d      	add	r5, r3
 800dada:	42a7      	cmp	r7, r4
 800dadc:	da0a      	bge.n	800daf4 <st_int8_maxpool+0x4fc>
 800dade:	462a      	mov	r2, r5
 800dae0:	463b      	mov	r3, r7
 800dae2:	f992 0000 	ldrsb.w	r0, [r2]
 800dae6:	3301      	adds	r3, #1
 800dae8:	444a      	add	r2, r9
 800daea:	4281      	cmp	r1, r0
 800daec:	bfb8      	it	lt
 800daee:	4601      	movlt	r1, r0
 800daf0:	429c      	cmp	r4, r3
 800daf2:	d1f6      	bne.n	800dae2 <st_int8_maxpool+0x4ea>
 800daf4:	3601      	adds	r6, #1
 800daf6:	445d      	add	r5, fp
 800daf8:	45b6      	cmp	lr, r6
 800dafa:	d1ee      	bne.n	800dada <st_int8_maxpool+0x4e2>
 800dafc:	9b01      	ldr	r3, [sp, #4]
 800dafe:	b1c3      	cbz	r3, 800db32 <st_int8_maxpool+0x53a>
 800db00:	f808 100a 	strb.w	r1, [r8, sl]
 800db04:	f10c 0c01 	add.w	ip, ip, #1
 800db08:	fa0f fc8c 	sxth.w	ip, ip
 800db0c:	45cc      	cmp	ip, r9
 800db0e:	46e2      	mov	sl, ip
 800db10:	dbd9      	blt.n	800dac6 <st_int8_maxpool+0x4ce>
 800db12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db14:	9904      	ldr	r1, [sp, #16]
 800db16:	3301      	adds	r3, #1
 800db18:	b21b      	sxth	r3, r3
 800db1a:	428b      	cmp	r3, r1
 800db1c:	461a      	mov	r2, r3
 800db1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db20:	dbb0      	blt.n	800da84 <st_int8_maxpool+0x48c>
 800db22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db24:	9905      	ldr	r1, [sp, #20]
 800db26:	3301      	adds	r3, #1
 800db28:	b21b      	sxth	r3, r3
 800db2a:	428b      	cmp	r3, r1
 800db2c:	930e      	str	r3, [sp, #56]	; 0x38
 800db2e:	db8c      	blt.n	800da4a <st_int8_maxpool+0x452>
 800db30:	e61b      	b.n	800d76a <st_int8_maxpool+0x172>
 800db32:	9b02      	ldr	r3, [sp, #8]
 800db34:	eef0 6a47 	vmov.f32	s13, s14
 800db38:	1ac9      	subs	r1, r1, r3
 800db3a:	ee07 1a90 	vmov	s15, r1
 800db3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db42:	eee7 6a86 	vfma.f32	s13, s15, s12
 800db46:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800db4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db4e:	fe65 7a25 	vselge.f32	s15, s10, s11
 800db52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db5a:	ee17 3a90 	vmov	r3, s15
 800db5e:	f303 0307 	ssat	r3, #8, r3
 800db62:	f808 300a 	strb.w	r3, [r8, sl]
 800db66:	e7cd      	b.n	800db04 <st_int8_maxpool+0x50c>
 800db68:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800db6c:	e7c6      	b.n	800dafc <st_int8_maxpool+0x504>
 800db6e:	bf00      	nop

0800db70 <arm_copy_q7>:
 800db70:	b530      	push	{r4, r5, lr}
 800db72:	0894      	lsrs	r4, r2, #2
 800db74:	d02b      	beq.n	800dbce <arm_copy_q7+0x5e>
 800db76:	1e63      	subs	r3, r4, #1
 800db78:	ea41 0500 	orr.w	r5, r1, r0
 800db7c:	2b0b      	cmp	r3, #11
 800db7e:	f3c5 0502 	ubfx	r5, r5, #0, #3
 800db82:	bf94      	ite	ls
 800db84:	2300      	movls	r3, #0
 800db86:	2301      	movhi	r3, #1
 800db88:	2d00      	cmp	r5, #0
 800db8a:	bf18      	it	ne
 800db8c:	2300      	movne	r3, #0
 800db8e:	b393      	cbz	r3, 800dbf6 <arm_copy_q7+0x86>
 800db90:	43c3      	mvns	r3, r0
 800db92:	440b      	add	r3, r1
 800db94:	2b06      	cmp	r3, #6
 800db96:	d92e      	bls.n	800dbf6 <arm_copy_q7+0x86>
 800db98:	f022 0507 	bic.w	r5, r2, #7
 800db9c:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
 800dba0:	f1a0 0e08 	sub.w	lr, r0, #8
 800dba4:	460b      	mov	r3, r1
 800dba6:	440d      	add	r5, r1
 800dba8:	f10e 0e08 	add.w	lr, lr, #8
 800dbac:	ed9e 7b00 	vldr	d7, [lr]
 800dbb0:	eca3 7b02 	vstmia	r3!, {d7}
 800dbb4:	42ab      	cmp	r3, r5
 800dbb6:	d1f7      	bne.n	800dba8 <arm_copy_q7+0x38>
 800dbb8:	ebb4 0f4c 	cmp.w	r4, ip, lsl #1
 800dbbc:	d018      	beq.n	800dbf0 <arm_copy_q7+0x80>
 800dbbe:	f850 303c 	ldr.w	r3, [r0, ip, lsl #3]
 800dbc2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800dbc6:	f841 303c 	str.w	r3, [r1, ip, lsl #3]
 800dbca:	4470      	add	r0, lr
 800dbcc:	4471      	add	r1, lr
 800dbce:	f012 0203 	ands.w	r2, r2, #3
 800dbd2:	d00c      	beq.n	800dbee <arm_copy_q7+0x7e>
 800dbd4:	f990 3000 	ldrsb.w	r3, [r0]
 800dbd8:	3a01      	subs	r2, #1
 800dbda:	700b      	strb	r3, [r1, #0]
 800dbdc:	d007      	beq.n	800dbee <arm_copy_q7+0x7e>
 800dbde:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dbe2:	2a01      	cmp	r2, #1
 800dbe4:	704b      	strb	r3, [r1, #1]
 800dbe6:	d002      	beq.n	800dbee <arm_copy_q7+0x7e>
 800dbe8:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800dbec:	708b      	strb	r3, [r1, #2]
 800dbee:	bd30      	pop	{r4, r5, pc}
 800dbf0:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 800dbf4:	e7e9      	b.n	800dbca <arm_copy_q7+0x5a>
 800dbf6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800dbfa:	460d      	mov	r5, r1
 800dbfc:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800dc00:	4603      	mov	r3, r0
 800dc02:	f853 cb04 	ldr.w	ip, [r3], #4
 800dc06:	42a3      	cmp	r3, r4
 800dc08:	f845 cb04 	str.w	ip, [r5], #4
 800dc0c:	d1f9      	bne.n	800dc02 <arm_copy_q7+0x92>
 800dc0e:	e7dc      	b.n	800dbca <arm_copy_q7+0x5a>

0800dc10 <arm_fill_q15>:
 800dc10:	b510      	push	{r4, lr}
 800dc12:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 800dc16:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800dc1a:	d013      	beq.n	800dc44 <arm_fill_q15+0x34>
 800dc1c:	f10e 33ff 	add.w	r3, lr, #4294967295
 800dc20:	2b09      	cmp	r3, #9
 800dc22:	460b      	mov	r3, r1
 800dc24:	d919      	bls.n	800dc5a <arm_fill_q15+0x4a>
 800dc26:	f011 0f07 	tst.w	r1, #7
 800dc2a:	d116      	bne.n	800dc5a <arm_fill_q15+0x4a>
 800dc2c:	f04f 0c00 	mov.w	ip, #0
 800dc30:	f10c 0c01 	add.w	ip, ip, #1
 800dc34:	45e6      	cmp	lr, ip
 800dc36:	e9c3 4400 	strd	r4, r4, [r3]
 800dc3a:	f103 0308 	add.w	r3, r3, #8
 800dc3e:	d1f7      	bne.n	800dc30 <arm_fill_q15+0x20>
 800dc40:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800dc44:	f012 0203 	ands.w	r2, r2, #3
 800dc48:	d006      	beq.n	800dc58 <arm_fill_q15+0x48>
 800dc4a:	3a01      	subs	r2, #1
 800dc4c:	8008      	strh	r0, [r1, #0]
 800dc4e:	d003      	beq.n	800dc58 <arm_fill_q15+0x48>
 800dc50:	2a01      	cmp	r2, #1
 800dc52:	8048      	strh	r0, [r1, #2]
 800dc54:	bf18      	it	ne
 800dc56:	8088      	strhne	r0, [r1, #4]
 800dc58:	bd10      	pop	{r4, pc}
 800dc5a:	46f4      	mov	ip, lr
 800dc5c:	f1bc 0c01 	subs.w	ip, ip, #1
 800dc60:	601c      	str	r4, [r3, #0]
 800dc62:	605c      	str	r4, [r3, #4]
 800dc64:	f103 0308 	add.w	r3, r3, #8
 800dc68:	d1f8      	bne.n	800dc5c <arm_fill_q15+0x4c>
 800dc6a:	e7e9      	b.n	800dc40 <arm_fill_q15+0x30>

0800dc6c <ai_version_get>:
 800dc6c:	0212      	lsls	r2, r2, #8
 800dc6e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800dc72:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800dc76:	4770      	bx	lr

0800dc78 <get_tensor_byte_size>:
 800dc78:	b430      	push	{r4, r5}
 800dc7a:	6985      	ldr	r5, [r0, #24]
 800dc7c:	68c4      	ldr	r4, [r0, #12]
 800dc7e:	6941      	ldr	r1, [r0, #20]
 800dc80:	4b06      	ldr	r3, [pc, #24]	; (800dc9c <get_tensor_byte_size+0x24>)
 800dc82:	6828      	ldr	r0, [r5, #0]
 800dc84:	4a06      	ldr	r2, [pc, #24]	; (800dca0 <get_tensor_byte_size+0x28>)
 800dc86:	4003      	ands	r3, r0
 800dc88:	68c9      	ldr	r1, [r1, #12]
 800dc8a:	68e0      	ldr	r0, [r4, #12]
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	fb01 f000 	mul.w	r0, r1, r0
 800dc92:	d101      	bne.n	800dc98 <get_tensor_byte_size+0x20>
 800dc94:	3007      	adds	r0, #7
 800dc96:	08c0      	lsrs	r0, r0, #3
 800dc98:	bc30      	pop	{r4, r5}
 800dc9a:	4770      	bx	lr
 800dc9c:	017fffff 	.word	0x017fffff
 800dca0:	000400c0 	.word	0x000400c0

0800dca4 <ai_array_to_buffer_fmt>:
 800dca4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800dca8:	2b02      	cmp	r3, #2
 800dcaa:	d050      	beq.n	800dd4e <ai_array_to_buffer_fmt+0xaa>
 800dcac:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800dcb0:	4b29      	ldr	r3, [pc, #164]	; (800dd58 <ai_array_to_buffer_fmt+0xb4>)
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d00b      	beq.n	800dcce <ai_array_to_buffer_fmt+0x2a>
 800dcb6:	dc1c      	bgt.n	800dcf2 <ai_array_to_buffer_fmt+0x4e>
 800dcb8:	4b28      	ldr	r3, [pc, #160]	; (800dd5c <ai_array_to_buffer_fmt+0xb8>)
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d007      	beq.n	800dcce <ai_array_to_buffer_fmt+0x2a>
 800dcbe:	dd0b      	ble.n	800dcd8 <ai_array_to_buffer_fmt+0x34>
 800dcc0:	4b27      	ldr	r3, [pc, #156]	; (800dd60 <ai_array_to_buffer_fmt+0xbc>)
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d003      	beq.n	800dcce <ai_array_to_buffer_fmt+0x2a>
 800dcc6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d131      	bne.n	800dd32 <ai_array_to_buffer_fmt+0x8e>
 800dcce:	4613      	mov	r3, r2
 800dcd0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800dcd4:	4318      	orrs	r0, r3
 800dcd6:	4770      	bx	lr
 800dcd8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d0f6      	beq.n	800dcce <ai_array_to_buffer_fmt+0x2a>
 800dce0:	dd2c      	ble.n	800dd3c <ai_array_to_buffer_fmt+0x98>
 800dce2:	4b20      	ldr	r3, [pc, #128]	; (800dd64 <ai_array_to_buffer_fmt+0xc0>)
 800dce4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800dce8:	429a      	cmp	r2, r3
 800dcea:	bf18      	it	ne
 800dcec:	2340      	movne	r3, #64	; 0x40
 800dcee:	4318      	orrs	r0, r3
 800dcf0:	4770      	bx	lr
 800dcf2:	4b1d      	ldr	r3, [pc, #116]	; (800dd68 <ai_array_to_buffer_fmt+0xc4>)
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d0ea      	beq.n	800dcce <ai_array_to_buffer_fmt+0x2a>
 800dcf8:	dd0e      	ble.n	800dd18 <ai_array_to_buffer_fmt+0x74>
 800dcfa:	4b1c      	ldr	r3, [pc, #112]	; (800dd6c <ai_array_to_buffer_fmt+0xc8>)
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d0e6      	beq.n	800dcce <ai_array_to_buffer_fmt+0x2a>
 800dd00:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d0e2      	beq.n	800dcce <ai_array_to_buffer_fmt+0x2a>
 800dd08:	4b19      	ldr	r3, [pc, #100]	; (800dd70 <ai_array_to_buffer_fmt+0xcc>)
 800dd0a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	bf18      	it	ne
 800dd12:	2340      	movne	r3, #64	; 0x40
 800dd14:	4318      	orrs	r0, r3
 800dd16:	4770      	bx	lr
 800dd18:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d0d6      	beq.n	800dcce <ai_array_to_buffer_fmt+0x2a>
 800dd20:	3307      	adds	r3, #7
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d0d3      	beq.n	800dcce <ai_array_to_buffer_fmt+0x2a>
 800dd26:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	bf18      	it	ne
 800dd2e:	2340      	movne	r3, #64	; 0x40
 800dd30:	e7ce      	b.n	800dcd0 <ai_array_to_buffer_fmt+0x2c>
 800dd32:	4b10      	ldr	r3, [pc, #64]	; (800dd74 <ai_array_to_buffer_fmt+0xd0>)
 800dd34:	429a      	cmp	r2, r3
 800dd36:	bf18      	it	ne
 800dd38:	2340      	movne	r3, #64	; 0x40
 800dd3a:	e7c9      	b.n	800dcd0 <ai_array_to_buffer_fmt+0x2c>
 800dd3c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d0c4      	beq.n	800dcce <ai_array_to_buffer_fmt+0x2a>
 800dd44:	3380      	adds	r3, #128	; 0x80
 800dd46:	429a      	cmp	r2, r3
 800dd48:	bf18      	it	ne
 800dd4a:	2340      	movne	r3, #64	; 0x40
 800dd4c:	e7c0      	b.n	800dcd0 <ai_array_to_buffer_fmt+0x2c>
 800dd4e:	4b0a      	ldr	r3, [pc, #40]	; (800dd78 <ai_array_to_buffer_fmt+0xd4>)
 800dd50:	4003      	ands	r3, r0
 800dd52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dd56:	e7bb      	b.n	800dcd0 <ai_array_to_buffer_fmt+0x2c>
 800dd58:	00840040 	.word	0x00840040
 800dd5c:	00040840 	.word	0x00040840
 800dd60:	00041040 	.word	0x00041040
 800dd64:	00040447 	.word	0x00040447
 800dd68:	00840840 	.word	0x00840840
 800dd6c:	00841040 	.word	0x00841040
 800dd70:	0084084f 	.word	0x0084084f
 800dd74:	0004084f 	.word	0x0004084f
 800dd78:	00803fff 	.word	0x00803fff

0800dd7c <ai_array_get_byte_size>:
 800dd7c:	b319      	cbz	r1, 800ddc6 <ai_array_get_byte_size+0x4a>
 800dd7e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800dd82:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800dd86:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800dd8a:	11c0      	asrs	r0, r0, #7
 800dd8c:	fb03 f101 	mul.w	r1, r3, r1
 800dd90:	2a04      	cmp	r2, #4
 800dd92:	f101 0107 	add.w	r1, r1, #7
 800dd96:	f021 0107 	bic.w	r1, r1, #7
 800dd9a:	fa21 f10c 	lsr.w	r1, r1, ip
 800dd9e:	d00b      	beq.n	800ddb8 <ai_array_get_byte_size+0x3c>
 800dda0:	2a08      	cmp	r2, #8
 800dda2:	d002      	beq.n	800ddaa <ai_array_get_byte_size+0x2e>
 800dda4:	3107      	adds	r1, #7
 800dda6:	08c8      	lsrs	r0, r1, #3
 800dda8:	4770      	bx	lr
 800ddaa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ddae:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800ddb2:	3107      	adds	r1, #7
 800ddb4:	08c8      	lsrs	r0, r1, #3
 800ddb6:	4770      	bx	lr
 800ddb8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ddbc:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800ddc0:	3107      	adds	r1, #7
 800ddc2:	08c8      	lsrs	r0, r1, #3
 800ddc4:	4770      	bx	lr
 800ddc6:	4608      	mov	r0, r1
 800ddc8:	4770      	bx	lr
 800ddca:	bf00      	nop

0800ddcc <ai_array_get_data_byte_size>:
 800ddcc:	b161      	cbz	r1, 800dde8 <ai_array_get_data_byte_size+0x1c>
 800ddce:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ddd2:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800ddd6:	fb03 f101 	mul.w	r1, r3, r1
 800ddda:	1dc8      	adds	r0, r1, #7
 800dddc:	f020 0007 	bic.w	r0, r0, #7
 800dde0:	40d0      	lsrs	r0, r2
 800dde2:	3007      	adds	r0, #7
 800dde4:	08c0      	lsrs	r0, r0, #3
 800dde6:	4770      	bx	lr
 800dde8:	4608      	mov	r0, r1
 800ddea:	4770      	bx	lr

0800ddec <core_get_broadcasted_shape>:
 800ddec:	b470      	push	{r4, r5, r6}
 800ddee:	6804      	ldr	r4, [r0, #0]
 800ddf0:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800ddf4:	b304      	cbz	r4, 800de38 <core_get_broadcasted_shape+0x4c>
 800ddf6:	4623      	mov	r3, r4
 800ddf8:	3b01      	subs	r3, #1
 800ddfa:	429c      	cmp	r4, r3
 800ddfc:	d917      	bls.n	800de2e <core_get_broadcasted_shape+0x42>
 800ddfe:	6815      	ldr	r5, [r2, #0]
 800de00:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800de04:	2401      	movs	r4, #1
 800de06:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 800de0a:	d202      	bcs.n	800de12 <core_get_broadcasted_shape+0x26>
 800de0c:	6854      	ldr	r4, [r2, #4]
 800de0e:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800de12:	680e      	ldr	r6, [r1, #0]
 800de14:	2501      	movs	r5, #1
 800de16:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 800de1a:	d202      	bcs.n	800de22 <core_get_broadcasted_shape+0x36>
 800de1c:	684d      	ldr	r5, [r1, #4]
 800de1e:	f855 500c 	ldr.w	r5, [r5, ip]
 800de22:	42ac      	cmp	r4, r5
 800de24:	bf38      	it	cc
 800de26:	462c      	movcc	r4, r5
 800de28:	6845      	ldr	r5, [r0, #4]
 800de2a:	f845 400c 	str.w	r4, [r5, ip]
 800de2e:	b11b      	cbz	r3, 800de38 <core_get_broadcasted_shape+0x4c>
 800de30:	6804      	ldr	r4, [r0, #0]
 800de32:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800de36:	e7df      	b.n	800ddf8 <core_get_broadcasted_shape+0xc>
 800de38:	bc70      	pop	{r4, r5, r6}
 800de3a:	4770      	bx	lr

0800de3c <core_compute_offsets_in_bytes>:
 800de3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de40:	e9d1 5c00 	ldrd	r5, ip, [r1]
 800de44:	6857      	ldr	r7, [r2, #4]
 800de46:	b085      	sub	sp, #20
 800de48:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800de4c:	687e      	ldr	r6, [r7, #4]
 800de4e:	1ba1      	subs	r1, r4, r6
 800de50:	bf18      	it	ne
 800de52:	2101      	movne	r1, #1
 800de54:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 800de58:	9101      	str	r1, [sp, #4]
 800de5a:	f0c0 809c 	bcc.w	800df96 <core_compute_offsets_in_bytes+0x15a>
 800de5e:	f8dc 9010 	ldr.w	r9, [ip, #16]
 800de62:	fb09 fe04 	mul.w	lr, r9, r4
 800de66:	6812      	ldr	r2, [r2, #0]
 800de68:	f8d0 b000 	ldr.w	fp, [r0]
 800de6c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800de70:	e9dc 5202 	ldrd	r5, r2, [ip, #8]
 800de74:	bf2c      	ite	cs
 800de76:	f8d7 a010 	ldrcs.w	sl, [r7, #16]
 800de7a:	f04f 0a01 	movcc.w	sl, #1
 800de7e:	9202      	str	r2, [sp, #8]
 800de80:	ebb9 0c0a 	subs.w	ip, r9, sl
 800de84:	e9d7 8202 	ldrd	r8, r2, [r7, #8]
 800de88:	bf18      	it	ne
 800de8a:	f04f 0c01 	movne.w	ip, #1
 800de8e:	ebb5 0708 	subs.w	r7, r5, r8
 800de92:	9203      	str	r2, [sp, #12]
 800de94:	f3cb 2217 	ubfx	r2, fp, #8, #24
 800de98:	bf18      	it	ne
 800de9a:	2701      	movne	r7, #1
 800de9c:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 800dea0:	d31f      	bcc.n	800dee2 <core_compute_offsets_in_bytes+0xa6>
 800dea2:	1ba2      	subs	r2, r4, r6
 800dea4:	6841      	ldr	r1, [r0, #4]
 800dea6:	fab2 f282 	clz	r2, r2
 800deaa:	0952      	lsrs	r2, r2, #5
 800deac:	604a      	str	r2, [r1, #4]
 800deae:	f8d0 b000 	ldr.w	fp, [r0]
 800deb2:	f5bb 6fa0 	cmp.w	fp, #1280	; 0x500
 800deb6:	f3cb 2217 	ubfx	r2, fp, #8, #24
 800deba:	d312      	bcc.n	800dee2 <core_compute_offsets_in_bytes+0xa6>
 800debc:	9a01      	ldr	r2, [sp, #4]
 800debe:	45d1      	cmp	r9, sl
 800dec0:	bf14      	ite	ne
 800dec2:	2200      	movne	r2, #0
 800dec4:	f002 0201 	andeq.w	r2, r2, #1
 800dec8:	42b4      	cmp	r4, r6
 800deca:	bf14      	ite	ne
 800decc:	f04f 0900 	movne.w	r9, #0
 800ded0:	f00c 0901 	andeq.w	r9, ip, #1
 800ded4:	6846      	ldr	r6, [r0, #4]
 800ded6:	fb04 2219 	mls	r2, r4, r9, r2
 800deda:	6132      	str	r2, [r6, #16]
 800dedc:	6802      	ldr	r2, [r0, #0]
 800dede:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800dee2:	2a02      	cmp	r2, #2
 800dee4:	fb0e f607 	mul.w	r6, lr, r7
 800dee8:	d90f      	bls.n	800df0a <core_compute_offsets_in_bytes+0xce>
 800deea:	9a01      	ldr	r2, [sp, #4]
 800deec:	4545      	cmp	r5, r8
 800deee:	bf14      	ite	ne
 800def0:	2200      	movne	r2, #0
 800def2:	f002 0201 	andeq.w	r2, r2, #1
 800def6:	ea0c 0202 	and.w	r2, ip, r2
 800defa:	1b92      	subs	r2, r2, r6
 800defc:	fb04 240c 	mla	r4, r4, ip, r2
 800df00:	6842      	ldr	r2, [r0, #4]
 800df02:	6094      	str	r4, [r2, #8]
 800df04:	6802      	ldr	r2, [r0, #0]
 800df06:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800df0a:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
 800df0e:	428c      	cmp	r4, r1
 800df10:	d13f      	bne.n	800df92 <core_compute_offsets_in_bytes+0x156>
 800df12:	2f00      	cmp	r7, #0
 800df14:	d03d      	beq.n	800df92 <core_compute_offsets_in_bytes+0x156>
 800df16:	9901      	ldr	r1, [sp, #4]
 800df18:	ea01 010c 	and.w	r1, r1, ip
 800df1c:	2a03      	cmp	r2, #3
 800df1e:	d910      	bls.n	800df42 <core_compute_offsets_in_bytes+0x106>
 800df20:	fb0e f505 	mul.w	r5, lr, r5
 800df24:	e9dd 2402 	ldrd	r2, r4, [sp, #8]
 800df28:	ebb2 0c04 	subs.w	ip, r2, r4
 800df2c:	6842      	ldr	r2, [r0, #4]
 800df2e:	bf18      	it	ne
 800df30:	f04f 0c01 	movne.w	ip, #1
 800df34:	fb0c 1115 	mls	r1, ip, r5, r1
 800df38:	440e      	add	r6, r1
 800df3a:	60d6      	str	r6, [r2, #12]
 800df3c:	6802      	ldr	r2, [r0, #0]
 800df3e:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800df42:	2a01      	cmp	r2, #1
 800df44:	d912      	bls.n	800df6c <core_compute_offsets_in_bytes+0x130>
 800df46:	6841      	ldr	r1, [r0, #4]
 800df48:	684a      	ldr	r2, [r1, #4]
 800df4a:	fb03 f202 	mul.w	r2, r3, r2
 800df4e:	604a      	str	r2, [r1, #4]
 800df50:	6801      	ldr	r1, [r0, #0]
 800df52:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 800df56:	f3c1 2217 	ubfx	r2, r1, #8, #24
 800df5a:	d307      	bcc.n	800df6c <core_compute_offsets_in_bytes+0x130>
 800df5c:	6841      	ldr	r1, [r0, #4]
 800df5e:	690a      	ldr	r2, [r1, #16]
 800df60:	fb03 f202 	mul.w	r2, r3, r2
 800df64:	610a      	str	r2, [r1, #16]
 800df66:	6802      	ldr	r2, [r0, #0]
 800df68:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800df6c:	2a02      	cmp	r2, #2
 800df6e:	d90d      	bls.n	800df8c <core_compute_offsets_in_bytes+0x150>
 800df70:	6841      	ldr	r1, [r0, #4]
 800df72:	688a      	ldr	r2, [r1, #8]
 800df74:	fb03 f202 	mul.w	r2, r3, r2
 800df78:	608a      	str	r2, [r1, #8]
 800df7a:	6802      	ldr	r2, [r0, #0]
 800df7c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800df80:	d304      	bcc.n	800df8c <core_compute_offsets_in_bytes+0x150>
 800df82:	6841      	ldr	r1, [r0, #4]
 800df84:	68ca      	ldr	r2, [r1, #12]
 800df86:	fb02 f303 	mul.w	r3, r2, r3
 800df8a:	60cb      	str	r3, [r1, #12]
 800df8c:	b005      	add	sp, #20
 800df8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df92:	2100      	movs	r1, #0
 800df94:	e7c2      	b.n	800df1c <core_compute_offsets_in_bytes+0xe0>
 800df96:	46a6      	mov	lr, r4
 800df98:	f04f 0901 	mov.w	r9, #1
 800df9c:	e763      	b.n	800de66 <core_compute_offsets_in_bytes+0x2a>
 800df9e:	bf00      	nop

0800dfa0 <core_tensor_clone>:
 800dfa0:	680b      	ldr	r3, [r1, #0]
 800dfa2:	6882      	ldr	r2, [r0, #8]
 800dfa4:	6003      	str	r3, [r0, #0]
 800dfa6:	684b      	ldr	r3, [r1, #4]
 800dfa8:	6043      	str	r3, [r0, #4]
 800dfaa:	698b      	ldr	r3, [r1, #24]
 800dfac:	6183      	str	r3, [r0, #24]
 800dfae:	688b      	ldr	r3, [r1, #8]
 800dfb0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800dfb4:	f363 221f 	bfi	r2, r3, #8, #24
 800dfb8:	b410      	push	{r4}
 800dfba:	6082      	str	r2, [r0, #8]
 800dfbc:	b15b      	cbz	r3, 800dfd6 <core_tensor_clone+0x36>
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	68cc      	ldr	r4, [r1, #12]
 800dfc2:	68c2      	ldr	r2, [r0, #12]
 800dfc4:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800dfc8:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800dfcc:	3301      	adds	r3, #1
 800dfce:	6882      	ldr	r2, [r0, #8]
 800dfd0:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800dfd4:	d3f4      	bcc.n	800dfc0 <core_tensor_clone+0x20>
 800dfd6:	690b      	ldr	r3, [r1, #16]
 800dfd8:	6902      	ldr	r2, [r0, #16]
 800dfda:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800dfde:	f363 221f 	bfi	r2, r3, #8, #24
 800dfe2:	6102      	str	r2, [r0, #16]
 800dfe4:	b15b      	cbz	r3, 800dffe <core_tensor_clone+0x5e>
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	694c      	ldr	r4, [r1, #20]
 800dfea:	6942      	ldr	r2, [r0, #20]
 800dfec:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800dff0:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800dff4:	3301      	adds	r3, #1
 800dff6:	6902      	ldr	r2, [r0, #16]
 800dff8:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800dffc:	d3f4      	bcc.n	800dfe8 <core_tensor_clone+0x48>
 800dffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <core_array_clone>:
 800e004:	4684      	mov	ip, r0
 800e006:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800e008:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop

0800e010 <__errno>:
 800e010:	4b01      	ldr	r3, [pc, #4]	; (800e018 <__errno+0x8>)
 800e012:	6818      	ldr	r0, [r3, #0]
 800e014:	4770      	bx	lr
 800e016:	bf00      	nop
 800e018:	24001f10 	.word	0x24001f10

0800e01c <__libc_init_array>:
 800e01c:	b570      	push	{r4, r5, r6, lr}
 800e01e:	4d0d      	ldr	r5, [pc, #52]	; (800e054 <__libc_init_array+0x38>)
 800e020:	4c0d      	ldr	r4, [pc, #52]	; (800e058 <__libc_init_array+0x3c>)
 800e022:	1b64      	subs	r4, r4, r5
 800e024:	10a4      	asrs	r4, r4, #2
 800e026:	2600      	movs	r6, #0
 800e028:	42a6      	cmp	r6, r4
 800e02a:	d109      	bne.n	800e040 <__libc_init_array+0x24>
 800e02c:	4d0b      	ldr	r5, [pc, #44]	; (800e05c <__libc_init_array+0x40>)
 800e02e:	4c0c      	ldr	r4, [pc, #48]	; (800e060 <__libc_init_array+0x44>)
 800e030:	f002 ff04 	bl	8010e3c <_init>
 800e034:	1b64      	subs	r4, r4, r5
 800e036:	10a4      	asrs	r4, r4, #2
 800e038:	2600      	movs	r6, #0
 800e03a:	42a6      	cmp	r6, r4
 800e03c:	d105      	bne.n	800e04a <__libc_init_array+0x2e>
 800e03e:	bd70      	pop	{r4, r5, r6, pc}
 800e040:	f855 3b04 	ldr.w	r3, [r5], #4
 800e044:	4798      	blx	r3
 800e046:	3601      	adds	r6, #1
 800e048:	e7ee      	b.n	800e028 <__libc_init_array+0xc>
 800e04a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e04e:	4798      	blx	r3
 800e050:	3601      	adds	r6, #1
 800e052:	e7f2      	b.n	800e03a <__libc_init_array+0x1e>
 800e054:	0806ff48 	.word	0x0806ff48
 800e058:	0806ff48 	.word	0x0806ff48
 800e05c:	0806ff48 	.word	0x0806ff48
 800e060:	0806ff4c 	.word	0x0806ff4c

0800e064 <malloc>:
 800e064:	4b02      	ldr	r3, [pc, #8]	; (800e070 <malloc+0xc>)
 800e066:	4601      	mov	r1, r0
 800e068:	6818      	ldr	r0, [r3, #0]
 800e06a:	f000 b869 	b.w	800e140 <_malloc_r>
 800e06e:	bf00      	nop
 800e070:	24001f10 	.word	0x24001f10

0800e074 <memcpy>:
 800e074:	440a      	add	r2, r1
 800e076:	4291      	cmp	r1, r2
 800e078:	f100 33ff 	add.w	r3, r0, #4294967295
 800e07c:	d100      	bne.n	800e080 <memcpy+0xc>
 800e07e:	4770      	bx	lr
 800e080:	b510      	push	{r4, lr}
 800e082:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e08a:	4291      	cmp	r1, r2
 800e08c:	d1f9      	bne.n	800e082 <memcpy+0xe>
 800e08e:	bd10      	pop	{r4, pc}

0800e090 <memset>:
 800e090:	4402      	add	r2, r0
 800e092:	4603      	mov	r3, r0
 800e094:	4293      	cmp	r3, r2
 800e096:	d100      	bne.n	800e09a <memset+0xa>
 800e098:	4770      	bx	lr
 800e09a:	f803 1b01 	strb.w	r1, [r3], #1
 800e09e:	e7f9      	b.n	800e094 <memset+0x4>

0800e0a0 <_free_r>:
 800e0a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0a2:	2900      	cmp	r1, #0
 800e0a4:	d048      	beq.n	800e138 <_free_r+0x98>
 800e0a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0aa:	9001      	str	r0, [sp, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f1a1 0404 	sub.w	r4, r1, #4
 800e0b2:	bfb8      	it	lt
 800e0b4:	18e4      	addlt	r4, r4, r3
 800e0b6:	f001 fb25 	bl	800f704 <__malloc_lock>
 800e0ba:	4a20      	ldr	r2, [pc, #128]	; (800e13c <_free_r+0x9c>)
 800e0bc:	9801      	ldr	r0, [sp, #4]
 800e0be:	6813      	ldr	r3, [r2, #0]
 800e0c0:	4615      	mov	r5, r2
 800e0c2:	b933      	cbnz	r3, 800e0d2 <_free_r+0x32>
 800e0c4:	6063      	str	r3, [r4, #4]
 800e0c6:	6014      	str	r4, [r2, #0]
 800e0c8:	b003      	add	sp, #12
 800e0ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0ce:	f001 bb1f 	b.w	800f710 <__malloc_unlock>
 800e0d2:	42a3      	cmp	r3, r4
 800e0d4:	d90b      	bls.n	800e0ee <_free_r+0x4e>
 800e0d6:	6821      	ldr	r1, [r4, #0]
 800e0d8:	1862      	adds	r2, r4, r1
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	bf04      	itt	eq
 800e0de:	681a      	ldreq	r2, [r3, #0]
 800e0e0:	685b      	ldreq	r3, [r3, #4]
 800e0e2:	6063      	str	r3, [r4, #4]
 800e0e4:	bf04      	itt	eq
 800e0e6:	1852      	addeq	r2, r2, r1
 800e0e8:	6022      	streq	r2, [r4, #0]
 800e0ea:	602c      	str	r4, [r5, #0]
 800e0ec:	e7ec      	b.n	800e0c8 <_free_r+0x28>
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	b10b      	cbz	r3, 800e0f8 <_free_r+0x58>
 800e0f4:	42a3      	cmp	r3, r4
 800e0f6:	d9fa      	bls.n	800e0ee <_free_r+0x4e>
 800e0f8:	6811      	ldr	r1, [r2, #0]
 800e0fa:	1855      	adds	r5, r2, r1
 800e0fc:	42a5      	cmp	r5, r4
 800e0fe:	d10b      	bne.n	800e118 <_free_r+0x78>
 800e100:	6824      	ldr	r4, [r4, #0]
 800e102:	4421      	add	r1, r4
 800e104:	1854      	adds	r4, r2, r1
 800e106:	42a3      	cmp	r3, r4
 800e108:	6011      	str	r1, [r2, #0]
 800e10a:	d1dd      	bne.n	800e0c8 <_free_r+0x28>
 800e10c:	681c      	ldr	r4, [r3, #0]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	6053      	str	r3, [r2, #4]
 800e112:	4421      	add	r1, r4
 800e114:	6011      	str	r1, [r2, #0]
 800e116:	e7d7      	b.n	800e0c8 <_free_r+0x28>
 800e118:	d902      	bls.n	800e120 <_free_r+0x80>
 800e11a:	230c      	movs	r3, #12
 800e11c:	6003      	str	r3, [r0, #0]
 800e11e:	e7d3      	b.n	800e0c8 <_free_r+0x28>
 800e120:	6825      	ldr	r5, [r4, #0]
 800e122:	1961      	adds	r1, r4, r5
 800e124:	428b      	cmp	r3, r1
 800e126:	bf04      	itt	eq
 800e128:	6819      	ldreq	r1, [r3, #0]
 800e12a:	685b      	ldreq	r3, [r3, #4]
 800e12c:	6063      	str	r3, [r4, #4]
 800e12e:	bf04      	itt	eq
 800e130:	1949      	addeq	r1, r1, r5
 800e132:	6021      	streq	r1, [r4, #0]
 800e134:	6054      	str	r4, [r2, #4]
 800e136:	e7c7      	b.n	800e0c8 <_free_r+0x28>
 800e138:	b003      	add	sp, #12
 800e13a:	bd30      	pop	{r4, r5, pc}
 800e13c:	24010ad8 	.word	0x24010ad8

0800e140 <_malloc_r>:
 800e140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e142:	1ccd      	adds	r5, r1, #3
 800e144:	f025 0503 	bic.w	r5, r5, #3
 800e148:	3508      	adds	r5, #8
 800e14a:	2d0c      	cmp	r5, #12
 800e14c:	bf38      	it	cc
 800e14e:	250c      	movcc	r5, #12
 800e150:	2d00      	cmp	r5, #0
 800e152:	4606      	mov	r6, r0
 800e154:	db01      	blt.n	800e15a <_malloc_r+0x1a>
 800e156:	42a9      	cmp	r1, r5
 800e158:	d903      	bls.n	800e162 <_malloc_r+0x22>
 800e15a:	230c      	movs	r3, #12
 800e15c:	6033      	str	r3, [r6, #0]
 800e15e:	2000      	movs	r0, #0
 800e160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e162:	f001 facf 	bl	800f704 <__malloc_lock>
 800e166:	4921      	ldr	r1, [pc, #132]	; (800e1ec <_malloc_r+0xac>)
 800e168:	680a      	ldr	r2, [r1, #0]
 800e16a:	4614      	mov	r4, r2
 800e16c:	b99c      	cbnz	r4, 800e196 <_malloc_r+0x56>
 800e16e:	4f20      	ldr	r7, [pc, #128]	; (800e1f0 <_malloc_r+0xb0>)
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	b923      	cbnz	r3, 800e17e <_malloc_r+0x3e>
 800e174:	4621      	mov	r1, r4
 800e176:	4630      	mov	r0, r6
 800e178:	f000 fc80 	bl	800ea7c <_sbrk_r>
 800e17c:	6038      	str	r0, [r7, #0]
 800e17e:	4629      	mov	r1, r5
 800e180:	4630      	mov	r0, r6
 800e182:	f000 fc7b 	bl	800ea7c <_sbrk_r>
 800e186:	1c43      	adds	r3, r0, #1
 800e188:	d123      	bne.n	800e1d2 <_malloc_r+0x92>
 800e18a:	230c      	movs	r3, #12
 800e18c:	6033      	str	r3, [r6, #0]
 800e18e:	4630      	mov	r0, r6
 800e190:	f001 fabe 	bl	800f710 <__malloc_unlock>
 800e194:	e7e3      	b.n	800e15e <_malloc_r+0x1e>
 800e196:	6823      	ldr	r3, [r4, #0]
 800e198:	1b5b      	subs	r3, r3, r5
 800e19a:	d417      	bmi.n	800e1cc <_malloc_r+0x8c>
 800e19c:	2b0b      	cmp	r3, #11
 800e19e:	d903      	bls.n	800e1a8 <_malloc_r+0x68>
 800e1a0:	6023      	str	r3, [r4, #0]
 800e1a2:	441c      	add	r4, r3
 800e1a4:	6025      	str	r5, [r4, #0]
 800e1a6:	e004      	b.n	800e1b2 <_malloc_r+0x72>
 800e1a8:	6863      	ldr	r3, [r4, #4]
 800e1aa:	42a2      	cmp	r2, r4
 800e1ac:	bf0c      	ite	eq
 800e1ae:	600b      	streq	r3, [r1, #0]
 800e1b0:	6053      	strne	r3, [r2, #4]
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	f001 faac 	bl	800f710 <__malloc_unlock>
 800e1b8:	f104 000b 	add.w	r0, r4, #11
 800e1bc:	1d23      	adds	r3, r4, #4
 800e1be:	f020 0007 	bic.w	r0, r0, #7
 800e1c2:	1ac2      	subs	r2, r0, r3
 800e1c4:	d0cc      	beq.n	800e160 <_malloc_r+0x20>
 800e1c6:	1a1b      	subs	r3, r3, r0
 800e1c8:	50a3      	str	r3, [r4, r2]
 800e1ca:	e7c9      	b.n	800e160 <_malloc_r+0x20>
 800e1cc:	4622      	mov	r2, r4
 800e1ce:	6864      	ldr	r4, [r4, #4]
 800e1d0:	e7cc      	b.n	800e16c <_malloc_r+0x2c>
 800e1d2:	1cc4      	adds	r4, r0, #3
 800e1d4:	f024 0403 	bic.w	r4, r4, #3
 800e1d8:	42a0      	cmp	r0, r4
 800e1da:	d0e3      	beq.n	800e1a4 <_malloc_r+0x64>
 800e1dc:	1a21      	subs	r1, r4, r0
 800e1de:	4630      	mov	r0, r6
 800e1e0:	f000 fc4c 	bl	800ea7c <_sbrk_r>
 800e1e4:	3001      	adds	r0, #1
 800e1e6:	d1dd      	bne.n	800e1a4 <_malloc_r+0x64>
 800e1e8:	e7cf      	b.n	800e18a <_malloc_r+0x4a>
 800e1ea:	bf00      	nop
 800e1ec:	24010ad8 	.word	0x24010ad8
 800e1f0:	24010adc 	.word	0x24010adc

0800e1f4 <__cvt>:
 800e1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1f6:	ed2d 8b02 	vpush	{d8}
 800e1fa:	eeb0 8b40 	vmov.f64	d8, d0
 800e1fe:	b085      	sub	sp, #20
 800e200:	4617      	mov	r7, r2
 800e202:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e204:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e206:	ee18 2a90 	vmov	r2, s17
 800e20a:	f025 0520 	bic.w	r5, r5, #32
 800e20e:	2a00      	cmp	r2, #0
 800e210:	bfb6      	itet	lt
 800e212:	222d      	movlt	r2, #45	; 0x2d
 800e214:	2200      	movge	r2, #0
 800e216:	eeb1 8b40 	vneglt.f64	d8, d0
 800e21a:	2d46      	cmp	r5, #70	; 0x46
 800e21c:	460c      	mov	r4, r1
 800e21e:	701a      	strb	r2, [r3, #0]
 800e220:	d004      	beq.n	800e22c <__cvt+0x38>
 800e222:	2d45      	cmp	r5, #69	; 0x45
 800e224:	d100      	bne.n	800e228 <__cvt+0x34>
 800e226:	3401      	adds	r4, #1
 800e228:	2102      	movs	r1, #2
 800e22a:	e000      	b.n	800e22e <__cvt+0x3a>
 800e22c:	2103      	movs	r1, #3
 800e22e:	ab03      	add	r3, sp, #12
 800e230:	9301      	str	r3, [sp, #4]
 800e232:	ab02      	add	r3, sp, #8
 800e234:	9300      	str	r3, [sp, #0]
 800e236:	4622      	mov	r2, r4
 800e238:	4633      	mov	r3, r6
 800e23a:	eeb0 0b48 	vmov.f64	d0, d8
 800e23e:	f000 fcdb 	bl	800ebf8 <_dtoa_r>
 800e242:	2d47      	cmp	r5, #71	; 0x47
 800e244:	d109      	bne.n	800e25a <__cvt+0x66>
 800e246:	07fb      	lsls	r3, r7, #31
 800e248:	d407      	bmi.n	800e25a <__cvt+0x66>
 800e24a:	9b03      	ldr	r3, [sp, #12]
 800e24c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e24e:	1a1b      	subs	r3, r3, r0
 800e250:	6013      	str	r3, [r2, #0]
 800e252:	b005      	add	sp, #20
 800e254:	ecbd 8b02 	vpop	{d8}
 800e258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e25a:	2d46      	cmp	r5, #70	; 0x46
 800e25c:	eb00 0204 	add.w	r2, r0, r4
 800e260:	d10c      	bne.n	800e27c <__cvt+0x88>
 800e262:	7803      	ldrb	r3, [r0, #0]
 800e264:	2b30      	cmp	r3, #48	; 0x30
 800e266:	d107      	bne.n	800e278 <__cvt+0x84>
 800e268:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e270:	bf1c      	itt	ne
 800e272:	f1c4 0401 	rsbne	r4, r4, #1
 800e276:	6034      	strne	r4, [r6, #0]
 800e278:	6833      	ldr	r3, [r6, #0]
 800e27a:	441a      	add	r2, r3
 800e27c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e284:	bf08      	it	eq
 800e286:	9203      	streq	r2, [sp, #12]
 800e288:	2130      	movs	r1, #48	; 0x30
 800e28a:	9b03      	ldr	r3, [sp, #12]
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d2dc      	bcs.n	800e24a <__cvt+0x56>
 800e290:	1c5c      	adds	r4, r3, #1
 800e292:	9403      	str	r4, [sp, #12]
 800e294:	7019      	strb	r1, [r3, #0]
 800e296:	e7f8      	b.n	800e28a <__cvt+0x96>

0800e298 <__exponent>:
 800e298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e29a:	4603      	mov	r3, r0
 800e29c:	2900      	cmp	r1, #0
 800e29e:	bfb8      	it	lt
 800e2a0:	4249      	neglt	r1, r1
 800e2a2:	f803 2b02 	strb.w	r2, [r3], #2
 800e2a6:	bfb4      	ite	lt
 800e2a8:	222d      	movlt	r2, #45	; 0x2d
 800e2aa:	222b      	movge	r2, #43	; 0x2b
 800e2ac:	2909      	cmp	r1, #9
 800e2ae:	7042      	strb	r2, [r0, #1]
 800e2b0:	dd2a      	ble.n	800e308 <__exponent+0x70>
 800e2b2:	f10d 0407 	add.w	r4, sp, #7
 800e2b6:	46a4      	mov	ip, r4
 800e2b8:	270a      	movs	r7, #10
 800e2ba:	46a6      	mov	lr, r4
 800e2bc:	460a      	mov	r2, r1
 800e2be:	fb91 f6f7 	sdiv	r6, r1, r7
 800e2c2:	fb07 1516 	mls	r5, r7, r6, r1
 800e2c6:	3530      	adds	r5, #48	; 0x30
 800e2c8:	2a63      	cmp	r2, #99	; 0x63
 800e2ca:	f104 34ff 	add.w	r4, r4, #4294967295
 800e2ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e2d2:	4631      	mov	r1, r6
 800e2d4:	dcf1      	bgt.n	800e2ba <__exponent+0x22>
 800e2d6:	3130      	adds	r1, #48	; 0x30
 800e2d8:	f1ae 0502 	sub.w	r5, lr, #2
 800e2dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e2e0:	1c44      	adds	r4, r0, #1
 800e2e2:	4629      	mov	r1, r5
 800e2e4:	4561      	cmp	r1, ip
 800e2e6:	d30a      	bcc.n	800e2fe <__exponent+0x66>
 800e2e8:	f10d 0209 	add.w	r2, sp, #9
 800e2ec:	eba2 020e 	sub.w	r2, r2, lr
 800e2f0:	4565      	cmp	r5, ip
 800e2f2:	bf88      	it	hi
 800e2f4:	2200      	movhi	r2, #0
 800e2f6:	4413      	add	r3, r2
 800e2f8:	1a18      	subs	r0, r3, r0
 800e2fa:	b003      	add	sp, #12
 800e2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e302:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e306:	e7ed      	b.n	800e2e4 <__exponent+0x4c>
 800e308:	2330      	movs	r3, #48	; 0x30
 800e30a:	3130      	adds	r1, #48	; 0x30
 800e30c:	7083      	strb	r3, [r0, #2]
 800e30e:	70c1      	strb	r1, [r0, #3]
 800e310:	1d03      	adds	r3, r0, #4
 800e312:	e7f1      	b.n	800e2f8 <__exponent+0x60>
 800e314:	0000      	movs	r0, r0
	...

0800e318 <_printf_float>:
 800e318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e31c:	b08b      	sub	sp, #44	; 0x2c
 800e31e:	460c      	mov	r4, r1
 800e320:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e324:	4616      	mov	r6, r2
 800e326:	461f      	mov	r7, r3
 800e328:	4605      	mov	r5, r0
 800e32a:	f001 f9e7 	bl	800f6fc <_localeconv_r>
 800e32e:	f8d0 b000 	ldr.w	fp, [r0]
 800e332:	4658      	mov	r0, fp
 800e334:	f7f1 ffdc 	bl	80002f0 <strlen>
 800e338:	2300      	movs	r3, #0
 800e33a:	9308      	str	r3, [sp, #32]
 800e33c:	f8d8 3000 	ldr.w	r3, [r8]
 800e340:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e344:	6822      	ldr	r2, [r4, #0]
 800e346:	3307      	adds	r3, #7
 800e348:	f023 0307 	bic.w	r3, r3, #7
 800e34c:	f103 0108 	add.w	r1, r3, #8
 800e350:	f8c8 1000 	str.w	r1, [r8]
 800e354:	4682      	mov	sl, r0
 800e356:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e35a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e35e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800e5c0 <_printf_float+0x2a8>
 800e362:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e366:	eeb0 6bc0 	vabs.f64	d6, d0
 800e36a:	eeb4 6b47 	vcmp.f64	d6, d7
 800e36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e372:	dd24      	ble.n	800e3be <_printf_float+0xa6>
 800e374:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e37c:	d502      	bpl.n	800e384 <_printf_float+0x6c>
 800e37e:	232d      	movs	r3, #45	; 0x2d
 800e380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e384:	4b90      	ldr	r3, [pc, #576]	; (800e5c8 <_printf_float+0x2b0>)
 800e386:	4891      	ldr	r0, [pc, #580]	; (800e5cc <_printf_float+0x2b4>)
 800e388:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e38c:	bf94      	ite	ls
 800e38e:	4698      	movls	r8, r3
 800e390:	4680      	movhi	r8, r0
 800e392:	2303      	movs	r3, #3
 800e394:	6123      	str	r3, [r4, #16]
 800e396:	f022 0204 	bic.w	r2, r2, #4
 800e39a:	2300      	movs	r3, #0
 800e39c:	6022      	str	r2, [r4, #0]
 800e39e:	9304      	str	r3, [sp, #16]
 800e3a0:	9700      	str	r7, [sp, #0]
 800e3a2:	4633      	mov	r3, r6
 800e3a4:	aa09      	add	r2, sp, #36	; 0x24
 800e3a6:	4621      	mov	r1, r4
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	f000 f9d3 	bl	800e754 <_printf_common>
 800e3ae:	3001      	adds	r0, #1
 800e3b0:	f040 808a 	bne.w	800e4c8 <_printf_float+0x1b0>
 800e3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3b8:	b00b      	add	sp, #44	; 0x2c
 800e3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3be:	eeb4 0b40 	vcmp.f64	d0, d0
 800e3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c6:	d709      	bvc.n	800e3dc <_printf_float+0xc4>
 800e3c8:	ee10 3a90 	vmov	r3, s1
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	bfbc      	itt	lt
 800e3d0:	232d      	movlt	r3, #45	; 0x2d
 800e3d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e3d6:	487e      	ldr	r0, [pc, #504]	; (800e5d0 <_printf_float+0x2b8>)
 800e3d8:	4b7e      	ldr	r3, [pc, #504]	; (800e5d4 <_printf_float+0x2bc>)
 800e3da:	e7d5      	b.n	800e388 <_printf_float+0x70>
 800e3dc:	6863      	ldr	r3, [r4, #4]
 800e3de:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e3e2:	9104      	str	r1, [sp, #16]
 800e3e4:	1c59      	adds	r1, r3, #1
 800e3e6:	d13c      	bne.n	800e462 <_printf_float+0x14a>
 800e3e8:	2306      	movs	r3, #6
 800e3ea:	6063      	str	r3, [r4, #4]
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	9303      	str	r3, [sp, #12]
 800e3f0:	ab08      	add	r3, sp, #32
 800e3f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e3f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e3fa:	ab07      	add	r3, sp, #28
 800e3fc:	6861      	ldr	r1, [r4, #4]
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	6022      	str	r2, [r4, #0]
 800e402:	f10d 031b 	add.w	r3, sp, #27
 800e406:	4628      	mov	r0, r5
 800e408:	f7ff fef4 	bl	800e1f4 <__cvt>
 800e40c:	9b04      	ldr	r3, [sp, #16]
 800e40e:	9907      	ldr	r1, [sp, #28]
 800e410:	2b47      	cmp	r3, #71	; 0x47
 800e412:	4680      	mov	r8, r0
 800e414:	d108      	bne.n	800e428 <_printf_float+0x110>
 800e416:	1cc8      	adds	r0, r1, #3
 800e418:	db02      	blt.n	800e420 <_printf_float+0x108>
 800e41a:	6863      	ldr	r3, [r4, #4]
 800e41c:	4299      	cmp	r1, r3
 800e41e:	dd41      	ble.n	800e4a4 <_printf_float+0x18c>
 800e420:	f1a9 0902 	sub.w	r9, r9, #2
 800e424:	fa5f f989 	uxtb.w	r9, r9
 800e428:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e42c:	d820      	bhi.n	800e470 <_printf_float+0x158>
 800e42e:	3901      	subs	r1, #1
 800e430:	464a      	mov	r2, r9
 800e432:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e436:	9107      	str	r1, [sp, #28]
 800e438:	f7ff ff2e 	bl	800e298 <__exponent>
 800e43c:	9a08      	ldr	r2, [sp, #32]
 800e43e:	9004      	str	r0, [sp, #16]
 800e440:	1813      	adds	r3, r2, r0
 800e442:	2a01      	cmp	r2, #1
 800e444:	6123      	str	r3, [r4, #16]
 800e446:	dc02      	bgt.n	800e44e <_printf_float+0x136>
 800e448:	6822      	ldr	r2, [r4, #0]
 800e44a:	07d2      	lsls	r2, r2, #31
 800e44c:	d501      	bpl.n	800e452 <_printf_float+0x13a>
 800e44e:	3301      	adds	r3, #1
 800e450:	6123      	str	r3, [r4, #16]
 800e452:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d0a2      	beq.n	800e3a0 <_printf_float+0x88>
 800e45a:	232d      	movs	r3, #45	; 0x2d
 800e45c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e460:	e79e      	b.n	800e3a0 <_printf_float+0x88>
 800e462:	9904      	ldr	r1, [sp, #16]
 800e464:	2947      	cmp	r1, #71	; 0x47
 800e466:	d1c1      	bne.n	800e3ec <_printf_float+0xd4>
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d1bf      	bne.n	800e3ec <_printf_float+0xd4>
 800e46c:	2301      	movs	r3, #1
 800e46e:	e7bc      	b.n	800e3ea <_printf_float+0xd2>
 800e470:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e474:	d118      	bne.n	800e4a8 <_printf_float+0x190>
 800e476:	2900      	cmp	r1, #0
 800e478:	6863      	ldr	r3, [r4, #4]
 800e47a:	dd0b      	ble.n	800e494 <_printf_float+0x17c>
 800e47c:	6121      	str	r1, [r4, #16]
 800e47e:	b913      	cbnz	r3, 800e486 <_printf_float+0x16e>
 800e480:	6822      	ldr	r2, [r4, #0]
 800e482:	07d0      	lsls	r0, r2, #31
 800e484:	d502      	bpl.n	800e48c <_printf_float+0x174>
 800e486:	3301      	adds	r3, #1
 800e488:	440b      	add	r3, r1
 800e48a:	6123      	str	r3, [r4, #16]
 800e48c:	2300      	movs	r3, #0
 800e48e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e490:	9304      	str	r3, [sp, #16]
 800e492:	e7de      	b.n	800e452 <_printf_float+0x13a>
 800e494:	b913      	cbnz	r3, 800e49c <_printf_float+0x184>
 800e496:	6822      	ldr	r2, [r4, #0]
 800e498:	07d2      	lsls	r2, r2, #31
 800e49a:	d501      	bpl.n	800e4a0 <_printf_float+0x188>
 800e49c:	3302      	adds	r3, #2
 800e49e:	e7f4      	b.n	800e48a <_printf_float+0x172>
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	e7f2      	b.n	800e48a <_printf_float+0x172>
 800e4a4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e4a8:	9b08      	ldr	r3, [sp, #32]
 800e4aa:	4299      	cmp	r1, r3
 800e4ac:	db05      	blt.n	800e4ba <_printf_float+0x1a2>
 800e4ae:	6823      	ldr	r3, [r4, #0]
 800e4b0:	6121      	str	r1, [r4, #16]
 800e4b2:	07d8      	lsls	r0, r3, #31
 800e4b4:	d5ea      	bpl.n	800e48c <_printf_float+0x174>
 800e4b6:	1c4b      	adds	r3, r1, #1
 800e4b8:	e7e7      	b.n	800e48a <_printf_float+0x172>
 800e4ba:	2900      	cmp	r1, #0
 800e4bc:	bfd4      	ite	le
 800e4be:	f1c1 0202 	rsble	r2, r1, #2
 800e4c2:	2201      	movgt	r2, #1
 800e4c4:	4413      	add	r3, r2
 800e4c6:	e7e0      	b.n	800e48a <_printf_float+0x172>
 800e4c8:	6823      	ldr	r3, [r4, #0]
 800e4ca:	055a      	lsls	r2, r3, #21
 800e4cc:	d407      	bmi.n	800e4de <_printf_float+0x1c6>
 800e4ce:	6923      	ldr	r3, [r4, #16]
 800e4d0:	4642      	mov	r2, r8
 800e4d2:	4631      	mov	r1, r6
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	47b8      	blx	r7
 800e4d8:	3001      	adds	r0, #1
 800e4da:	d12a      	bne.n	800e532 <_printf_float+0x21a>
 800e4dc:	e76a      	b.n	800e3b4 <_printf_float+0x9c>
 800e4de:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e4e2:	f240 80e2 	bls.w	800e6aa <_printf_float+0x392>
 800e4e6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e4ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f2:	d133      	bne.n	800e55c <_printf_float+0x244>
 800e4f4:	4a38      	ldr	r2, [pc, #224]	; (800e5d8 <_printf_float+0x2c0>)
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	4631      	mov	r1, r6
 800e4fa:	4628      	mov	r0, r5
 800e4fc:	47b8      	blx	r7
 800e4fe:	3001      	adds	r0, #1
 800e500:	f43f af58 	beq.w	800e3b4 <_printf_float+0x9c>
 800e504:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e508:	429a      	cmp	r2, r3
 800e50a:	db02      	blt.n	800e512 <_printf_float+0x1fa>
 800e50c:	6823      	ldr	r3, [r4, #0]
 800e50e:	07d8      	lsls	r0, r3, #31
 800e510:	d50f      	bpl.n	800e532 <_printf_float+0x21a>
 800e512:	4653      	mov	r3, sl
 800e514:	465a      	mov	r2, fp
 800e516:	4631      	mov	r1, r6
 800e518:	4628      	mov	r0, r5
 800e51a:	47b8      	blx	r7
 800e51c:	3001      	adds	r0, #1
 800e51e:	f43f af49 	beq.w	800e3b4 <_printf_float+0x9c>
 800e522:	f04f 0800 	mov.w	r8, #0
 800e526:	f104 091a 	add.w	r9, r4, #26
 800e52a:	9b08      	ldr	r3, [sp, #32]
 800e52c:	3b01      	subs	r3, #1
 800e52e:	4543      	cmp	r3, r8
 800e530:	dc09      	bgt.n	800e546 <_printf_float+0x22e>
 800e532:	6823      	ldr	r3, [r4, #0]
 800e534:	079b      	lsls	r3, r3, #30
 800e536:	f100 8108 	bmi.w	800e74a <_printf_float+0x432>
 800e53a:	68e0      	ldr	r0, [r4, #12]
 800e53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e53e:	4298      	cmp	r0, r3
 800e540:	bfb8      	it	lt
 800e542:	4618      	movlt	r0, r3
 800e544:	e738      	b.n	800e3b8 <_printf_float+0xa0>
 800e546:	2301      	movs	r3, #1
 800e548:	464a      	mov	r2, r9
 800e54a:	4631      	mov	r1, r6
 800e54c:	4628      	mov	r0, r5
 800e54e:	47b8      	blx	r7
 800e550:	3001      	adds	r0, #1
 800e552:	f43f af2f 	beq.w	800e3b4 <_printf_float+0x9c>
 800e556:	f108 0801 	add.w	r8, r8, #1
 800e55a:	e7e6      	b.n	800e52a <_printf_float+0x212>
 800e55c:	9b07      	ldr	r3, [sp, #28]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	dc3c      	bgt.n	800e5dc <_printf_float+0x2c4>
 800e562:	4a1d      	ldr	r2, [pc, #116]	; (800e5d8 <_printf_float+0x2c0>)
 800e564:	2301      	movs	r3, #1
 800e566:	4631      	mov	r1, r6
 800e568:	4628      	mov	r0, r5
 800e56a:	47b8      	blx	r7
 800e56c:	3001      	adds	r0, #1
 800e56e:	f43f af21 	beq.w	800e3b4 <_printf_float+0x9c>
 800e572:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e576:	4313      	orrs	r3, r2
 800e578:	d102      	bne.n	800e580 <_printf_float+0x268>
 800e57a:	6823      	ldr	r3, [r4, #0]
 800e57c:	07d9      	lsls	r1, r3, #31
 800e57e:	d5d8      	bpl.n	800e532 <_printf_float+0x21a>
 800e580:	4653      	mov	r3, sl
 800e582:	465a      	mov	r2, fp
 800e584:	4631      	mov	r1, r6
 800e586:	4628      	mov	r0, r5
 800e588:	47b8      	blx	r7
 800e58a:	3001      	adds	r0, #1
 800e58c:	f43f af12 	beq.w	800e3b4 <_printf_float+0x9c>
 800e590:	f04f 0900 	mov.w	r9, #0
 800e594:	f104 0a1a 	add.w	sl, r4, #26
 800e598:	9b07      	ldr	r3, [sp, #28]
 800e59a:	425b      	negs	r3, r3
 800e59c:	454b      	cmp	r3, r9
 800e59e:	dc01      	bgt.n	800e5a4 <_printf_float+0x28c>
 800e5a0:	9b08      	ldr	r3, [sp, #32]
 800e5a2:	e795      	b.n	800e4d0 <_printf_float+0x1b8>
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	4652      	mov	r2, sl
 800e5a8:	4631      	mov	r1, r6
 800e5aa:	4628      	mov	r0, r5
 800e5ac:	47b8      	blx	r7
 800e5ae:	3001      	adds	r0, #1
 800e5b0:	f43f af00 	beq.w	800e3b4 <_printf_float+0x9c>
 800e5b4:	f109 0901 	add.w	r9, r9, #1
 800e5b8:	e7ee      	b.n	800e598 <_printf_float+0x280>
 800e5ba:	bf00      	nop
 800e5bc:	f3af 8000 	nop.w
 800e5c0:	ffffffff 	.word	0xffffffff
 800e5c4:	7fefffff 	.word	0x7fefffff
 800e5c8:	0806fa14 	.word	0x0806fa14
 800e5cc:	0806fa18 	.word	0x0806fa18
 800e5d0:	0806fa20 	.word	0x0806fa20
 800e5d4:	0806fa1c 	.word	0x0806fa1c
 800e5d8:	0806fa24 	.word	0x0806fa24
 800e5dc:	9a08      	ldr	r2, [sp, #32]
 800e5de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	bfa8      	it	ge
 800e5e4:	461a      	movge	r2, r3
 800e5e6:	2a00      	cmp	r2, #0
 800e5e8:	4691      	mov	r9, r2
 800e5ea:	dc38      	bgt.n	800e65e <_printf_float+0x346>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	9305      	str	r3, [sp, #20]
 800e5f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e5f4:	f104 021a 	add.w	r2, r4, #26
 800e5f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e5fa:	9905      	ldr	r1, [sp, #20]
 800e5fc:	9304      	str	r3, [sp, #16]
 800e5fe:	eba3 0309 	sub.w	r3, r3, r9
 800e602:	428b      	cmp	r3, r1
 800e604:	dc33      	bgt.n	800e66e <_printf_float+0x356>
 800e606:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	db3c      	blt.n	800e688 <_printf_float+0x370>
 800e60e:	6823      	ldr	r3, [r4, #0]
 800e610:	07da      	lsls	r2, r3, #31
 800e612:	d439      	bmi.n	800e688 <_printf_float+0x370>
 800e614:	9a08      	ldr	r2, [sp, #32]
 800e616:	9b04      	ldr	r3, [sp, #16]
 800e618:	9907      	ldr	r1, [sp, #28]
 800e61a:	1ad3      	subs	r3, r2, r3
 800e61c:	eba2 0901 	sub.w	r9, r2, r1
 800e620:	4599      	cmp	r9, r3
 800e622:	bfa8      	it	ge
 800e624:	4699      	movge	r9, r3
 800e626:	f1b9 0f00 	cmp.w	r9, #0
 800e62a:	dc35      	bgt.n	800e698 <_printf_float+0x380>
 800e62c:	f04f 0800 	mov.w	r8, #0
 800e630:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e634:	f104 0a1a 	add.w	sl, r4, #26
 800e638:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e63c:	1a9b      	subs	r3, r3, r2
 800e63e:	eba3 0309 	sub.w	r3, r3, r9
 800e642:	4543      	cmp	r3, r8
 800e644:	f77f af75 	ble.w	800e532 <_printf_float+0x21a>
 800e648:	2301      	movs	r3, #1
 800e64a:	4652      	mov	r2, sl
 800e64c:	4631      	mov	r1, r6
 800e64e:	4628      	mov	r0, r5
 800e650:	47b8      	blx	r7
 800e652:	3001      	adds	r0, #1
 800e654:	f43f aeae 	beq.w	800e3b4 <_printf_float+0x9c>
 800e658:	f108 0801 	add.w	r8, r8, #1
 800e65c:	e7ec      	b.n	800e638 <_printf_float+0x320>
 800e65e:	4613      	mov	r3, r2
 800e660:	4631      	mov	r1, r6
 800e662:	4642      	mov	r2, r8
 800e664:	4628      	mov	r0, r5
 800e666:	47b8      	blx	r7
 800e668:	3001      	adds	r0, #1
 800e66a:	d1bf      	bne.n	800e5ec <_printf_float+0x2d4>
 800e66c:	e6a2      	b.n	800e3b4 <_printf_float+0x9c>
 800e66e:	2301      	movs	r3, #1
 800e670:	4631      	mov	r1, r6
 800e672:	4628      	mov	r0, r5
 800e674:	9204      	str	r2, [sp, #16]
 800e676:	47b8      	blx	r7
 800e678:	3001      	adds	r0, #1
 800e67a:	f43f ae9b 	beq.w	800e3b4 <_printf_float+0x9c>
 800e67e:	9b05      	ldr	r3, [sp, #20]
 800e680:	9a04      	ldr	r2, [sp, #16]
 800e682:	3301      	adds	r3, #1
 800e684:	9305      	str	r3, [sp, #20]
 800e686:	e7b7      	b.n	800e5f8 <_printf_float+0x2e0>
 800e688:	4653      	mov	r3, sl
 800e68a:	465a      	mov	r2, fp
 800e68c:	4631      	mov	r1, r6
 800e68e:	4628      	mov	r0, r5
 800e690:	47b8      	blx	r7
 800e692:	3001      	adds	r0, #1
 800e694:	d1be      	bne.n	800e614 <_printf_float+0x2fc>
 800e696:	e68d      	b.n	800e3b4 <_printf_float+0x9c>
 800e698:	9a04      	ldr	r2, [sp, #16]
 800e69a:	464b      	mov	r3, r9
 800e69c:	4442      	add	r2, r8
 800e69e:	4631      	mov	r1, r6
 800e6a0:	4628      	mov	r0, r5
 800e6a2:	47b8      	blx	r7
 800e6a4:	3001      	adds	r0, #1
 800e6a6:	d1c1      	bne.n	800e62c <_printf_float+0x314>
 800e6a8:	e684      	b.n	800e3b4 <_printf_float+0x9c>
 800e6aa:	9a08      	ldr	r2, [sp, #32]
 800e6ac:	2a01      	cmp	r2, #1
 800e6ae:	dc01      	bgt.n	800e6b4 <_printf_float+0x39c>
 800e6b0:	07db      	lsls	r3, r3, #31
 800e6b2:	d537      	bpl.n	800e724 <_printf_float+0x40c>
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	4642      	mov	r2, r8
 800e6b8:	4631      	mov	r1, r6
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	47b8      	blx	r7
 800e6be:	3001      	adds	r0, #1
 800e6c0:	f43f ae78 	beq.w	800e3b4 <_printf_float+0x9c>
 800e6c4:	4653      	mov	r3, sl
 800e6c6:	465a      	mov	r2, fp
 800e6c8:	4631      	mov	r1, r6
 800e6ca:	4628      	mov	r0, r5
 800e6cc:	47b8      	blx	r7
 800e6ce:	3001      	adds	r0, #1
 800e6d0:	f43f ae70 	beq.w	800e3b4 <_printf_float+0x9c>
 800e6d4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e6d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6e0:	d01b      	beq.n	800e71a <_printf_float+0x402>
 800e6e2:	9b08      	ldr	r3, [sp, #32]
 800e6e4:	f108 0201 	add.w	r2, r8, #1
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	4631      	mov	r1, r6
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	47b8      	blx	r7
 800e6f0:	3001      	adds	r0, #1
 800e6f2:	d10e      	bne.n	800e712 <_printf_float+0x3fa>
 800e6f4:	e65e      	b.n	800e3b4 <_printf_float+0x9c>
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	464a      	mov	r2, r9
 800e6fa:	4631      	mov	r1, r6
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	47b8      	blx	r7
 800e700:	3001      	adds	r0, #1
 800e702:	f43f ae57 	beq.w	800e3b4 <_printf_float+0x9c>
 800e706:	f108 0801 	add.w	r8, r8, #1
 800e70a:	9b08      	ldr	r3, [sp, #32]
 800e70c:	3b01      	subs	r3, #1
 800e70e:	4543      	cmp	r3, r8
 800e710:	dcf1      	bgt.n	800e6f6 <_printf_float+0x3de>
 800e712:	9b04      	ldr	r3, [sp, #16]
 800e714:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e718:	e6db      	b.n	800e4d2 <_printf_float+0x1ba>
 800e71a:	f04f 0800 	mov.w	r8, #0
 800e71e:	f104 091a 	add.w	r9, r4, #26
 800e722:	e7f2      	b.n	800e70a <_printf_float+0x3f2>
 800e724:	2301      	movs	r3, #1
 800e726:	4642      	mov	r2, r8
 800e728:	e7df      	b.n	800e6ea <_printf_float+0x3d2>
 800e72a:	2301      	movs	r3, #1
 800e72c:	464a      	mov	r2, r9
 800e72e:	4631      	mov	r1, r6
 800e730:	4628      	mov	r0, r5
 800e732:	47b8      	blx	r7
 800e734:	3001      	adds	r0, #1
 800e736:	f43f ae3d 	beq.w	800e3b4 <_printf_float+0x9c>
 800e73a:	f108 0801 	add.w	r8, r8, #1
 800e73e:	68e3      	ldr	r3, [r4, #12]
 800e740:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e742:	1a5b      	subs	r3, r3, r1
 800e744:	4543      	cmp	r3, r8
 800e746:	dcf0      	bgt.n	800e72a <_printf_float+0x412>
 800e748:	e6f7      	b.n	800e53a <_printf_float+0x222>
 800e74a:	f04f 0800 	mov.w	r8, #0
 800e74e:	f104 0919 	add.w	r9, r4, #25
 800e752:	e7f4      	b.n	800e73e <_printf_float+0x426>

0800e754 <_printf_common>:
 800e754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e758:	4616      	mov	r6, r2
 800e75a:	4699      	mov	r9, r3
 800e75c:	688a      	ldr	r2, [r1, #8]
 800e75e:	690b      	ldr	r3, [r1, #16]
 800e760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e764:	4293      	cmp	r3, r2
 800e766:	bfb8      	it	lt
 800e768:	4613      	movlt	r3, r2
 800e76a:	6033      	str	r3, [r6, #0]
 800e76c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e770:	4607      	mov	r7, r0
 800e772:	460c      	mov	r4, r1
 800e774:	b10a      	cbz	r2, 800e77a <_printf_common+0x26>
 800e776:	3301      	adds	r3, #1
 800e778:	6033      	str	r3, [r6, #0]
 800e77a:	6823      	ldr	r3, [r4, #0]
 800e77c:	0699      	lsls	r1, r3, #26
 800e77e:	bf42      	ittt	mi
 800e780:	6833      	ldrmi	r3, [r6, #0]
 800e782:	3302      	addmi	r3, #2
 800e784:	6033      	strmi	r3, [r6, #0]
 800e786:	6825      	ldr	r5, [r4, #0]
 800e788:	f015 0506 	ands.w	r5, r5, #6
 800e78c:	d106      	bne.n	800e79c <_printf_common+0x48>
 800e78e:	f104 0a19 	add.w	sl, r4, #25
 800e792:	68e3      	ldr	r3, [r4, #12]
 800e794:	6832      	ldr	r2, [r6, #0]
 800e796:	1a9b      	subs	r3, r3, r2
 800e798:	42ab      	cmp	r3, r5
 800e79a:	dc26      	bgt.n	800e7ea <_printf_common+0x96>
 800e79c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e7a0:	1e13      	subs	r3, r2, #0
 800e7a2:	6822      	ldr	r2, [r4, #0]
 800e7a4:	bf18      	it	ne
 800e7a6:	2301      	movne	r3, #1
 800e7a8:	0692      	lsls	r2, r2, #26
 800e7aa:	d42b      	bmi.n	800e804 <_printf_common+0xb0>
 800e7ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7b0:	4649      	mov	r1, r9
 800e7b2:	4638      	mov	r0, r7
 800e7b4:	47c0      	blx	r8
 800e7b6:	3001      	adds	r0, #1
 800e7b8:	d01e      	beq.n	800e7f8 <_printf_common+0xa4>
 800e7ba:	6823      	ldr	r3, [r4, #0]
 800e7bc:	68e5      	ldr	r5, [r4, #12]
 800e7be:	6832      	ldr	r2, [r6, #0]
 800e7c0:	f003 0306 	and.w	r3, r3, #6
 800e7c4:	2b04      	cmp	r3, #4
 800e7c6:	bf08      	it	eq
 800e7c8:	1aad      	subeq	r5, r5, r2
 800e7ca:	68a3      	ldr	r3, [r4, #8]
 800e7cc:	6922      	ldr	r2, [r4, #16]
 800e7ce:	bf0c      	ite	eq
 800e7d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7d4:	2500      	movne	r5, #0
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	bfc4      	itt	gt
 800e7da:	1a9b      	subgt	r3, r3, r2
 800e7dc:	18ed      	addgt	r5, r5, r3
 800e7de:	2600      	movs	r6, #0
 800e7e0:	341a      	adds	r4, #26
 800e7e2:	42b5      	cmp	r5, r6
 800e7e4:	d11a      	bne.n	800e81c <_printf_common+0xc8>
 800e7e6:	2000      	movs	r0, #0
 800e7e8:	e008      	b.n	800e7fc <_printf_common+0xa8>
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	4652      	mov	r2, sl
 800e7ee:	4649      	mov	r1, r9
 800e7f0:	4638      	mov	r0, r7
 800e7f2:	47c0      	blx	r8
 800e7f4:	3001      	adds	r0, #1
 800e7f6:	d103      	bne.n	800e800 <_printf_common+0xac>
 800e7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e800:	3501      	adds	r5, #1
 800e802:	e7c6      	b.n	800e792 <_printf_common+0x3e>
 800e804:	18e1      	adds	r1, r4, r3
 800e806:	1c5a      	adds	r2, r3, #1
 800e808:	2030      	movs	r0, #48	; 0x30
 800e80a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e80e:	4422      	add	r2, r4
 800e810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e818:	3302      	adds	r3, #2
 800e81a:	e7c7      	b.n	800e7ac <_printf_common+0x58>
 800e81c:	2301      	movs	r3, #1
 800e81e:	4622      	mov	r2, r4
 800e820:	4649      	mov	r1, r9
 800e822:	4638      	mov	r0, r7
 800e824:	47c0      	blx	r8
 800e826:	3001      	adds	r0, #1
 800e828:	d0e6      	beq.n	800e7f8 <_printf_common+0xa4>
 800e82a:	3601      	adds	r6, #1
 800e82c:	e7d9      	b.n	800e7e2 <_printf_common+0x8e>
	...

0800e830 <_printf_i>:
 800e830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e834:	460c      	mov	r4, r1
 800e836:	4691      	mov	r9, r2
 800e838:	7e27      	ldrb	r7, [r4, #24]
 800e83a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e83c:	2f78      	cmp	r7, #120	; 0x78
 800e83e:	4680      	mov	r8, r0
 800e840:	469a      	mov	sl, r3
 800e842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e846:	d807      	bhi.n	800e858 <_printf_i+0x28>
 800e848:	2f62      	cmp	r7, #98	; 0x62
 800e84a:	d80a      	bhi.n	800e862 <_printf_i+0x32>
 800e84c:	2f00      	cmp	r7, #0
 800e84e:	f000 80d8 	beq.w	800ea02 <_printf_i+0x1d2>
 800e852:	2f58      	cmp	r7, #88	; 0x58
 800e854:	f000 80a3 	beq.w	800e99e <_printf_i+0x16e>
 800e858:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e85c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e860:	e03a      	b.n	800e8d8 <_printf_i+0xa8>
 800e862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e866:	2b15      	cmp	r3, #21
 800e868:	d8f6      	bhi.n	800e858 <_printf_i+0x28>
 800e86a:	a001      	add	r0, pc, #4	; (adr r0, 800e870 <_printf_i+0x40>)
 800e86c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e870:	0800e8c9 	.word	0x0800e8c9
 800e874:	0800e8dd 	.word	0x0800e8dd
 800e878:	0800e859 	.word	0x0800e859
 800e87c:	0800e859 	.word	0x0800e859
 800e880:	0800e859 	.word	0x0800e859
 800e884:	0800e859 	.word	0x0800e859
 800e888:	0800e8dd 	.word	0x0800e8dd
 800e88c:	0800e859 	.word	0x0800e859
 800e890:	0800e859 	.word	0x0800e859
 800e894:	0800e859 	.word	0x0800e859
 800e898:	0800e859 	.word	0x0800e859
 800e89c:	0800e9e9 	.word	0x0800e9e9
 800e8a0:	0800e90d 	.word	0x0800e90d
 800e8a4:	0800e9cb 	.word	0x0800e9cb
 800e8a8:	0800e859 	.word	0x0800e859
 800e8ac:	0800e859 	.word	0x0800e859
 800e8b0:	0800ea0b 	.word	0x0800ea0b
 800e8b4:	0800e859 	.word	0x0800e859
 800e8b8:	0800e90d 	.word	0x0800e90d
 800e8bc:	0800e859 	.word	0x0800e859
 800e8c0:	0800e859 	.word	0x0800e859
 800e8c4:	0800e9d3 	.word	0x0800e9d3
 800e8c8:	680b      	ldr	r3, [r1, #0]
 800e8ca:	1d1a      	adds	r2, r3, #4
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	600a      	str	r2, [r1, #0]
 800e8d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e8d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8d8:	2301      	movs	r3, #1
 800e8da:	e0a3      	b.n	800ea24 <_printf_i+0x1f4>
 800e8dc:	6825      	ldr	r5, [r4, #0]
 800e8de:	6808      	ldr	r0, [r1, #0]
 800e8e0:	062e      	lsls	r6, r5, #24
 800e8e2:	f100 0304 	add.w	r3, r0, #4
 800e8e6:	d50a      	bpl.n	800e8fe <_printf_i+0xce>
 800e8e8:	6805      	ldr	r5, [r0, #0]
 800e8ea:	600b      	str	r3, [r1, #0]
 800e8ec:	2d00      	cmp	r5, #0
 800e8ee:	da03      	bge.n	800e8f8 <_printf_i+0xc8>
 800e8f0:	232d      	movs	r3, #45	; 0x2d
 800e8f2:	426d      	negs	r5, r5
 800e8f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8f8:	485e      	ldr	r0, [pc, #376]	; (800ea74 <_printf_i+0x244>)
 800e8fa:	230a      	movs	r3, #10
 800e8fc:	e019      	b.n	800e932 <_printf_i+0x102>
 800e8fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e902:	6805      	ldr	r5, [r0, #0]
 800e904:	600b      	str	r3, [r1, #0]
 800e906:	bf18      	it	ne
 800e908:	b22d      	sxthne	r5, r5
 800e90a:	e7ef      	b.n	800e8ec <_printf_i+0xbc>
 800e90c:	680b      	ldr	r3, [r1, #0]
 800e90e:	6825      	ldr	r5, [r4, #0]
 800e910:	1d18      	adds	r0, r3, #4
 800e912:	6008      	str	r0, [r1, #0]
 800e914:	0628      	lsls	r0, r5, #24
 800e916:	d501      	bpl.n	800e91c <_printf_i+0xec>
 800e918:	681d      	ldr	r5, [r3, #0]
 800e91a:	e002      	b.n	800e922 <_printf_i+0xf2>
 800e91c:	0669      	lsls	r1, r5, #25
 800e91e:	d5fb      	bpl.n	800e918 <_printf_i+0xe8>
 800e920:	881d      	ldrh	r5, [r3, #0]
 800e922:	4854      	ldr	r0, [pc, #336]	; (800ea74 <_printf_i+0x244>)
 800e924:	2f6f      	cmp	r7, #111	; 0x6f
 800e926:	bf0c      	ite	eq
 800e928:	2308      	moveq	r3, #8
 800e92a:	230a      	movne	r3, #10
 800e92c:	2100      	movs	r1, #0
 800e92e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e932:	6866      	ldr	r6, [r4, #4]
 800e934:	60a6      	str	r6, [r4, #8]
 800e936:	2e00      	cmp	r6, #0
 800e938:	bfa2      	ittt	ge
 800e93a:	6821      	ldrge	r1, [r4, #0]
 800e93c:	f021 0104 	bicge.w	r1, r1, #4
 800e940:	6021      	strge	r1, [r4, #0]
 800e942:	b90d      	cbnz	r5, 800e948 <_printf_i+0x118>
 800e944:	2e00      	cmp	r6, #0
 800e946:	d04d      	beq.n	800e9e4 <_printf_i+0x1b4>
 800e948:	4616      	mov	r6, r2
 800e94a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e94e:	fb03 5711 	mls	r7, r3, r1, r5
 800e952:	5dc7      	ldrb	r7, [r0, r7]
 800e954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e958:	462f      	mov	r7, r5
 800e95a:	42bb      	cmp	r3, r7
 800e95c:	460d      	mov	r5, r1
 800e95e:	d9f4      	bls.n	800e94a <_printf_i+0x11a>
 800e960:	2b08      	cmp	r3, #8
 800e962:	d10b      	bne.n	800e97c <_printf_i+0x14c>
 800e964:	6823      	ldr	r3, [r4, #0]
 800e966:	07df      	lsls	r7, r3, #31
 800e968:	d508      	bpl.n	800e97c <_printf_i+0x14c>
 800e96a:	6923      	ldr	r3, [r4, #16]
 800e96c:	6861      	ldr	r1, [r4, #4]
 800e96e:	4299      	cmp	r1, r3
 800e970:	bfde      	ittt	le
 800e972:	2330      	movle	r3, #48	; 0x30
 800e974:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e978:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e97c:	1b92      	subs	r2, r2, r6
 800e97e:	6122      	str	r2, [r4, #16]
 800e980:	f8cd a000 	str.w	sl, [sp]
 800e984:	464b      	mov	r3, r9
 800e986:	aa03      	add	r2, sp, #12
 800e988:	4621      	mov	r1, r4
 800e98a:	4640      	mov	r0, r8
 800e98c:	f7ff fee2 	bl	800e754 <_printf_common>
 800e990:	3001      	adds	r0, #1
 800e992:	d14c      	bne.n	800ea2e <_printf_i+0x1fe>
 800e994:	f04f 30ff 	mov.w	r0, #4294967295
 800e998:	b004      	add	sp, #16
 800e99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e99e:	4835      	ldr	r0, [pc, #212]	; (800ea74 <_printf_i+0x244>)
 800e9a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e9a4:	6823      	ldr	r3, [r4, #0]
 800e9a6:	680e      	ldr	r6, [r1, #0]
 800e9a8:	061f      	lsls	r7, r3, #24
 800e9aa:	f856 5b04 	ldr.w	r5, [r6], #4
 800e9ae:	600e      	str	r6, [r1, #0]
 800e9b0:	d514      	bpl.n	800e9dc <_printf_i+0x1ac>
 800e9b2:	07d9      	lsls	r1, r3, #31
 800e9b4:	bf44      	itt	mi
 800e9b6:	f043 0320 	orrmi.w	r3, r3, #32
 800e9ba:	6023      	strmi	r3, [r4, #0]
 800e9bc:	b91d      	cbnz	r5, 800e9c6 <_printf_i+0x196>
 800e9be:	6823      	ldr	r3, [r4, #0]
 800e9c0:	f023 0320 	bic.w	r3, r3, #32
 800e9c4:	6023      	str	r3, [r4, #0]
 800e9c6:	2310      	movs	r3, #16
 800e9c8:	e7b0      	b.n	800e92c <_printf_i+0xfc>
 800e9ca:	6823      	ldr	r3, [r4, #0]
 800e9cc:	f043 0320 	orr.w	r3, r3, #32
 800e9d0:	6023      	str	r3, [r4, #0]
 800e9d2:	2378      	movs	r3, #120	; 0x78
 800e9d4:	4828      	ldr	r0, [pc, #160]	; (800ea78 <_printf_i+0x248>)
 800e9d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9da:	e7e3      	b.n	800e9a4 <_printf_i+0x174>
 800e9dc:	065e      	lsls	r6, r3, #25
 800e9de:	bf48      	it	mi
 800e9e0:	b2ad      	uxthmi	r5, r5
 800e9e2:	e7e6      	b.n	800e9b2 <_printf_i+0x182>
 800e9e4:	4616      	mov	r6, r2
 800e9e6:	e7bb      	b.n	800e960 <_printf_i+0x130>
 800e9e8:	680b      	ldr	r3, [r1, #0]
 800e9ea:	6826      	ldr	r6, [r4, #0]
 800e9ec:	6960      	ldr	r0, [r4, #20]
 800e9ee:	1d1d      	adds	r5, r3, #4
 800e9f0:	600d      	str	r5, [r1, #0]
 800e9f2:	0635      	lsls	r5, r6, #24
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	d501      	bpl.n	800e9fc <_printf_i+0x1cc>
 800e9f8:	6018      	str	r0, [r3, #0]
 800e9fa:	e002      	b.n	800ea02 <_printf_i+0x1d2>
 800e9fc:	0671      	lsls	r1, r6, #25
 800e9fe:	d5fb      	bpl.n	800e9f8 <_printf_i+0x1c8>
 800ea00:	8018      	strh	r0, [r3, #0]
 800ea02:	2300      	movs	r3, #0
 800ea04:	6123      	str	r3, [r4, #16]
 800ea06:	4616      	mov	r6, r2
 800ea08:	e7ba      	b.n	800e980 <_printf_i+0x150>
 800ea0a:	680b      	ldr	r3, [r1, #0]
 800ea0c:	1d1a      	adds	r2, r3, #4
 800ea0e:	600a      	str	r2, [r1, #0]
 800ea10:	681e      	ldr	r6, [r3, #0]
 800ea12:	6862      	ldr	r2, [r4, #4]
 800ea14:	2100      	movs	r1, #0
 800ea16:	4630      	mov	r0, r6
 800ea18:	f7f1 fc72 	bl	8000300 <memchr>
 800ea1c:	b108      	cbz	r0, 800ea22 <_printf_i+0x1f2>
 800ea1e:	1b80      	subs	r0, r0, r6
 800ea20:	6060      	str	r0, [r4, #4]
 800ea22:	6863      	ldr	r3, [r4, #4]
 800ea24:	6123      	str	r3, [r4, #16]
 800ea26:	2300      	movs	r3, #0
 800ea28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea2c:	e7a8      	b.n	800e980 <_printf_i+0x150>
 800ea2e:	6923      	ldr	r3, [r4, #16]
 800ea30:	4632      	mov	r2, r6
 800ea32:	4649      	mov	r1, r9
 800ea34:	4640      	mov	r0, r8
 800ea36:	47d0      	blx	sl
 800ea38:	3001      	adds	r0, #1
 800ea3a:	d0ab      	beq.n	800e994 <_printf_i+0x164>
 800ea3c:	6823      	ldr	r3, [r4, #0]
 800ea3e:	079b      	lsls	r3, r3, #30
 800ea40:	d413      	bmi.n	800ea6a <_printf_i+0x23a>
 800ea42:	68e0      	ldr	r0, [r4, #12]
 800ea44:	9b03      	ldr	r3, [sp, #12]
 800ea46:	4298      	cmp	r0, r3
 800ea48:	bfb8      	it	lt
 800ea4a:	4618      	movlt	r0, r3
 800ea4c:	e7a4      	b.n	800e998 <_printf_i+0x168>
 800ea4e:	2301      	movs	r3, #1
 800ea50:	4632      	mov	r2, r6
 800ea52:	4649      	mov	r1, r9
 800ea54:	4640      	mov	r0, r8
 800ea56:	47d0      	blx	sl
 800ea58:	3001      	adds	r0, #1
 800ea5a:	d09b      	beq.n	800e994 <_printf_i+0x164>
 800ea5c:	3501      	adds	r5, #1
 800ea5e:	68e3      	ldr	r3, [r4, #12]
 800ea60:	9903      	ldr	r1, [sp, #12]
 800ea62:	1a5b      	subs	r3, r3, r1
 800ea64:	42ab      	cmp	r3, r5
 800ea66:	dcf2      	bgt.n	800ea4e <_printf_i+0x21e>
 800ea68:	e7eb      	b.n	800ea42 <_printf_i+0x212>
 800ea6a:	2500      	movs	r5, #0
 800ea6c:	f104 0619 	add.w	r6, r4, #25
 800ea70:	e7f5      	b.n	800ea5e <_printf_i+0x22e>
 800ea72:	bf00      	nop
 800ea74:	0806fa26 	.word	0x0806fa26
 800ea78:	0806fa37 	.word	0x0806fa37

0800ea7c <_sbrk_r>:
 800ea7c:	b538      	push	{r3, r4, r5, lr}
 800ea7e:	4d06      	ldr	r5, [pc, #24]	; (800ea98 <_sbrk_r+0x1c>)
 800ea80:	2300      	movs	r3, #0
 800ea82:	4604      	mov	r4, r0
 800ea84:	4608      	mov	r0, r1
 800ea86:	602b      	str	r3, [r5, #0]
 800ea88:	f7f2 faa4 	bl	8000fd4 <_sbrk>
 800ea8c:	1c43      	adds	r3, r0, #1
 800ea8e:	d102      	bne.n	800ea96 <_sbrk_r+0x1a>
 800ea90:	682b      	ldr	r3, [r5, #0]
 800ea92:	b103      	cbz	r3, 800ea96 <_sbrk_r+0x1a>
 800ea94:	6023      	str	r3, [r4, #0]
 800ea96:	bd38      	pop	{r3, r4, r5, pc}
 800ea98:	24010bd0 	.word	0x24010bd0

0800ea9c <siprintf>:
 800ea9c:	b40e      	push	{r1, r2, r3}
 800ea9e:	b500      	push	{lr}
 800eaa0:	b09c      	sub	sp, #112	; 0x70
 800eaa2:	ab1d      	add	r3, sp, #116	; 0x74
 800eaa4:	9002      	str	r0, [sp, #8]
 800eaa6:	9006      	str	r0, [sp, #24]
 800eaa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eaac:	4809      	ldr	r0, [pc, #36]	; (800ead4 <siprintf+0x38>)
 800eaae:	9107      	str	r1, [sp, #28]
 800eab0:	9104      	str	r1, [sp, #16]
 800eab2:	4909      	ldr	r1, [pc, #36]	; (800ead8 <siprintf+0x3c>)
 800eab4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eab8:	9105      	str	r1, [sp, #20]
 800eaba:	6800      	ldr	r0, [r0, #0]
 800eabc:	9301      	str	r3, [sp, #4]
 800eabe:	a902      	add	r1, sp, #8
 800eac0:	f001 fa3a 	bl	800ff38 <_svfiprintf_r>
 800eac4:	9b02      	ldr	r3, [sp, #8]
 800eac6:	2200      	movs	r2, #0
 800eac8:	701a      	strb	r2, [r3, #0]
 800eaca:	b01c      	add	sp, #112	; 0x70
 800eacc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ead0:	b003      	add	sp, #12
 800ead2:	4770      	bx	lr
 800ead4:	24001f10 	.word	0x24001f10
 800ead8:	ffff0208 	.word	0xffff0208

0800eadc <quorem>:
 800eadc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae0:	6903      	ldr	r3, [r0, #16]
 800eae2:	690c      	ldr	r4, [r1, #16]
 800eae4:	42a3      	cmp	r3, r4
 800eae6:	4607      	mov	r7, r0
 800eae8:	f2c0 8081 	blt.w	800ebee <quorem+0x112>
 800eaec:	3c01      	subs	r4, #1
 800eaee:	f101 0814 	add.w	r8, r1, #20
 800eaf2:	f100 0514 	add.w	r5, r0, #20
 800eaf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eafa:	9301      	str	r3, [sp, #4]
 800eafc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eb00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb04:	3301      	adds	r3, #1
 800eb06:	429a      	cmp	r2, r3
 800eb08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eb0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eb10:	fbb2 f6f3 	udiv	r6, r2, r3
 800eb14:	d331      	bcc.n	800eb7a <quorem+0x9e>
 800eb16:	f04f 0e00 	mov.w	lr, #0
 800eb1a:	4640      	mov	r0, r8
 800eb1c:	46ac      	mov	ip, r5
 800eb1e:	46f2      	mov	sl, lr
 800eb20:	f850 2b04 	ldr.w	r2, [r0], #4
 800eb24:	b293      	uxth	r3, r2
 800eb26:	fb06 e303 	mla	r3, r6, r3, lr
 800eb2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	ebaa 0303 	sub.w	r3, sl, r3
 800eb34:	0c12      	lsrs	r2, r2, #16
 800eb36:	f8dc a000 	ldr.w	sl, [ip]
 800eb3a:	fb06 e202 	mla	r2, r6, r2, lr
 800eb3e:	fa13 f38a 	uxtah	r3, r3, sl
 800eb42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eb46:	fa1f fa82 	uxth.w	sl, r2
 800eb4a:	f8dc 2000 	ldr.w	r2, [ip]
 800eb4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800eb52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb5c:	4581      	cmp	r9, r0
 800eb5e:	f84c 3b04 	str.w	r3, [ip], #4
 800eb62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eb66:	d2db      	bcs.n	800eb20 <quorem+0x44>
 800eb68:	f855 300b 	ldr.w	r3, [r5, fp]
 800eb6c:	b92b      	cbnz	r3, 800eb7a <quorem+0x9e>
 800eb6e:	9b01      	ldr	r3, [sp, #4]
 800eb70:	3b04      	subs	r3, #4
 800eb72:	429d      	cmp	r5, r3
 800eb74:	461a      	mov	r2, r3
 800eb76:	d32e      	bcc.n	800ebd6 <quorem+0xfa>
 800eb78:	613c      	str	r4, [r7, #16]
 800eb7a:	4638      	mov	r0, r7
 800eb7c:	f001 f84c 	bl	800fc18 <__mcmp>
 800eb80:	2800      	cmp	r0, #0
 800eb82:	db24      	blt.n	800ebce <quorem+0xf2>
 800eb84:	3601      	adds	r6, #1
 800eb86:	4628      	mov	r0, r5
 800eb88:	f04f 0c00 	mov.w	ip, #0
 800eb8c:	f858 2b04 	ldr.w	r2, [r8], #4
 800eb90:	f8d0 e000 	ldr.w	lr, [r0]
 800eb94:	b293      	uxth	r3, r2
 800eb96:	ebac 0303 	sub.w	r3, ip, r3
 800eb9a:	0c12      	lsrs	r2, r2, #16
 800eb9c:	fa13 f38e 	uxtah	r3, r3, lr
 800eba0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eba4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eba8:	b29b      	uxth	r3, r3
 800ebaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ebae:	45c1      	cmp	r9, r8
 800ebb0:	f840 3b04 	str.w	r3, [r0], #4
 800ebb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ebb8:	d2e8      	bcs.n	800eb8c <quorem+0xb0>
 800ebba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ebbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ebc2:	b922      	cbnz	r2, 800ebce <quorem+0xf2>
 800ebc4:	3b04      	subs	r3, #4
 800ebc6:	429d      	cmp	r5, r3
 800ebc8:	461a      	mov	r2, r3
 800ebca:	d30a      	bcc.n	800ebe2 <quorem+0x106>
 800ebcc:	613c      	str	r4, [r7, #16]
 800ebce:	4630      	mov	r0, r6
 800ebd0:	b003      	add	sp, #12
 800ebd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebd6:	6812      	ldr	r2, [r2, #0]
 800ebd8:	3b04      	subs	r3, #4
 800ebda:	2a00      	cmp	r2, #0
 800ebdc:	d1cc      	bne.n	800eb78 <quorem+0x9c>
 800ebde:	3c01      	subs	r4, #1
 800ebe0:	e7c7      	b.n	800eb72 <quorem+0x96>
 800ebe2:	6812      	ldr	r2, [r2, #0]
 800ebe4:	3b04      	subs	r3, #4
 800ebe6:	2a00      	cmp	r2, #0
 800ebe8:	d1f0      	bne.n	800ebcc <quorem+0xf0>
 800ebea:	3c01      	subs	r4, #1
 800ebec:	e7eb      	b.n	800ebc6 <quorem+0xea>
 800ebee:	2000      	movs	r0, #0
 800ebf0:	e7ee      	b.n	800ebd0 <quorem+0xf4>
 800ebf2:	0000      	movs	r0, r0
 800ebf4:	0000      	movs	r0, r0
	...

0800ebf8 <_dtoa_r>:
 800ebf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebfc:	ec59 8b10 	vmov	r8, r9, d0
 800ec00:	b095      	sub	sp, #84	; 0x54
 800ec02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ec04:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800ec06:	9107      	str	r1, [sp, #28]
 800ec08:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ec0c:	4606      	mov	r6, r0
 800ec0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ec10:	9310      	str	r3, [sp, #64]	; 0x40
 800ec12:	b975      	cbnz	r5, 800ec32 <_dtoa_r+0x3a>
 800ec14:	2010      	movs	r0, #16
 800ec16:	f7ff fa25 	bl	800e064 <malloc>
 800ec1a:	4602      	mov	r2, r0
 800ec1c:	6270      	str	r0, [r6, #36]	; 0x24
 800ec1e:	b920      	cbnz	r0, 800ec2a <_dtoa_r+0x32>
 800ec20:	4bab      	ldr	r3, [pc, #684]	; (800eed0 <_dtoa_r+0x2d8>)
 800ec22:	21ea      	movs	r1, #234	; 0xea
 800ec24:	48ab      	ldr	r0, [pc, #684]	; (800eed4 <_dtoa_r+0x2dc>)
 800ec26:	f001 fa87 	bl	8010138 <__assert_func>
 800ec2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ec2e:	6005      	str	r5, [r0, #0]
 800ec30:	60c5      	str	r5, [r0, #12]
 800ec32:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ec34:	6819      	ldr	r1, [r3, #0]
 800ec36:	b151      	cbz	r1, 800ec4e <_dtoa_r+0x56>
 800ec38:	685a      	ldr	r2, [r3, #4]
 800ec3a:	604a      	str	r2, [r1, #4]
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	4093      	lsls	r3, r2
 800ec40:	608b      	str	r3, [r1, #8]
 800ec42:	4630      	mov	r0, r6
 800ec44:	f000 fdaa 	bl	800f79c <_Bfree>
 800ec48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	601a      	str	r2, [r3, #0]
 800ec4e:	f1b9 0300 	subs.w	r3, r9, #0
 800ec52:	bfbb      	ittet	lt
 800ec54:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ec58:	9303      	strlt	r3, [sp, #12]
 800ec5a:	2300      	movge	r3, #0
 800ec5c:	2201      	movlt	r2, #1
 800ec5e:	bfac      	ite	ge
 800ec60:	6023      	strge	r3, [r4, #0]
 800ec62:	6022      	strlt	r2, [r4, #0]
 800ec64:	4b9c      	ldr	r3, [pc, #624]	; (800eed8 <_dtoa_r+0x2e0>)
 800ec66:	9c03      	ldr	r4, [sp, #12]
 800ec68:	43a3      	bics	r3, r4
 800ec6a:	d11a      	bne.n	800eca2 <_dtoa_r+0xaa>
 800ec6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec6e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ec72:	6013      	str	r3, [r2, #0]
 800ec74:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ec78:	ea53 0308 	orrs.w	r3, r3, r8
 800ec7c:	f000 8512 	beq.w	800f6a4 <_dtoa_r+0xaac>
 800ec80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ec82:	b953      	cbnz	r3, 800ec9a <_dtoa_r+0xa2>
 800ec84:	4b95      	ldr	r3, [pc, #596]	; (800eedc <_dtoa_r+0x2e4>)
 800ec86:	e01f      	b.n	800ecc8 <_dtoa_r+0xd0>
 800ec88:	4b95      	ldr	r3, [pc, #596]	; (800eee0 <_dtoa_r+0x2e8>)
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	3308      	adds	r3, #8
 800ec8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ec90:	6013      	str	r3, [r2, #0]
 800ec92:	9800      	ldr	r0, [sp, #0]
 800ec94:	b015      	add	sp, #84	; 0x54
 800ec96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec9a:	4b90      	ldr	r3, [pc, #576]	; (800eedc <_dtoa_r+0x2e4>)
 800ec9c:	9300      	str	r3, [sp, #0]
 800ec9e:	3303      	adds	r3, #3
 800eca0:	e7f5      	b.n	800ec8e <_dtoa_r+0x96>
 800eca2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eca6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ecaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ecb2:	d10b      	bne.n	800eccc <_dtoa_r+0xd4>
 800ecb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	6013      	str	r3, [r2, #0]
 800ecba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	f000 84ee 	beq.w	800f69e <_dtoa_r+0xaa6>
 800ecc2:	4888      	ldr	r0, [pc, #544]	; (800eee4 <_dtoa_r+0x2ec>)
 800ecc4:	6018      	str	r0, [r3, #0]
 800ecc6:	1e43      	subs	r3, r0, #1
 800ecc8:	9300      	str	r3, [sp, #0]
 800ecca:	e7e2      	b.n	800ec92 <_dtoa_r+0x9a>
 800eccc:	a913      	add	r1, sp, #76	; 0x4c
 800ecce:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ecd2:	aa12      	add	r2, sp, #72	; 0x48
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	f001 f843 	bl	800fd60 <__d2b>
 800ecda:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800ecde:	4605      	mov	r5, r0
 800ece0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ece2:	2900      	cmp	r1, #0
 800ece4:	d047      	beq.n	800ed76 <_dtoa_r+0x17e>
 800ece6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ece8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ecec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ecf0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800ecf4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ecf8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ecfc:	2400      	movs	r4, #0
 800ecfe:	ec43 2b16 	vmov	d6, r2, r3
 800ed02:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800ed06:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800eeb8 <_dtoa_r+0x2c0>
 800ed0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ed0e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800eec0 <_dtoa_r+0x2c8>
 800ed12:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ed16:	eeb0 7b46 	vmov.f64	d7, d6
 800ed1a:	ee06 1a90 	vmov	s13, r1
 800ed1e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800ed22:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800eec8 <_dtoa_r+0x2d0>
 800ed26:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ed2a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ed2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ed32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed36:	ee16 ba90 	vmov	fp, s13
 800ed3a:	9411      	str	r4, [sp, #68]	; 0x44
 800ed3c:	d508      	bpl.n	800ed50 <_dtoa_r+0x158>
 800ed3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ed42:	eeb4 6b47 	vcmp.f64	d6, d7
 800ed46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed4a:	bf18      	it	ne
 800ed4c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ed50:	f1bb 0f16 	cmp.w	fp, #22
 800ed54:	d832      	bhi.n	800edbc <_dtoa_r+0x1c4>
 800ed56:	4b64      	ldr	r3, [pc, #400]	; (800eee8 <_dtoa_r+0x2f0>)
 800ed58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ed5c:	ed93 7b00 	vldr	d7, [r3]
 800ed60:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800ed64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ed68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6c:	d501      	bpl.n	800ed72 <_dtoa_r+0x17a>
 800ed6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ed72:	2300      	movs	r3, #0
 800ed74:	e023      	b.n	800edbe <_dtoa_r+0x1c6>
 800ed76:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ed78:	4401      	add	r1, r0
 800ed7a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800ed7e:	2b20      	cmp	r3, #32
 800ed80:	bfc3      	ittte	gt
 800ed82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ed86:	fa04 f303 	lslgt.w	r3, r4, r3
 800ed8a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800ed8e:	f1c3 0320 	rsble	r3, r3, #32
 800ed92:	bfc6      	itte	gt
 800ed94:	fa28 f804 	lsrgt.w	r8, r8, r4
 800ed98:	ea43 0308 	orrgt.w	r3, r3, r8
 800ed9c:	fa08 f303 	lslle.w	r3, r8, r3
 800eda0:	ee07 3a90 	vmov	s15, r3
 800eda4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800eda8:	3901      	subs	r1, #1
 800edaa:	ed8d 7b00 	vstr	d7, [sp]
 800edae:	9c01      	ldr	r4, [sp, #4]
 800edb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edb4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800edb8:	2401      	movs	r4, #1
 800edba:	e7a0      	b.n	800ecfe <_dtoa_r+0x106>
 800edbc:	2301      	movs	r3, #1
 800edbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800edc0:	1a43      	subs	r3, r0, r1
 800edc2:	1e5a      	subs	r2, r3, #1
 800edc4:	bf45      	ittet	mi
 800edc6:	f1c3 0301 	rsbmi	r3, r3, #1
 800edca:	9305      	strmi	r3, [sp, #20]
 800edcc:	2300      	movpl	r3, #0
 800edce:	2300      	movmi	r3, #0
 800edd0:	9206      	str	r2, [sp, #24]
 800edd2:	bf54      	ite	pl
 800edd4:	9305      	strpl	r3, [sp, #20]
 800edd6:	9306      	strmi	r3, [sp, #24]
 800edd8:	f1bb 0f00 	cmp.w	fp, #0
 800eddc:	db18      	blt.n	800ee10 <_dtoa_r+0x218>
 800edde:	9b06      	ldr	r3, [sp, #24]
 800ede0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800ede4:	445b      	add	r3, fp
 800ede6:	9306      	str	r3, [sp, #24]
 800ede8:	2300      	movs	r3, #0
 800edea:	9a07      	ldr	r2, [sp, #28]
 800edec:	2a09      	cmp	r2, #9
 800edee:	d849      	bhi.n	800ee84 <_dtoa_r+0x28c>
 800edf0:	2a05      	cmp	r2, #5
 800edf2:	bfc4      	itt	gt
 800edf4:	3a04      	subgt	r2, #4
 800edf6:	9207      	strgt	r2, [sp, #28]
 800edf8:	9a07      	ldr	r2, [sp, #28]
 800edfa:	f1a2 0202 	sub.w	r2, r2, #2
 800edfe:	bfcc      	ite	gt
 800ee00:	2400      	movgt	r4, #0
 800ee02:	2401      	movle	r4, #1
 800ee04:	2a03      	cmp	r2, #3
 800ee06:	d848      	bhi.n	800ee9a <_dtoa_r+0x2a2>
 800ee08:	e8df f002 	tbb	[pc, r2]
 800ee0c:	3a2c2e0b 	.word	0x3a2c2e0b
 800ee10:	9b05      	ldr	r3, [sp, #20]
 800ee12:	2200      	movs	r2, #0
 800ee14:	eba3 030b 	sub.w	r3, r3, fp
 800ee18:	9305      	str	r3, [sp, #20]
 800ee1a:	920e      	str	r2, [sp, #56]	; 0x38
 800ee1c:	f1cb 0300 	rsb	r3, fp, #0
 800ee20:	e7e3      	b.n	800edea <_dtoa_r+0x1f2>
 800ee22:	2200      	movs	r2, #0
 800ee24:	9208      	str	r2, [sp, #32]
 800ee26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee28:	2a00      	cmp	r2, #0
 800ee2a:	dc39      	bgt.n	800eea0 <_dtoa_r+0x2a8>
 800ee2c:	f04f 0a01 	mov.w	sl, #1
 800ee30:	46d1      	mov	r9, sl
 800ee32:	4652      	mov	r2, sl
 800ee34:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ee38:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	6079      	str	r1, [r7, #4]
 800ee3e:	2004      	movs	r0, #4
 800ee40:	f100 0c14 	add.w	ip, r0, #20
 800ee44:	4594      	cmp	ip, r2
 800ee46:	6879      	ldr	r1, [r7, #4]
 800ee48:	d92f      	bls.n	800eeaa <_dtoa_r+0x2b2>
 800ee4a:	4630      	mov	r0, r6
 800ee4c:	930c      	str	r3, [sp, #48]	; 0x30
 800ee4e:	f000 fc65 	bl	800f71c <_Balloc>
 800ee52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee54:	9000      	str	r0, [sp, #0]
 800ee56:	4602      	mov	r2, r0
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	d149      	bne.n	800eef0 <_dtoa_r+0x2f8>
 800ee5c:	4b23      	ldr	r3, [pc, #140]	; (800eeec <_dtoa_r+0x2f4>)
 800ee5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ee62:	e6df      	b.n	800ec24 <_dtoa_r+0x2c>
 800ee64:	2201      	movs	r2, #1
 800ee66:	e7dd      	b.n	800ee24 <_dtoa_r+0x22c>
 800ee68:	2200      	movs	r2, #0
 800ee6a:	9208      	str	r2, [sp, #32]
 800ee6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee6e:	eb0b 0a02 	add.w	sl, fp, r2
 800ee72:	f10a 0901 	add.w	r9, sl, #1
 800ee76:	464a      	mov	r2, r9
 800ee78:	2a01      	cmp	r2, #1
 800ee7a:	bfb8      	it	lt
 800ee7c:	2201      	movlt	r2, #1
 800ee7e:	e7db      	b.n	800ee38 <_dtoa_r+0x240>
 800ee80:	2201      	movs	r2, #1
 800ee82:	e7f2      	b.n	800ee6a <_dtoa_r+0x272>
 800ee84:	2401      	movs	r4, #1
 800ee86:	2200      	movs	r2, #0
 800ee88:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ee8c:	f04f 3aff 	mov.w	sl, #4294967295
 800ee90:	2100      	movs	r1, #0
 800ee92:	46d1      	mov	r9, sl
 800ee94:	2212      	movs	r2, #18
 800ee96:	9109      	str	r1, [sp, #36]	; 0x24
 800ee98:	e7ce      	b.n	800ee38 <_dtoa_r+0x240>
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	9208      	str	r2, [sp, #32]
 800ee9e:	e7f5      	b.n	800ee8c <_dtoa_r+0x294>
 800eea0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800eea4:	46d1      	mov	r9, sl
 800eea6:	4652      	mov	r2, sl
 800eea8:	e7c6      	b.n	800ee38 <_dtoa_r+0x240>
 800eeaa:	3101      	adds	r1, #1
 800eeac:	6079      	str	r1, [r7, #4]
 800eeae:	0040      	lsls	r0, r0, #1
 800eeb0:	e7c6      	b.n	800ee40 <_dtoa_r+0x248>
 800eeb2:	bf00      	nop
 800eeb4:	f3af 8000 	nop.w
 800eeb8:	636f4361 	.word	0x636f4361
 800eebc:	3fd287a7 	.word	0x3fd287a7
 800eec0:	8b60c8b3 	.word	0x8b60c8b3
 800eec4:	3fc68a28 	.word	0x3fc68a28
 800eec8:	509f79fb 	.word	0x509f79fb
 800eecc:	3fd34413 	.word	0x3fd34413
 800eed0:	0806fa55 	.word	0x0806fa55
 800eed4:	0806fa6c 	.word	0x0806fa6c
 800eed8:	7ff00000 	.word	0x7ff00000
 800eedc:	0806fa51 	.word	0x0806fa51
 800eee0:	0806fa48 	.word	0x0806fa48
 800eee4:	0806fa25 	.word	0x0806fa25
 800eee8:	0806fb68 	.word	0x0806fb68
 800eeec:	0806facb 	.word	0x0806facb
 800eef0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800eef2:	9900      	ldr	r1, [sp, #0]
 800eef4:	6011      	str	r1, [r2, #0]
 800eef6:	f1b9 0f0e 	cmp.w	r9, #14
 800eefa:	d872      	bhi.n	800efe2 <_dtoa_r+0x3ea>
 800eefc:	2c00      	cmp	r4, #0
 800eefe:	d070      	beq.n	800efe2 <_dtoa_r+0x3ea>
 800ef00:	f1bb 0f00 	cmp.w	fp, #0
 800ef04:	f340 80a6 	ble.w	800f054 <_dtoa_r+0x45c>
 800ef08:	49ca      	ldr	r1, [pc, #808]	; (800f234 <_dtoa_r+0x63c>)
 800ef0a:	f00b 020f 	and.w	r2, fp, #15
 800ef0e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ef12:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ef16:	ed92 7b00 	vldr	d7, [r2]
 800ef1a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800ef1e:	f000 808d 	beq.w	800f03c <_dtoa_r+0x444>
 800ef22:	4ac5      	ldr	r2, [pc, #788]	; (800f238 <_dtoa_r+0x640>)
 800ef24:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800ef28:	ed92 6b08 	vldr	d6, [r2, #32]
 800ef2c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800ef30:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ef34:	f001 010f 	and.w	r1, r1, #15
 800ef38:	2203      	movs	r2, #3
 800ef3a:	48bf      	ldr	r0, [pc, #764]	; (800f238 <_dtoa_r+0x640>)
 800ef3c:	2900      	cmp	r1, #0
 800ef3e:	d17f      	bne.n	800f040 <_dtoa_r+0x448>
 800ef40:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ef44:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ef48:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ef4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ef4e:	2900      	cmp	r1, #0
 800ef50:	f000 80b2 	beq.w	800f0b8 <_dtoa_r+0x4c0>
 800ef54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ef58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef5c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ef60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef64:	f140 80a8 	bpl.w	800f0b8 <_dtoa_r+0x4c0>
 800ef68:	f1b9 0f00 	cmp.w	r9, #0
 800ef6c:	f000 80a4 	beq.w	800f0b8 <_dtoa_r+0x4c0>
 800ef70:	f1ba 0f00 	cmp.w	sl, #0
 800ef74:	dd31      	ble.n	800efda <_dtoa_r+0x3e2>
 800ef76:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ef7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ef7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ef82:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ef86:	3201      	adds	r2, #1
 800ef88:	4650      	mov	r0, sl
 800ef8a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ef8e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ef92:	ee07 2a90 	vmov	s15, r2
 800ef96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ef9a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ef9e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800efa2:	9c03      	ldr	r4, [sp, #12]
 800efa4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800efa8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800efac:	2800      	cmp	r0, #0
 800efae:	f040 8086 	bne.w	800f0be <_dtoa_r+0x4c6>
 800efb2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800efb6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800efba:	ec42 1b17 	vmov	d7, r1, r2
 800efbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800efc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efc6:	f300 8272 	bgt.w	800f4ae <_dtoa_r+0x8b6>
 800efca:	eeb1 7b47 	vneg.f64	d7, d7
 800efce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800efd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd6:	f100 8267 	bmi.w	800f4a8 <_dtoa_r+0x8b0>
 800efda:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800efde:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800efe2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800efe4:	2a00      	cmp	r2, #0
 800efe6:	f2c0 8129 	blt.w	800f23c <_dtoa_r+0x644>
 800efea:	f1bb 0f0e 	cmp.w	fp, #14
 800efee:	f300 8125 	bgt.w	800f23c <_dtoa_r+0x644>
 800eff2:	4b90      	ldr	r3, [pc, #576]	; (800f234 <_dtoa_r+0x63c>)
 800eff4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eff8:	ed93 6b00 	vldr	d6, [r3]
 800effc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800effe:	2b00      	cmp	r3, #0
 800f000:	f280 80c3 	bge.w	800f18a <_dtoa_r+0x592>
 800f004:	f1b9 0f00 	cmp.w	r9, #0
 800f008:	f300 80bf 	bgt.w	800f18a <_dtoa_r+0x592>
 800f00c:	f040 824c 	bne.w	800f4a8 <_dtoa_r+0x8b0>
 800f010:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f014:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f018:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f01c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f024:	464c      	mov	r4, r9
 800f026:	464f      	mov	r7, r9
 800f028:	f280 8222 	bge.w	800f470 <_dtoa_r+0x878>
 800f02c:	f8dd 8000 	ldr.w	r8, [sp]
 800f030:	2331      	movs	r3, #49	; 0x31
 800f032:	f808 3b01 	strb.w	r3, [r8], #1
 800f036:	f10b 0b01 	add.w	fp, fp, #1
 800f03a:	e21e      	b.n	800f47a <_dtoa_r+0x882>
 800f03c:	2202      	movs	r2, #2
 800f03e:	e77c      	b.n	800ef3a <_dtoa_r+0x342>
 800f040:	07cc      	lsls	r4, r1, #31
 800f042:	d504      	bpl.n	800f04e <_dtoa_r+0x456>
 800f044:	ed90 6b00 	vldr	d6, [r0]
 800f048:	3201      	adds	r2, #1
 800f04a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f04e:	1049      	asrs	r1, r1, #1
 800f050:	3008      	adds	r0, #8
 800f052:	e773      	b.n	800ef3c <_dtoa_r+0x344>
 800f054:	d02e      	beq.n	800f0b4 <_dtoa_r+0x4bc>
 800f056:	f1cb 0100 	rsb	r1, fp, #0
 800f05a:	4a76      	ldr	r2, [pc, #472]	; (800f234 <_dtoa_r+0x63c>)
 800f05c:	f001 000f 	and.w	r0, r1, #15
 800f060:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f064:	ed92 7b00 	vldr	d7, [r2]
 800f068:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800f06c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f070:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f074:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800f078:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f07c:	486e      	ldr	r0, [pc, #440]	; (800f238 <_dtoa_r+0x640>)
 800f07e:	1109      	asrs	r1, r1, #4
 800f080:	2400      	movs	r4, #0
 800f082:	2202      	movs	r2, #2
 800f084:	b939      	cbnz	r1, 800f096 <_dtoa_r+0x49e>
 800f086:	2c00      	cmp	r4, #0
 800f088:	f43f af60 	beq.w	800ef4c <_dtoa_r+0x354>
 800f08c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f090:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f094:	e75a      	b.n	800ef4c <_dtoa_r+0x354>
 800f096:	07cf      	lsls	r7, r1, #31
 800f098:	d509      	bpl.n	800f0ae <_dtoa_r+0x4b6>
 800f09a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800f09e:	ed90 7b00 	vldr	d7, [r0]
 800f0a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f0a6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f0aa:	3201      	adds	r2, #1
 800f0ac:	2401      	movs	r4, #1
 800f0ae:	1049      	asrs	r1, r1, #1
 800f0b0:	3008      	adds	r0, #8
 800f0b2:	e7e7      	b.n	800f084 <_dtoa_r+0x48c>
 800f0b4:	2202      	movs	r2, #2
 800f0b6:	e749      	b.n	800ef4c <_dtoa_r+0x354>
 800f0b8:	465f      	mov	r7, fp
 800f0ba:	4648      	mov	r0, r9
 800f0bc:	e765      	b.n	800ef8a <_dtoa_r+0x392>
 800f0be:	ec42 1b17 	vmov	d7, r1, r2
 800f0c2:	4a5c      	ldr	r2, [pc, #368]	; (800f234 <_dtoa_r+0x63c>)
 800f0c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f0c8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f0cc:	9a00      	ldr	r2, [sp, #0]
 800f0ce:	1814      	adds	r4, r2, r0
 800f0d0:	9a08      	ldr	r2, [sp, #32]
 800f0d2:	b352      	cbz	r2, 800f12a <_dtoa_r+0x532>
 800f0d4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f0d8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f0dc:	f8dd 8000 	ldr.w	r8, [sp]
 800f0e0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f0e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f0e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f0ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f0f0:	ee14 2a90 	vmov	r2, s9
 800f0f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f0f8:	3230      	adds	r2, #48	; 0x30
 800f0fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f0fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f106:	f808 2b01 	strb.w	r2, [r8], #1
 800f10a:	d439      	bmi.n	800f180 <_dtoa_r+0x588>
 800f10c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f110:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f118:	d472      	bmi.n	800f200 <_dtoa_r+0x608>
 800f11a:	45a0      	cmp	r8, r4
 800f11c:	f43f af5d 	beq.w	800efda <_dtoa_r+0x3e2>
 800f120:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f124:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f128:	e7e0      	b.n	800f0ec <_dtoa_r+0x4f4>
 800f12a:	f8dd 8000 	ldr.w	r8, [sp]
 800f12e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f132:	4621      	mov	r1, r4
 800f134:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f138:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f13c:	ee14 2a90 	vmov	r2, s9
 800f140:	3230      	adds	r2, #48	; 0x30
 800f142:	f808 2b01 	strb.w	r2, [r8], #1
 800f146:	45a0      	cmp	r8, r4
 800f148:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f14c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f150:	d118      	bne.n	800f184 <_dtoa_r+0x58c>
 800f152:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f156:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f15a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f162:	dc4d      	bgt.n	800f200 <_dtoa_r+0x608>
 800f164:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f168:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f170:	f57f af33 	bpl.w	800efda <_dtoa_r+0x3e2>
 800f174:	4688      	mov	r8, r1
 800f176:	3901      	subs	r1, #1
 800f178:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f17c:	2b30      	cmp	r3, #48	; 0x30
 800f17e:	d0f9      	beq.n	800f174 <_dtoa_r+0x57c>
 800f180:	46bb      	mov	fp, r7
 800f182:	e02a      	b.n	800f1da <_dtoa_r+0x5e2>
 800f184:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f188:	e7d6      	b.n	800f138 <_dtoa_r+0x540>
 800f18a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f18e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f192:	f8dd 8000 	ldr.w	r8, [sp]
 800f196:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f19a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f19e:	ee15 3a10 	vmov	r3, s10
 800f1a2:	3330      	adds	r3, #48	; 0x30
 800f1a4:	f808 3b01 	strb.w	r3, [r8], #1
 800f1a8:	9b00      	ldr	r3, [sp, #0]
 800f1aa:	eba8 0303 	sub.w	r3, r8, r3
 800f1ae:	4599      	cmp	r9, r3
 800f1b0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f1b4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f1b8:	d133      	bne.n	800f222 <_dtoa_r+0x62a>
 800f1ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f1be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1c6:	dc1a      	bgt.n	800f1fe <_dtoa_r+0x606>
 800f1c8:	eeb4 7b46 	vcmp.f64	d7, d6
 800f1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1d0:	d103      	bne.n	800f1da <_dtoa_r+0x5e2>
 800f1d2:	ee15 3a10 	vmov	r3, s10
 800f1d6:	07d9      	lsls	r1, r3, #31
 800f1d8:	d411      	bmi.n	800f1fe <_dtoa_r+0x606>
 800f1da:	4629      	mov	r1, r5
 800f1dc:	4630      	mov	r0, r6
 800f1de:	f000 fadd 	bl	800f79c <_Bfree>
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f1e6:	f888 3000 	strb.w	r3, [r8]
 800f1ea:	f10b 0301 	add.w	r3, fp, #1
 800f1ee:	6013      	str	r3, [r2, #0]
 800f1f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	f43f ad4d 	beq.w	800ec92 <_dtoa_r+0x9a>
 800f1f8:	f8c3 8000 	str.w	r8, [r3]
 800f1fc:	e549      	b.n	800ec92 <_dtoa_r+0x9a>
 800f1fe:	465f      	mov	r7, fp
 800f200:	4643      	mov	r3, r8
 800f202:	4698      	mov	r8, r3
 800f204:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f208:	2a39      	cmp	r2, #57	; 0x39
 800f20a:	d106      	bne.n	800f21a <_dtoa_r+0x622>
 800f20c:	9a00      	ldr	r2, [sp, #0]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d1f7      	bne.n	800f202 <_dtoa_r+0x60a>
 800f212:	9900      	ldr	r1, [sp, #0]
 800f214:	2230      	movs	r2, #48	; 0x30
 800f216:	3701      	adds	r7, #1
 800f218:	700a      	strb	r2, [r1, #0]
 800f21a:	781a      	ldrb	r2, [r3, #0]
 800f21c:	3201      	adds	r2, #1
 800f21e:	701a      	strb	r2, [r3, #0]
 800f220:	e7ae      	b.n	800f180 <_dtoa_r+0x588>
 800f222:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f226:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f22e:	d1b2      	bne.n	800f196 <_dtoa_r+0x59e>
 800f230:	e7d3      	b.n	800f1da <_dtoa_r+0x5e2>
 800f232:	bf00      	nop
 800f234:	0806fb68 	.word	0x0806fb68
 800f238:	0806fb40 	.word	0x0806fb40
 800f23c:	9908      	ldr	r1, [sp, #32]
 800f23e:	2900      	cmp	r1, #0
 800f240:	f000 80d1 	beq.w	800f3e6 <_dtoa_r+0x7ee>
 800f244:	9907      	ldr	r1, [sp, #28]
 800f246:	2901      	cmp	r1, #1
 800f248:	f300 80b4 	bgt.w	800f3b4 <_dtoa_r+0x7bc>
 800f24c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f24e:	2900      	cmp	r1, #0
 800f250:	f000 80ac 	beq.w	800f3ac <_dtoa_r+0x7b4>
 800f254:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f258:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f25c:	461c      	mov	r4, r3
 800f25e:	930a      	str	r3, [sp, #40]	; 0x28
 800f260:	9b05      	ldr	r3, [sp, #20]
 800f262:	4413      	add	r3, r2
 800f264:	9305      	str	r3, [sp, #20]
 800f266:	9b06      	ldr	r3, [sp, #24]
 800f268:	2101      	movs	r1, #1
 800f26a:	4413      	add	r3, r2
 800f26c:	4630      	mov	r0, r6
 800f26e:	9306      	str	r3, [sp, #24]
 800f270:	f000 fb50 	bl	800f914 <__i2b>
 800f274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f276:	4607      	mov	r7, r0
 800f278:	f1b8 0f00 	cmp.w	r8, #0
 800f27c:	dd0d      	ble.n	800f29a <_dtoa_r+0x6a2>
 800f27e:	9a06      	ldr	r2, [sp, #24]
 800f280:	2a00      	cmp	r2, #0
 800f282:	dd0a      	ble.n	800f29a <_dtoa_r+0x6a2>
 800f284:	4542      	cmp	r2, r8
 800f286:	9905      	ldr	r1, [sp, #20]
 800f288:	bfa8      	it	ge
 800f28a:	4642      	movge	r2, r8
 800f28c:	1a89      	subs	r1, r1, r2
 800f28e:	9105      	str	r1, [sp, #20]
 800f290:	9906      	ldr	r1, [sp, #24]
 800f292:	eba8 0802 	sub.w	r8, r8, r2
 800f296:	1a8a      	subs	r2, r1, r2
 800f298:	9206      	str	r2, [sp, #24]
 800f29a:	b303      	cbz	r3, 800f2de <_dtoa_r+0x6e6>
 800f29c:	9a08      	ldr	r2, [sp, #32]
 800f29e:	2a00      	cmp	r2, #0
 800f2a0:	f000 80a6 	beq.w	800f3f0 <_dtoa_r+0x7f8>
 800f2a4:	2c00      	cmp	r4, #0
 800f2a6:	dd13      	ble.n	800f2d0 <_dtoa_r+0x6d8>
 800f2a8:	4639      	mov	r1, r7
 800f2aa:	4622      	mov	r2, r4
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	930c      	str	r3, [sp, #48]	; 0x30
 800f2b0:	f000 fbec 	bl	800fa8c <__pow5mult>
 800f2b4:	462a      	mov	r2, r5
 800f2b6:	4601      	mov	r1, r0
 800f2b8:	4607      	mov	r7, r0
 800f2ba:	4630      	mov	r0, r6
 800f2bc:	f000 fb40 	bl	800f940 <__multiply>
 800f2c0:	4629      	mov	r1, r5
 800f2c2:	900a      	str	r0, [sp, #40]	; 0x28
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	f000 fa69 	bl	800f79c <_Bfree>
 800f2ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2ce:	4615      	mov	r5, r2
 800f2d0:	1b1a      	subs	r2, r3, r4
 800f2d2:	d004      	beq.n	800f2de <_dtoa_r+0x6e6>
 800f2d4:	4629      	mov	r1, r5
 800f2d6:	4630      	mov	r0, r6
 800f2d8:	f000 fbd8 	bl	800fa8c <__pow5mult>
 800f2dc:	4605      	mov	r5, r0
 800f2de:	2101      	movs	r1, #1
 800f2e0:	4630      	mov	r0, r6
 800f2e2:	f000 fb17 	bl	800f914 <__i2b>
 800f2e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	f340 8082 	ble.w	800f3f4 <_dtoa_r+0x7fc>
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	4601      	mov	r1, r0
 800f2f4:	4630      	mov	r0, r6
 800f2f6:	f000 fbc9 	bl	800fa8c <__pow5mult>
 800f2fa:	9b07      	ldr	r3, [sp, #28]
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	4604      	mov	r4, r0
 800f300:	dd7b      	ble.n	800f3fa <_dtoa_r+0x802>
 800f302:	2300      	movs	r3, #0
 800f304:	930a      	str	r3, [sp, #40]	; 0x28
 800f306:	6922      	ldr	r2, [r4, #16]
 800f308:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f30c:	6910      	ldr	r0, [r2, #16]
 800f30e:	f000 fab1 	bl	800f874 <__hi0bits>
 800f312:	f1c0 0020 	rsb	r0, r0, #32
 800f316:	9b06      	ldr	r3, [sp, #24]
 800f318:	4418      	add	r0, r3
 800f31a:	f010 001f 	ands.w	r0, r0, #31
 800f31e:	f000 808d 	beq.w	800f43c <_dtoa_r+0x844>
 800f322:	f1c0 0220 	rsb	r2, r0, #32
 800f326:	2a04      	cmp	r2, #4
 800f328:	f340 8086 	ble.w	800f438 <_dtoa_r+0x840>
 800f32c:	f1c0 001c 	rsb	r0, r0, #28
 800f330:	9b05      	ldr	r3, [sp, #20]
 800f332:	4403      	add	r3, r0
 800f334:	9305      	str	r3, [sp, #20]
 800f336:	9b06      	ldr	r3, [sp, #24]
 800f338:	4403      	add	r3, r0
 800f33a:	4480      	add	r8, r0
 800f33c:	9306      	str	r3, [sp, #24]
 800f33e:	9b05      	ldr	r3, [sp, #20]
 800f340:	2b00      	cmp	r3, #0
 800f342:	dd05      	ble.n	800f350 <_dtoa_r+0x758>
 800f344:	4629      	mov	r1, r5
 800f346:	461a      	mov	r2, r3
 800f348:	4630      	mov	r0, r6
 800f34a:	f000 fbf9 	bl	800fb40 <__lshift>
 800f34e:	4605      	mov	r5, r0
 800f350:	9b06      	ldr	r3, [sp, #24]
 800f352:	2b00      	cmp	r3, #0
 800f354:	dd05      	ble.n	800f362 <_dtoa_r+0x76a>
 800f356:	4621      	mov	r1, r4
 800f358:	461a      	mov	r2, r3
 800f35a:	4630      	mov	r0, r6
 800f35c:	f000 fbf0 	bl	800fb40 <__lshift>
 800f360:	4604      	mov	r4, r0
 800f362:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f364:	2b00      	cmp	r3, #0
 800f366:	d06b      	beq.n	800f440 <_dtoa_r+0x848>
 800f368:	4621      	mov	r1, r4
 800f36a:	4628      	mov	r0, r5
 800f36c:	f000 fc54 	bl	800fc18 <__mcmp>
 800f370:	2800      	cmp	r0, #0
 800f372:	da65      	bge.n	800f440 <_dtoa_r+0x848>
 800f374:	2300      	movs	r3, #0
 800f376:	4629      	mov	r1, r5
 800f378:	220a      	movs	r2, #10
 800f37a:	4630      	mov	r0, r6
 800f37c:	f000 fa30 	bl	800f7e0 <__multadd>
 800f380:	9b08      	ldr	r3, [sp, #32]
 800f382:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f386:	4605      	mov	r5, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	f000 8192 	beq.w	800f6b2 <_dtoa_r+0xaba>
 800f38e:	4639      	mov	r1, r7
 800f390:	2300      	movs	r3, #0
 800f392:	220a      	movs	r2, #10
 800f394:	4630      	mov	r0, r6
 800f396:	f000 fa23 	bl	800f7e0 <__multadd>
 800f39a:	f1ba 0f00 	cmp.w	sl, #0
 800f39e:	4607      	mov	r7, r0
 800f3a0:	f300 808e 	bgt.w	800f4c0 <_dtoa_r+0x8c8>
 800f3a4:	9b07      	ldr	r3, [sp, #28]
 800f3a6:	2b02      	cmp	r3, #2
 800f3a8:	dc51      	bgt.n	800f44e <_dtoa_r+0x856>
 800f3aa:	e089      	b.n	800f4c0 <_dtoa_r+0x8c8>
 800f3ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f3ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f3b2:	e751      	b.n	800f258 <_dtoa_r+0x660>
 800f3b4:	f109 34ff 	add.w	r4, r9, #4294967295
 800f3b8:	42a3      	cmp	r3, r4
 800f3ba:	bfbf      	itttt	lt
 800f3bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800f3be:	1ae3      	sublt	r3, r4, r3
 800f3c0:	18d2      	addlt	r2, r2, r3
 800f3c2:	4613      	movlt	r3, r2
 800f3c4:	bfb7      	itett	lt
 800f3c6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f3c8:	1b1c      	subge	r4, r3, r4
 800f3ca:	4623      	movlt	r3, r4
 800f3cc:	2400      	movlt	r4, #0
 800f3ce:	f1b9 0f00 	cmp.w	r9, #0
 800f3d2:	bfb5      	itete	lt
 800f3d4:	9a05      	ldrlt	r2, [sp, #20]
 800f3d6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800f3da:	eba2 0809 	sublt.w	r8, r2, r9
 800f3de:	464a      	movge	r2, r9
 800f3e0:	bfb8      	it	lt
 800f3e2:	2200      	movlt	r2, #0
 800f3e4:	e73b      	b.n	800f25e <_dtoa_r+0x666>
 800f3e6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f3ea:	9f08      	ldr	r7, [sp, #32]
 800f3ec:	461c      	mov	r4, r3
 800f3ee:	e743      	b.n	800f278 <_dtoa_r+0x680>
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	e76f      	b.n	800f2d4 <_dtoa_r+0x6dc>
 800f3f4:	9b07      	ldr	r3, [sp, #28]
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	dc18      	bgt.n	800f42c <_dtoa_r+0x834>
 800f3fa:	9b02      	ldr	r3, [sp, #8]
 800f3fc:	b9b3      	cbnz	r3, 800f42c <_dtoa_r+0x834>
 800f3fe:	9b03      	ldr	r3, [sp, #12]
 800f400:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f404:	b9a2      	cbnz	r2, 800f430 <_dtoa_r+0x838>
 800f406:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f40a:	0d12      	lsrs	r2, r2, #20
 800f40c:	0512      	lsls	r2, r2, #20
 800f40e:	b18a      	cbz	r2, 800f434 <_dtoa_r+0x83c>
 800f410:	9b05      	ldr	r3, [sp, #20]
 800f412:	3301      	adds	r3, #1
 800f414:	9305      	str	r3, [sp, #20]
 800f416:	9b06      	ldr	r3, [sp, #24]
 800f418:	3301      	adds	r3, #1
 800f41a:	9306      	str	r3, [sp, #24]
 800f41c:	2301      	movs	r3, #1
 800f41e:	930a      	str	r3, [sp, #40]	; 0x28
 800f420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f422:	2b00      	cmp	r3, #0
 800f424:	f47f af6f 	bne.w	800f306 <_dtoa_r+0x70e>
 800f428:	2001      	movs	r0, #1
 800f42a:	e774      	b.n	800f316 <_dtoa_r+0x71e>
 800f42c:	2300      	movs	r3, #0
 800f42e:	e7f6      	b.n	800f41e <_dtoa_r+0x826>
 800f430:	9b02      	ldr	r3, [sp, #8]
 800f432:	e7f4      	b.n	800f41e <_dtoa_r+0x826>
 800f434:	920a      	str	r2, [sp, #40]	; 0x28
 800f436:	e7f3      	b.n	800f420 <_dtoa_r+0x828>
 800f438:	d081      	beq.n	800f33e <_dtoa_r+0x746>
 800f43a:	4610      	mov	r0, r2
 800f43c:	301c      	adds	r0, #28
 800f43e:	e777      	b.n	800f330 <_dtoa_r+0x738>
 800f440:	f1b9 0f00 	cmp.w	r9, #0
 800f444:	dc37      	bgt.n	800f4b6 <_dtoa_r+0x8be>
 800f446:	9b07      	ldr	r3, [sp, #28]
 800f448:	2b02      	cmp	r3, #2
 800f44a:	dd34      	ble.n	800f4b6 <_dtoa_r+0x8be>
 800f44c:	46ca      	mov	sl, r9
 800f44e:	f1ba 0f00 	cmp.w	sl, #0
 800f452:	d10d      	bne.n	800f470 <_dtoa_r+0x878>
 800f454:	4621      	mov	r1, r4
 800f456:	4653      	mov	r3, sl
 800f458:	2205      	movs	r2, #5
 800f45a:	4630      	mov	r0, r6
 800f45c:	f000 f9c0 	bl	800f7e0 <__multadd>
 800f460:	4601      	mov	r1, r0
 800f462:	4604      	mov	r4, r0
 800f464:	4628      	mov	r0, r5
 800f466:	f000 fbd7 	bl	800fc18 <__mcmp>
 800f46a:	2800      	cmp	r0, #0
 800f46c:	f73f adde 	bgt.w	800f02c <_dtoa_r+0x434>
 800f470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f472:	f8dd 8000 	ldr.w	r8, [sp]
 800f476:	ea6f 0b03 	mvn.w	fp, r3
 800f47a:	f04f 0900 	mov.w	r9, #0
 800f47e:	4621      	mov	r1, r4
 800f480:	4630      	mov	r0, r6
 800f482:	f000 f98b 	bl	800f79c <_Bfree>
 800f486:	2f00      	cmp	r7, #0
 800f488:	f43f aea7 	beq.w	800f1da <_dtoa_r+0x5e2>
 800f48c:	f1b9 0f00 	cmp.w	r9, #0
 800f490:	d005      	beq.n	800f49e <_dtoa_r+0x8a6>
 800f492:	45b9      	cmp	r9, r7
 800f494:	d003      	beq.n	800f49e <_dtoa_r+0x8a6>
 800f496:	4649      	mov	r1, r9
 800f498:	4630      	mov	r0, r6
 800f49a:	f000 f97f 	bl	800f79c <_Bfree>
 800f49e:	4639      	mov	r1, r7
 800f4a0:	4630      	mov	r0, r6
 800f4a2:	f000 f97b 	bl	800f79c <_Bfree>
 800f4a6:	e698      	b.n	800f1da <_dtoa_r+0x5e2>
 800f4a8:	2400      	movs	r4, #0
 800f4aa:	4627      	mov	r7, r4
 800f4ac:	e7e0      	b.n	800f470 <_dtoa_r+0x878>
 800f4ae:	46bb      	mov	fp, r7
 800f4b0:	4604      	mov	r4, r0
 800f4b2:	4607      	mov	r7, r0
 800f4b4:	e5ba      	b.n	800f02c <_dtoa_r+0x434>
 800f4b6:	9b08      	ldr	r3, [sp, #32]
 800f4b8:	46ca      	mov	sl, r9
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	f000 8100 	beq.w	800f6c0 <_dtoa_r+0xac8>
 800f4c0:	f1b8 0f00 	cmp.w	r8, #0
 800f4c4:	dd05      	ble.n	800f4d2 <_dtoa_r+0x8da>
 800f4c6:	4639      	mov	r1, r7
 800f4c8:	4642      	mov	r2, r8
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	f000 fb38 	bl	800fb40 <__lshift>
 800f4d0:	4607      	mov	r7, r0
 800f4d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d05d      	beq.n	800f594 <_dtoa_r+0x99c>
 800f4d8:	6879      	ldr	r1, [r7, #4]
 800f4da:	4630      	mov	r0, r6
 800f4dc:	f000 f91e 	bl	800f71c <_Balloc>
 800f4e0:	4680      	mov	r8, r0
 800f4e2:	b928      	cbnz	r0, 800f4f0 <_dtoa_r+0x8f8>
 800f4e4:	4b82      	ldr	r3, [pc, #520]	; (800f6f0 <_dtoa_r+0xaf8>)
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f4ec:	f7ff bb9a 	b.w	800ec24 <_dtoa_r+0x2c>
 800f4f0:	693a      	ldr	r2, [r7, #16]
 800f4f2:	3202      	adds	r2, #2
 800f4f4:	0092      	lsls	r2, r2, #2
 800f4f6:	f107 010c 	add.w	r1, r7, #12
 800f4fa:	300c      	adds	r0, #12
 800f4fc:	f7fe fdba 	bl	800e074 <memcpy>
 800f500:	2201      	movs	r2, #1
 800f502:	4641      	mov	r1, r8
 800f504:	4630      	mov	r0, r6
 800f506:	f000 fb1b 	bl	800fb40 <__lshift>
 800f50a:	9b00      	ldr	r3, [sp, #0]
 800f50c:	3301      	adds	r3, #1
 800f50e:	9305      	str	r3, [sp, #20]
 800f510:	9b00      	ldr	r3, [sp, #0]
 800f512:	4453      	add	r3, sl
 800f514:	9309      	str	r3, [sp, #36]	; 0x24
 800f516:	9b02      	ldr	r3, [sp, #8]
 800f518:	f003 0301 	and.w	r3, r3, #1
 800f51c:	46b9      	mov	r9, r7
 800f51e:	9308      	str	r3, [sp, #32]
 800f520:	4607      	mov	r7, r0
 800f522:	9b05      	ldr	r3, [sp, #20]
 800f524:	4621      	mov	r1, r4
 800f526:	3b01      	subs	r3, #1
 800f528:	4628      	mov	r0, r5
 800f52a:	9302      	str	r3, [sp, #8]
 800f52c:	f7ff fad6 	bl	800eadc <quorem>
 800f530:	4603      	mov	r3, r0
 800f532:	3330      	adds	r3, #48	; 0x30
 800f534:	9006      	str	r0, [sp, #24]
 800f536:	4649      	mov	r1, r9
 800f538:	4628      	mov	r0, r5
 800f53a:	930a      	str	r3, [sp, #40]	; 0x28
 800f53c:	f000 fb6c 	bl	800fc18 <__mcmp>
 800f540:	463a      	mov	r2, r7
 800f542:	4682      	mov	sl, r0
 800f544:	4621      	mov	r1, r4
 800f546:	4630      	mov	r0, r6
 800f548:	f000 fb82 	bl	800fc50 <__mdiff>
 800f54c:	68c2      	ldr	r2, [r0, #12]
 800f54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f550:	4680      	mov	r8, r0
 800f552:	bb0a      	cbnz	r2, 800f598 <_dtoa_r+0x9a0>
 800f554:	4601      	mov	r1, r0
 800f556:	4628      	mov	r0, r5
 800f558:	f000 fb5e 	bl	800fc18 <__mcmp>
 800f55c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f55e:	4602      	mov	r2, r0
 800f560:	4641      	mov	r1, r8
 800f562:	4630      	mov	r0, r6
 800f564:	920e      	str	r2, [sp, #56]	; 0x38
 800f566:	930a      	str	r3, [sp, #40]	; 0x28
 800f568:	f000 f918 	bl	800f79c <_Bfree>
 800f56c:	9b07      	ldr	r3, [sp, #28]
 800f56e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f570:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f574:	ea43 0102 	orr.w	r1, r3, r2
 800f578:	9b08      	ldr	r3, [sp, #32]
 800f57a:	430b      	orrs	r3, r1
 800f57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f57e:	d10d      	bne.n	800f59c <_dtoa_r+0x9a4>
 800f580:	2b39      	cmp	r3, #57	; 0x39
 800f582:	d029      	beq.n	800f5d8 <_dtoa_r+0x9e0>
 800f584:	f1ba 0f00 	cmp.w	sl, #0
 800f588:	dd01      	ble.n	800f58e <_dtoa_r+0x996>
 800f58a:	9b06      	ldr	r3, [sp, #24]
 800f58c:	3331      	adds	r3, #49	; 0x31
 800f58e:	9a02      	ldr	r2, [sp, #8]
 800f590:	7013      	strb	r3, [r2, #0]
 800f592:	e774      	b.n	800f47e <_dtoa_r+0x886>
 800f594:	4638      	mov	r0, r7
 800f596:	e7b8      	b.n	800f50a <_dtoa_r+0x912>
 800f598:	2201      	movs	r2, #1
 800f59a:	e7e1      	b.n	800f560 <_dtoa_r+0x968>
 800f59c:	f1ba 0f00 	cmp.w	sl, #0
 800f5a0:	db06      	blt.n	800f5b0 <_dtoa_r+0x9b8>
 800f5a2:	9907      	ldr	r1, [sp, #28]
 800f5a4:	ea41 0a0a 	orr.w	sl, r1, sl
 800f5a8:	9908      	ldr	r1, [sp, #32]
 800f5aa:	ea5a 0101 	orrs.w	r1, sl, r1
 800f5ae:	d120      	bne.n	800f5f2 <_dtoa_r+0x9fa>
 800f5b0:	2a00      	cmp	r2, #0
 800f5b2:	ddec      	ble.n	800f58e <_dtoa_r+0x996>
 800f5b4:	4629      	mov	r1, r5
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	4630      	mov	r0, r6
 800f5ba:	9305      	str	r3, [sp, #20]
 800f5bc:	f000 fac0 	bl	800fb40 <__lshift>
 800f5c0:	4621      	mov	r1, r4
 800f5c2:	4605      	mov	r5, r0
 800f5c4:	f000 fb28 	bl	800fc18 <__mcmp>
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	9b05      	ldr	r3, [sp, #20]
 800f5cc:	dc02      	bgt.n	800f5d4 <_dtoa_r+0x9dc>
 800f5ce:	d1de      	bne.n	800f58e <_dtoa_r+0x996>
 800f5d0:	07da      	lsls	r2, r3, #31
 800f5d2:	d5dc      	bpl.n	800f58e <_dtoa_r+0x996>
 800f5d4:	2b39      	cmp	r3, #57	; 0x39
 800f5d6:	d1d8      	bne.n	800f58a <_dtoa_r+0x992>
 800f5d8:	9a02      	ldr	r2, [sp, #8]
 800f5da:	2339      	movs	r3, #57	; 0x39
 800f5dc:	7013      	strb	r3, [r2, #0]
 800f5de:	4643      	mov	r3, r8
 800f5e0:	4698      	mov	r8, r3
 800f5e2:	3b01      	subs	r3, #1
 800f5e4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f5e8:	2a39      	cmp	r2, #57	; 0x39
 800f5ea:	d051      	beq.n	800f690 <_dtoa_r+0xa98>
 800f5ec:	3201      	adds	r2, #1
 800f5ee:	701a      	strb	r2, [r3, #0]
 800f5f0:	e745      	b.n	800f47e <_dtoa_r+0x886>
 800f5f2:	2a00      	cmp	r2, #0
 800f5f4:	dd03      	ble.n	800f5fe <_dtoa_r+0xa06>
 800f5f6:	2b39      	cmp	r3, #57	; 0x39
 800f5f8:	d0ee      	beq.n	800f5d8 <_dtoa_r+0x9e0>
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	e7c7      	b.n	800f58e <_dtoa_r+0x996>
 800f5fe:	9a05      	ldr	r2, [sp, #20]
 800f600:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f602:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f606:	428a      	cmp	r2, r1
 800f608:	d02b      	beq.n	800f662 <_dtoa_r+0xa6a>
 800f60a:	4629      	mov	r1, r5
 800f60c:	2300      	movs	r3, #0
 800f60e:	220a      	movs	r2, #10
 800f610:	4630      	mov	r0, r6
 800f612:	f000 f8e5 	bl	800f7e0 <__multadd>
 800f616:	45b9      	cmp	r9, r7
 800f618:	4605      	mov	r5, r0
 800f61a:	f04f 0300 	mov.w	r3, #0
 800f61e:	f04f 020a 	mov.w	r2, #10
 800f622:	4649      	mov	r1, r9
 800f624:	4630      	mov	r0, r6
 800f626:	d107      	bne.n	800f638 <_dtoa_r+0xa40>
 800f628:	f000 f8da 	bl	800f7e0 <__multadd>
 800f62c:	4681      	mov	r9, r0
 800f62e:	4607      	mov	r7, r0
 800f630:	9b05      	ldr	r3, [sp, #20]
 800f632:	3301      	adds	r3, #1
 800f634:	9305      	str	r3, [sp, #20]
 800f636:	e774      	b.n	800f522 <_dtoa_r+0x92a>
 800f638:	f000 f8d2 	bl	800f7e0 <__multadd>
 800f63c:	4639      	mov	r1, r7
 800f63e:	4681      	mov	r9, r0
 800f640:	2300      	movs	r3, #0
 800f642:	220a      	movs	r2, #10
 800f644:	4630      	mov	r0, r6
 800f646:	f000 f8cb 	bl	800f7e0 <__multadd>
 800f64a:	4607      	mov	r7, r0
 800f64c:	e7f0      	b.n	800f630 <_dtoa_r+0xa38>
 800f64e:	f1ba 0f00 	cmp.w	sl, #0
 800f652:	9a00      	ldr	r2, [sp, #0]
 800f654:	bfcc      	ite	gt
 800f656:	46d0      	movgt	r8, sl
 800f658:	f04f 0801 	movle.w	r8, #1
 800f65c:	4490      	add	r8, r2
 800f65e:	f04f 0900 	mov.w	r9, #0
 800f662:	4629      	mov	r1, r5
 800f664:	2201      	movs	r2, #1
 800f666:	4630      	mov	r0, r6
 800f668:	9302      	str	r3, [sp, #8]
 800f66a:	f000 fa69 	bl	800fb40 <__lshift>
 800f66e:	4621      	mov	r1, r4
 800f670:	4605      	mov	r5, r0
 800f672:	f000 fad1 	bl	800fc18 <__mcmp>
 800f676:	2800      	cmp	r0, #0
 800f678:	dcb1      	bgt.n	800f5de <_dtoa_r+0x9e6>
 800f67a:	d102      	bne.n	800f682 <_dtoa_r+0xa8a>
 800f67c:	9b02      	ldr	r3, [sp, #8]
 800f67e:	07db      	lsls	r3, r3, #31
 800f680:	d4ad      	bmi.n	800f5de <_dtoa_r+0x9e6>
 800f682:	4643      	mov	r3, r8
 800f684:	4698      	mov	r8, r3
 800f686:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f68a:	2a30      	cmp	r2, #48	; 0x30
 800f68c:	d0fa      	beq.n	800f684 <_dtoa_r+0xa8c>
 800f68e:	e6f6      	b.n	800f47e <_dtoa_r+0x886>
 800f690:	9a00      	ldr	r2, [sp, #0]
 800f692:	429a      	cmp	r2, r3
 800f694:	d1a4      	bne.n	800f5e0 <_dtoa_r+0x9e8>
 800f696:	f10b 0b01 	add.w	fp, fp, #1
 800f69a:	2331      	movs	r3, #49	; 0x31
 800f69c:	e778      	b.n	800f590 <_dtoa_r+0x998>
 800f69e:	4b15      	ldr	r3, [pc, #84]	; (800f6f4 <_dtoa_r+0xafc>)
 800f6a0:	f7ff bb12 	b.w	800ecc8 <_dtoa_r+0xd0>
 800f6a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	f47f aaee 	bne.w	800ec88 <_dtoa_r+0x90>
 800f6ac:	4b12      	ldr	r3, [pc, #72]	; (800f6f8 <_dtoa_r+0xb00>)
 800f6ae:	f7ff bb0b 	b.w	800ecc8 <_dtoa_r+0xd0>
 800f6b2:	f1ba 0f00 	cmp.w	sl, #0
 800f6b6:	dc03      	bgt.n	800f6c0 <_dtoa_r+0xac8>
 800f6b8:	9b07      	ldr	r3, [sp, #28]
 800f6ba:	2b02      	cmp	r3, #2
 800f6bc:	f73f aec7 	bgt.w	800f44e <_dtoa_r+0x856>
 800f6c0:	f8dd 8000 	ldr.w	r8, [sp]
 800f6c4:	4621      	mov	r1, r4
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	f7ff fa08 	bl	800eadc <quorem>
 800f6cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f6d0:	f808 3b01 	strb.w	r3, [r8], #1
 800f6d4:	9a00      	ldr	r2, [sp, #0]
 800f6d6:	eba8 0202 	sub.w	r2, r8, r2
 800f6da:	4592      	cmp	sl, r2
 800f6dc:	ddb7      	ble.n	800f64e <_dtoa_r+0xa56>
 800f6de:	4629      	mov	r1, r5
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	220a      	movs	r2, #10
 800f6e4:	4630      	mov	r0, r6
 800f6e6:	f000 f87b 	bl	800f7e0 <__multadd>
 800f6ea:	4605      	mov	r5, r0
 800f6ec:	e7ea      	b.n	800f6c4 <_dtoa_r+0xacc>
 800f6ee:	bf00      	nop
 800f6f0:	0806facb 	.word	0x0806facb
 800f6f4:	0806fa24 	.word	0x0806fa24
 800f6f8:	0806fa48 	.word	0x0806fa48

0800f6fc <_localeconv_r>:
 800f6fc:	4800      	ldr	r0, [pc, #0]	; (800f700 <_localeconv_r+0x4>)
 800f6fe:	4770      	bx	lr
 800f700:	24002064 	.word	0x24002064

0800f704 <__malloc_lock>:
 800f704:	4801      	ldr	r0, [pc, #4]	; (800f70c <__malloc_lock+0x8>)
 800f706:	f000 bd48 	b.w	801019a <__retarget_lock_acquire_recursive>
 800f70a:	bf00      	nop
 800f70c:	24010bd8 	.word	0x24010bd8

0800f710 <__malloc_unlock>:
 800f710:	4801      	ldr	r0, [pc, #4]	; (800f718 <__malloc_unlock+0x8>)
 800f712:	f000 bd43 	b.w	801019c <__retarget_lock_release_recursive>
 800f716:	bf00      	nop
 800f718:	24010bd8 	.word	0x24010bd8

0800f71c <_Balloc>:
 800f71c:	b570      	push	{r4, r5, r6, lr}
 800f71e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f720:	4604      	mov	r4, r0
 800f722:	460d      	mov	r5, r1
 800f724:	b976      	cbnz	r6, 800f744 <_Balloc+0x28>
 800f726:	2010      	movs	r0, #16
 800f728:	f7fe fc9c 	bl	800e064 <malloc>
 800f72c:	4602      	mov	r2, r0
 800f72e:	6260      	str	r0, [r4, #36]	; 0x24
 800f730:	b920      	cbnz	r0, 800f73c <_Balloc+0x20>
 800f732:	4b18      	ldr	r3, [pc, #96]	; (800f794 <_Balloc+0x78>)
 800f734:	4818      	ldr	r0, [pc, #96]	; (800f798 <_Balloc+0x7c>)
 800f736:	2166      	movs	r1, #102	; 0x66
 800f738:	f000 fcfe 	bl	8010138 <__assert_func>
 800f73c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f740:	6006      	str	r6, [r0, #0]
 800f742:	60c6      	str	r6, [r0, #12]
 800f744:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f746:	68f3      	ldr	r3, [r6, #12]
 800f748:	b183      	cbz	r3, 800f76c <_Balloc+0x50>
 800f74a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f74c:	68db      	ldr	r3, [r3, #12]
 800f74e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f752:	b9b8      	cbnz	r0, 800f784 <_Balloc+0x68>
 800f754:	2101      	movs	r1, #1
 800f756:	fa01 f605 	lsl.w	r6, r1, r5
 800f75a:	1d72      	adds	r2, r6, #5
 800f75c:	0092      	lsls	r2, r2, #2
 800f75e:	4620      	mov	r0, r4
 800f760:	f000 fb5a 	bl	800fe18 <_calloc_r>
 800f764:	b160      	cbz	r0, 800f780 <_Balloc+0x64>
 800f766:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f76a:	e00e      	b.n	800f78a <_Balloc+0x6e>
 800f76c:	2221      	movs	r2, #33	; 0x21
 800f76e:	2104      	movs	r1, #4
 800f770:	4620      	mov	r0, r4
 800f772:	f000 fb51 	bl	800fe18 <_calloc_r>
 800f776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f778:	60f0      	str	r0, [r6, #12]
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1e4      	bne.n	800f74a <_Balloc+0x2e>
 800f780:	2000      	movs	r0, #0
 800f782:	bd70      	pop	{r4, r5, r6, pc}
 800f784:	6802      	ldr	r2, [r0, #0]
 800f786:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f78a:	2300      	movs	r3, #0
 800f78c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f790:	e7f7      	b.n	800f782 <_Balloc+0x66>
 800f792:	bf00      	nop
 800f794:	0806fa55 	.word	0x0806fa55
 800f798:	0806fadc 	.word	0x0806fadc

0800f79c <_Bfree>:
 800f79c:	b570      	push	{r4, r5, r6, lr}
 800f79e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f7a0:	4605      	mov	r5, r0
 800f7a2:	460c      	mov	r4, r1
 800f7a4:	b976      	cbnz	r6, 800f7c4 <_Bfree+0x28>
 800f7a6:	2010      	movs	r0, #16
 800f7a8:	f7fe fc5c 	bl	800e064 <malloc>
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	6268      	str	r0, [r5, #36]	; 0x24
 800f7b0:	b920      	cbnz	r0, 800f7bc <_Bfree+0x20>
 800f7b2:	4b09      	ldr	r3, [pc, #36]	; (800f7d8 <_Bfree+0x3c>)
 800f7b4:	4809      	ldr	r0, [pc, #36]	; (800f7dc <_Bfree+0x40>)
 800f7b6:	218a      	movs	r1, #138	; 0x8a
 800f7b8:	f000 fcbe 	bl	8010138 <__assert_func>
 800f7bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7c0:	6006      	str	r6, [r0, #0]
 800f7c2:	60c6      	str	r6, [r0, #12]
 800f7c4:	b13c      	cbz	r4, 800f7d6 <_Bfree+0x3a>
 800f7c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f7c8:	6862      	ldr	r2, [r4, #4]
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7d0:	6021      	str	r1, [r4, #0]
 800f7d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f7d6:	bd70      	pop	{r4, r5, r6, pc}
 800f7d8:	0806fa55 	.word	0x0806fa55
 800f7dc:	0806fadc 	.word	0x0806fadc

0800f7e0 <__multadd>:
 800f7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7e4:	690e      	ldr	r6, [r1, #16]
 800f7e6:	4607      	mov	r7, r0
 800f7e8:	4698      	mov	r8, r3
 800f7ea:	460c      	mov	r4, r1
 800f7ec:	f101 0014 	add.w	r0, r1, #20
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	6805      	ldr	r5, [r0, #0]
 800f7f4:	b2a9      	uxth	r1, r5
 800f7f6:	fb02 8101 	mla	r1, r2, r1, r8
 800f7fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f7fe:	0c2d      	lsrs	r5, r5, #16
 800f800:	fb02 c505 	mla	r5, r2, r5, ip
 800f804:	b289      	uxth	r1, r1
 800f806:	3301      	adds	r3, #1
 800f808:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f80c:	429e      	cmp	r6, r3
 800f80e:	f840 1b04 	str.w	r1, [r0], #4
 800f812:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f816:	dcec      	bgt.n	800f7f2 <__multadd+0x12>
 800f818:	f1b8 0f00 	cmp.w	r8, #0
 800f81c:	d022      	beq.n	800f864 <__multadd+0x84>
 800f81e:	68a3      	ldr	r3, [r4, #8]
 800f820:	42b3      	cmp	r3, r6
 800f822:	dc19      	bgt.n	800f858 <__multadd+0x78>
 800f824:	6861      	ldr	r1, [r4, #4]
 800f826:	4638      	mov	r0, r7
 800f828:	3101      	adds	r1, #1
 800f82a:	f7ff ff77 	bl	800f71c <_Balloc>
 800f82e:	4605      	mov	r5, r0
 800f830:	b928      	cbnz	r0, 800f83e <__multadd+0x5e>
 800f832:	4602      	mov	r2, r0
 800f834:	4b0d      	ldr	r3, [pc, #52]	; (800f86c <__multadd+0x8c>)
 800f836:	480e      	ldr	r0, [pc, #56]	; (800f870 <__multadd+0x90>)
 800f838:	21b5      	movs	r1, #181	; 0xb5
 800f83a:	f000 fc7d 	bl	8010138 <__assert_func>
 800f83e:	6922      	ldr	r2, [r4, #16]
 800f840:	3202      	adds	r2, #2
 800f842:	f104 010c 	add.w	r1, r4, #12
 800f846:	0092      	lsls	r2, r2, #2
 800f848:	300c      	adds	r0, #12
 800f84a:	f7fe fc13 	bl	800e074 <memcpy>
 800f84e:	4621      	mov	r1, r4
 800f850:	4638      	mov	r0, r7
 800f852:	f7ff ffa3 	bl	800f79c <_Bfree>
 800f856:	462c      	mov	r4, r5
 800f858:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f85c:	3601      	adds	r6, #1
 800f85e:	f8c3 8014 	str.w	r8, [r3, #20]
 800f862:	6126      	str	r6, [r4, #16]
 800f864:	4620      	mov	r0, r4
 800f866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f86a:	bf00      	nop
 800f86c:	0806facb 	.word	0x0806facb
 800f870:	0806fadc 	.word	0x0806fadc

0800f874 <__hi0bits>:
 800f874:	0c03      	lsrs	r3, r0, #16
 800f876:	041b      	lsls	r3, r3, #16
 800f878:	b9d3      	cbnz	r3, 800f8b0 <__hi0bits+0x3c>
 800f87a:	0400      	lsls	r0, r0, #16
 800f87c:	2310      	movs	r3, #16
 800f87e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f882:	bf04      	itt	eq
 800f884:	0200      	lsleq	r0, r0, #8
 800f886:	3308      	addeq	r3, #8
 800f888:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f88c:	bf04      	itt	eq
 800f88e:	0100      	lsleq	r0, r0, #4
 800f890:	3304      	addeq	r3, #4
 800f892:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f896:	bf04      	itt	eq
 800f898:	0080      	lsleq	r0, r0, #2
 800f89a:	3302      	addeq	r3, #2
 800f89c:	2800      	cmp	r0, #0
 800f89e:	db05      	blt.n	800f8ac <__hi0bits+0x38>
 800f8a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f8a4:	f103 0301 	add.w	r3, r3, #1
 800f8a8:	bf08      	it	eq
 800f8aa:	2320      	moveq	r3, #32
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	4770      	bx	lr
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	e7e4      	b.n	800f87e <__hi0bits+0xa>

0800f8b4 <__lo0bits>:
 800f8b4:	6803      	ldr	r3, [r0, #0]
 800f8b6:	f013 0207 	ands.w	r2, r3, #7
 800f8ba:	4601      	mov	r1, r0
 800f8bc:	d00b      	beq.n	800f8d6 <__lo0bits+0x22>
 800f8be:	07da      	lsls	r2, r3, #31
 800f8c0:	d424      	bmi.n	800f90c <__lo0bits+0x58>
 800f8c2:	0798      	lsls	r0, r3, #30
 800f8c4:	bf49      	itett	mi
 800f8c6:	085b      	lsrmi	r3, r3, #1
 800f8c8:	089b      	lsrpl	r3, r3, #2
 800f8ca:	2001      	movmi	r0, #1
 800f8cc:	600b      	strmi	r3, [r1, #0]
 800f8ce:	bf5c      	itt	pl
 800f8d0:	600b      	strpl	r3, [r1, #0]
 800f8d2:	2002      	movpl	r0, #2
 800f8d4:	4770      	bx	lr
 800f8d6:	b298      	uxth	r0, r3
 800f8d8:	b9b0      	cbnz	r0, 800f908 <__lo0bits+0x54>
 800f8da:	0c1b      	lsrs	r3, r3, #16
 800f8dc:	2010      	movs	r0, #16
 800f8de:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f8e2:	bf04      	itt	eq
 800f8e4:	0a1b      	lsreq	r3, r3, #8
 800f8e6:	3008      	addeq	r0, #8
 800f8e8:	071a      	lsls	r2, r3, #28
 800f8ea:	bf04      	itt	eq
 800f8ec:	091b      	lsreq	r3, r3, #4
 800f8ee:	3004      	addeq	r0, #4
 800f8f0:	079a      	lsls	r2, r3, #30
 800f8f2:	bf04      	itt	eq
 800f8f4:	089b      	lsreq	r3, r3, #2
 800f8f6:	3002      	addeq	r0, #2
 800f8f8:	07da      	lsls	r2, r3, #31
 800f8fa:	d403      	bmi.n	800f904 <__lo0bits+0x50>
 800f8fc:	085b      	lsrs	r3, r3, #1
 800f8fe:	f100 0001 	add.w	r0, r0, #1
 800f902:	d005      	beq.n	800f910 <__lo0bits+0x5c>
 800f904:	600b      	str	r3, [r1, #0]
 800f906:	4770      	bx	lr
 800f908:	4610      	mov	r0, r2
 800f90a:	e7e8      	b.n	800f8de <__lo0bits+0x2a>
 800f90c:	2000      	movs	r0, #0
 800f90e:	4770      	bx	lr
 800f910:	2020      	movs	r0, #32
 800f912:	4770      	bx	lr

0800f914 <__i2b>:
 800f914:	b510      	push	{r4, lr}
 800f916:	460c      	mov	r4, r1
 800f918:	2101      	movs	r1, #1
 800f91a:	f7ff feff 	bl	800f71c <_Balloc>
 800f91e:	4602      	mov	r2, r0
 800f920:	b928      	cbnz	r0, 800f92e <__i2b+0x1a>
 800f922:	4b05      	ldr	r3, [pc, #20]	; (800f938 <__i2b+0x24>)
 800f924:	4805      	ldr	r0, [pc, #20]	; (800f93c <__i2b+0x28>)
 800f926:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f92a:	f000 fc05 	bl	8010138 <__assert_func>
 800f92e:	2301      	movs	r3, #1
 800f930:	6144      	str	r4, [r0, #20]
 800f932:	6103      	str	r3, [r0, #16]
 800f934:	bd10      	pop	{r4, pc}
 800f936:	bf00      	nop
 800f938:	0806facb 	.word	0x0806facb
 800f93c:	0806fadc 	.word	0x0806fadc

0800f940 <__multiply>:
 800f940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f944:	4614      	mov	r4, r2
 800f946:	690a      	ldr	r2, [r1, #16]
 800f948:	6923      	ldr	r3, [r4, #16]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	bfb8      	it	lt
 800f94e:	460b      	movlt	r3, r1
 800f950:	460d      	mov	r5, r1
 800f952:	bfbc      	itt	lt
 800f954:	4625      	movlt	r5, r4
 800f956:	461c      	movlt	r4, r3
 800f958:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f95c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f960:	68ab      	ldr	r3, [r5, #8]
 800f962:	6869      	ldr	r1, [r5, #4]
 800f964:	eb0a 0709 	add.w	r7, sl, r9
 800f968:	42bb      	cmp	r3, r7
 800f96a:	b085      	sub	sp, #20
 800f96c:	bfb8      	it	lt
 800f96e:	3101      	addlt	r1, #1
 800f970:	f7ff fed4 	bl	800f71c <_Balloc>
 800f974:	b930      	cbnz	r0, 800f984 <__multiply+0x44>
 800f976:	4602      	mov	r2, r0
 800f978:	4b42      	ldr	r3, [pc, #264]	; (800fa84 <__multiply+0x144>)
 800f97a:	4843      	ldr	r0, [pc, #268]	; (800fa88 <__multiply+0x148>)
 800f97c:	f240 115d 	movw	r1, #349	; 0x15d
 800f980:	f000 fbda 	bl	8010138 <__assert_func>
 800f984:	f100 0614 	add.w	r6, r0, #20
 800f988:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f98c:	4633      	mov	r3, r6
 800f98e:	2200      	movs	r2, #0
 800f990:	4543      	cmp	r3, r8
 800f992:	d31e      	bcc.n	800f9d2 <__multiply+0x92>
 800f994:	f105 0c14 	add.w	ip, r5, #20
 800f998:	f104 0314 	add.w	r3, r4, #20
 800f99c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f9a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f9a4:	9202      	str	r2, [sp, #8]
 800f9a6:	ebac 0205 	sub.w	r2, ip, r5
 800f9aa:	3a15      	subs	r2, #21
 800f9ac:	f022 0203 	bic.w	r2, r2, #3
 800f9b0:	3204      	adds	r2, #4
 800f9b2:	f105 0115 	add.w	r1, r5, #21
 800f9b6:	458c      	cmp	ip, r1
 800f9b8:	bf38      	it	cc
 800f9ba:	2204      	movcc	r2, #4
 800f9bc:	9201      	str	r2, [sp, #4]
 800f9be:	9a02      	ldr	r2, [sp, #8]
 800f9c0:	9303      	str	r3, [sp, #12]
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d808      	bhi.n	800f9d8 <__multiply+0x98>
 800f9c6:	2f00      	cmp	r7, #0
 800f9c8:	dc55      	bgt.n	800fa76 <__multiply+0x136>
 800f9ca:	6107      	str	r7, [r0, #16]
 800f9cc:	b005      	add	sp, #20
 800f9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d2:	f843 2b04 	str.w	r2, [r3], #4
 800f9d6:	e7db      	b.n	800f990 <__multiply+0x50>
 800f9d8:	f8b3 a000 	ldrh.w	sl, [r3]
 800f9dc:	f1ba 0f00 	cmp.w	sl, #0
 800f9e0:	d020      	beq.n	800fa24 <__multiply+0xe4>
 800f9e2:	f105 0e14 	add.w	lr, r5, #20
 800f9e6:	46b1      	mov	r9, r6
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f9ee:	f8d9 b000 	ldr.w	fp, [r9]
 800f9f2:	b2a1      	uxth	r1, r4
 800f9f4:	fa1f fb8b 	uxth.w	fp, fp
 800f9f8:	fb0a b101 	mla	r1, sl, r1, fp
 800f9fc:	4411      	add	r1, r2
 800f9fe:	f8d9 2000 	ldr.w	r2, [r9]
 800fa02:	0c24      	lsrs	r4, r4, #16
 800fa04:	0c12      	lsrs	r2, r2, #16
 800fa06:	fb0a 2404 	mla	r4, sl, r4, r2
 800fa0a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fa0e:	b289      	uxth	r1, r1
 800fa10:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fa14:	45f4      	cmp	ip, lr
 800fa16:	f849 1b04 	str.w	r1, [r9], #4
 800fa1a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fa1e:	d8e4      	bhi.n	800f9ea <__multiply+0xaa>
 800fa20:	9901      	ldr	r1, [sp, #4]
 800fa22:	5072      	str	r2, [r6, r1]
 800fa24:	9a03      	ldr	r2, [sp, #12]
 800fa26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fa2a:	3304      	adds	r3, #4
 800fa2c:	f1b9 0f00 	cmp.w	r9, #0
 800fa30:	d01f      	beq.n	800fa72 <__multiply+0x132>
 800fa32:	6834      	ldr	r4, [r6, #0]
 800fa34:	f105 0114 	add.w	r1, r5, #20
 800fa38:	46b6      	mov	lr, r6
 800fa3a:	f04f 0a00 	mov.w	sl, #0
 800fa3e:	880a      	ldrh	r2, [r1, #0]
 800fa40:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fa44:	fb09 b202 	mla	r2, r9, r2, fp
 800fa48:	4492      	add	sl, r2
 800fa4a:	b2a4      	uxth	r4, r4
 800fa4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fa50:	f84e 4b04 	str.w	r4, [lr], #4
 800fa54:	f851 4b04 	ldr.w	r4, [r1], #4
 800fa58:	f8be 2000 	ldrh.w	r2, [lr]
 800fa5c:	0c24      	lsrs	r4, r4, #16
 800fa5e:	fb09 2404 	mla	r4, r9, r4, r2
 800fa62:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fa66:	458c      	cmp	ip, r1
 800fa68:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fa6c:	d8e7      	bhi.n	800fa3e <__multiply+0xfe>
 800fa6e:	9a01      	ldr	r2, [sp, #4]
 800fa70:	50b4      	str	r4, [r6, r2]
 800fa72:	3604      	adds	r6, #4
 800fa74:	e7a3      	b.n	800f9be <__multiply+0x7e>
 800fa76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d1a5      	bne.n	800f9ca <__multiply+0x8a>
 800fa7e:	3f01      	subs	r7, #1
 800fa80:	e7a1      	b.n	800f9c6 <__multiply+0x86>
 800fa82:	bf00      	nop
 800fa84:	0806facb 	.word	0x0806facb
 800fa88:	0806fadc 	.word	0x0806fadc

0800fa8c <__pow5mult>:
 800fa8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa90:	4615      	mov	r5, r2
 800fa92:	f012 0203 	ands.w	r2, r2, #3
 800fa96:	4606      	mov	r6, r0
 800fa98:	460f      	mov	r7, r1
 800fa9a:	d007      	beq.n	800faac <__pow5mult+0x20>
 800fa9c:	4c25      	ldr	r4, [pc, #148]	; (800fb34 <__pow5mult+0xa8>)
 800fa9e:	3a01      	subs	r2, #1
 800faa0:	2300      	movs	r3, #0
 800faa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800faa6:	f7ff fe9b 	bl	800f7e0 <__multadd>
 800faaa:	4607      	mov	r7, r0
 800faac:	10ad      	asrs	r5, r5, #2
 800faae:	d03d      	beq.n	800fb2c <__pow5mult+0xa0>
 800fab0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fab2:	b97c      	cbnz	r4, 800fad4 <__pow5mult+0x48>
 800fab4:	2010      	movs	r0, #16
 800fab6:	f7fe fad5 	bl	800e064 <malloc>
 800faba:	4602      	mov	r2, r0
 800fabc:	6270      	str	r0, [r6, #36]	; 0x24
 800fabe:	b928      	cbnz	r0, 800facc <__pow5mult+0x40>
 800fac0:	4b1d      	ldr	r3, [pc, #116]	; (800fb38 <__pow5mult+0xac>)
 800fac2:	481e      	ldr	r0, [pc, #120]	; (800fb3c <__pow5mult+0xb0>)
 800fac4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fac8:	f000 fb36 	bl	8010138 <__assert_func>
 800facc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fad0:	6004      	str	r4, [r0, #0]
 800fad2:	60c4      	str	r4, [r0, #12]
 800fad4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fad8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fadc:	b94c      	cbnz	r4, 800faf2 <__pow5mult+0x66>
 800fade:	f240 2171 	movw	r1, #625	; 0x271
 800fae2:	4630      	mov	r0, r6
 800fae4:	f7ff ff16 	bl	800f914 <__i2b>
 800fae8:	2300      	movs	r3, #0
 800faea:	f8c8 0008 	str.w	r0, [r8, #8]
 800faee:	4604      	mov	r4, r0
 800faf0:	6003      	str	r3, [r0, #0]
 800faf2:	f04f 0900 	mov.w	r9, #0
 800faf6:	07eb      	lsls	r3, r5, #31
 800faf8:	d50a      	bpl.n	800fb10 <__pow5mult+0x84>
 800fafa:	4639      	mov	r1, r7
 800fafc:	4622      	mov	r2, r4
 800fafe:	4630      	mov	r0, r6
 800fb00:	f7ff ff1e 	bl	800f940 <__multiply>
 800fb04:	4639      	mov	r1, r7
 800fb06:	4680      	mov	r8, r0
 800fb08:	4630      	mov	r0, r6
 800fb0a:	f7ff fe47 	bl	800f79c <_Bfree>
 800fb0e:	4647      	mov	r7, r8
 800fb10:	106d      	asrs	r5, r5, #1
 800fb12:	d00b      	beq.n	800fb2c <__pow5mult+0xa0>
 800fb14:	6820      	ldr	r0, [r4, #0]
 800fb16:	b938      	cbnz	r0, 800fb28 <__pow5mult+0x9c>
 800fb18:	4622      	mov	r2, r4
 800fb1a:	4621      	mov	r1, r4
 800fb1c:	4630      	mov	r0, r6
 800fb1e:	f7ff ff0f 	bl	800f940 <__multiply>
 800fb22:	6020      	str	r0, [r4, #0]
 800fb24:	f8c0 9000 	str.w	r9, [r0]
 800fb28:	4604      	mov	r4, r0
 800fb2a:	e7e4      	b.n	800faf6 <__pow5mult+0x6a>
 800fb2c:	4638      	mov	r0, r7
 800fb2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb32:	bf00      	nop
 800fb34:	0806fc30 	.word	0x0806fc30
 800fb38:	0806fa55 	.word	0x0806fa55
 800fb3c:	0806fadc 	.word	0x0806fadc

0800fb40 <__lshift>:
 800fb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb44:	460c      	mov	r4, r1
 800fb46:	6849      	ldr	r1, [r1, #4]
 800fb48:	6923      	ldr	r3, [r4, #16]
 800fb4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb4e:	68a3      	ldr	r3, [r4, #8]
 800fb50:	4607      	mov	r7, r0
 800fb52:	4691      	mov	r9, r2
 800fb54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb58:	f108 0601 	add.w	r6, r8, #1
 800fb5c:	42b3      	cmp	r3, r6
 800fb5e:	db0b      	blt.n	800fb78 <__lshift+0x38>
 800fb60:	4638      	mov	r0, r7
 800fb62:	f7ff fddb 	bl	800f71c <_Balloc>
 800fb66:	4605      	mov	r5, r0
 800fb68:	b948      	cbnz	r0, 800fb7e <__lshift+0x3e>
 800fb6a:	4602      	mov	r2, r0
 800fb6c:	4b28      	ldr	r3, [pc, #160]	; (800fc10 <__lshift+0xd0>)
 800fb6e:	4829      	ldr	r0, [pc, #164]	; (800fc14 <__lshift+0xd4>)
 800fb70:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fb74:	f000 fae0 	bl	8010138 <__assert_func>
 800fb78:	3101      	adds	r1, #1
 800fb7a:	005b      	lsls	r3, r3, #1
 800fb7c:	e7ee      	b.n	800fb5c <__lshift+0x1c>
 800fb7e:	2300      	movs	r3, #0
 800fb80:	f100 0114 	add.w	r1, r0, #20
 800fb84:	f100 0210 	add.w	r2, r0, #16
 800fb88:	4618      	mov	r0, r3
 800fb8a:	4553      	cmp	r3, sl
 800fb8c:	db33      	blt.n	800fbf6 <__lshift+0xb6>
 800fb8e:	6920      	ldr	r0, [r4, #16]
 800fb90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb94:	f104 0314 	add.w	r3, r4, #20
 800fb98:	f019 091f 	ands.w	r9, r9, #31
 800fb9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fba0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fba4:	d02b      	beq.n	800fbfe <__lshift+0xbe>
 800fba6:	f1c9 0e20 	rsb	lr, r9, #32
 800fbaa:	468a      	mov	sl, r1
 800fbac:	2200      	movs	r2, #0
 800fbae:	6818      	ldr	r0, [r3, #0]
 800fbb0:	fa00 f009 	lsl.w	r0, r0, r9
 800fbb4:	4302      	orrs	r2, r0
 800fbb6:	f84a 2b04 	str.w	r2, [sl], #4
 800fbba:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbbe:	459c      	cmp	ip, r3
 800fbc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800fbc4:	d8f3      	bhi.n	800fbae <__lshift+0x6e>
 800fbc6:	ebac 0304 	sub.w	r3, ip, r4
 800fbca:	3b15      	subs	r3, #21
 800fbcc:	f023 0303 	bic.w	r3, r3, #3
 800fbd0:	3304      	adds	r3, #4
 800fbd2:	f104 0015 	add.w	r0, r4, #21
 800fbd6:	4584      	cmp	ip, r0
 800fbd8:	bf38      	it	cc
 800fbda:	2304      	movcc	r3, #4
 800fbdc:	50ca      	str	r2, [r1, r3]
 800fbde:	b10a      	cbz	r2, 800fbe4 <__lshift+0xa4>
 800fbe0:	f108 0602 	add.w	r6, r8, #2
 800fbe4:	3e01      	subs	r6, #1
 800fbe6:	4638      	mov	r0, r7
 800fbe8:	612e      	str	r6, [r5, #16]
 800fbea:	4621      	mov	r1, r4
 800fbec:	f7ff fdd6 	bl	800f79c <_Bfree>
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	e7c5      	b.n	800fb8a <__lshift+0x4a>
 800fbfe:	3904      	subs	r1, #4
 800fc00:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc04:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc08:	459c      	cmp	ip, r3
 800fc0a:	d8f9      	bhi.n	800fc00 <__lshift+0xc0>
 800fc0c:	e7ea      	b.n	800fbe4 <__lshift+0xa4>
 800fc0e:	bf00      	nop
 800fc10:	0806facb 	.word	0x0806facb
 800fc14:	0806fadc 	.word	0x0806fadc

0800fc18 <__mcmp>:
 800fc18:	b530      	push	{r4, r5, lr}
 800fc1a:	6902      	ldr	r2, [r0, #16]
 800fc1c:	690c      	ldr	r4, [r1, #16]
 800fc1e:	1b12      	subs	r2, r2, r4
 800fc20:	d10e      	bne.n	800fc40 <__mcmp+0x28>
 800fc22:	f100 0314 	add.w	r3, r0, #20
 800fc26:	3114      	adds	r1, #20
 800fc28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fc2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fc30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fc34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fc38:	42a5      	cmp	r5, r4
 800fc3a:	d003      	beq.n	800fc44 <__mcmp+0x2c>
 800fc3c:	d305      	bcc.n	800fc4a <__mcmp+0x32>
 800fc3e:	2201      	movs	r2, #1
 800fc40:	4610      	mov	r0, r2
 800fc42:	bd30      	pop	{r4, r5, pc}
 800fc44:	4283      	cmp	r3, r0
 800fc46:	d3f3      	bcc.n	800fc30 <__mcmp+0x18>
 800fc48:	e7fa      	b.n	800fc40 <__mcmp+0x28>
 800fc4a:	f04f 32ff 	mov.w	r2, #4294967295
 800fc4e:	e7f7      	b.n	800fc40 <__mcmp+0x28>

0800fc50 <__mdiff>:
 800fc50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc54:	460c      	mov	r4, r1
 800fc56:	4606      	mov	r6, r0
 800fc58:	4611      	mov	r1, r2
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	4617      	mov	r7, r2
 800fc5e:	f7ff ffdb 	bl	800fc18 <__mcmp>
 800fc62:	1e05      	subs	r5, r0, #0
 800fc64:	d110      	bne.n	800fc88 <__mdiff+0x38>
 800fc66:	4629      	mov	r1, r5
 800fc68:	4630      	mov	r0, r6
 800fc6a:	f7ff fd57 	bl	800f71c <_Balloc>
 800fc6e:	b930      	cbnz	r0, 800fc7e <__mdiff+0x2e>
 800fc70:	4b39      	ldr	r3, [pc, #228]	; (800fd58 <__mdiff+0x108>)
 800fc72:	4602      	mov	r2, r0
 800fc74:	f240 2132 	movw	r1, #562	; 0x232
 800fc78:	4838      	ldr	r0, [pc, #224]	; (800fd5c <__mdiff+0x10c>)
 800fc7a:	f000 fa5d 	bl	8010138 <__assert_func>
 800fc7e:	2301      	movs	r3, #1
 800fc80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fc84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc88:	bfa4      	itt	ge
 800fc8a:	463b      	movge	r3, r7
 800fc8c:	4627      	movge	r7, r4
 800fc8e:	4630      	mov	r0, r6
 800fc90:	6879      	ldr	r1, [r7, #4]
 800fc92:	bfa6      	itte	ge
 800fc94:	461c      	movge	r4, r3
 800fc96:	2500      	movge	r5, #0
 800fc98:	2501      	movlt	r5, #1
 800fc9a:	f7ff fd3f 	bl	800f71c <_Balloc>
 800fc9e:	b920      	cbnz	r0, 800fcaa <__mdiff+0x5a>
 800fca0:	4b2d      	ldr	r3, [pc, #180]	; (800fd58 <__mdiff+0x108>)
 800fca2:	4602      	mov	r2, r0
 800fca4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fca8:	e7e6      	b.n	800fc78 <__mdiff+0x28>
 800fcaa:	693e      	ldr	r6, [r7, #16]
 800fcac:	60c5      	str	r5, [r0, #12]
 800fcae:	6925      	ldr	r5, [r4, #16]
 800fcb0:	f107 0114 	add.w	r1, r7, #20
 800fcb4:	f104 0914 	add.w	r9, r4, #20
 800fcb8:	f100 0e14 	add.w	lr, r0, #20
 800fcbc:	f107 0210 	add.w	r2, r7, #16
 800fcc0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fcc4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fcc8:	46f2      	mov	sl, lr
 800fcca:	2700      	movs	r7, #0
 800fccc:	f859 3b04 	ldr.w	r3, [r9], #4
 800fcd0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fcd4:	fa1f f883 	uxth.w	r8, r3
 800fcd8:	fa17 f78b 	uxtah	r7, r7, fp
 800fcdc:	0c1b      	lsrs	r3, r3, #16
 800fcde:	eba7 0808 	sub.w	r8, r7, r8
 800fce2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fce6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fcea:	fa1f f888 	uxth.w	r8, r8
 800fcee:	141f      	asrs	r7, r3, #16
 800fcf0:	454d      	cmp	r5, r9
 800fcf2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fcf6:	f84a 3b04 	str.w	r3, [sl], #4
 800fcfa:	d8e7      	bhi.n	800fccc <__mdiff+0x7c>
 800fcfc:	1b2b      	subs	r3, r5, r4
 800fcfe:	3b15      	subs	r3, #21
 800fd00:	f023 0303 	bic.w	r3, r3, #3
 800fd04:	3304      	adds	r3, #4
 800fd06:	3415      	adds	r4, #21
 800fd08:	42a5      	cmp	r5, r4
 800fd0a:	bf38      	it	cc
 800fd0c:	2304      	movcc	r3, #4
 800fd0e:	4419      	add	r1, r3
 800fd10:	4473      	add	r3, lr
 800fd12:	469e      	mov	lr, r3
 800fd14:	460d      	mov	r5, r1
 800fd16:	4565      	cmp	r5, ip
 800fd18:	d30e      	bcc.n	800fd38 <__mdiff+0xe8>
 800fd1a:	f10c 0203 	add.w	r2, ip, #3
 800fd1e:	1a52      	subs	r2, r2, r1
 800fd20:	f022 0203 	bic.w	r2, r2, #3
 800fd24:	3903      	subs	r1, #3
 800fd26:	458c      	cmp	ip, r1
 800fd28:	bf38      	it	cc
 800fd2a:	2200      	movcc	r2, #0
 800fd2c:	441a      	add	r2, r3
 800fd2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fd32:	b17b      	cbz	r3, 800fd54 <__mdiff+0x104>
 800fd34:	6106      	str	r6, [r0, #16]
 800fd36:	e7a5      	b.n	800fc84 <__mdiff+0x34>
 800fd38:	f855 8b04 	ldr.w	r8, [r5], #4
 800fd3c:	fa17 f488 	uxtah	r4, r7, r8
 800fd40:	1422      	asrs	r2, r4, #16
 800fd42:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fd46:	b2a4      	uxth	r4, r4
 800fd48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800fd4c:	f84e 4b04 	str.w	r4, [lr], #4
 800fd50:	1417      	asrs	r7, r2, #16
 800fd52:	e7e0      	b.n	800fd16 <__mdiff+0xc6>
 800fd54:	3e01      	subs	r6, #1
 800fd56:	e7ea      	b.n	800fd2e <__mdiff+0xde>
 800fd58:	0806facb 	.word	0x0806facb
 800fd5c:	0806fadc 	.word	0x0806fadc

0800fd60 <__d2b>:
 800fd60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd64:	4689      	mov	r9, r1
 800fd66:	2101      	movs	r1, #1
 800fd68:	ec57 6b10 	vmov	r6, r7, d0
 800fd6c:	4690      	mov	r8, r2
 800fd6e:	f7ff fcd5 	bl	800f71c <_Balloc>
 800fd72:	4604      	mov	r4, r0
 800fd74:	b930      	cbnz	r0, 800fd84 <__d2b+0x24>
 800fd76:	4602      	mov	r2, r0
 800fd78:	4b25      	ldr	r3, [pc, #148]	; (800fe10 <__d2b+0xb0>)
 800fd7a:	4826      	ldr	r0, [pc, #152]	; (800fe14 <__d2b+0xb4>)
 800fd7c:	f240 310a 	movw	r1, #778	; 0x30a
 800fd80:	f000 f9da 	bl	8010138 <__assert_func>
 800fd84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fd88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fd8c:	bb35      	cbnz	r5, 800fddc <__d2b+0x7c>
 800fd8e:	2e00      	cmp	r6, #0
 800fd90:	9301      	str	r3, [sp, #4]
 800fd92:	d028      	beq.n	800fde6 <__d2b+0x86>
 800fd94:	4668      	mov	r0, sp
 800fd96:	9600      	str	r6, [sp, #0]
 800fd98:	f7ff fd8c 	bl	800f8b4 <__lo0bits>
 800fd9c:	9900      	ldr	r1, [sp, #0]
 800fd9e:	b300      	cbz	r0, 800fde2 <__d2b+0x82>
 800fda0:	9a01      	ldr	r2, [sp, #4]
 800fda2:	f1c0 0320 	rsb	r3, r0, #32
 800fda6:	fa02 f303 	lsl.w	r3, r2, r3
 800fdaa:	430b      	orrs	r3, r1
 800fdac:	40c2      	lsrs	r2, r0
 800fdae:	6163      	str	r3, [r4, #20]
 800fdb0:	9201      	str	r2, [sp, #4]
 800fdb2:	9b01      	ldr	r3, [sp, #4]
 800fdb4:	61a3      	str	r3, [r4, #24]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	bf14      	ite	ne
 800fdba:	2202      	movne	r2, #2
 800fdbc:	2201      	moveq	r2, #1
 800fdbe:	6122      	str	r2, [r4, #16]
 800fdc0:	b1d5      	cbz	r5, 800fdf8 <__d2b+0x98>
 800fdc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fdc6:	4405      	add	r5, r0
 800fdc8:	f8c9 5000 	str.w	r5, [r9]
 800fdcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fdd0:	f8c8 0000 	str.w	r0, [r8]
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	b003      	add	sp, #12
 800fdd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fde0:	e7d5      	b.n	800fd8e <__d2b+0x2e>
 800fde2:	6161      	str	r1, [r4, #20]
 800fde4:	e7e5      	b.n	800fdb2 <__d2b+0x52>
 800fde6:	a801      	add	r0, sp, #4
 800fde8:	f7ff fd64 	bl	800f8b4 <__lo0bits>
 800fdec:	9b01      	ldr	r3, [sp, #4]
 800fdee:	6163      	str	r3, [r4, #20]
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	6122      	str	r2, [r4, #16]
 800fdf4:	3020      	adds	r0, #32
 800fdf6:	e7e3      	b.n	800fdc0 <__d2b+0x60>
 800fdf8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fdfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe00:	f8c9 0000 	str.w	r0, [r9]
 800fe04:	6918      	ldr	r0, [r3, #16]
 800fe06:	f7ff fd35 	bl	800f874 <__hi0bits>
 800fe0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe0e:	e7df      	b.n	800fdd0 <__d2b+0x70>
 800fe10:	0806facb 	.word	0x0806facb
 800fe14:	0806fadc 	.word	0x0806fadc

0800fe18 <_calloc_r>:
 800fe18:	b513      	push	{r0, r1, r4, lr}
 800fe1a:	434a      	muls	r2, r1
 800fe1c:	4611      	mov	r1, r2
 800fe1e:	9201      	str	r2, [sp, #4]
 800fe20:	f7fe f98e 	bl	800e140 <_malloc_r>
 800fe24:	4604      	mov	r4, r0
 800fe26:	b118      	cbz	r0, 800fe30 <_calloc_r+0x18>
 800fe28:	9a01      	ldr	r2, [sp, #4]
 800fe2a:	2100      	movs	r1, #0
 800fe2c:	f7fe f930 	bl	800e090 <memset>
 800fe30:	4620      	mov	r0, r4
 800fe32:	b002      	add	sp, #8
 800fe34:	bd10      	pop	{r4, pc}

0800fe36 <_realloc_r>:
 800fe36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe38:	4607      	mov	r7, r0
 800fe3a:	4614      	mov	r4, r2
 800fe3c:	460e      	mov	r6, r1
 800fe3e:	b921      	cbnz	r1, 800fe4a <_realloc_r+0x14>
 800fe40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fe44:	4611      	mov	r1, r2
 800fe46:	f7fe b97b 	b.w	800e140 <_malloc_r>
 800fe4a:	b922      	cbnz	r2, 800fe56 <_realloc_r+0x20>
 800fe4c:	f7fe f928 	bl	800e0a0 <_free_r>
 800fe50:	4625      	mov	r5, r4
 800fe52:	4628      	mov	r0, r5
 800fe54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe56:	f000 f9ce 	bl	80101f6 <_malloc_usable_size_r>
 800fe5a:	42a0      	cmp	r0, r4
 800fe5c:	d20f      	bcs.n	800fe7e <_realloc_r+0x48>
 800fe5e:	4621      	mov	r1, r4
 800fe60:	4638      	mov	r0, r7
 800fe62:	f7fe f96d 	bl	800e140 <_malloc_r>
 800fe66:	4605      	mov	r5, r0
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	d0f2      	beq.n	800fe52 <_realloc_r+0x1c>
 800fe6c:	4631      	mov	r1, r6
 800fe6e:	4622      	mov	r2, r4
 800fe70:	f7fe f900 	bl	800e074 <memcpy>
 800fe74:	4631      	mov	r1, r6
 800fe76:	4638      	mov	r0, r7
 800fe78:	f7fe f912 	bl	800e0a0 <_free_r>
 800fe7c:	e7e9      	b.n	800fe52 <_realloc_r+0x1c>
 800fe7e:	4635      	mov	r5, r6
 800fe80:	e7e7      	b.n	800fe52 <_realloc_r+0x1c>

0800fe82 <__ssputs_r>:
 800fe82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe86:	688e      	ldr	r6, [r1, #8]
 800fe88:	429e      	cmp	r6, r3
 800fe8a:	4682      	mov	sl, r0
 800fe8c:	460c      	mov	r4, r1
 800fe8e:	4690      	mov	r8, r2
 800fe90:	461f      	mov	r7, r3
 800fe92:	d838      	bhi.n	800ff06 <__ssputs_r+0x84>
 800fe94:	898a      	ldrh	r2, [r1, #12]
 800fe96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe9a:	d032      	beq.n	800ff02 <__ssputs_r+0x80>
 800fe9c:	6825      	ldr	r5, [r4, #0]
 800fe9e:	6909      	ldr	r1, [r1, #16]
 800fea0:	eba5 0901 	sub.w	r9, r5, r1
 800fea4:	6965      	ldr	r5, [r4, #20]
 800fea6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800feaa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800feae:	3301      	adds	r3, #1
 800feb0:	444b      	add	r3, r9
 800feb2:	106d      	asrs	r5, r5, #1
 800feb4:	429d      	cmp	r5, r3
 800feb6:	bf38      	it	cc
 800feb8:	461d      	movcc	r5, r3
 800feba:	0553      	lsls	r3, r2, #21
 800febc:	d531      	bpl.n	800ff22 <__ssputs_r+0xa0>
 800febe:	4629      	mov	r1, r5
 800fec0:	f7fe f93e 	bl	800e140 <_malloc_r>
 800fec4:	4606      	mov	r6, r0
 800fec6:	b950      	cbnz	r0, 800fede <__ssputs_r+0x5c>
 800fec8:	230c      	movs	r3, #12
 800feca:	f8ca 3000 	str.w	r3, [sl]
 800fece:	89a3      	ldrh	r3, [r4, #12]
 800fed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fed4:	81a3      	strh	r3, [r4, #12]
 800fed6:	f04f 30ff 	mov.w	r0, #4294967295
 800feda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fede:	6921      	ldr	r1, [r4, #16]
 800fee0:	464a      	mov	r2, r9
 800fee2:	f7fe f8c7 	bl	800e074 <memcpy>
 800fee6:	89a3      	ldrh	r3, [r4, #12]
 800fee8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800feec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fef0:	81a3      	strh	r3, [r4, #12]
 800fef2:	6126      	str	r6, [r4, #16]
 800fef4:	6165      	str	r5, [r4, #20]
 800fef6:	444e      	add	r6, r9
 800fef8:	eba5 0509 	sub.w	r5, r5, r9
 800fefc:	6026      	str	r6, [r4, #0]
 800fefe:	60a5      	str	r5, [r4, #8]
 800ff00:	463e      	mov	r6, r7
 800ff02:	42be      	cmp	r6, r7
 800ff04:	d900      	bls.n	800ff08 <__ssputs_r+0x86>
 800ff06:	463e      	mov	r6, r7
 800ff08:	4632      	mov	r2, r6
 800ff0a:	6820      	ldr	r0, [r4, #0]
 800ff0c:	4641      	mov	r1, r8
 800ff0e:	f000 f958 	bl	80101c2 <memmove>
 800ff12:	68a3      	ldr	r3, [r4, #8]
 800ff14:	6822      	ldr	r2, [r4, #0]
 800ff16:	1b9b      	subs	r3, r3, r6
 800ff18:	4432      	add	r2, r6
 800ff1a:	60a3      	str	r3, [r4, #8]
 800ff1c:	6022      	str	r2, [r4, #0]
 800ff1e:	2000      	movs	r0, #0
 800ff20:	e7db      	b.n	800feda <__ssputs_r+0x58>
 800ff22:	462a      	mov	r2, r5
 800ff24:	f7ff ff87 	bl	800fe36 <_realloc_r>
 800ff28:	4606      	mov	r6, r0
 800ff2a:	2800      	cmp	r0, #0
 800ff2c:	d1e1      	bne.n	800fef2 <__ssputs_r+0x70>
 800ff2e:	6921      	ldr	r1, [r4, #16]
 800ff30:	4650      	mov	r0, sl
 800ff32:	f7fe f8b5 	bl	800e0a0 <_free_r>
 800ff36:	e7c7      	b.n	800fec8 <__ssputs_r+0x46>

0800ff38 <_svfiprintf_r>:
 800ff38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff3c:	4698      	mov	r8, r3
 800ff3e:	898b      	ldrh	r3, [r1, #12]
 800ff40:	061b      	lsls	r3, r3, #24
 800ff42:	b09d      	sub	sp, #116	; 0x74
 800ff44:	4607      	mov	r7, r0
 800ff46:	460d      	mov	r5, r1
 800ff48:	4614      	mov	r4, r2
 800ff4a:	d50e      	bpl.n	800ff6a <_svfiprintf_r+0x32>
 800ff4c:	690b      	ldr	r3, [r1, #16]
 800ff4e:	b963      	cbnz	r3, 800ff6a <_svfiprintf_r+0x32>
 800ff50:	2140      	movs	r1, #64	; 0x40
 800ff52:	f7fe f8f5 	bl	800e140 <_malloc_r>
 800ff56:	6028      	str	r0, [r5, #0]
 800ff58:	6128      	str	r0, [r5, #16]
 800ff5a:	b920      	cbnz	r0, 800ff66 <_svfiprintf_r+0x2e>
 800ff5c:	230c      	movs	r3, #12
 800ff5e:	603b      	str	r3, [r7, #0]
 800ff60:	f04f 30ff 	mov.w	r0, #4294967295
 800ff64:	e0d1      	b.n	801010a <_svfiprintf_r+0x1d2>
 800ff66:	2340      	movs	r3, #64	; 0x40
 800ff68:	616b      	str	r3, [r5, #20]
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff6e:	2320      	movs	r3, #32
 800ff70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff74:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff78:	2330      	movs	r3, #48	; 0x30
 800ff7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010124 <_svfiprintf_r+0x1ec>
 800ff7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff82:	f04f 0901 	mov.w	r9, #1
 800ff86:	4623      	mov	r3, r4
 800ff88:	469a      	mov	sl, r3
 800ff8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff8e:	b10a      	cbz	r2, 800ff94 <_svfiprintf_r+0x5c>
 800ff90:	2a25      	cmp	r2, #37	; 0x25
 800ff92:	d1f9      	bne.n	800ff88 <_svfiprintf_r+0x50>
 800ff94:	ebba 0b04 	subs.w	fp, sl, r4
 800ff98:	d00b      	beq.n	800ffb2 <_svfiprintf_r+0x7a>
 800ff9a:	465b      	mov	r3, fp
 800ff9c:	4622      	mov	r2, r4
 800ff9e:	4629      	mov	r1, r5
 800ffa0:	4638      	mov	r0, r7
 800ffa2:	f7ff ff6e 	bl	800fe82 <__ssputs_r>
 800ffa6:	3001      	adds	r0, #1
 800ffa8:	f000 80aa 	beq.w	8010100 <_svfiprintf_r+0x1c8>
 800ffac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffae:	445a      	add	r2, fp
 800ffb0:	9209      	str	r2, [sp, #36]	; 0x24
 800ffb2:	f89a 3000 	ldrb.w	r3, [sl]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	f000 80a2 	beq.w	8010100 <_svfiprintf_r+0x1c8>
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	f04f 32ff 	mov.w	r2, #4294967295
 800ffc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffc6:	f10a 0a01 	add.w	sl, sl, #1
 800ffca:	9304      	str	r3, [sp, #16]
 800ffcc:	9307      	str	r3, [sp, #28]
 800ffce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ffd2:	931a      	str	r3, [sp, #104]	; 0x68
 800ffd4:	4654      	mov	r4, sl
 800ffd6:	2205      	movs	r2, #5
 800ffd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffdc:	4851      	ldr	r0, [pc, #324]	; (8010124 <_svfiprintf_r+0x1ec>)
 800ffde:	f7f0 f98f 	bl	8000300 <memchr>
 800ffe2:	9a04      	ldr	r2, [sp, #16]
 800ffe4:	b9d8      	cbnz	r0, 801001e <_svfiprintf_r+0xe6>
 800ffe6:	06d0      	lsls	r0, r2, #27
 800ffe8:	bf44      	itt	mi
 800ffea:	2320      	movmi	r3, #32
 800ffec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fff0:	0711      	lsls	r1, r2, #28
 800fff2:	bf44      	itt	mi
 800fff4:	232b      	movmi	r3, #43	; 0x2b
 800fff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fffa:	f89a 3000 	ldrb.w	r3, [sl]
 800fffe:	2b2a      	cmp	r3, #42	; 0x2a
 8010000:	d015      	beq.n	801002e <_svfiprintf_r+0xf6>
 8010002:	9a07      	ldr	r2, [sp, #28]
 8010004:	4654      	mov	r4, sl
 8010006:	2000      	movs	r0, #0
 8010008:	f04f 0c0a 	mov.w	ip, #10
 801000c:	4621      	mov	r1, r4
 801000e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010012:	3b30      	subs	r3, #48	; 0x30
 8010014:	2b09      	cmp	r3, #9
 8010016:	d94e      	bls.n	80100b6 <_svfiprintf_r+0x17e>
 8010018:	b1b0      	cbz	r0, 8010048 <_svfiprintf_r+0x110>
 801001a:	9207      	str	r2, [sp, #28]
 801001c:	e014      	b.n	8010048 <_svfiprintf_r+0x110>
 801001e:	eba0 0308 	sub.w	r3, r0, r8
 8010022:	fa09 f303 	lsl.w	r3, r9, r3
 8010026:	4313      	orrs	r3, r2
 8010028:	9304      	str	r3, [sp, #16]
 801002a:	46a2      	mov	sl, r4
 801002c:	e7d2      	b.n	800ffd4 <_svfiprintf_r+0x9c>
 801002e:	9b03      	ldr	r3, [sp, #12]
 8010030:	1d19      	adds	r1, r3, #4
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	9103      	str	r1, [sp, #12]
 8010036:	2b00      	cmp	r3, #0
 8010038:	bfbb      	ittet	lt
 801003a:	425b      	neglt	r3, r3
 801003c:	f042 0202 	orrlt.w	r2, r2, #2
 8010040:	9307      	strge	r3, [sp, #28]
 8010042:	9307      	strlt	r3, [sp, #28]
 8010044:	bfb8      	it	lt
 8010046:	9204      	strlt	r2, [sp, #16]
 8010048:	7823      	ldrb	r3, [r4, #0]
 801004a:	2b2e      	cmp	r3, #46	; 0x2e
 801004c:	d10c      	bne.n	8010068 <_svfiprintf_r+0x130>
 801004e:	7863      	ldrb	r3, [r4, #1]
 8010050:	2b2a      	cmp	r3, #42	; 0x2a
 8010052:	d135      	bne.n	80100c0 <_svfiprintf_r+0x188>
 8010054:	9b03      	ldr	r3, [sp, #12]
 8010056:	1d1a      	adds	r2, r3, #4
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	9203      	str	r2, [sp, #12]
 801005c:	2b00      	cmp	r3, #0
 801005e:	bfb8      	it	lt
 8010060:	f04f 33ff 	movlt.w	r3, #4294967295
 8010064:	3402      	adds	r4, #2
 8010066:	9305      	str	r3, [sp, #20]
 8010068:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010134 <_svfiprintf_r+0x1fc>
 801006c:	7821      	ldrb	r1, [r4, #0]
 801006e:	2203      	movs	r2, #3
 8010070:	4650      	mov	r0, sl
 8010072:	f7f0 f945 	bl	8000300 <memchr>
 8010076:	b140      	cbz	r0, 801008a <_svfiprintf_r+0x152>
 8010078:	2340      	movs	r3, #64	; 0x40
 801007a:	eba0 000a 	sub.w	r0, r0, sl
 801007e:	fa03 f000 	lsl.w	r0, r3, r0
 8010082:	9b04      	ldr	r3, [sp, #16]
 8010084:	4303      	orrs	r3, r0
 8010086:	3401      	adds	r4, #1
 8010088:	9304      	str	r3, [sp, #16]
 801008a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801008e:	4826      	ldr	r0, [pc, #152]	; (8010128 <_svfiprintf_r+0x1f0>)
 8010090:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010094:	2206      	movs	r2, #6
 8010096:	f7f0 f933 	bl	8000300 <memchr>
 801009a:	2800      	cmp	r0, #0
 801009c:	d038      	beq.n	8010110 <_svfiprintf_r+0x1d8>
 801009e:	4b23      	ldr	r3, [pc, #140]	; (801012c <_svfiprintf_r+0x1f4>)
 80100a0:	bb1b      	cbnz	r3, 80100ea <_svfiprintf_r+0x1b2>
 80100a2:	9b03      	ldr	r3, [sp, #12]
 80100a4:	3307      	adds	r3, #7
 80100a6:	f023 0307 	bic.w	r3, r3, #7
 80100aa:	3308      	adds	r3, #8
 80100ac:	9303      	str	r3, [sp, #12]
 80100ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100b0:	4433      	add	r3, r6
 80100b2:	9309      	str	r3, [sp, #36]	; 0x24
 80100b4:	e767      	b.n	800ff86 <_svfiprintf_r+0x4e>
 80100b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80100ba:	460c      	mov	r4, r1
 80100bc:	2001      	movs	r0, #1
 80100be:	e7a5      	b.n	801000c <_svfiprintf_r+0xd4>
 80100c0:	2300      	movs	r3, #0
 80100c2:	3401      	adds	r4, #1
 80100c4:	9305      	str	r3, [sp, #20]
 80100c6:	4619      	mov	r1, r3
 80100c8:	f04f 0c0a 	mov.w	ip, #10
 80100cc:	4620      	mov	r0, r4
 80100ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100d2:	3a30      	subs	r2, #48	; 0x30
 80100d4:	2a09      	cmp	r2, #9
 80100d6:	d903      	bls.n	80100e0 <_svfiprintf_r+0x1a8>
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d0c5      	beq.n	8010068 <_svfiprintf_r+0x130>
 80100dc:	9105      	str	r1, [sp, #20]
 80100de:	e7c3      	b.n	8010068 <_svfiprintf_r+0x130>
 80100e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80100e4:	4604      	mov	r4, r0
 80100e6:	2301      	movs	r3, #1
 80100e8:	e7f0      	b.n	80100cc <_svfiprintf_r+0x194>
 80100ea:	ab03      	add	r3, sp, #12
 80100ec:	9300      	str	r3, [sp, #0]
 80100ee:	462a      	mov	r2, r5
 80100f0:	4b0f      	ldr	r3, [pc, #60]	; (8010130 <_svfiprintf_r+0x1f8>)
 80100f2:	a904      	add	r1, sp, #16
 80100f4:	4638      	mov	r0, r7
 80100f6:	f7fe f90f 	bl	800e318 <_printf_float>
 80100fa:	1c42      	adds	r2, r0, #1
 80100fc:	4606      	mov	r6, r0
 80100fe:	d1d6      	bne.n	80100ae <_svfiprintf_r+0x176>
 8010100:	89ab      	ldrh	r3, [r5, #12]
 8010102:	065b      	lsls	r3, r3, #25
 8010104:	f53f af2c 	bmi.w	800ff60 <_svfiprintf_r+0x28>
 8010108:	9809      	ldr	r0, [sp, #36]	; 0x24
 801010a:	b01d      	add	sp, #116	; 0x74
 801010c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010110:	ab03      	add	r3, sp, #12
 8010112:	9300      	str	r3, [sp, #0]
 8010114:	462a      	mov	r2, r5
 8010116:	4b06      	ldr	r3, [pc, #24]	; (8010130 <_svfiprintf_r+0x1f8>)
 8010118:	a904      	add	r1, sp, #16
 801011a:	4638      	mov	r0, r7
 801011c:	f7fe fb88 	bl	800e830 <_printf_i>
 8010120:	e7eb      	b.n	80100fa <_svfiprintf_r+0x1c2>
 8010122:	bf00      	nop
 8010124:	0806fc3c 	.word	0x0806fc3c
 8010128:	0806fc46 	.word	0x0806fc46
 801012c:	0800e319 	.word	0x0800e319
 8010130:	0800fe83 	.word	0x0800fe83
 8010134:	0806fc42 	.word	0x0806fc42

08010138 <__assert_func>:
 8010138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801013a:	4614      	mov	r4, r2
 801013c:	461a      	mov	r2, r3
 801013e:	4b09      	ldr	r3, [pc, #36]	; (8010164 <__assert_func+0x2c>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	4605      	mov	r5, r0
 8010144:	68d8      	ldr	r0, [r3, #12]
 8010146:	b14c      	cbz	r4, 801015c <__assert_func+0x24>
 8010148:	4b07      	ldr	r3, [pc, #28]	; (8010168 <__assert_func+0x30>)
 801014a:	9100      	str	r1, [sp, #0]
 801014c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010150:	4906      	ldr	r1, [pc, #24]	; (801016c <__assert_func+0x34>)
 8010152:	462b      	mov	r3, r5
 8010154:	f000 f80e 	bl	8010174 <fiprintf>
 8010158:	f000 fa7c 	bl	8010654 <abort>
 801015c:	4b04      	ldr	r3, [pc, #16]	; (8010170 <__assert_func+0x38>)
 801015e:	461c      	mov	r4, r3
 8010160:	e7f3      	b.n	801014a <__assert_func+0x12>
 8010162:	bf00      	nop
 8010164:	24001f10 	.word	0x24001f10
 8010168:	0806fc4d 	.word	0x0806fc4d
 801016c:	0806fc5a 	.word	0x0806fc5a
 8010170:	0806fc88 	.word	0x0806fc88

08010174 <fiprintf>:
 8010174:	b40e      	push	{r1, r2, r3}
 8010176:	b503      	push	{r0, r1, lr}
 8010178:	4601      	mov	r1, r0
 801017a:	ab03      	add	r3, sp, #12
 801017c:	4805      	ldr	r0, [pc, #20]	; (8010194 <fiprintf+0x20>)
 801017e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010182:	6800      	ldr	r0, [r0, #0]
 8010184:	9301      	str	r3, [sp, #4]
 8010186:	f000 f867 	bl	8010258 <_vfiprintf_r>
 801018a:	b002      	add	sp, #8
 801018c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010190:	b003      	add	sp, #12
 8010192:	4770      	bx	lr
 8010194:	24001f10 	.word	0x24001f10

08010198 <__retarget_lock_init_recursive>:
 8010198:	4770      	bx	lr

0801019a <__retarget_lock_acquire_recursive>:
 801019a:	4770      	bx	lr

0801019c <__retarget_lock_release_recursive>:
 801019c:	4770      	bx	lr

0801019e <__ascii_mbtowc>:
 801019e:	b082      	sub	sp, #8
 80101a0:	b901      	cbnz	r1, 80101a4 <__ascii_mbtowc+0x6>
 80101a2:	a901      	add	r1, sp, #4
 80101a4:	b142      	cbz	r2, 80101b8 <__ascii_mbtowc+0x1a>
 80101a6:	b14b      	cbz	r3, 80101bc <__ascii_mbtowc+0x1e>
 80101a8:	7813      	ldrb	r3, [r2, #0]
 80101aa:	600b      	str	r3, [r1, #0]
 80101ac:	7812      	ldrb	r2, [r2, #0]
 80101ae:	1e10      	subs	r0, r2, #0
 80101b0:	bf18      	it	ne
 80101b2:	2001      	movne	r0, #1
 80101b4:	b002      	add	sp, #8
 80101b6:	4770      	bx	lr
 80101b8:	4610      	mov	r0, r2
 80101ba:	e7fb      	b.n	80101b4 <__ascii_mbtowc+0x16>
 80101bc:	f06f 0001 	mvn.w	r0, #1
 80101c0:	e7f8      	b.n	80101b4 <__ascii_mbtowc+0x16>

080101c2 <memmove>:
 80101c2:	4288      	cmp	r0, r1
 80101c4:	b510      	push	{r4, lr}
 80101c6:	eb01 0402 	add.w	r4, r1, r2
 80101ca:	d902      	bls.n	80101d2 <memmove+0x10>
 80101cc:	4284      	cmp	r4, r0
 80101ce:	4623      	mov	r3, r4
 80101d0:	d807      	bhi.n	80101e2 <memmove+0x20>
 80101d2:	1e43      	subs	r3, r0, #1
 80101d4:	42a1      	cmp	r1, r4
 80101d6:	d008      	beq.n	80101ea <memmove+0x28>
 80101d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80101e0:	e7f8      	b.n	80101d4 <memmove+0x12>
 80101e2:	4402      	add	r2, r0
 80101e4:	4601      	mov	r1, r0
 80101e6:	428a      	cmp	r2, r1
 80101e8:	d100      	bne.n	80101ec <memmove+0x2a>
 80101ea:	bd10      	pop	{r4, pc}
 80101ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80101f4:	e7f7      	b.n	80101e6 <memmove+0x24>

080101f6 <_malloc_usable_size_r>:
 80101f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101fa:	1f18      	subs	r0, r3, #4
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	bfbc      	itt	lt
 8010200:	580b      	ldrlt	r3, [r1, r0]
 8010202:	18c0      	addlt	r0, r0, r3
 8010204:	4770      	bx	lr

08010206 <__sfputc_r>:
 8010206:	6893      	ldr	r3, [r2, #8]
 8010208:	3b01      	subs	r3, #1
 801020a:	2b00      	cmp	r3, #0
 801020c:	b410      	push	{r4}
 801020e:	6093      	str	r3, [r2, #8]
 8010210:	da08      	bge.n	8010224 <__sfputc_r+0x1e>
 8010212:	6994      	ldr	r4, [r2, #24]
 8010214:	42a3      	cmp	r3, r4
 8010216:	db01      	blt.n	801021c <__sfputc_r+0x16>
 8010218:	290a      	cmp	r1, #10
 801021a:	d103      	bne.n	8010224 <__sfputc_r+0x1e>
 801021c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010220:	f000 b94a 	b.w	80104b8 <__swbuf_r>
 8010224:	6813      	ldr	r3, [r2, #0]
 8010226:	1c58      	adds	r0, r3, #1
 8010228:	6010      	str	r0, [r2, #0]
 801022a:	7019      	strb	r1, [r3, #0]
 801022c:	4608      	mov	r0, r1
 801022e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010232:	4770      	bx	lr

08010234 <__sfputs_r>:
 8010234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010236:	4606      	mov	r6, r0
 8010238:	460f      	mov	r7, r1
 801023a:	4614      	mov	r4, r2
 801023c:	18d5      	adds	r5, r2, r3
 801023e:	42ac      	cmp	r4, r5
 8010240:	d101      	bne.n	8010246 <__sfputs_r+0x12>
 8010242:	2000      	movs	r0, #0
 8010244:	e007      	b.n	8010256 <__sfputs_r+0x22>
 8010246:	f814 1b01 	ldrb.w	r1, [r4], #1
 801024a:	463a      	mov	r2, r7
 801024c:	4630      	mov	r0, r6
 801024e:	f7ff ffda 	bl	8010206 <__sfputc_r>
 8010252:	1c43      	adds	r3, r0, #1
 8010254:	d1f3      	bne.n	801023e <__sfputs_r+0xa>
 8010256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010258 <_vfiprintf_r>:
 8010258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801025c:	460d      	mov	r5, r1
 801025e:	b09d      	sub	sp, #116	; 0x74
 8010260:	4614      	mov	r4, r2
 8010262:	4698      	mov	r8, r3
 8010264:	4606      	mov	r6, r0
 8010266:	b118      	cbz	r0, 8010270 <_vfiprintf_r+0x18>
 8010268:	6983      	ldr	r3, [r0, #24]
 801026a:	b90b      	cbnz	r3, 8010270 <_vfiprintf_r+0x18>
 801026c:	f000 fb14 	bl	8010898 <__sinit>
 8010270:	4b89      	ldr	r3, [pc, #548]	; (8010498 <_vfiprintf_r+0x240>)
 8010272:	429d      	cmp	r5, r3
 8010274:	d11b      	bne.n	80102ae <_vfiprintf_r+0x56>
 8010276:	6875      	ldr	r5, [r6, #4]
 8010278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801027a:	07d9      	lsls	r1, r3, #31
 801027c:	d405      	bmi.n	801028a <_vfiprintf_r+0x32>
 801027e:	89ab      	ldrh	r3, [r5, #12]
 8010280:	059a      	lsls	r2, r3, #22
 8010282:	d402      	bmi.n	801028a <_vfiprintf_r+0x32>
 8010284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010286:	f7ff ff88 	bl	801019a <__retarget_lock_acquire_recursive>
 801028a:	89ab      	ldrh	r3, [r5, #12]
 801028c:	071b      	lsls	r3, r3, #28
 801028e:	d501      	bpl.n	8010294 <_vfiprintf_r+0x3c>
 8010290:	692b      	ldr	r3, [r5, #16]
 8010292:	b9eb      	cbnz	r3, 80102d0 <_vfiprintf_r+0x78>
 8010294:	4629      	mov	r1, r5
 8010296:	4630      	mov	r0, r6
 8010298:	f000 f96e 	bl	8010578 <__swsetup_r>
 801029c:	b1c0      	cbz	r0, 80102d0 <_vfiprintf_r+0x78>
 801029e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80102a0:	07dc      	lsls	r4, r3, #31
 80102a2:	d50e      	bpl.n	80102c2 <_vfiprintf_r+0x6a>
 80102a4:	f04f 30ff 	mov.w	r0, #4294967295
 80102a8:	b01d      	add	sp, #116	; 0x74
 80102aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ae:	4b7b      	ldr	r3, [pc, #492]	; (801049c <_vfiprintf_r+0x244>)
 80102b0:	429d      	cmp	r5, r3
 80102b2:	d101      	bne.n	80102b8 <_vfiprintf_r+0x60>
 80102b4:	68b5      	ldr	r5, [r6, #8]
 80102b6:	e7df      	b.n	8010278 <_vfiprintf_r+0x20>
 80102b8:	4b79      	ldr	r3, [pc, #484]	; (80104a0 <_vfiprintf_r+0x248>)
 80102ba:	429d      	cmp	r5, r3
 80102bc:	bf08      	it	eq
 80102be:	68f5      	ldreq	r5, [r6, #12]
 80102c0:	e7da      	b.n	8010278 <_vfiprintf_r+0x20>
 80102c2:	89ab      	ldrh	r3, [r5, #12]
 80102c4:	0598      	lsls	r0, r3, #22
 80102c6:	d4ed      	bmi.n	80102a4 <_vfiprintf_r+0x4c>
 80102c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102ca:	f7ff ff67 	bl	801019c <__retarget_lock_release_recursive>
 80102ce:	e7e9      	b.n	80102a4 <_vfiprintf_r+0x4c>
 80102d0:	2300      	movs	r3, #0
 80102d2:	9309      	str	r3, [sp, #36]	; 0x24
 80102d4:	2320      	movs	r3, #32
 80102d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102da:	f8cd 800c 	str.w	r8, [sp, #12]
 80102de:	2330      	movs	r3, #48	; 0x30
 80102e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80104a4 <_vfiprintf_r+0x24c>
 80102e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102e8:	f04f 0901 	mov.w	r9, #1
 80102ec:	4623      	mov	r3, r4
 80102ee:	469a      	mov	sl, r3
 80102f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102f4:	b10a      	cbz	r2, 80102fa <_vfiprintf_r+0xa2>
 80102f6:	2a25      	cmp	r2, #37	; 0x25
 80102f8:	d1f9      	bne.n	80102ee <_vfiprintf_r+0x96>
 80102fa:	ebba 0b04 	subs.w	fp, sl, r4
 80102fe:	d00b      	beq.n	8010318 <_vfiprintf_r+0xc0>
 8010300:	465b      	mov	r3, fp
 8010302:	4622      	mov	r2, r4
 8010304:	4629      	mov	r1, r5
 8010306:	4630      	mov	r0, r6
 8010308:	f7ff ff94 	bl	8010234 <__sfputs_r>
 801030c:	3001      	adds	r0, #1
 801030e:	f000 80aa 	beq.w	8010466 <_vfiprintf_r+0x20e>
 8010312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010314:	445a      	add	r2, fp
 8010316:	9209      	str	r2, [sp, #36]	; 0x24
 8010318:	f89a 3000 	ldrb.w	r3, [sl]
 801031c:	2b00      	cmp	r3, #0
 801031e:	f000 80a2 	beq.w	8010466 <_vfiprintf_r+0x20e>
 8010322:	2300      	movs	r3, #0
 8010324:	f04f 32ff 	mov.w	r2, #4294967295
 8010328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801032c:	f10a 0a01 	add.w	sl, sl, #1
 8010330:	9304      	str	r3, [sp, #16]
 8010332:	9307      	str	r3, [sp, #28]
 8010334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010338:	931a      	str	r3, [sp, #104]	; 0x68
 801033a:	4654      	mov	r4, sl
 801033c:	2205      	movs	r2, #5
 801033e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010342:	4858      	ldr	r0, [pc, #352]	; (80104a4 <_vfiprintf_r+0x24c>)
 8010344:	f7ef ffdc 	bl	8000300 <memchr>
 8010348:	9a04      	ldr	r2, [sp, #16]
 801034a:	b9d8      	cbnz	r0, 8010384 <_vfiprintf_r+0x12c>
 801034c:	06d1      	lsls	r1, r2, #27
 801034e:	bf44      	itt	mi
 8010350:	2320      	movmi	r3, #32
 8010352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010356:	0713      	lsls	r3, r2, #28
 8010358:	bf44      	itt	mi
 801035a:	232b      	movmi	r3, #43	; 0x2b
 801035c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010360:	f89a 3000 	ldrb.w	r3, [sl]
 8010364:	2b2a      	cmp	r3, #42	; 0x2a
 8010366:	d015      	beq.n	8010394 <_vfiprintf_r+0x13c>
 8010368:	9a07      	ldr	r2, [sp, #28]
 801036a:	4654      	mov	r4, sl
 801036c:	2000      	movs	r0, #0
 801036e:	f04f 0c0a 	mov.w	ip, #10
 8010372:	4621      	mov	r1, r4
 8010374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010378:	3b30      	subs	r3, #48	; 0x30
 801037a:	2b09      	cmp	r3, #9
 801037c:	d94e      	bls.n	801041c <_vfiprintf_r+0x1c4>
 801037e:	b1b0      	cbz	r0, 80103ae <_vfiprintf_r+0x156>
 8010380:	9207      	str	r2, [sp, #28]
 8010382:	e014      	b.n	80103ae <_vfiprintf_r+0x156>
 8010384:	eba0 0308 	sub.w	r3, r0, r8
 8010388:	fa09 f303 	lsl.w	r3, r9, r3
 801038c:	4313      	orrs	r3, r2
 801038e:	9304      	str	r3, [sp, #16]
 8010390:	46a2      	mov	sl, r4
 8010392:	e7d2      	b.n	801033a <_vfiprintf_r+0xe2>
 8010394:	9b03      	ldr	r3, [sp, #12]
 8010396:	1d19      	adds	r1, r3, #4
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	9103      	str	r1, [sp, #12]
 801039c:	2b00      	cmp	r3, #0
 801039e:	bfbb      	ittet	lt
 80103a0:	425b      	neglt	r3, r3
 80103a2:	f042 0202 	orrlt.w	r2, r2, #2
 80103a6:	9307      	strge	r3, [sp, #28]
 80103a8:	9307      	strlt	r3, [sp, #28]
 80103aa:	bfb8      	it	lt
 80103ac:	9204      	strlt	r2, [sp, #16]
 80103ae:	7823      	ldrb	r3, [r4, #0]
 80103b0:	2b2e      	cmp	r3, #46	; 0x2e
 80103b2:	d10c      	bne.n	80103ce <_vfiprintf_r+0x176>
 80103b4:	7863      	ldrb	r3, [r4, #1]
 80103b6:	2b2a      	cmp	r3, #42	; 0x2a
 80103b8:	d135      	bne.n	8010426 <_vfiprintf_r+0x1ce>
 80103ba:	9b03      	ldr	r3, [sp, #12]
 80103bc:	1d1a      	adds	r2, r3, #4
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	9203      	str	r2, [sp, #12]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	bfb8      	it	lt
 80103c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80103ca:	3402      	adds	r4, #2
 80103cc:	9305      	str	r3, [sp, #20]
 80103ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80104b4 <_vfiprintf_r+0x25c>
 80103d2:	7821      	ldrb	r1, [r4, #0]
 80103d4:	2203      	movs	r2, #3
 80103d6:	4650      	mov	r0, sl
 80103d8:	f7ef ff92 	bl	8000300 <memchr>
 80103dc:	b140      	cbz	r0, 80103f0 <_vfiprintf_r+0x198>
 80103de:	2340      	movs	r3, #64	; 0x40
 80103e0:	eba0 000a 	sub.w	r0, r0, sl
 80103e4:	fa03 f000 	lsl.w	r0, r3, r0
 80103e8:	9b04      	ldr	r3, [sp, #16]
 80103ea:	4303      	orrs	r3, r0
 80103ec:	3401      	adds	r4, #1
 80103ee:	9304      	str	r3, [sp, #16]
 80103f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103f4:	482c      	ldr	r0, [pc, #176]	; (80104a8 <_vfiprintf_r+0x250>)
 80103f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103fa:	2206      	movs	r2, #6
 80103fc:	f7ef ff80 	bl	8000300 <memchr>
 8010400:	2800      	cmp	r0, #0
 8010402:	d03f      	beq.n	8010484 <_vfiprintf_r+0x22c>
 8010404:	4b29      	ldr	r3, [pc, #164]	; (80104ac <_vfiprintf_r+0x254>)
 8010406:	bb1b      	cbnz	r3, 8010450 <_vfiprintf_r+0x1f8>
 8010408:	9b03      	ldr	r3, [sp, #12]
 801040a:	3307      	adds	r3, #7
 801040c:	f023 0307 	bic.w	r3, r3, #7
 8010410:	3308      	adds	r3, #8
 8010412:	9303      	str	r3, [sp, #12]
 8010414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010416:	443b      	add	r3, r7
 8010418:	9309      	str	r3, [sp, #36]	; 0x24
 801041a:	e767      	b.n	80102ec <_vfiprintf_r+0x94>
 801041c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010420:	460c      	mov	r4, r1
 8010422:	2001      	movs	r0, #1
 8010424:	e7a5      	b.n	8010372 <_vfiprintf_r+0x11a>
 8010426:	2300      	movs	r3, #0
 8010428:	3401      	adds	r4, #1
 801042a:	9305      	str	r3, [sp, #20]
 801042c:	4619      	mov	r1, r3
 801042e:	f04f 0c0a 	mov.w	ip, #10
 8010432:	4620      	mov	r0, r4
 8010434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010438:	3a30      	subs	r2, #48	; 0x30
 801043a:	2a09      	cmp	r2, #9
 801043c:	d903      	bls.n	8010446 <_vfiprintf_r+0x1ee>
 801043e:	2b00      	cmp	r3, #0
 8010440:	d0c5      	beq.n	80103ce <_vfiprintf_r+0x176>
 8010442:	9105      	str	r1, [sp, #20]
 8010444:	e7c3      	b.n	80103ce <_vfiprintf_r+0x176>
 8010446:	fb0c 2101 	mla	r1, ip, r1, r2
 801044a:	4604      	mov	r4, r0
 801044c:	2301      	movs	r3, #1
 801044e:	e7f0      	b.n	8010432 <_vfiprintf_r+0x1da>
 8010450:	ab03      	add	r3, sp, #12
 8010452:	9300      	str	r3, [sp, #0]
 8010454:	462a      	mov	r2, r5
 8010456:	4b16      	ldr	r3, [pc, #88]	; (80104b0 <_vfiprintf_r+0x258>)
 8010458:	a904      	add	r1, sp, #16
 801045a:	4630      	mov	r0, r6
 801045c:	f7fd ff5c 	bl	800e318 <_printf_float>
 8010460:	4607      	mov	r7, r0
 8010462:	1c78      	adds	r0, r7, #1
 8010464:	d1d6      	bne.n	8010414 <_vfiprintf_r+0x1bc>
 8010466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010468:	07d9      	lsls	r1, r3, #31
 801046a:	d405      	bmi.n	8010478 <_vfiprintf_r+0x220>
 801046c:	89ab      	ldrh	r3, [r5, #12]
 801046e:	059a      	lsls	r2, r3, #22
 8010470:	d402      	bmi.n	8010478 <_vfiprintf_r+0x220>
 8010472:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010474:	f7ff fe92 	bl	801019c <__retarget_lock_release_recursive>
 8010478:	89ab      	ldrh	r3, [r5, #12]
 801047a:	065b      	lsls	r3, r3, #25
 801047c:	f53f af12 	bmi.w	80102a4 <_vfiprintf_r+0x4c>
 8010480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010482:	e711      	b.n	80102a8 <_vfiprintf_r+0x50>
 8010484:	ab03      	add	r3, sp, #12
 8010486:	9300      	str	r3, [sp, #0]
 8010488:	462a      	mov	r2, r5
 801048a:	4b09      	ldr	r3, [pc, #36]	; (80104b0 <_vfiprintf_r+0x258>)
 801048c:	a904      	add	r1, sp, #16
 801048e:	4630      	mov	r0, r6
 8010490:	f7fe f9ce 	bl	800e830 <_printf_i>
 8010494:	e7e4      	b.n	8010460 <_vfiprintf_r+0x208>
 8010496:	bf00      	nop
 8010498:	0806fdb4 	.word	0x0806fdb4
 801049c:	0806fdd4 	.word	0x0806fdd4
 80104a0:	0806fd94 	.word	0x0806fd94
 80104a4:	0806fc3c 	.word	0x0806fc3c
 80104a8:	0806fc46 	.word	0x0806fc46
 80104ac:	0800e319 	.word	0x0800e319
 80104b0:	08010235 	.word	0x08010235
 80104b4:	0806fc42 	.word	0x0806fc42

080104b8 <__swbuf_r>:
 80104b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ba:	460e      	mov	r6, r1
 80104bc:	4614      	mov	r4, r2
 80104be:	4605      	mov	r5, r0
 80104c0:	b118      	cbz	r0, 80104ca <__swbuf_r+0x12>
 80104c2:	6983      	ldr	r3, [r0, #24]
 80104c4:	b90b      	cbnz	r3, 80104ca <__swbuf_r+0x12>
 80104c6:	f000 f9e7 	bl	8010898 <__sinit>
 80104ca:	4b21      	ldr	r3, [pc, #132]	; (8010550 <__swbuf_r+0x98>)
 80104cc:	429c      	cmp	r4, r3
 80104ce:	d12b      	bne.n	8010528 <__swbuf_r+0x70>
 80104d0:	686c      	ldr	r4, [r5, #4]
 80104d2:	69a3      	ldr	r3, [r4, #24]
 80104d4:	60a3      	str	r3, [r4, #8]
 80104d6:	89a3      	ldrh	r3, [r4, #12]
 80104d8:	071a      	lsls	r2, r3, #28
 80104da:	d52f      	bpl.n	801053c <__swbuf_r+0x84>
 80104dc:	6923      	ldr	r3, [r4, #16]
 80104de:	b36b      	cbz	r3, 801053c <__swbuf_r+0x84>
 80104e0:	6923      	ldr	r3, [r4, #16]
 80104e2:	6820      	ldr	r0, [r4, #0]
 80104e4:	1ac0      	subs	r0, r0, r3
 80104e6:	6963      	ldr	r3, [r4, #20]
 80104e8:	b2f6      	uxtb	r6, r6
 80104ea:	4283      	cmp	r3, r0
 80104ec:	4637      	mov	r7, r6
 80104ee:	dc04      	bgt.n	80104fa <__swbuf_r+0x42>
 80104f0:	4621      	mov	r1, r4
 80104f2:	4628      	mov	r0, r5
 80104f4:	f000 f93c 	bl	8010770 <_fflush_r>
 80104f8:	bb30      	cbnz	r0, 8010548 <__swbuf_r+0x90>
 80104fa:	68a3      	ldr	r3, [r4, #8]
 80104fc:	3b01      	subs	r3, #1
 80104fe:	60a3      	str	r3, [r4, #8]
 8010500:	6823      	ldr	r3, [r4, #0]
 8010502:	1c5a      	adds	r2, r3, #1
 8010504:	6022      	str	r2, [r4, #0]
 8010506:	701e      	strb	r6, [r3, #0]
 8010508:	6963      	ldr	r3, [r4, #20]
 801050a:	3001      	adds	r0, #1
 801050c:	4283      	cmp	r3, r0
 801050e:	d004      	beq.n	801051a <__swbuf_r+0x62>
 8010510:	89a3      	ldrh	r3, [r4, #12]
 8010512:	07db      	lsls	r3, r3, #31
 8010514:	d506      	bpl.n	8010524 <__swbuf_r+0x6c>
 8010516:	2e0a      	cmp	r6, #10
 8010518:	d104      	bne.n	8010524 <__swbuf_r+0x6c>
 801051a:	4621      	mov	r1, r4
 801051c:	4628      	mov	r0, r5
 801051e:	f000 f927 	bl	8010770 <_fflush_r>
 8010522:	b988      	cbnz	r0, 8010548 <__swbuf_r+0x90>
 8010524:	4638      	mov	r0, r7
 8010526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010528:	4b0a      	ldr	r3, [pc, #40]	; (8010554 <__swbuf_r+0x9c>)
 801052a:	429c      	cmp	r4, r3
 801052c:	d101      	bne.n	8010532 <__swbuf_r+0x7a>
 801052e:	68ac      	ldr	r4, [r5, #8]
 8010530:	e7cf      	b.n	80104d2 <__swbuf_r+0x1a>
 8010532:	4b09      	ldr	r3, [pc, #36]	; (8010558 <__swbuf_r+0xa0>)
 8010534:	429c      	cmp	r4, r3
 8010536:	bf08      	it	eq
 8010538:	68ec      	ldreq	r4, [r5, #12]
 801053a:	e7ca      	b.n	80104d2 <__swbuf_r+0x1a>
 801053c:	4621      	mov	r1, r4
 801053e:	4628      	mov	r0, r5
 8010540:	f000 f81a 	bl	8010578 <__swsetup_r>
 8010544:	2800      	cmp	r0, #0
 8010546:	d0cb      	beq.n	80104e0 <__swbuf_r+0x28>
 8010548:	f04f 37ff 	mov.w	r7, #4294967295
 801054c:	e7ea      	b.n	8010524 <__swbuf_r+0x6c>
 801054e:	bf00      	nop
 8010550:	0806fdb4 	.word	0x0806fdb4
 8010554:	0806fdd4 	.word	0x0806fdd4
 8010558:	0806fd94 	.word	0x0806fd94

0801055c <__ascii_wctomb>:
 801055c:	b149      	cbz	r1, 8010572 <__ascii_wctomb+0x16>
 801055e:	2aff      	cmp	r2, #255	; 0xff
 8010560:	bf85      	ittet	hi
 8010562:	238a      	movhi	r3, #138	; 0x8a
 8010564:	6003      	strhi	r3, [r0, #0]
 8010566:	700a      	strbls	r2, [r1, #0]
 8010568:	f04f 30ff 	movhi.w	r0, #4294967295
 801056c:	bf98      	it	ls
 801056e:	2001      	movls	r0, #1
 8010570:	4770      	bx	lr
 8010572:	4608      	mov	r0, r1
 8010574:	4770      	bx	lr
	...

08010578 <__swsetup_r>:
 8010578:	4b32      	ldr	r3, [pc, #200]	; (8010644 <__swsetup_r+0xcc>)
 801057a:	b570      	push	{r4, r5, r6, lr}
 801057c:	681d      	ldr	r5, [r3, #0]
 801057e:	4606      	mov	r6, r0
 8010580:	460c      	mov	r4, r1
 8010582:	b125      	cbz	r5, 801058e <__swsetup_r+0x16>
 8010584:	69ab      	ldr	r3, [r5, #24]
 8010586:	b913      	cbnz	r3, 801058e <__swsetup_r+0x16>
 8010588:	4628      	mov	r0, r5
 801058a:	f000 f985 	bl	8010898 <__sinit>
 801058e:	4b2e      	ldr	r3, [pc, #184]	; (8010648 <__swsetup_r+0xd0>)
 8010590:	429c      	cmp	r4, r3
 8010592:	d10f      	bne.n	80105b4 <__swsetup_r+0x3c>
 8010594:	686c      	ldr	r4, [r5, #4]
 8010596:	89a3      	ldrh	r3, [r4, #12]
 8010598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801059c:	0719      	lsls	r1, r3, #28
 801059e:	d42c      	bmi.n	80105fa <__swsetup_r+0x82>
 80105a0:	06dd      	lsls	r5, r3, #27
 80105a2:	d411      	bmi.n	80105c8 <__swsetup_r+0x50>
 80105a4:	2309      	movs	r3, #9
 80105a6:	6033      	str	r3, [r6, #0]
 80105a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80105ac:	81a3      	strh	r3, [r4, #12]
 80105ae:	f04f 30ff 	mov.w	r0, #4294967295
 80105b2:	e03e      	b.n	8010632 <__swsetup_r+0xba>
 80105b4:	4b25      	ldr	r3, [pc, #148]	; (801064c <__swsetup_r+0xd4>)
 80105b6:	429c      	cmp	r4, r3
 80105b8:	d101      	bne.n	80105be <__swsetup_r+0x46>
 80105ba:	68ac      	ldr	r4, [r5, #8]
 80105bc:	e7eb      	b.n	8010596 <__swsetup_r+0x1e>
 80105be:	4b24      	ldr	r3, [pc, #144]	; (8010650 <__swsetup_r+0xd8>)
 80105c0:	429c      	cmp	r4, r3
 80105c2:	bf08      	it	eq
 80105c4:	68ec      	ldreq	r4, [r5, #12]
 80105c6:	e7e6      	b.n	8010596 <__swsetup_r+0x1e>
 80105c8:	0758      	lsls	r0, r3, #29
 80105ca:	d512      	bpl.n	80105f2 <__swsetup_r+0x7a>
 80105cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105ce:	b141      	cbz	r1, 80105e2 <__swsetup_r+0x6a>
 80105d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105d4:	4299      	cmp	r1, r3
 80105d6:	d002      	beq.n	80105de <__swsetup_r+0x66>
 80105d8:	4630      	mov	r0, r6
 80105da:	f7fd fd61 	bl	800e0a0 <_free_r>
 80105de:	2300      	movs	r3, #0
 80105e0:	6363      	str	r3, [r4, #52]	; 0x34
 80105e2:	89a3      	ldrh	r3, [r4, #12]
 80105e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80105e8:	81a3      	strh	r3, [r4, #12]
 80105ea:	2300      	movs	r3, #0
 80105ec:	6063      	str	r3, [r4, #4]
 80105ee:	6923      	ldr	r3, [r4, #16]
 80105f0:	6023      	str	r3, [r4, #0]
 80105f2:	89a3      	ldrh	r3, [r4, #12]
 80105f4:	f043 0308 	orr.w	r3, r3, #8
 80105f8:	81a3      	strh	r3, [r4, #12]
 80105fa:	6923      	ldr	r3, [r4, #16]
 80105fc:	b94b      	cbnz	r3, 8010612 <__swsetup_r+0x9a>
 80105fe:	89a3      	ldrh	r3, [r4, #12]
 8010600:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010608:	d003      	beq.n	8010612 <__swsetup_r+0x9a>
 801060a:	4621      	mov	r1, r4
 801060c:	4630      	mov	r0, r6
 801060e:	f000 fa05 	bl	8010a1c <__smakebuf_r>
 8010612:	89a0      	ldrh	r0, [r4, #12]
 8010614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010618:	f010 0301 	ands.w	r3, r0, #1
 801061c:	d00a      	beq.n	8010634 <__swsetup_r+0xbc>
 801061e:	2300      	movs	r3, #0
 8010620:	60a3      	str	r3, [r4, #8]
 8010622:	6963      	ldr	r3, [r4, #20]
 8010624:	425b      	negs	r3, r3
 8010626:	61a3      	str	r3, [r4, #24]
 8010628:	6923      	ldr	r3, [r4, #16]
 801062a:	b943      	cbnz	r3, 801063e <__swsetup_r+0xc6>
 801062c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010630:	d1ba      	bne.n	80105a8 <__swsetup_r+0x30>
 8010632:	bd70      	pop	{r4, r5, r6, pc}
 8010634:	0781      	lsls	r1, r0, #30
 8010636:	bf58      	it	pl
 8010638:	6963      	ldrpl	r3, [r4, #20]
 801063a:	60a3      	str	r3, [r4, #8]
 801063c:	e7f4      	b.n	8010628 <__swsetup_r+0xb0>
 801063e:	2000      	movs	r0, #0
 8010640:	e7f7      	b.n	8010632 <__swsetup_r+0xba>
 8010642:	bf00      	nop
 8010644:	24001f10 	.word	0x24001f10
 8010648:	0806fdb4 	.word	0x0806fdb4
 801064c:	0806fdd4 	.word	0x0806fdd4
 8010650:	0806fd94 	.word	0x0806fd94

08010654 <abort>:
 8010654:	b508      	push	{r3, lr}
 8010656:	2006      	movs	r0, #6
 8010658:	f000 fa48 	bl	8010aec <raise>
 801065c:	2001      	movs	r0, #1
 801065e:	f000 fbeb 	bl	8010e38 <_exit>
	...

08010664 <__sflush_r>:
 8010664:	898a      	ldrh	r2, [r1, #12]
 8010666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801066a:	4605      	mov	r5, r0
 801066c:	0710      	lsls	r0, r2, #28
 801066e:	460c      	mov	r4, r1
 8010670:	d458      	bmi.n	8010724 <__sflush_r+0xc0>
 8010672:	684b      	ldr	r3, [r1, #4]
 8010674:	2b00      	cmp	r3, #0
 8010676:	dc05      	bgt.n	8010684 <__sflush_r+0x20>
 8010678:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801067a:	2b00      	cmp	r3, #0
 801067c:	dc02      	bgt.n	8010684 <__sflush_r+0x20>
 801067e:	2000      	movs	r0, #0
 8010680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010686:	2e00      	cmp	r6, #0
 8010688:	d0f9      	beq.n	801067e <__sflush_r+0x1a>
 801068a:	2300      	movs	r3, #0
 801068c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010690:	682f      	ldr	r7, [r5, #0]
 8010692:	602b      	str	r3, [r5, #0]
 8010694:	d032      	beq.n	80106fc <__sflush_r+0x98>
 8010696:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010698:	89a3      	ldrh	r3, [r4, #12]
 801069a:	075a      	lsls	r2, r3, #29
 801069c:	d505      	bpl.n	80106aa <__sflush_r+0x46>
 801069e:	6863      	ldr	r3, [r4, #4]
 80106a0:	1ac0      	subs	r0, r0, r3
 80106a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80106a4:	b10b      	cbz	r3, 80106aa <__sflush_r+0x46>
 80106a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80106a8:	1ac0      	subs	r0, r0, r3
 80106aa:	2300      	movs	r3, #0
 80106ac:	4602      	mov	r2, r0
 80106ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80106b0:	6a21      	ldr	r1, [r4, #32]
 80106b2:	4628      	mov	r0, r5
 80106b4:	47b0      	blx	r6
 80106b6:	1c43      	adds	r3, r0, #1
 80106b8:	89a3      	ldrh	r3, [r4, #12]
 80106ba:	d106      	bne.n	80106ca <__sflush_r+0x66>
 80106bc:	6829      	ldr	r1, [r5, #0]
 80106be:	291d      	cmp	r1, #29
 80106c0:	d82c      	bhi.n	801071c <__sflush_r+0xb8>
 80106c2:	4a2a      	ldr	r2, [pc, #168]	; (801076c <__sflush_r+0x108>)
 80106c4:	40ca      	lsrs	r2, r1
 80106c6:	07d6      	lsls	r6, r2, #31
 80106c8:	d528      	bpl.n	801071c <__sflush_r+0xb8>
 80106ca:	2200      	movs	r2, #0
 80106cc:	6062      	str	r2, [r4, #4]
 80106ce:	04d9      	lsls	r1, r3, #19
 80106d0:	6922      	ldr	r2, [r4, #16]
 80106d2:	6022      	str	r2, [r4, #0]
 80106d4:	d504      	bpl.n	80106e0 <__sflush_r+0x7c>
 80106d6:	1c42      	adds	r2, r0, #1
 80106d8:	d101      	bne.n	80106de <__sflush_r+0x7a>
 80106da:	682b      	ldr	r3, [r5, #0]
 80106dc:	b903      	cbnz	r3, 80106e0 <__sflush_r+0x7c>
 80106de:	6560      	str	r0, [r4, #84]	; 0x54
 80106e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106e2:	602f      	str	r7, [r5, #0]
 80106e4:	2900      	cmp	r1, #0
 80106e6:	d0ca      	beq.n	801067e <__sflush_r+0x1a>
 80106e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106ec:	4299      	cmp	r1, r3
 80106ee:	d002      	beq.n	80106f6 <__sflush_r+0x92>
 80106f0:	4628      	mov	r0, r5
 80106f2:	f7fd fcd5 	bl	800e0a0 <_free_r>
 80106f6:	2000      	movs	r0, #0
 80106f8:	6360      	str	r0, [r4, #52]	; 0x34
 80106fa:	e7c1      	b.n	8010680 <__sflush_r+0x1c>
 80106fc:	6a21      	ldr	r1, [r4, #32]
 80106fe:	2301      	movs	r3, #1
 8010700:	4628      	mov	r0, r5
 8010702:	47b0      	blx	r6
 8010704:	1c41      	adds	r1, r0, #1
 8010706:	d1c7      	bne.n	8010698 <__sflush_r+0x34>
 8010708:	682b      	ldr	r3, [r5, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d0c4      	beq.n	8010698 <__sflush_r+0x34>
 801070e:	2b1d      	cmp	r3, #29
 8010710:	d001      	beq.n	8010716 <__sflush_r+0xb2>
 8010712:	2b16      	cmp	r3, #22
 8010714:	d101      	bne.n	801071a <__sflush_r+0xb6>
 8010716:	602f      	str	r7, [r5, #0]
 8010718:	e7b1      	b.n	801067e <__sflush_r+0x1a>
 801071a:	89a3      	ldrh	r3, [r4, #12]
 801071c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010720:	81a3      	strh	r3, [r4, #12]
 8010722:	e7ad      	b.n	8010680 <__sflush_r+0x1c>
 8010724:	690f      	ldr	r7, [r1, #16]
 8010726:	2f00      	cmp	r7, #0
 8010728:	d0a9      	beq.n	801067e <__sflush_r+0x1a>
 801072a:	0793      	lsls	r3, r2, #30
 801072c:	680e      	ldr	r6, [r1, #0]
 801072e:	bf08      	it	eq
 8010730:	694b      	ldreq	r3, [r1, #20]
 8010732:	600f      	str	r7, [r1, #0]
 8010734:	bf18      	it	ne
 8010736:	2300      	movne	r3, #0
 8010738:	eba6 0807 	sub.w	r8, r6, r7
 801073c:	608b      	str	r3, [r1, #8]
 801073e:	f1b8 0f00 	cmp.w	r8, #0
 8010742:	dd9c      	ble.n	801067e <__sflush_r+0x1a>
 8010744:	6a21      	ldr	r1, [r4, #32]
 8010746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010748:	4643      	mov	r3, r8
 801074a:	463a      	mov	r2, r7
 801074c:	4628      	mov	r0, r5
 801074e:	47b0      	blx	r6
 8010750:	2800      	cmp	r0, #0
 8010752:	dc06      	bgt.n	8010762 <__sflush_r+0xfe>
 8010754:	89a3      	ldrh	r3, [r4, #12]
 8010756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801075a:	81a3      	strh	r3, [r4, #12]
 801075c:	f04f 30ff 	mov.w	r0, #4294967295
 8010760:	e78e      	b.n	8010680 <__sflush_r+0x1c>
 8010762:	4407      	add	r7, r0
 8010764:	eba8 0800 	sub.w	r8, r8, r0
 8010768:	e7e9      	b.n	801073e <__sflush_r+0xda>
 801076a:	bf00      	nop
 801076c:	20400001 	.word	0x20400001

08010770 <_fflush_r>:
 8010770:	b538      	push	{r3, r4, r5, lr}
 8010772:	690b      	ldr	r3, [r1, #16]
 8010774:	4605      	mov	r5, r0
 8010776:	460c      	mov	r4, r1
 8010778:	b913      	cbnz	r3, 8010780 <_fflush_r+0x10>
 801077a:	2500      	movs	r5, #0
 801077c:	4628      	mov	r0, r5
 801077e:	bd38      	pop	{r3, r4, r5, pc}
 8010780:	b118      	cbz	r0, 801078a <_fflush_r+0x1a>
 8010782:	6983      	ldr	r3, [r0, #24]
 8010784:	b90b      	cbnz	r3, 801078a <_fflush_r+0x1a>
 8010786:	f000 f887 	bl	8010898 <__sinit>
 801078a:	4b14      	ldr	r3, [pc, #80]	; (80107dc <_fflush_r+0x6c>)
 801078c:	429c      	cmp	r4, r3
 801078e:	d11b      	bne.n	80107c8 <_fflush_r+0x58>
 8010790:	686c      	ldr	r4, [r5, #4]
 8010792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d0ef      	beq.n	801077a <_fflush_r+0xa>
 801079a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801079c:	07d0      	lsls	r0, r2, #31
 801079e:	d404      	bmi.n	80107aa <_fflush_r+0x3a>
 80107a0:	0599      	lsls	r1, r3, #22
 80107a2:	d402      	bmi.n	80107aa <_fflush_r+0x3a>
 80107a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107a6:	f7ff fcf8 	bl	801019a <__retarget_lock_acquire_recursive>
 80107aa:	4628      	mov	r0, r5
 80107ac:	4621      	mov	r1, r4
 80107ae:	f7ff ff59 	bl	8010664 <__sflush_r>
 80107b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80107b4:	07da      	lsls	r2, r3, #31
 80107b6:	4605      	mov	r5, r0
 80107b8:	d4e0      	bmi.n	801077c <_fflush_r+0xc>
 80107ba:	89a3      	ldrh	r3, [r4, #12]
 80107bc:	059b      	lsls	r3, r3, #22
 80107be:	d4dd      	bmi.n	801077c <_fflush_r+0xc>
 80107c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107c2:	f7ff fceb 	bl	801019c <__retarget_lock_release_recursive>
 80107c6:	e7d9      	b.n	801077c <_fflush_r+0xc>
 80107c8:	4b05      	ldr	r3, [pc, #20]	; (80107e0 <_fflush_r+0x70>)
 80107ca:	429c      	cmp	r4, r3
 80107cc:	d101      	bne.n	80107d2 <_fflush_r+0x62>
 80107ce:	68ac      	ldr	r4, [r5, #8]
 80107d0:	e7df      	b.n	8010792 <_fflush_r+0x22>
 80107d2:	4b04      	ldr	r3, [pc, #16]	; (80107e4 <_fflush_r+0x74>)
 80107d4:	429c      	cmp	r4, r3
 80107d6:	bf08      	it	eq
 80107d8:	68ec      	ldreq	r4, [r5, #12]
 80107da:	e7da      	b.n	8010792 <_fflush_r+0x22>
 80107dc:	0806fdb4 	.word	0x0806fdb4
 80107e0:	0806fdd4 	.word	0x0806fdd4
 80107e4:	0806fd94 	.word	0x0806fd94

080107e8 <std>:
 80107e8:	2300      	movs	r3, #0
 80107ea:	b510      	push	{r4, lr}
 80107ec:	4604      	mov	r4, r0
 80107ee:	e9c0 3300 	strd	r3, r3, [r0]
 80107f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80107f6:	6083      	str	r3, [r0, #8]
 80107f8:	8181      	strh	r1, [r0, #12]
 80107fa:	6643      	str	r3, [r0, #100]	; 0x64
 80107fc:	81c2      	strh	r2, [r0, #14]
 80107fe:	6183      	str	r3, [r0, #24]
 8010800:	4619      	mov	r1, r3
 8010802:	2208      	movs	r2, #8
 8010804:	305c      	adds	r0, #92	; 0x5c
 8010806:	f7fd fc43 	bl	800e090 <memset>
 801080a:	4b05      	ldr	r3, [pc, #20]	; (8010820 <std+0x38>)
 801080c:	6263      	str	r3, [r4, #36]	; 0x24
 801080e:	4b05      	ldr	r3, [pc, #20]	; (8010824 <std+0x3c>)
 8010810:	62a3      	str	r3, [r4, #40]	; 0x28
 8010812:	4b05      	ldr	r3, [pc, #20]	; (8010828 <std+0x40>)
 8010814:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010816:	4b05      	ldr	r3, [pc, #20]	; (801082c <std+0x44>)
 8010818:	6224      	str	r4, [r4, #32]
 801081a:	6323      	str	r3, [r4, #48]	; 0x30
 801081c:	bd10      	pop	{r4, pc}
 801081e:	bf00      	nop
 8010820:	08010b25 	.word	0x08010b25
 8010824:	08010b47 	.word	0x08010b47
 8010828:	08010b7f 	.word	0x08010b7f
 801082c:	08010ba3 	.word	0x08010ba3

08010830 <_cleanup_r>:
 8010830:	4901      	ldr	r1, [pc, #4]	; (8010838 <_cleanup_r+0x8>)
 8010832:	f000 b8af 	b.w	8010994 <_fwalk_reent>
 8010836:	bf00      	nop
 8010838:	08010771 	.word	0x08010771

0801083c <__sfmoreglue>:
 801083c:	b570      	push	{r4, r5, r6, lr}
 801083e:	1e4a      	subs	r2, r1, #1
 8010840:	2568      	movs	r5, #104	; 0x68
 8010842:	4355      	muls	r5, r2
 8010844:	460e      	mov	r6, r1
 8010846:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801084a:	f7fd fc79 	bl	800e140 <_malloc_r>
 801084e:	4604      	mov	r4, r0
 8010850:	b140      	cbz	r0, 8010864 <__sfmoreglue+0x28>
 8010852:	2100      	movs	r1, #0
 8010854:	e9c0 1600 	strd	r1, r6, [r0]
 8010858:	300c      	adds	r0, #12
 801085a:	60a0      	str	r0, [r4, #8]
 801085c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010860:	f7fd fc16 	bl	800e090 <memset>
 8010864:	4620      	mov	r0, r4
 8010866:	bd70      	pop	{r4, r5, r6, pc}

08010868 <__sfp_lock_acquire>:
 8010868:	4801      	ldr	r0, [pc, #4]	; (8010870 <__sfp_lock_acquire+0x8>)
 801086a:	f7ff bc96 	b.w	801019a <__retarget_lock_acquire_recursive>
 801086e:	bf00      	nop
 8010870:	24010bdc 	.word	0x24010bdc

08010874 <__sfp_lock_release>:
 8010874:	4801      	ldr	r0, [pc, #4]	; (801087c <__sfp_lock_release+0x8>)
 8010876:	f7ff bc91 	b.w	801019c <__retarget_lock_release_recursive>
 801087a:	bf00      	nop
 801087c:	24010bdc 	.word	0x24010bdc

08010880 <__sinit_lock_acquire>:
 8010880:	4801      	ldr	r0, [pc, #4]	; (8010888 <__sinit_lock_acquire+0x8>)
 8010882:	f7ff bc8a 	b.w	801019a <__retarget_lock_acquire_recursive>
 8010886:	bf00      	nop
 8010888:	24010bd7 	.word	0x24010bd7

0801088c <__sinit_lock_release>:
 801088c:	4801      	ldr	r0, [pc, #4]	; (8010894 <__sinit_lock_release+0x8>)
 801088e:	f7ff bc85 	b.w	801019c <__retarget_lock_release_recursive>
 8010892:	bf00      	nop
 8010894:	24010bd7 	.word	0x24010bd7

08010898 <__sinit>:
 8010898:	b510      	push	{r4, lr}
 801089a:	4604      	mov	r4, r0
 801089c:	f7ff fff0 	bl	8010880 <__sinit_lock_acquire>
 80108a0:	69a3      	ldr	r3, [r4, #24]
 80108a2:	b11b      	cbz	r3, 80108ac <__sinit+0x14>
 80108a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108a8:	f7ff bff0 	b.w	801088c <__sinit_lock_release>
 80108ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80108b0:	6523      	str	r3, [r4, #80]	; 0x50
 80108b2:	4b13      	ldr	r3, [pc, #76]	; (8010900 <__sinit+0x68>)
 80108b4:	4a13      	ldr	r2, [pc, #76]	; (8010904 <__sinit+0x6c>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80108ba:	42a3      	cmp	r3, r4
 80108bc:	bf04      	itt	eq
 80108be:	2301      	moveq	r3, #1
 80108c0:	61a3      	streq	r3, [r4, #24]
 80108c2:	4620      	mov	r0, r4
 80108c4:	f000 f820 	bl	8010908 <__sfp>
 80108c8:	6060      	str	r0, [r4, #4]
 80108ca:	4620      	mov	r0, r4
 80108cc:	f000 f81c 	bl	8010908 <__sfp>
 80108d0:	60a0      	str	r0, [r4, #8]
 80108d2:	4620      	mov	r0, r4
 80108d4:	f000 f818 	bl	8010908 <__sfp>
 80108d8:	2200      	movs	r2, #0
 80108da:	60e0      	str	r0, [r4, #12]
 80108dc:	2104      	movs	r1, #4
 80108de:	6860      	ldr	r0, [r4, #4]
 80108e0:	f7ff ff82 	bl	80107e8 <std>
 80108e4:	68a0      	ldr	r0, [r4, #8]
 80108e6:	2201      	movs	r2, #1
 80108e8:	2109      	movs	r1, #9
 80108ea:	f7ff ff7d 	bl	80107e8 <std>
 80108ee:	68e0      	ldr	r0, [r4, #12]
 80108f0:	2202      	movs	r2, #2
 80108f2:	2112      	movs	r1, #18
 80108f4:	f7ff ff78 	bl	80107e8 <std>
 80108f8:	2301      	movs	r3, #1
 80108fa:	61a3      	str	r3, [r4, #24]
 80108fc:	e7d2      	b.n	80108a4 <__sinit+0xc>
 80108fe:	bf00      	nop
 8010900:	0806fa10 	.word	0x0806fa10
 8010904:	08010831 	.word	0x08010831

08010908 <__sfp>:
 8010908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801090a:	4607      	mov	r7, r0
 801090c:	f7ff ffac 	bl	8010868 <__sfp_lock_acquire>
 8010910:	4b1e      	ldr	r3, [pc, #120]	; (801098c <__sfp+0x84>)
 8010912:	681e      	ldr	r6, [r3, #0]
 8010914:	69b3      	ldr	r3, [r6, #24]
 8010916:	b913      	cbnz	r3, 801091e <__sfp+0x16>
 8010918:	4630      	mov	r0, r6
 801091a:	f7ff ffbd 	bl	8010898 <__sinit>
 801091e:	3648      	adds	r6, #72	; 0x48
 8010920:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010924:	3b01      	subs	r3, #1
 8010926:	d503      	bpl.n	8010930 <__sfp+0x28>
 8010928:	6833      	ldr	r3, [r6, #0]
 801092a:	b30b      	cbz	r3, 8010970 <__sfp+0x68>
 801092c:	6836      	ldr	r6, [r6, #0]
 801092e:	e7f7      	b.n	8010920 <__sfp+0x18>
 8010930:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010934:	b9d5      	cbnz	r5, 801096c <__sfp+0x64>
 8010936:	4b16      	ldr	r3, [pc, #88]	; (8010990 <__sfp+0x88>)
 8010938:	60e3      	str	r3, [r4, #12]
 801093a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801093e:	6665      	str	r5, [r4, #100]	; 0x64
 8010940:	f7ff fc2a 	bl	8010198 <__retarget_lock_init_recursive>
 8010944:	f7ff ff96 	bl	8010874 <__sfp_lock_release>
 8010948:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801094c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010950:	6025      	str	r5, [r4, #0]
 8010952:	61a5      	str	r5, [r4, #24]
 8010954:	2208      	movs	r2, #8
 8010956:	4629      	mov	r1, r5
 8010958:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801095c:	f7fd fb98 	bl	800e090 <memset>
 8010960:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010964:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010968:	4620      	mov	r0, r4
 801096a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801096c:	3468      	adds	r4, #104	; 0x68
 801096e:	e7d9      	b.n	8010924 <__sfp+0x1c>
 8010970:	2104      	movs	r1, #4
 8010972:	4638      	mov	r0, r7
 8010974:	f7ff ff62 	bl	801083c <__sfmoreglue>
 8010978:	4604      	mov	r4, r0
 801097a:	6030      	str	r0, [r6, #0]
 801097c:	2800      	cmp	r0, #0
 801097e:	d1d5      	bne.n	801092c <__sfp+0x24>
 8010980:	f7ff ff78 	bl	8010874 <__sfp_lock_release>
 8010984:	230c      	movs	r3, #12
 8010986:	603b      	str	r3, [r7, #0]
 8010988:	e7ee      	b.n	8010968 <__sfp+0x60>
 801098a:	bf00      	nop
 801098c:	0806fa10 	.word	0x0806fa10
 8010990:	ffff0001 	.word	0xffff0001

08010994 <_fwalk_reent>:
 8010994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010998:	4606      	mov	r6, r0
 801099a:	4688      	mov	r8, r1
 801099c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80109a0:	2700      	movs	r7, #0
 80109a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80109a6:	f1b9 0901 	subs.w	r9, r9, #1
 80109aa:	d505      	bpl.n	80109b8 <_fwalk_reent+0x24>
 80109ac:	6824      	ldr	r4, [r4, #0]
 80109ae:	2c00      	cmp	r4, #0
 80109b0:	d1f7      	bne.n	80109a2 <_fwalk_reent+0xe>
 80109b2:	4638      	mov	r0, r7
 80109b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109b8:	89ab      	ldrh	r3, [r5, #12]
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	d907      	bls.n	80109ce <_fwalk_reent+0x3a>
 80109be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80109c2:	3301      	adds	r3, #1
 80109c4:	d003      	beq.n	80109ce <_fwalk_reent+0x3a>
 80109c6:	4629      	mov	r1, r5
 80109c8:	4630      	mov	r0, r6
 80109ca:	47c0      	blx	r8
 80109cc:	4307      	orrs	r7, r0
 80109ce:	3568      	adds	r5, #104	; 0x68
 80109d0:	e7e9      	b.n	80109a6 <_fwalk_reent+0x12>

080109d2 <__swhatbuf_r>:
 80109d2:	b570      	push	{r4, r5, r6, lr}
 80109d4:	460e      	mov	r6, r1
 80109d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109da:	2900      	cmp	r1, #0
 80109dc:	b096      	sub	sp, #88	; 0x58
 80109de:	4614      	mov	r4, r2
 80109e0:	461d      	mov	r5, r3
 80109e2:	da07      	bge.n	80109f4 <__swhatbuf_r+0x22>
 80109e4:	2300      	movs	r3, #0
 80109e6:	602b      	str	r3, [r5, #0]
 80109e8:	89b3      	ldrh	r3, [r6, #12]
 80109ea:	061a      	lsls	r2, r3, #24
 80109ec:	d410      	bmi.n	8010a10 <__swhatbuf_r+0x3e>
 80109ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109f2:	e00e      	b.n	8010a12 <__swhatbuf_r+0x40>
 80109f4:	466a      	mov	r2, sp
 80109f6:	f000 f8fb 	bl	8010bf0 <_fstat_r>
 80109fa:	2800      	cmp	r0, #0
 80109fc:	dbf2      	blt.n	80109e4 <__swhatbuf_r+0x12>
 80109fe:	9a01      	ldr	r2, [sp, #4]
 8010a00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010a04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010a08:	425a      	negs	r2, r3
 8010a0a:	415a      	adcs	r2, r3
 8010a0c:	602a      	str	r2, [r5, #0]
 8010a0e:	e7ee      	b.n	80109ee <__swhatbuf_r+0x1c>
 8010a10:	2340      	movs	r3, #64	; 0x40
 8010a12:	2000      	movs	r0, #0
 8010a14:	6023      	str	r3, [r4, #0]
 8010a16:	b016      	add	sp, #88	; 0x58
 8010a18:	bd70      	pop	{r4, r5, r6, pc}
	...

08010a1c <__smakebuf_r>:
 8010a1c:	898b      	ldrh	r3, [r1, #12]
 8010a1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010a20:	079d      	lsls	r5, r3, #30
 8010a22:	4606      	mov	r6, r0
 8010a24:	460c      	mov	r4, r1
 8010a26:	d507      	bpl.n	8010a38 <__smakebuf_r+0x1c>
 8010a28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010a2c:	6023      	str	r3, [r4, #0]
 8010a2e:	6123      	str	r3, [r4, #16]
 8010a30:	2301      	movs	r3, #1
 8010a32:	6163      	str	r3, [r4, #20]
 8010a34:	b002      	add	sp, #8
 8010a36:	bd70      	pop	{r4, r5, r6, pc}
 8010a38:	ab01      	add	r3, sp, #4
 8010a3a:	466a      	mov	r2, sp
 8010a3c:	f7ff ffc9 	bl	80109d2 <__swhatbuf_r>
 8010a40:	9900      	ldr	r1, [sp, #0]
 8010a42:	4605      	mov	r5, r0
 8010a44:	4630      	mov	r0, r6
 8010a46:	f7fd fb7b 	bl	800e140 <_malloc_r>
 8010a4a:	b948      	cbnz	r0, 8010a60 <__smakebuf_r+0x44>
 8010a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a50:	059a      	lsls	r2, r3, #22
 8010a52:	d4ef      	bmi.n	8010a34 <__smakebuf_r+0x18>
 8010a54:	f023 0303 	bic.w	r3, r3, #3
 8010a58:	f043 0302 	orr.w	r3, r3, #2
 8010a5c:	81a3      	strh	r3, [r4, #12]
 8010a5e:	e7e3      	b.n	8010a28 <__smakebuf_r+0xc>
 8010a60:	4b0d      	ldr	r3, [pc, #52]	; (8010a98 <__smakebuf_r+0x7c>)
 8010a62:	62b3      	str	r3, [r6, #40]	; 0x28
 8010a64:	89a3      	ldrh	r3, [r4, #12]
 8010a66:	6020      	str	r0, [r4, #0]
 8010a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a6c:	81a3      	strh	r3, [r4, #12]
 8010a6e:	9b00      	ldr	r3, [sp, #0]
 8010a70:	6163      	str	r3, [r4, #20]
 8010a72:	9b01      	ldr	r3, [sp, #4]
 8010a74:	6120      	str	r0, [r4, #16]
 8010a76:	b15b      	cbz	r3, 8010a90 <__smakebuf_r+0x74>
 8010a78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a7c:	4630      	mov	r0, r6
 8010a7e:	f000 f8c9 	bl	8010c14 <_isatty_r>
 8010a82:	b128      	cbz	r0, 8010a90 <__smakebuf_r+0x74>
 8010a84:	89a3      	ldrh	r3, [r4, #12]
 8010a86:	f023 0303 	bic.w	r3, r3, #3
 8010a8a:	f043 0301 	orr.w	r3, r3, #1
 8010a8e:	81a3      	strh	r3, [r4, #12]
 8010a90:	89a0      	ldrh	r0, [r4, #12]
 8010a92:	4305      	orrs	r5, r0
 8010a94:	81a5      	strh	r5, [r4, #12]
 8010a96:	e7cd      	b.n	8010a34 <__smakebuf_r+0x18>
 8010a98:	08010831 	.word	0x08010831

08010a9c <_raise_r>:
 8010a9c:	291f      	cmp	r1, #31
 8010a9e:	b538      	push	{r3, r4, r5, lr}
 8010aa0:	4604      	mov	r4, r0
 8010aa2:	460d      	mov	r5, r1
 8010aa4:	d904      	bls.n	8010ab0 <_raise_r+0x14>
 8010aa6:	2316      	movs	r3, #22
 8010aa8:	6003      	str	r3, [r0, #0]
 8010aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8010aae:	bd38      	pop	{r3, r4, r5, pc}
 8010ab0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010ab2:	b112      	cbz	r2, 8010aba <_raise_r+0x1e>
 8010ab4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ab8:	b94b      	cbnz	r3, 8010ace <_raise_r+0x32>
 8010aba:	4620      	mov	r0, r4
 8010abc:	f000 f830 	bl	8010b20 <_getpid_r>
 8010ac0:	462a      	mov	r2, r5
 8010ac2:	4601      	mov	r1, r0
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010aca:	f000 b817 	b.w	8010afc <_kill_r>
 8010ace:	2b01      	cmp	r3, #1
 8010ad0:	d00a      	beq.n	8010ae8 <_raise_r+0x4c>
 8010ad2:	1c59      	adds	r1, r3, #1
 8010ad4:	d103      	bne.n	8010ade <_raise_r+0x42>
 8010ad6:	2316      	movs	r3, #22
 8010ad8:	6003      	str	r3, [r0, #0]
 8010ada:	2001      	movs	r0, #1
 8010adc:	e7e7      	b.n	8010aae <_raise_r+0x12>
 8010ade:	2400      	movs	r4, #0
 8010ae0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010ae4:	4628      	mov	r0, r5
 8010ae6:	4798      	blx	r3
 8010ae8:	2000      	movs	r0, #0
 8010aea:	e7e0      	b.n	8010aae <_raise_r+0x12>

08010aec <raise>:
 8010aec:	4b02      	ldr	r3, [pc, #8]	; (8010af8 <raise+0xc>)
 8010aee:	4601      	mov	r1, r0
 8010af0:	6818      	ldr	r0, [r3, #0]
 8010af2:	f7ff bfd3 	b.w	8010a9c <_raise_r>
 8010af6:	bf00      	nop
 8010af8:	24001f10 	.word	0x24001f10

08010afc <_kill_r>:
 8010afc:	b538      	push	{r3, r4, r5, lr}
 8010afe:	4d07      	ldr	r5, [pc, #28]	; (8010b1c <_kill_r+0x20>)
 8010b00:	2300      	movs	r3, #0
 8010b02:	4604      	mov	r4, r0
 8010b04:	4608      	mov	r0, r1
 8010b06:	4611      	mov	r1, r2
 8010b08:	602b      	str	r3, [r5, #0]
 8010b0a:	f000 f975 	bl	8010df8 <_kill>
 8010b0e:	1c43      	adds	r3, r0, #1
 8010b10:	d102      	bne.n	8010b18 <_kill_r+0x1c>
 8010b12:	682b      	ldr	r3, [r5, #0]
 8010b14:	b103      	cbz	r3, 8010b18 <_kill_r+0x1c>
 8010b16:	6023      	str	r3, [r4, #0]
 8010b18:	bd38      	pop	{r3, r4, r5, pc}
 8010b1a:	bf00      	nop
 8010b1c:	24010bd0 	.word	0x24010bd0

08010b20 <_getpid_r>:
 8010b20:	f000 b95a 	b.w	8010dd8 <_getpid>

08010b24 <__sread>:
 8010b24:	b510      	push	{r4, lr}
 8010b26:	460c      	mov	r4, r1
 8010b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b2c:	f000 f894 	bl	8010c58 <_read_r>
 8010b30:	2800      	cmp	r0, #0
 8010b32:	bfab      	itete	ge
 8010b34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010b36:	89a3      	ldrhlt	r3, [r4, #12]
 8010b38:	181b      	addge	r3, r3, r0
 8010b3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010b3e:	bfac      	ite	ge
 8010b40:	6563      	strge	r3, [r4, #84]	; 0x54
 8010b42:	81a3      	strhlt	r3, [r4, #12]
 8010b44:	bd10      	pop	{r4, pc}

08010b46 <__swrite>:
 8010b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b4a:	461f      	mov	r7, r3
 8010b4c:	898b      	ldrh	r3, [r1, #12]
 8010b4e:	05db      	lsls	r3, r3, #23
 8010b50:	4605      	mov	r5, r0
 8010b52:	460c      	mov	r4, r1
 8010b54:	4616      	mov	r6, r2
 8010b56:	d505      	bpl.n	8010b64 <__swrite+0x1e>
 8010b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b5c:	2302      	movs	r3, #2
 8010b5e:	2200      	movs	r2, #0
 8010b60:	f000 f868 	bl	8010c34 <_lseek_r>
 8010b64:	89a3      	ldrh	r3, [r4, #12]
 8010b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010b6e:	81a3      	strh	r3, [r4, #12]
 8010b70:	4632      	mov	r2, r6
 8010b72:	463b      	mov	r3, r7
 8010b74:	4628      	mov	r0, r5
 8010b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b7a:	f000 b817 	b.w	8010bac <_write_r>

08010b7e <__sseek>:
 8010b7e:	b510      	push	{r4, lr}
 8010b80:	460c      	mov	r4, r1
 8010b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b86:	f000 f855 	bl	8010c34 <_lseek_r>
 8010b8a:	1c43      	adds	r3, r0, #1
 8010b8c:	89a3      	ldrh	r3, [r4, #12]
 8010b8e:	bf15      	itete	ne
 8010b90:	6560      	strne	r0, [r4, #84]	; 0x54
 8010b92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010b96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010b9a:	81a3      	strheq	r3, [r4, #12]
 8010b9c:	bf18      	it	ne
 8010b9e:	81a3      	strhne	r3, [r4, #12]
 8010ba0:	bd10      	pop	{r4, pc}

08010ba2 <__sclose>:
 8010ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ba6:	f000 b813 	b.w	8010bd0 <_close_r>
	...

08010bac <_write_r>:
 8010bac:	b538      	push	{r3, r4, r5, lr}
 8010bae:	4d07      	ldr	r5, [pc, #28]	; (8010bcc <_write_r+0x20>)
 8010bb0:	4604      	mov	r4, r0
 8010bb2:	4608      	mov	r0, r1
 8010bb4:	4611      	mov	r1, r2
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	602a      	str	r2, [r5, #0]
 8010bba:	461a      	mov	r2, r3
 8010bbc:	f000 f934 	bl	8010e28 <_write>
 8010bc0:	1c43      	adds	r3, r0, #1
 8010bc2:	d102      	bne.n	8010bca <_write_r+0x1e>
 8010bc4:	682b      	ldr	r3, [r5, #0]
 8010bc6:	b103      	cbz	r3, 8010bca <_write_r+0x1e>
 8010bc8:	6023      	str	r3, [r4, #0]
 8010bca:	bd38      	pop	{r3, r4, r5, pc}
 8010bcc:	24010bd0 	.word	0x24010bd0

08010bd0 <_close_r>:
 8010bd0:	b538      	push	{r3, r4, r5, lr}
 8010bd2:	4d06      	ldr	r5, [pc, #24]	; (8010bec <_close_r+0x1c>)
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	4604      	mov	r4, r0
 8010bd8:	4608      	mov	r0, r1
 8010bda:	602b      	str	r3, [r5, #0]
 8010bdc:	f000 f8ec 	bl	8010db8 <_close>
 8010be0:	1c43      	adds	r3, r0, #1
 8010be2:	d102      	bne.n	8010bea <_close_r+0x1a>
 8010be4:	682b      	ldr	r3, [r5, #0]
 8010be6:	b103      	cbz	r3, 8010bea <_close_r+0x1a>
 8010be8:	6023      	str	r3, [r4, #0]
 8010bea:	bd38      	pop	{r3, r4, r5, pc}
 8010bec:	24010bd0 	.word	0x24010bd0

08010bf0 <_fstat_r>:
 8010bf0:	b538      	push	{r3, r4, r5, lr}
 8010bf2:	4d07      	ldr	r5, [pc, #28]	; (8010c10 <_fstat_r+0x20>)
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	4604      	mov	r4, r0
 8010bf8:	4608      	mov	r0, r1
 8010bfa:	4611      	mov	r1, r2
 8010bfc:	602b      	str	r3, [r5, #0]
 8010bfe:	f000 f8e3 	bl	8010dc8 <_fstat>
 8010c02:	1c43      	adds	r3, r0, #1
 8010c04:	d102      	bne.n	8010c0c <_fstat_r+0x1c>
 8010c06:	682b      	ldr	r3, [r5, #0]
 8010c08:	b103      	cbz	r3, 8010c0c <_fstat_r+0x1c>
 8010c0a:	6023      	str	r3, [r4, #0]
 8010c0c:	bd38      	pop	{r3, r4, r5, pc}
 8010c0e:	bf00      	nop
 8010c10:	24010bd0 	.word	0x24010bd0

08010c14 <_isatty_r>:
 8010c14:	b538      	push	{r3, r4, r5, lr}
 8010c16:	4d06      	ldr	r5, [pc, #24]	; (8010c30 <_isatty_r+0x1c>)
 8010c18:	2300      	movs	r3, #0
 8010c1a:	4604      	mov	r4, r0
 8010c1c:	4608      	mov	r0, r1
 8010c1e:	602b      	str	r3, [r5, #0]
 8010c20:	f000 f8e2 	bl	8010de8 <_isatty>
 8010c24:	1c43      	adds	r3, r0, #1
 8010c26:	d102      	bne.n	8010c2e <_isatty_r+0x1a>
 8010c28:	682b      	ldr	r3, [r5, #0]
 8010c2a:	b103      	cbz	r3, 8010c2e <_isatty_r+0x1a>
 8010c2c:	6023      	str	r3, [r4, #0]
 8010c2e:	bd38      	pop	{r3, r4, r5, pc}
 8010c30:	24010bd0 	.word	0x24010bd0

08010c34 <_lseek_r>:
 8010c34:	b538      	push	{r3, r4, r5, lr}
 8010c36:	4d07      	ldr	r5, [pc, #28]	; (8010c54 <_lseek_r+0x20>)
 8010c38:	4604      	mov	r4, r0
 8010c3a:	4608      	mov	r0, r1
 8010c3c:	4611      	mov	r1, r2
 8010c3e:	2200      	movs	r2, #0
 8010c40:	602a      	str	r2, [r5, #0]
 8010c42:	461a      	mov	r2, r3
 8010c44:	f000 f8e0 	bl	8010e08 <_lseek>
 8010c48:	1c43      	adds	r3, r0, #1
 8010c4a:	d102      	bne.n	8010c52 <_lseek_r+0x1e>
 8010c4c:	682b      	ldr	r3, [r5, #0]
 8010c4e:	b103      	cbz	r3, 8010c52 <_lseek_r+0x1e>
 8010c50:	6023      	str	r3, [r4, #0]
 8010c52:	bd38      	pop	{r3, r4, r5, pc}
 8010c54:	24010bd0 	.word	0x24010bd0

08010c58 <_read_r>:
 8010c58:	b538      	push	{r3, r4, r5, lr}
 8010c5a:	4d07      	ldr	r5, [pc, #28]	; (8010c78 <_read_r+0x20>)
 8010c5c:	4604      	mov	r4, r0
 8010c5e:	4608      	mov	r0, r1
 8010c60:	4611      	mov	r1, r2
 8010c62:	2200      	movs	r2, #0
 8010c64:	602a      	str	r2, [r5, #0]
 8010c66:	461a      	mov	r2, r3
 8010c68:	f000 f8d6 	bl	8010e18 <_read>
 8010c6c:	1c43      	adds	r3, r0, #1
 8010c6e:	d102      	bne.n	8010c76 <_read_r+0x1e>
 8010c70:	682b      	ldr	r3, [r5, #0]
 8010c72:	b103      	cbz	r3, 8010c76 <_read_r+0x1e>
 8010c74:	6023      	str	r3, [r4, #0]
 8010c76:	bd38      	pop	{r3, r4, r5, pc}
 8010c78:	24010bd0 	.word	0x24010bd0

08010c7c <expf>:
 8010c7c:	ee10 2a10 	vmov	r2, s0
 8010c80:	b470      	push	{r4, r5, r6}
 8010c82:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8010c86:	f240 442a 	movw	r4, #1066	; 0x42a
 8010c8a:	42a3      	cmp	r3, r4
 8010c8c:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8010c90:	d92a      	bls.n	8010ce8 <expf+0x6c>
 8010c92:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8010c96:	d059      	beq.n	8010d4c <expf+0xd0>
 8010c98:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8010c9c:	d303      	bcc.n	8010ca6 <expf+0x2a>
 8010c9e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010ca2:	bc70      	pop	{r4, r5, r6}
 8010ca4:	4770      	bx	lr
 8010ca6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010d54 <expf+0xd8>
 8010caa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cb2:	dd03      	ble.n	8010cbc <expf+0x40>
 8010cb4:	bc70      	pop	{r4, r5, r6}
 8010cb6:	2000      	movs	r0, #0
 8010cb8:	f000 b878 	b.w	8010dac <__math_oflowf>
 8010cbc:	eddf 7a26 	vldr	s15, [pc, #152]	; 8010d58 <expf+0xdc>
 8010cc0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc8:	d503      	bpl.n	8010cd2 <expf+0x56>
 8010cca:	bc70      	pop	{r4, r5, r6}
 8010ccc:	2000      	movs	r0, #0
 8010cce:	f000 b861 	b.w	8010d94 <__math_uflowf>
 8010cd2:	eddf 7a22 	vldr	s15, [pc, #136]	; 8010d5c <expf+0xe0>
 8010cd6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cde:	d503      	bpl.n	8010ce8 <expf+0x6c>
 8010ce0:	bc70      	pop	{r4, r5, r6}
 8010ce2:	2000      	movs	r0, #0
 8010ce4:	f000 b85c 	b.w	8010da0 <__math_may_uflowf>
 8010ce8:	4b1d      	ldr	r3, [pc, #116]	; (8010d60 <expf+0xe4>)
 8010cea:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010cee:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8010cf2:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8010cf6:	eeb0 7b44 	vmov.f64	d7, d4
 8010cfa:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010cfe:	ee17 5a10 	vmov	r5, s14
 8010d02:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010d06:	f005 021f 	and.w	r2, r5, #31
 8010d0a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010d0e:	e9d2 4600 	ldrd	r4, r6, [r2]
 8010d12:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8010d16:	ed93 4b50 	vldr	d4, [r3, #320]	; 0x140
 8010d1a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8010d1e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8010d22:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8010d26:	2300      	movs	r3, #0
 8010d28:	1918      	adds	r0, r3, r4
 8010d2a:	ea4f 32c5 	mov.w	r2, r5, lsl #15
 8010d2e:	eb42 0106 	adc.w	r1, r2, r6
 8010d32:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010d36:	ee27 5b07 	vmul.f64	d5, d7, d7
 8010d3a:	ec41 0b17 	vmov	d7, r0, r1
 8010d3e:	eea6 0b05 	vfma.f64	d0, d6, d5
 8010d42:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010d46:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010d4a:	e7aa      	b.n	8010ca2 <expf+0x26>
 8010d4c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8010d64 <expf+0xe8>
 8010d50:	e7a7      	b.n	8010ca2 <expf+0x26>
 8010d52:	bf00      	nop
 8010d54:	42b17217 	.word	0x42b17217
 8010d58:	c2cff1b4 	.word	0xc2cff1b4
 8010d5c:	c2ce8ecf 	.word	0xc2ce8ecf
 8010d60:	0806fdf8 	.word	0x0806fdf8
 8010d64:	00000000 	.word	0x00000000

08010d68 <with_errnof>:
 8010d68:	b513      	push	{r0, r1, r4, lr}
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010d70:	f7fd f94e 	bl	800e010 <__errno>
 8010d74:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010d78:	6004      	str	r4, [r0, #0]
 8010d7a:	b002      	add	sp, #8
 8010d7c:	bd10      	pop	{r4, pc}

08010d7e <xflowf>:
 8010d7e:	b130      	cbz	r0, 8010d8e <xflowf+0x10>
 8010d80:	eef1 7a40 	vneg.f32	s15, s0
 8010d84:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010d88:	2022      	movs	r0, #34	; 0x22
 8010d8a:	f7ff bfed 	b.w	8010d68 <with_errnof>
 8010d8e:	eef0 7a40 	vmov.f32	s15, s0
 8010d92:	e7f7      	b.n	8010d84 <xflowf+0x6>

08010d94 <__math_uflowf>:
 8010d94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010d9c <__math_uflowf+0x8>
 8010d98:	f7ff bff1 	b.w	8010d7e <xflowf>
 8010d9c:	10000000 	.word	0x10000000

08010da0 <__math_may_uflowf>:
 8010da0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010da8 <__math_may_uflowf+0x8>
 8010da4:	f7ff bfeb 	b.w	8010d7e <xflowf>
 8010da8:	1a200000 	.word	0x1a200000

08010dac <__math_oflowf>:
 8010dac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010db4 <__math_oflowf+0x8>
 8010db0:	f7ff bfe5 	b.w	8010d7e <xflowf>
 8010db4:	70000000 	.word	0x70000000

08010db8 <_close>:
 8010db8:	4b02      	ldr	r3, [pc, #8]	; (8010dc4 <_close+0xc>)
 8010dba:	2258      	movs	r2, #88	; 0x58
 8010dbc:	601a      	str	r2, [r3, #0]
 8010dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8010dc2:	4770      	bx	lr
 8010dc4:	24010bd0 	.word	0x24010bd0

08010dc8 <_fstat>:
 8010dc8:	4b02      	ldr	r3, [pc, #8]	; (8010dd4 <_fstat+0xc>)
 8010dca:	2258      	movs	r2, #88	; 0x58
 8010dcc:	601a      	str	r2, [r3, #0]
 8010dce:	f04f 30ff 	mov.w	r0, #4294967295
 8010dd2:	4770      	bx	lr
 8010dd4:	24010bd0 	.word	0x24010bd0

08010dd8 <_getpid>:
 8010dd8:	4b02      	ldr	r3, [pc, #8]	; (8010de4 <_getpid+0xc>)
 8010dda:	2258      	movs	r2, #88	; 0x58
 8010ddc:	601a      	str	r2, [r3, #0]
 8010dde:	f04f 30ff 	mov.w	r0, #4294967295
 8010de2:	4770      	bx	lr
 8010de4:	24010bd0 	.word	0x24010bd0

08010de8 <_isatty>:
 8010de8:	4b02      	ldr	r3, [pc, #8]	; (8010df4 <_isatty+0xc>)
 8010dea:	2258      	movs	r2, #88	; 0x58
 8010dec:	601a      	str	r2, [r3, #0]
 8010dee:	2000      	movs	r0, #0
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	24010bd0 	.word	0x24010bd0

08010df8 <_kill>:
 8010df8:	4b02      	ldr	r3, [pc, #8]	; (8010e04 <_kill+0xc>)
 8010dfa:	2258      	movs	r2, #88	; 0x58
 8010dfc:	601a      	str	r2, [r3, #0]
 8010dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8010e02:	4770      	bx	lr
 8010e04:	24010bd0 	.word	0x24010bd0

08010e08 <_lseek>:
 8010e08:	4b02      	ldr	r3, [pc, #8]	; (8010e14 <_lseek+0xc>)
 8010e0a:	2258      	movs	r2, #88	; 0x58
 8010e0c:	601a      	str	r2, [r3, #0]
 8010e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e12:	4770      	bx	lr
 8010e14:	24010bd0 	.word	0x24010bd0

08010e18 <_read>:
 8010e18:	4b02      	ldr	r3, [pc, #8]	; (8010e24 <_read+0xc>)
 8010e1a:	2258      	movs	r2, #88	; 0x58
 8010e1c:	601a      	str	r2, [r3, #0]
 8010e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e22:	4770      	bx	lr
 8010e24:	24010bd0 	.word	0x24010bd0

08010e28 <_write>:
 8010e28:	4b02      	ldr	r3, [pc, #8]	; (8010e34 <_write+0xc>)
 8010e2a:	2258      	movs	r2, #88	; 0x58
 8010e2c:	601a      	str	r2, [r3, #0]
 8010e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e32:	4770      	bx	lr
 8010e34:	24010bd0 	.word	0x24010bd0

08010e38 <_exit>:
 8010e38:	e7fe      	b.n	8010e38 <_exit>
	...

08010e3c <_init>:
 8010e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e3e:	bf00      	nop
 8010e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e42:	bc08      	pop	{r3}
 8010e44:	469e      	mov	lr, r3
 8010e46:	4770      	bx	lr

08010e48 <_fini>:
 8010e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e4a:	bf00      	nop
 8010e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e4e:	bc08      	pop	{r3}
 8010e50:	469e      	mov	lr, r3
 8010e52:	4770      	bx	lr
