#loc = loc(unknown)
module @yolov1 attributes {module.chip = "ALL", module.platform = "ONNX", module.state = "TOP_F32", module.top_run_mode = "STATIC", module.weight_file = "yolov1_top_f32_all_origin_weight.npz"} {
  func.func @main(%arg0: tensor<1x3x96x96xf32> loc(unknown)) -> (tensor<*xf32>, tensor<*xf32>, tensor<*xf32>) {
    %0 = "top.None"() : () -> none loc(#loc)
    %1 = "top.Input"(%arg0) {channel_format = "nchw", do_preprocess = true, keep_aspect_ratio = false, keep_ratio_mode = "letterbox", mean = [0.000000e+00, 0.000000e+00, 0.000000e+00], pad_type = "center", pad_value = 0 : i64, pixel_format = "bgr", scale = [1.000000e+00, 1.000000e+00, 1.000000e+00]} : (tensor<1x3x96x96xf32>) -> tensor<1x3x96x96xf32> loc(#loc1)
    %2 = "top.Weight"() : () -> tensor<16x3x3x3xf32> loc(#loc2)
    %3 = "top.Conv"(%1, %2, %0) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<1x3x96x96xf32>, tensor<16x3x3x3xf32>, none) -> tensor<*xf32> loc(#loc3)
    %4 = "top.Weight"() : () -> tensor<1xf32> loc(#loc4)
    %5 = "top.Mul"(%3, %4) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc5)
    %6 = "top.Relu"(%5) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc6)
    %7 = "top.Weight"() : () -> tensor<1xf32> loc(#loc7)
    %8 = "top.Mul"(%6, %7) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc8)
    %9 = "top.MaxPool"(%8) {auto_pad = "NOTSET", ceil_mode = false, count_include_pad = false, do_relu = false, first_round_mode = "HalfAwayFromZero", is_adaptive = false, keepdims = true, kernel_shape = [2, 2], pad_value = 0 : i64, pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, round_mode = "HalfAwayFromZero", strides = [2, 2]} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc9)
    %10 = "top.Weight"() : () -> tensor<16x16x3x3xf32> loc(#loc10)
    %11 = "top.Conv"(%9, %10, %0) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<16x16x3x3xf32>, none) -> tensor<*xf32> loc(#loc11)
    %12 = "top.Weight"() : () -> tensor<1xf32> loc(#loc12)
    %13 = "top.Mul"(%11, %12) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc13)
    %14 = "top.Relu"(%13) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc14)
    %15 = "top.Weight"() : () -> tensor<1xf32> loc(#loc15)
    %16 = "top.Mul"(%14, %15) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc16)
    %17 = "top.MaxPool"(%16) {auto_pad = "NOTSET", ceil_mode = false, count_include_pad = false, do_relu = false, first_round_mode = "HalfAwayFromZero", is_adaptive = false, keepdims = true, kernel_shape = [2, 2], pad_value = 0 : i64, pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, round_mode = "HalfAwayFromZero", strides = [2, 2]} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc17)
    %18 = "top.Weight"() : () -> tensor<16x16x1x1xf32> loc(#loc18)
    %19 = "top.Conv"(%17, %18, %0) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [1, 1], pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<16x16x1x1xf32>, none) -> tensor<*xf32> loc(#loc19)
    %20 = "top.Weight"() : () -> tensor<1xf32> loc(#loc20)
    %21 = "top.Mul"(%19, %20) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc21)
    %22 = "top.Relu"(%21) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc22)
    %23 = "top.Weight"() : () -> tensor<1xf32> loc(#loc23)
    %24 = "top.Mul"(%22, %23) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc24)
    %25 = "top.Weight"() : () -> tensor<32x16x3x3xf32> loc(#loc25)
    %26 = "top.Weight"() : () -> tensor<32xf32> loc(#loc26)
    %27 = "top.Conv"(%24, %25, %26) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<32x16x3x3xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc27)
    %28 = "top.Weight"() : () -> tensor<32xf32> loc(#loc28)
    %29 = "top.Weight"() : () -> tensor<32xf32> loc(#loc29)
    %30 = "top.Weight"() : () -> tensor<32xf32> loc(#loc30)
    %31 = "top.Weight"() : () -> tensor<32xf32> loc(#loc31)
    %32 = "top.BatchNorm"(%27, %30, %31, %28, %29) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc32)
    %33 = "top.Weight"() : () -> tensor<1xf32> loc(#loc33)
    %34 = "top.Mul"(%32, %33) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc34)
    %35 = "top.Relu"(%34) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc35)
    %36 = "top.Weight"() : () -> tensor<1xf32> loc(#loc36)
    %37 = "top.Mul"(%35, %36) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc37)
    %38 = "top.Weight"() : () -> tensor<16x32x1x1xf32> loc(#loc38)
    %39 = "top.Weight"() : () -> tensor<16xf32> loc(#loc39)
    %40 = "top.Conv"(%37, %38, %39) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [1, 1], pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<16x32x1x1xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc40)
    %41 = "top.Weight"() : () -> tensor<16xf32> loc(#loc41)
    %42 = "top.Weight"() : () -> tensor<16xf32> loc(#loc42)
    %43 = "top.Weight"() : () -> tensor<16xf32> loc(#loc43)
    %44 = "top.Weight"() : () -> tensor<16xf32> loc(#loc44)
    %45 = "top.BatchNorm"(%40, %43, %44, %41, %42) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc45)
    %46 = "top.Weight"() : () -> tensor<1xf32> loc(#loc46)
    %47 = "top.Mul"(%45, %46) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc47)
    %48 = "top.Relu"(%47) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc48)
    %49 = "top.Weight"() : () -> tensor<1xf32> loc(#loc49)
    %50 = "top.Mul"(%48, %49) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc50)
    %51 = "top.Weight"() : () -> tensor<32x16x3x3xf32> loc(#loc51)
    %52 = "top.Weight"() : () -> tensor<32xf32> loc(#loc52)
    %53 = "top.Conv"(%50, %51, %52) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<32x16x3x3xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc53)
    %54 = "top.Weight"() : () -> tensor<32xf32> loc(#loc54)
    %55 = "top.Weight"() : () -> tensor<32xf32> loc(#loc55)
    %56 = "top.Weight"() : () -> tensor<32xf32> loc(#loc56)
    %57 = "top.Weight"() : () -> tensor<32xf32> loc(#loc57)
    %58 = "top.BatchNorm"(%53, %56, %57, %54, %55) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc58)
    %59 = "top.Weight"() : () -> tensor<1xf32> loc(#loc59)
    %60 = "top.Mul"(%58, %59) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc60)
    %61 = "top.Relu"(%60) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc61)
    %62 = "top.Weight"() : () -> tensor<1xf32> loc(#loc62)
    %63 = "top.Mul"(%61, %62) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc63)
    %64 = "top.Weight"() : () -> tensor<16x32x1x1xf32> loc(#loc64)
    %65 = "top.Weight"() : () -> tensor<16xf32> loc(#loc65)
    %66 = "top.Conv"(%63, %64, %65) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [1, 1], pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<16x32x1x1xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc66)
    %67 = "top.Weight"() : () -> tensor<16xf32> loc(#loc67)
    %68 = "top.Weight"() : () -> tensor<16xf32> loc(#loc68)
    %69 = "top.Weight"() : () -> tensor<16xf32> loc(#loc69)
    %70 = "top.Weight"() : () -> tensor<16xf32> loc(#loc70)
    %71 = "top.BatchNorm"(%66, %69, %70, %67, %68) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc71)
    %72 = "top.Weight"() : () -> tensor<1xf32> loc(#loc72)
    %73 = "top.Mul"(%71, %72) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc73)
    %74 = "top.Relu"(%73) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc74)
    %75 = "top.Weight"() : () -> tensor<1xf32> loc(#loc75)
    %76 = "top.Mul"(%74, %75) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc76)
    %77 = "top.Weight"() : () -> tensor<32x16x3x3xf32> loc(#loc77)
    %78 = "top.Weight"() : () -> tensor<32xf32> loc(#loc78)
    %79 = "top.Conv"(%76, %77, %78) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<32x16x3x3xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc79)
    %80 = "top.Weight"() : () -> tensor<32xf32> loc(#loc80)
    %81 = "top.Weight"() : () -> tensor<32xf32> loc(#loc81)
    %82 = "top.Weight"() : () -> tensor<32xf32> loc(#loc82)
    %83 = "top.Weight"() : () -> tensor<32xf32> loc(#loc83)
    %84 = "top.BatchNorm"(%79, %82, %83, %80, %81) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc84)
    %85 = "top.Weight"() : () -> tensor<1xf32> loc(#loc85)
    %86 = "top.Mul"(%84, %85) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc86)
    %87 = "top.Relu"(%86) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc87)
    %88 = "top.Weight"() : () -> tensor<1xf32> loc(#loc88)
    %89 = "top.Mul"(%87, %88) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc89)
    %90 = "top.MaxPool"(%89) {auto_pad = "NOTSET", ceil_mode = false, count_include_pad = false, do_relu = false, first_round_mode = "HalfAwayFromZero", is_adaptive = false, keepdims = true, kernel_shape = [2, 2], pad_value = 0 : i64, pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, round_mode = "HalfAwayFromZero", strides = [2, 2]} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc90)
    %91 = "top.Weight"() : () -> tensor<16x32x1x1xf32> loc(#loc91)
    %92 = "top.Weight"() : () -> tensor<16xf32> loc(#loc92)
    %93 = "top.Conv"(%90, %91, %92) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [1, 1], pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<16x32x1x1xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc93)
    %94 = "top.Weight"() : () -> tensor<16xf32> loc(#loc94)
    %95 = "top.Weight"() : () -> tensor<16xf32> loc(#loc95)
    %96 = "top.Weight"() : () -> tensor<16xf32> loc(#loc96)
    %97 = "top.Weight"() : () -> tensor<16xf32> loc(#loc97)
    %98 = "top.BatchNorm"(%93, %96, %97, %94, %95) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc98)
    %99 = "top.Weight"() : () -> tensor<1xf32> loc(#loc99)
    %100 = "top.Mul"(%98, %99) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc100)
    %101 = "top.Relu"(%100) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc101)
    %102 = "top.Weight"() : () -> tensor<1xf32> loc(#loc102)
    %103 = "top.Mul"(%101, %102) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc103)
    %104 = "top.Weight"() : () -> tensor<32x16x3x3xf32> loc(#loc104)
    %105 = "top.Weight"() : () -> tensor<32xf32> loc(#loc105)
    %106 = "top.Conv"(%103, %104, %105) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<32x16x3x3xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc106)
    %107 = "top.Weight"() : () -> tensor<32xf32> loc(#loc107)
    %108 = "top.Weight"() : () -> tensor<32xf32> loc(#loc108)
    %109 = "top.Weight"() : () -> tensor<32xf32> loc(#loc109)
    %110 = "top.Weight"() : () -> tensor<32xf32> loc(#loc110)
    %111 = "top.BatchNorm"(%106, %109, %110, %107, %108) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc111)
    %112 = "top.Weight"() : () -> tensor<1xf32> loc(#loc112)
    %113 = "top.Mul"(%111, %112) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc113)
    %114 = "top.Relu"(%113) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc114)
    %115 = "top.Weight"() : () -> tensor<1xf32> loc(#loc115)
    %116 = "top.Mul"(%114, %115) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc116)
    %117 = "top.Weight"() : () -> tensor<16x32x1x1xf32> loc(#loc117)
    %118 = "top.Weight"() : () -> tensor<16xf32> loc(#loc118)
    %119 = "top.Conv"(%116, %117, %118) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [1, 1], pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<16x32x1x1xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc119)
    %120 = "top.Weight"() : () -> tensor<16xf32> loc(#loc120)
    %121 = "top.Weight"() : () -> tensor<16xf32> loc(#loc121)
    %122 = "top.Weight"() : () -> tensor<16xf32> loc(#loc122)
    %123 = "top.Weight"() : () -> tensor<16xf32> loc(#loc123)
    %124 = "top.BatchNorm"(%119, %122, %123, %120, %121) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc124)
    %125 = "top.Weight"() : () -> tensor<1xf32> loc(#loc125)
    %126 = "top.Mul"(%124, %125) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc126)
    %127 = "top.Relu"(%126) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc127)
    %128 = "top.Weight"() : () -> tensor<1xf32> loc(#loc128)
    %129 = "top.Mul"(%127, %128) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc129)
    %130 = "top.Weight"() : () -> tensor<32x16x3x3xf32> loc(#loc130)
    %131 = "top.Weight"() : () -> tensor<32xf32> loc(#loc131)
    %132 = "top.Conv"(%129, %130, %131) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<32x16x3x3xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc132)
    %133 = "top.Weight"() : () -> tensor<32xf32> loc(#loc133)
    %134 = "top.Weight"() : () -> tensor<32xf32> loc(#loc134)
    %135 = "top.Weight"() : () -> tensor<32xf32> loc(#loc135)
    %136 = "top.Weight"() : () -> tensor<32xf32> loc(#loc136)
    %137 = "top.BatchNorm"(%132, %135, %136, %133, %134) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc137)
    %138 = "top.Weight"() : () -> tensor<1xf32> loc(#loc138)
    %139 = "top.Mul"(%137, %138) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc139)
    %140 = "top.Relu"(%139) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc140)
    %141 = "top.Weight"() : () -> tensor<1xf32> loc(#loc141)
    %142 = "top.Mul"(%140, %141) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc142)
    %143 = "top.Weight"() : () -> tensor<16x32x1x1xf32> loc(#loc143)
    %144 = "top.Weight"() : () -> tensor<16xf32> loc(#loc144)
    %145 = "top.Conv"(%142, %143, %144) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [1, 1], pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<16x32x1x1xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc145)
    %146 = "top.Weight"() : () -> tensor<16xf32> loc(#loc146)
    %147 = "top.Weight"() : () -> tensor<16xf32> loc(#loc147)
    %148 = "top.Weight"() : () -> tensor<16xf32> loc(#loc148)
    %149 = "top.Weight"() : () -> tensor<16xf32> loc(#loc149)
    %150 = "top.BatchNorm"(%145, %148, %149, %146, %147) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc150)
    %151 = "top.Weight"() : () -> tensor<1xf32> loc(#loc151)
    %152 = "top.Mul"(%150, %151) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc152)
    %153 = "top.Relu"(%152) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc153)
    %154 = "top.Weight"() : () -> tensor<1xf32> loc(#loc154)
    %155 = "top.Mul"(%153, %154) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc155)
    %156 = "top.Weight"() : () -> tensor<32x16x3x3xf32> loc(#loc156)
    %157 = "top.Weight"() : () -> tensor<32xf32> loc(#loc157)
    %158 = "top.Conv"(%155, %156, %157) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<32x16x3x3xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc158)
    %159 = "top.Weight"() : () -> tensor<32xf32> loc(#loc159)
    %160 = "top.Weight"() : () -> tensor<32xf32> loc(#loc160)
    %161 = "top.Weight"() : () -> tensor<32xf32> loc(#loc161)
    %162 = "top.Weight"() : () -> tensor<32xf32> loc(#loc162)
    %163 = "top.BatchNorm"(%158, %161, %162, %159, %160) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc163)
    %164 = "top.Weight"() : () -> tensor<1xf32> loc(#loc164)
    %165 = "top.Mul"(%163, %164) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc165)
    %166 = "top.Relu"(%165) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc166)
    %167 = "top.Weight"() : () -> tensor<1xf32> loc(#loc167)
    %168 = "top.Mul"(%166, %167) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc168)
    %169 = "top.Weight"() : () -> tensor<16x32x1x1xf32> loc(#loc169)
    %170 = "top.Weight"() : () -> tensor<16xf32> loc(#loc170)
    %171 = "top.Conv"(%168, %169, %170) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [1, 1], pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<16x32x1x1xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc171)
    %172 = "top.Weight"() : () -> tensor<16xf32> loc(#loc172)
    %173 = "top.Weight"() : () -> tensor<16xf32> loc(#loc173)
    %174 = "top.Weight"() : () -> tensor<16xf32> loc(#loc174)
    %175 = "top.Weight"() : () -> tensor<16xf32> loc(#loc175)
    %176 = "top.BatchNorm"(%171, %174, %175, %172, %173) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc176)
    %177 = "top.Weight"() : () -> tensor<1xf32> loc(#loc177)
    %178 = "top.Mul"(%176, %177) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc178)
    %179 = "top.Relu"(%178) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc179)
    %180 = "top.Weight"() : () -> tensor<1xf32> loc(#loc180)
    %181 = "top.Mul"(%179, %180) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc181)
    %182 = "top.Weight"() : () -> tensor<32x16x3x3xf32> loc(#loc182)
    %183 = "top.Weight"() : () -> tensor<32xf32> loc(#loc183)
    %184 = "top.Conv"(%181, %182, %183) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<32x16x3x3xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc184)
    %185 = "top.Weight"() : () -> tensor<32xf32> loc(#loc185)
    %186 = "top.Weight"() : () -> tensor<32xf32> loc(#loc186)
    %187 = "top.Weight"() : () -> tensor<32xf32> loc(#loc187)
    %188 = "top.Weight"() : () -> tensor<32xf32> loc(#loc188)
    %189 = "top.BatchNorm"(%184, %187, %188, %185, %186) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc189)
    %190 = "top.Weight"() : () -> tensor<1xf32> loc(#loc190)
    %191 = "top.Mul"(%189, %190) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc191)
    %192 = "top.Relu"(%191) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc192)
    %193 = "top.Weight"() : () -> tensor<1xf32> loc(#loc193)
    %194 = "top.Mul"(%192, %193) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc194)
    %195 = "top.Weight"() : () -> tensor<32x32x1x1xf32> loc(#loc195)
    %196 = "top.Weight"() : () -> tensor<32xf32> loc(#loc196)
    %197 = "top.Conv"(%194, %195, %196) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [1, 1], pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<32x32x1x1xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc197)
    %198 = "top.Weight"() : () -> tensor<32xf32> loc(#loc198)
    %199 = "top.Weight"() : () -> tensor<32xf32> loc(#loc199)
    %200 = "top.Weight"() : () -> tensor<32xf32> loc(#loc200)
    %201 = "top.Weight"() : () -> tensor<32xf32> loc(#loc201)
    %202 = "top.BatchNorm"(%197, %200, %201, %198, %199) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc202)
    %203 = "top.Weight"() : () -> tensor<1xf32> loc(#loc203)
    %204 = "top.Mul"(%202, %203) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc204)
    %205 = "top.Relu"(%204) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc205)
    %206 = "top.Weight"() : () -> tensor<1xf32> loc(#loc206)
    %207 = "top.Mul"(%205, %206) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc207)
    %208 = "top.Weight"() : () -> tensor<16x32x1x1xf32> loc(#loc208)
    %209 = "top.Weight"() : () -> tensor<16xf32> loc(#loc209)
    %210 = "top.Conv"(%207, %208, %209) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [1, 1], pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<16x32x1x1xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc210)
    %211 = "top.Weight"() : () -> tensor<16xf32> loc(#loc211)
    %212 = "top.Weight"() : () -> tensor<16xf32> loc(#loc212)
    %213 = "top.Weight"() : () -> tensor<16xf32> loc(#loc213)
    %214 = "top.Weight"() : () -> tensor<16xf32> loc(#loc214)
    %215 = "top.BatchNorm"(%210, %213, %214, %211, %212) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc215)
    %216 = "top.Weight"() : () -> tensor<1xf32> loc(#loc216)
    %217 = "top.Mul"(%215, %216) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc217)
    %218 = "top.Relu"(%217) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc218)
    %219 = "top.Weight"() : () -> tensor<1xf32> loc(#loc219)
    %220 = "top.Mul"(%218, %219) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc220)
    %221 = "top.Weight"() : () -> tensor<16x16x1x1xf32> loc(#loc221)
    %222 = "top.Weight"() : () -> tensor<16xf32> loc(#loc222)
    %223 = "top.Conv"(%220, %221, %222) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [1, 1], pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<16x16x1x1xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc223)
    %224 = "top.Weight"() : () -> tensor<16xf32> loc(#loc224)
    %225 = "top.Weight"() : () -> tensor<16xf32> loc(#loc225)
    %226 = "top.Weight"() : () -> tensor<16xf32> loc(#loc226)
    %227 = "top.Weight"() : () -> tensor<16xf32> loc(#loc227)
    %228 = "top.BatchNorm"(%223, %226, %227, %224, %225) {do_relu = false, epsilon = 9.9999997473787516E-6 : f64, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc228)
    %229 = "top.Weight"() : () -> tensor<1xf32> loc(#loc229)
    %230 = "top.Mul"(%228, %229) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc230)
    %231 = "top.Relu"(%230) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc231)
    %232 = "top.Weight"() : () -> tensor<1xf32> loc(#loc232)
    %233 = "top.Mul"(%231, %232) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc233)
    %234 = "top.Weight"() : () -> tensor<12x16x1x1xf32> loc(#loc234)
    %235 = "top.Weight"() : () -> tensor<12xf32> loc(#loc235)
    %236 = "top.Conv"(%233, %234, %235) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [1, 1], pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<12x16x1x1xf32>, tensor<12xf32>) -> tensor<*xf32> loc(#loc236)
    %237 = "top.Weight"() : () -> tensor<1xf32> loc(#loc237)
    %238 = "top.Mul"(%236, %237) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc238)
    %239 = "top.Permute"(%238) {order = [0, 2, 3, 1]} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc239)
    %240 = "top.Weight"() : () -> tensor<1xf32> loc(#loc240)
    %241 = "top.Weight"() : () -> tensor<1xf32> loc(#loc241)
    %242 = "top.Weight"() : () -> tensor<1xf32> loc(#loc242)
    %243 = "top.Weight"() : () -> tensor<1xf32> loc(#loc243)
    %244 = "top.Slice"(%239, %0, %0, %0) {axes = [3], ends = [10], hasparamConvert_axes = [], offset = [0], steps = [1]} : (tensor<*xf32>, none, none, none) -> tensor<*xf32> loc(#loc244)
    %245 = "top.Weight"() : () -> tensor<1xf32> loc(#loc245)
    %246 = "top.Weight"() : () -> tensor<1xf32> loc(#loc246)
    %247 = "top.Weight"() : () -> tensor<1xf32> loc(#loc247)
    %248 = "top.Weight"() : () -> tensor<1xf32> loc(#loc248)
    %249 = "top.Slice"(%239, %0, %0, %0) {axes = [3], ends = [2147482624], hasparamConvert_axes = [], offset = [10], steps = [1]} : (tensor<*xf32>, none, none, none) -> tensor<*xf32> loc(#loc249)
    return %244, %249, %238 : tensor<*xf32>, tensor<*xf32>, tensor<*xf32> loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("input")
#loc2 = loc("onnx::Conv_671")
#loc3 = loc("/Conv_96/Conv_output_0_Conv")
#loc4 = loc("/Conv_96/calc_out_scale/Exp_output_0")
#loc5 = loc("/Conv_96/scale/Mul_output_0_Mul")
#loc6 = loc("/Conv_96/activate/Relu_output_0_Relu")
#loc7 = loc("/Conv_96/Pow_output_0")
#loc8 = loc("/Conv_96/Mul_output_0_Mul")
#loc9 = loc("/Conv_48/pool/MaxPool_output_0_MaxPool")
#loc10 = loc("onnx::Conv_675")
#loc11 = loc("/Conv_48/Conv_output_0_Conv")
#loc12 = loc("/Conv_48/calc_out_scale/Exp_output_0")
#loc13 = loc("/Conv_48/scale/Mul_output_0_Mul")
#loc14 = loc("/Conv_48/activate/Relu_output_0_Relu")
#loc15 = loc("/Conv_48/Pow_output_0")
#loc16 = loc("/Conv_48/Mul_output_0_Mul")
#loc17 = loc("/Conv_24_1/pool/MaxPool_output_0_MaxPool")
#loc18 = loc("onnx::Conv_679")
#loc19 = loc("/Conv_24_1/Conv_output_0_Conv")
#loc20 = loc("/Conv_24_1/calc_out_scale/Exp_output_0")
#loc21 = loc("/Conv_24_1/scale/Mul_output_0_Mul")
#loc22 = loc("/Conv_24_1/activate/Relu_output_0_Relu")
#loc23 = loc("/Conv_24_1/Pow_output_0")
#loc24 = loc("/Conv_24_1/Mul_output_0_Mul")
#loc25 = loc("onnx::Conv_683")
#loc26 = loc("onnx::Conv_684")
#loc27 = loc("/Conv_24_2/Conv_output_0_Conv")
#loc28 = loc("/Conv_24_2/bn/Constant_output_0")
#loc29 = loc("/Conv_24_2/bn/Constant_1_output_0")
#loc30 = loc("Conv_24_2.bn.running_mean")
#loc31 = loc("Conv_24_2.bn.running_var")
#loc32 = loc("/Conv_24_2/bn/BatchNormalization_output_0_BatchNormalization")
#loc33 = loc("/Conv_24_2/calc_out_scale/Exp_output_0")
#loc34 = loc("/Conv_24_2/scale/Mul_output_0_Mul")
#loc35 = loc("/Conv_24_2/activate/Relu_output_0_Relu")
#loc36 = loc("/Conv_24_2/Pow_output_0")
#loc37 = loc("/Conv_24_2/Mul_output_0_Mul")
#loc38 = loc("onnx::Conv_688")
#loc39 = loc("onnx::Conv_689")
#loc40 = loc("/Conv_24_3/Conv_output_0_Conv")
#loc41 = loc("/Conv_24_3/bn/Constant_output_0")
#loc42 = loc("/Conv_24_3/bn/Constant_1_output_0")
#loc43 = loc("Conv_24_3.bn.running_mean")
#loc44 = loc("Conv_24_3.bn.running_var")
#loc45 = loc("/Conv_24_3/bn/BatchNormalization_output_0_BatchNormalization")
#loc46 = loc("/Conv_24_3/calc_out_scale/Exp_output_0")
#loc47 = loc("/Conv_24_3/scale/Mul_output_0_Mul")
#loc48 = loc("/Conv_24_3/activate/Relu_output_0_Relu")
#loc49 = loc("/Conv_24_3/Pow_output_0")
#loc50 = loc("/Conv_24_3/Mul_output_0_Mul")
#loc51 = loc("onnx::Conv_693")
#loc52 = loc("onnx::Conv_694")
#loc53 = loc("/Conv_24_4/Conv_output_0_Conv")
#loc54 = loc("/Conv_24_4/bn/Constant_output_0")
#loc55 = loc("/Conv_24_4/bn/Constant_1_output_0")
#loc56 = loc("Conv_24_4.bn.running_mean")
#loc57 = loc("Conv_24_4.bn.running_var")
#loc58 = loc("/Conv_24_4/bn/BatchNormalization_output_0_BatchNormalization")
#loc59 = loc("/Conv_24_4/calc_out_scale/Exp_output_0")
#loc60 = loc("/Conv_24_4/scale/Mul_output_0_Mul")
#loc61 = loc("/Conv_24_4/activate/Relu_output_0_Relu")
#loc62 = loc("/Conv_24_4/Pow_output_0")
#loc63 = loc("/Conv_24_4/Mul_output_0_Mul")
#loc64 = loc("onnx::Conv_698")
#loc65 = loc("onnx::Conv_699")
#loc66 = loc("/Conv_24_5/Conv_output_0_Conv")
#loc67 = loc("/Conv_24_5/bn/Constant_output_0")
#loc68 = loc("/Conv_24_5/bn/Constant_1_output_0")
#loc69 = loc("Conv_24_5.bn.running_mean")
#loc70 = loc("Conv_24_5.bn.running_var")
#loc71 = loc("/Conv_24_5/bn/BatchNormalization_output_0_BatchNormalization")
#loc72 = loc("/Conv_24_5/calc_out_scale/Exp_output_0")
#loc73 = loc("/Conv_24_5/scale/Mul_output_0_Mul")
#loc74 = loc("/Conv_24_5/activate/Relu_output_0_Relu")
#loc75 = loc("/Conv_24_5/Pow_output_0")
#loc76 = loc("/Conv_24_5/Mul_output_0_Mul")
#loc77 = loc("onnx::Conv_703")
#loc78 = loc("onnx::Conv_704")
#loc79 = loc("/Conv_24_6/Conv_output_0_Conv")
#loc80 = loc("/Conv_24_6/bn/Constant_output_0")
#loc81 = loc("/Conv_24_6/bn/Constant_1_output_0")
#loc82 = loc("Conv_24_6.bn.running_mean")
#loc83 = loc("Conv_24_6.bn.running_var")
#loc84 = loc("/Conv_24_6/bn/BatchNormalization_output_0_BatchNormalization")
#loc85 = loc("/Conv_24_6/calc_out_scale/Exp_output_0")
#loc86 = loc("/Conv_24_6/scale/Mul_output_0_Mul")
#loc87 = loc("/Conv_24_6/activate/Relu_output_0_Relu")
#loc88 = loc("/Conv_24_6/Pow_output_0")
#loc89 = loc("/Conv_24_6/Mul_output_0_Mul")
#loc90 = loc("/Conv_12_1/pool/MaxPool_output_0_MaxPool")
#loc91 = loc("onnx::Conv_708")
#loc92 = loc("onnx::Conv_709")
#loc93 = loc("/Conv_12_1/Conv_output_0_Conv")
#loc94 = loc("/Conv_12_1/bn/Constant_output_0")
#loc95 = loc("/Conv_12_1/bn/Constant_1_output_0")
#loc96 = loc("Conv_12_1.bn.running_mean")
#loc97 = loc("Conv_12_1.bn.running_var")
#loc98 = loc("/Conv_12_1/bn/BatchNormalization_output_0_BatchNormalization")
#loc99 = loc("/Conv_12_1/calc_out_scale/Exp_output_0")
#loc100 = loc("/Conv_12_1/scale/Mul_output_0_Mul")
#loc101 = loc("/Conv_12_1/activate/Relu_output_0_Relu")
#loc102 = loc("/Conv_12_1/Pow_output_0")
#loc103 = loc("/Conv_12_1/Mul_output_0_Mul")
#loc104 = loc("onnx::Conv_713")
#loc105 = loc("onnx::Conv_714")
#loc106 = loc("/Conv_12_2/Conv_output_0_Conv")
#loc107 = loc("/Conv_12_2/bn/Constant_output_0")
#loc108 = loc("/Conv_12_2/bn/Constant_1_output_0")
#loc109 = loc("Conv_12_2.bn.running_mean")
#loc110 = loc("Conv_12_2.bn.running_var")
#loc111 = loc("/Conv_12_2/bn/BatchNormalization_output_0_BatchNormalization")
#loc112 = loc("/Conv_12_2/calc_out_scale/Exp_output_0")
#loc113 = loc("/Conv_12_2/scale/Mul_output_0_Mul")
#loc114 = loc("/Conv_12_2/activate/Relu_output_0_Relu")
#loc115 = loc("/Conv_12_2/Pow_output_0")
#loc116 = loc("/Conv_12_2/Mul_output_0_Mul")
#loc117 = loc("onnx::Conv_718")
#loc118 = loc("onnx::Conv_719")
#loc119 = loc("/Conv_12_3/Conv_output_0_Conv")
#loc120 = loc("/Conv_12_3/bn/Constant_output_0")
#loc121 = loc("/Conv_12_3/bn/Constant_1_output_0")
#loc122 = loc("Conv_12_3.bn.running_mean")
#loc123 = loc("Conv_12_3.bn.running_var")
#loc124 = loc("/Conv_12_3/bn/BatchNormalization_output_0_BatchNormalization")
#loc125 = loc("/Conv_12_3/calc_out_scale/Exp_output_0")
#loc126 = loc("/Conv_12_3/scale/Mul_output_0_Mul")
#loc127 = loc("/Conv_12_3/activate/Relu_output_0_Relu")
#loc128 = loc("/Conv_12_3/Pow_output_0")
#loc129 = loc("/Conv_12_3/Mul_output_0_Mul")
#loc130 = loc("onnx::Conv_723")
#loc131 = loc("onnx::Conv_724")
#loc132 = loc("/Conv_12_4/Conv_output_0_Conv")
#loc133 = loc("/Conv_12_4/bn/Constant_output_0")
#loc134 = loc("/Conv_12_4/bn/Constant_1_output_0")
#loc135 = loc("Conv_12_4.bn.running_mean")
#loc136 = loc("Conv_12_4.bn.running_var")
#loc137 = loc("/Conv_12_4/bn/BatchNormalization_output_0_BatchNormalization")
#loc138 = loc("/Conv_12_4/calc_out_scale/Exp_output_0")
#loc139 = loc("/Conv_12_4/scale/Mul_output_0_Mul")
#loc140 = loc("/Conv_12_4/activate/Relu_output_0_Relu")
#loc141 = loc("/Conv_12_4/Pow_output_0")
#loc142 = loc("/Conv_12_4/Mul_output_0_Mul")
#loc143 = loc("onnx::Conv_728")
#loc144 = loc("onnx::Conv_729")
#loc145 = loc("/Conv_12_5/Conv_output_0_Conv")
#loc146 = loc("/Conv_12_5/bn/Constant_output_0")
#loc147 = loc("/Conv_12_5/bn/Constant_1_output_0")
#loc148 = loc("Conv_12_5.bn.running_mean")
#loc149 = loc("Conv_12_5.bn.running_var")
#loc150 = loc("/Conv_12_5/bn/BatchNormalization_output_0_BatchNormalization")
#loc151 = loc("/Conv_12_5/calc_out_scale/Exp_output_0")
#loc152 = loc("/Conv_12_5/scale/Mul_output_0_Mul")
#loc153 = loc("/Conv_12_5/activate/Relu_output_0_Relu")
#loc154 = loc("/Conv_12_5/Pow_output_0")
#loc155 = loc("/Conv_12_5/Mul_output_0_Mul")
#loc156 = loc("onnx::Conv_733")
#loc157 = loc("onnx::Conv_734")
#loc158 = loc("/Conv_12_6/Conv_output_0_Conv")
#loc159 = loc("/Conv_12_6/bn/Constant_output_0")
#loc160 = loc("/Conv_12_6/bn/Constant_1_output_0")
#loc161 = loc("Conv_12_6.bn.running_mean")
#loc162 = loc("Conv_12_6.bn.running_var")
#loc163 = loc("/Conv_12_6/bn/BatchNormalization_output_0_BatchNormalization")
#loc164 = loc("/Conv_12_6/calc_out_scale/Exp_output_0")
#loc165 = loc("/Conv_12_6/scale/Mul_output_0_Mul")
#loc166 = loc("/Conv_12_6/activate/Relu_output_0_Relu")
#loc167 = loc("/Conv_12_6/Pow_output_0")
#loc168 = loc("/Conv_12_6/Mul_output_0_Mul")
#loc169 = loc("onnx::Conv_738")
#loc170 = loc("onnx::Conv_739")
#loc171 = loc("/Conv_7_1/Conv_output_0_Conv")
#loc172 = loc("/Conv_7_1/bn/Constant_output_0")
#loc173 = loc("/Conv_7_1/bn/Constant_1_output_0")
#loc174 = loc("Conv_7_1.bn.running_mean")
#loc175 = loc("Conv_7_1.bn.running_var")
#loc176 = loc("/Conv_7_1/bn/BatchNormalization_output_0_BatchNormalization")
#loc177 = loc("/Conv_7_1/calc_out_scale/Exp_output_0")
#loc178 = loc("/Conv_7_1/scale/Mul_output_0_Mul")
#loc179 = loc("/Conv_7_1/activate/Relu_output_0_Relu")
#loc180 = loc("/Conv_7_1/Pow_output_0")
#loc181 = loc("/Conv_7_1/Mul_output_0_Mul")
#loc182 = loc("onnx::Conv_743")
#loc183 = loc("onnx::Conv_744")
#loc184 = loc("/Conv_7_2/Conv_output_0_Conv")
#loc185 = loc("/Conv_7_2/bn/Constant_output_0")
#loc186 = loc("/Conv_7_2/bn/Constant_1_output_0")
#loc187 = loc("Conv_7_2.bn.running_mean")
#loc188 = loc("Conv_7_2.bn.running_var")
#loc189 = loc("/Conv_7_2/bn/BatchNormalization_output_0_BatchNormalization")
#loc190 = loc("/Conv_7_2/calc_out_scale/Exp_output_0")
#loc191 = loc("/Conv_7_2/scale/Mul_output_0_Mul")
#loc192 = loc("/Conv_7_2/activate/Relu_output_0_Relu")
#loc193 = loc("/Conv_7_2/Pow_output_0")
#loc194 = loc("/Conv_7_2/Mul_output_0_Mul")
#loc195 = loc("onnx::Conv_748")
#loc196 = loc("onnx::Conv_749")
#loc197 = loc("/Conv_Res_1/Conv_output_0_Conv")
#loc198 = loc("/Conv_Res_1/bn/Constant_output_0")
#loc199 = loc("/Conv_Res_1/bn/Constant_1_output_0")
#loc200 = loc("Conv_Res_1.bn.running_mean")
#loc201 = loc("Conv_Res_1.bn.running_var")
#loc202 = loc("/Conv_Res_1/bn/BatchNormalization_output_0_BatchNormalization")
#loc203 = loc("/Conv_Res_1/calc_out_scale/Exp_output_0")
#loc204 = loc("/Conv_Res_1/scale/Mul_output_0_Mul")
#loc205 = loc("/Conv_Res_1/activate/Relu_output_0_Relu")
#loc206 = loc("/Conv_Res_1/Pow_output_0")
#loc207 = loc("/Conv_Res_1/Mul_output_0_Mul")
#loc208 = loc("onnx::Conv_753")
#loc209 = loc("onnx::Conv_754")
#loc210 = loc("/Conv_Res_2/Conv_output_0_Conv")
#loc211 = loc("/Conv_Res_2/bn/Constant_output_0")
#loc212 = loc("/Conv_Res_2/bn/Constant_1_output_0")
#loc213 = loc("Conv_Res_2.bn.running_mean")
#loc214 = loc("Conv_Res_2.bn.running_var")
#loc215 = loc("/Conv_Res_2/bn/BatchNormalization_output_0_BatchNormalization")
#loc216 = loc("/Conv_Res_2/calc_out_scale/Exp_output_0")
#loc217 = loc("/Conv_Res_2/scale/Mul_output_0_Mul")
#loc218 = loc("/Conv_Res_2/activate/Relu_output_0_Relu")
#loc219 = loc("/Conv_Res_2/Pow_output_0")
#loc220 = loc("/Conv_Res_2/Mul_output_0_Mul")
#loc221 = loc("onnx::Conv_758")
#loc222 = loc("onnx::Conv_759")
#loc223 = loc("/Conv_Res_3/Conv_output_0_Conv")
#loc224 = loc("/Conv_Res_3/bn/Constant_output_0")
#loc225 = loc("/Conv_Res_3/bn/Constant_1_output_0")
#loc226 = loc("Conv_Res_3.bn.running_mean")
#loc227 = loc("Conv_Res_3.bn.running_var")
#loc228 = loc("/Conv_Res_3/bn/BatchNormalization_output_0_BatchNormalization")
#loc229 = loc("/Conv_Res_3/calc_out_scale/Exp_output_0")
#loc230 = loc("/Conv_Res_3/scale/Mul_output_0_Mul")
#loc231 = loc("/Conv_Res_3/activate/Relu_output_0_Relu")
#loc232 = loc("/Conv_Res_3/Pow_output_0")
#loc233 = loc("/Conv_Res_3/Mul_output_0_Mul")
#loc234 = loc("onnx::Conv_760")
#loc235 = loc("onnx::Conv_761")
#loc236 = loc("/Conv_Res_4/Conv_output_0_Conv")
#loc237 = loc("/Conv_Res_4/Pow_output_0")
#loc238 = loc("onnx::Transpose_644_Mul")
#loc239 = loc("/Transpose_output_0_Transpose")
#loc240 = loc("/Constant_1_output_0")
#loc241 = loc("/Constant_2_output_0")
#loc242 = loc("/Constant_output_0")
#loc243 = loc("/Constant_3_output_0")
#loc244 = loc("output_Slice")
#loc245 = loc("/Constant_5_output_0")
#loc246 = loc("/Constant_6_output_0")
#loc247 = loc("/Constant_4_output_0")
#loc248 = loc("/Constant_7_output_0")
#loc249 = loc("667_Slice")
