#loc = loc(unknown)
module @resnet attributes {module.chip = "ALL", module.platform = "ONNX", module.state = "TOP_F32", module.top_run_mode = "STATIC", module.weight_file = "resnet_top_f32_all_origin_weight.npz"} {
  func.func @main(%arg0: tensor<1x3x32x32xf32> loc(unknown)) -> tensor<*xf32> {
    %0 = "top.None"() : () -> none loc(#loc)
    %1 = "top.Input"(%arg0) {channel_format = "nchw", do_preprocess = true, keep_aspect_ratio = false, keep_ratio_mode = "letterbox", mean = [0.000000e+00, 0.000000e+00, 0.000000e+00], pad_type = "center", pad_value = 0 : i64, pixel_format = "bgr", scale = [1.000000e+00, 1.000000e+00, 1.000000e+00]} : (tensor<1x3x32x32xf32>) -> tensor<1x3x32x32xf32> loc(#loc1)
    %2 = "top.Weight"() : () -> tensor<16x3x3x3xf32> loc(#loc2)
    %3 = "top.Weight"() : () -> tensor<16xf32> loc(#loc3)
    %4 = "top.Conv"(%1, %2, %3) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<1x3x32x32xf32>, tensor<16x3x3x3xf32>, tensor<16xf32>) -> tensor<*xf32> loc(#loc4)
    %5 = "top.Weight"() : () -> tensor<1xf32> loc(#loc5)
    %6 = "top.Mul"(%4, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc6)
    %7 = "top.Relu"(%6) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc7)
    %8 = "top.Weight"() : () -> tensor<1xf32> loc(#loc8)
    %9 = "top.Mul"(%7, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc9)
    %10 = "top.Weight"() : () -> tensor<20x16x3x3xf32> loc(#loc10)
    %11 = "top.Weight"() : () -> tensor<20xf32> loc(#loc11)
    %12 = "top.Conv"(%9, %10, %11) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<20x16x3x3xf32>, tensor<20xf32>) -> tensor<*xf32> loc(#loc12)
    %13 = "top.Mul"(%12, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc13)
    %14 = "top.Relu"(%13) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc14)
    %15 = "top.Mul"(%14, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc15)
    %16 = "top.Weight"() : () -> tensor<20x20x3x3xf32> loc(#loc16)
    %17 = "top.Weight"() : () -> tensor<20xf32> loc(#loc17)
    %18 = "top.Conv"(%15, %16, %17) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<20x20x3x3xf32>, tensor<20xf32>) -> tensor<*xf32> loc(#loc18)
    %19 = "top.Mul"(%18, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc19)
    %20 = "top.Relu"(%19) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc20)
    %21 = "top.Mul"(%20, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc21)
    %22 = "top.Add"(%21, %15) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<*xf32>) -> tensor<*xf32> loc(#loc22)
    %23 = "top.Weight"() : () -> tensor<20x20x3x3xf32> loc(#loc23)
    %24 = "top.Weight"() : () -> tensor<20xf32> loc(#loc24)
    %25 = "top.Conv"(%22, %23, %24) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<20x20x3x3xf32>, tensor<20xf32>) -> tensor<*xf32> loc(#loc25)
    %26 = "top.Mul"(%25, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc26)
    %27 = "top.Relu"(%26) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc27)
    %28 = "top.Mul"(%27, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc28)
    %29 = "top.MaxPool"(%28) {auto_pad = "NOTSET", ceil_mode = false, count_include_pad = false, do_relu = false, first_round_mode = "HalfAwayFromZero", is_adaptive = false, keepdims = true, kernel_shape = [2, 2], pad_value = 0 : i64, pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, round_mode = "HalfAwayFromZero", strides = [2, 2]} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc29)
    %30 = "top.Weight"() : () -> tensor<20x20x3x3xf32> loc(#loc30)
    %31 = "top.Weight"() : () -> tensor<20xf32> loc(#loc31)
    %32 = "top.Conv"(%29, %30, %31) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<20x20x3x3xf32>, tensor<20xf32>) -> tensor<*xf32> loc(#loc32)
    %33 = "top.Mul"(%32, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc33)
    %34 = "top.Relu"(%33) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc34)
    %35 = "top.Mul"(%34, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc35)
    %36 = "top.Weight"() : () -> tensor<20x20x3x3xf32> loc(#loc36)
    %37 = "top.Weight"() : () -> tensor<20xf32> loc(#loc37)
    %38 = "top.Conv"(%35, %36, %37) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<20x20x3x3xf32>, tensor<20xf32>) -> tensor<*xf32> loc(#loc38)
    %39 = "top.Mul"(%38, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc39)
    %40 = "top.Relu"(%39) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc40)
    %41 = "top.Mul"(%40, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc41)
    %42 = "top.Add"(%41, %35) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<*xf32>) -> tensor<*xf32> loc(#loc42)
    %43 = "top.Weight"() : () -> tensor<44x20x3x3xf32> loc(#loc43)
    %44 = "top.Weight"() : () -> tensor<44xf32> loc(#loc44)
    %45 = "top.Conv"(%42, %43, %44) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<44x20x3x3xf32>, tensor<44xf32>) -> tensor<*xf32> loc(#loc45)
    %46 = "top.Mul"(%45, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc46)
    %47 = "top.Relu"(%46) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc47)
    %48 = "top.Mul"(%47, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc48)
    %49 = "top.MaxPool"(%48) {auto_pad = "NOTSET", ceil_mode = false, count_include_pad = false, do_relu = false, first_round_mode = "HalfAwayFromZero", is_adaptive = false, keepdims = true, kernel_shape = [2, 2], pad_value = 0 : i64, pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, round_mode = "HalfAwayFromZero", strides = [2, 2]} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc49)
    %50 = "top.Weight"() : () -> tensor<48x44x3x3xf32> loc(#loc50)
    %51 = "top.Weight"() : () -> tensor<48xf32> loc(#loc51)
    %52 = "top.Conv"(%49, %50, %51) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<48x44x3x3xf32>, tensor<48xf32>) -> tensor<*xf32> loc(#loc52)
    %53 = "top.Mul"(%52, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc53)
    %54 = "top.Relu"(%53) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc54)
    %55 = "top.Mul"(%54, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc55)
    %56 = "top.Weight"() : () -> tensor<48x48x3x3xf32> loc(#loc56)
    %57 = "top.Weight"() : () -> tensor<48xf32> loc(#loc57)
    %58 = "top.Conv"(%55, %56, %57) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<48x48x3x3xf32>, tensor<48xf32>) -> tensor<*xf32> loc(#loc58)
    %59 = "top.Mul"(%58, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc59)
    %60 = "top.Relu"(%59) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc60)
    %61 = "top.Mul"(%60, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc61)
    %62 = "top.Add"(%61, %55) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<*xf32>) -> tensor<*xf32> loc(#loc62)
    %63 = "top.MaxPool"(%62) {auto_pad = "NOTSET", ceil_mode = false, count_include_pad = false, do_relu = false, first_round_mode = "HalfAwayFromZero", is_adaptive = false, keepdims = true, kernel_shape = [2, 2], pad_value = 0 : i64, pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, round_mode = "HalfAwayFromZero", strides = [2, 2]} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc63)
    %64 = "top.Weight"() : () -> tensor<96x48x3x3xf32> loc(#loc64)
    %65 = "top.Weight"() : () -> tensor<96xf32> loc(#loc65)
    %66 = "top.Conv"(%63, %64, %65) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<96x48x3x3xf32>, tensor<96xf32>) -> tensor<*xf32> loc(#loc66)
    %67 = "top.Mul"(%66, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc67)
    %68 = "top.Relu"(%67) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc68)
    %69 = "top.Mul"(%68, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc69)
    %70 = "top.MaxPool"(%69) {auto_pad = "NOTSET", ceil_mode = false, count_include_pad = false, do_relu = false, first_round_mode = "HalfAwayFromZero", is_adaptive = false, keepdims = true, kernel_shape = [2, 2], pad_value = 0 : i64, pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, round_mode = "HalfAwayFromZero", strides = [2, 2]} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc70)
    %71 = "top.Weight"() : () -> tensor<512x96x1x1xf32> loc(#loc71)
    %72 = "top.Weight"() : () -> tensor<512xf32> loc(#loc72)
    %73 = "top.Conv"(%70, %71, %72) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [1, 1], pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<512x96x1x1xf32>, tensor<512xf32>) -> tensor<*xf32> loc(#loc73)
    %74 = "top.Mul"(%73, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc74)
    %75 = "top.Relu"(%74) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc75)
    %76 = "top.Mul"(%75, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc76)
    %77 = "top.Weight"() : () -> tensor<128x512x1x1xf32> loc(#loc77)
    %78 = "top.Weight"() : () -> tensor<128xf32> loc(#loc78)
    %79 = "top.Conv"(%76, %77, %78) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [1, 1], pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<128x512x1x1xf32>, tensor<128xf32>) -> tensor<*xf32> loc(#loc79)
    %80 = "top.Mul"(%79, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc80)
    %81 = "top.Relu"(%80) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc81)
    %82 = "top.Mul"(%81, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc82)
    %83 = "top.MaxPool"(%82) {auto_pad = "NOTSET", ceil_mode = false, count_include_pad = false, do_relu = false, first_round_mode = "HalfAwayFromZero", is_adaptive = false, keepdims = true, kernel_shape = [2, 2], pad_value = 0 : i64, pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, round_mode = "HalfAwayFromZero", strides = [2, 2]} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc83)
    %84 = "top.Weight"() : () -> tensor<128x128x3x3xf32> loc(#loc84)
    %85 = "top.Weight"() : () -> tensor<128xf32> loc(#loc85)
    %86 = "top.Conv"(%83, %84, %85) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<128x128x3x3xf32>, tensor<128xf32>) -> tensor<*xf32> loc(#loc86)
    %87 = "top.Mul"(%86, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc87)
    %88 = "top.Relu"(%87) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc88)
    %89 = "top.Mul"(%88, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc89)
    %90 = "top.Weight"() : () -> tensor<100x128x1x1xf32> loc(#loc90)
    %91 = "top.Weight"() : () -> tensor<100xf32> loc(#loc91)
    %92 = "top.Conv"(%89, %90, %91) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [1, 1], pads = [0, 0, 0, 0], relu_limit = -1.000000e+00 : f64, strides = [1, 1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<100x128x1x1xf32>, tensor<100xf32>) -> tensor<*xf32> loc(#loc92)
    %93 = "top.Mul"(%92, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc93)
    %94 = "top.Reshape"(%93) {flatten_start_dim = -1 : i64, shape = [1, -1]} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc94)
    return %94 : tensor<*xf32> loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("input")
#loc2 = loc("onnx::Conv_408")
#loc3 = loc("onnx::Conv_409")
#loc4 = loc("/conv1/Conv_output_0_Conv")
#loc5 = loc("/conv1/calc_out_scale/Exp_output_0")
#loc6 = loc("/conv1/scale/Mul_output_0_Mul")
#loc7 = loc("/conv1/activate/Relu_output_0_Relu")
#loc8 = loc("/conv1/Pow_output_0")
#loc9 = loc("/conv1/Mul_output_0_Mul")
#loc10 = loc("onnx::Conv_413")
#loc11 = loc("onnx::Conv_414")
#loc12 = loc("/conv2/Conv_output_0_Conv")
#loc13 = loc("/conv2/scale/Mul_output_0_Mul")
#loc14 = loc("/conv2/activate/Relu_output_0_Relu")
#loc15 = loc("/conv2/Mul_output_0_Mul")
#loc16 = loc("onnx::Conv_418")
#loc17 = loc("onnx::Conv_419")
#loc18 = loc("/conv3/Conv_output_0_Conv")
#loc19 = loc("/conv3/scale/Mul_output_0_Mul")
#loc20 = loc("/conv3/activate/Relu_output_0_Relu")
#loc21 = loc("/conv3/Mul_output_0_Mul")
#loc22 = loc("/resid1/Add_output_0_Add")
#loc23 = loc("onnx::Conv_423")
#loc24 = loc("onnx::Conv_424")
#loc25 = loc("/conv4/Conv_output_0_Conv")
#loc26 = loc("/conv4/scale/Mul_output_0_Mul")
#loc27 = loc("/conv4/activate/Relu_output_0_Relu")
#loc28 = loc("/conv4/Mul_output_0_Mul")
#loc29 = loc("/conv5/pool/MaxPool_output_0_MaxPool")
#loc30 = loc("onnx::Conv_428")
#loc31 = loc("onnx::Conv_429")
#loc32 = loc("/conv5/Conv_output_0_Conv")
#loc33 = loc("/conv5/scale/Mul_output_0_Mul")
#loc34 = loc("/conv5/activate/Relu_output_0_Relu")
#loc35 = loc("/conv5/Mul_output_0_Mul")
#loc36 = loc("onnx::Conv_433")
#loc37 = loc("onnx::Conv_434")
#loc38 = loc("/conv6/Conv_output_0_Conv")
#loc39 = loc("/conv6/scale/Mul_output_0_Mul")
#loc40 = loc("/conv6/activate/Relu_output_0_Relu")
#loc41 = loc("/conv6/Mul_output_0_Mul")
#loc42 = loc("/resid2/Add_output_0_Add")
#loc43 = loc("onnx::Conv_438")
#loc44 = loc("onnx::Conv_439")
#loc45 = loc("/conv7/Conv_output_0_Conv")
#loc46 = loc("/conv7/scale/Mul_output_0_Mul")
#loc47 = loc("/conv7/activate/Relu_output_0_Relu")
#loc48 = loc("/conv7/Mul_output_0_Mul")
#loc49 = loc("/conv8/pool/MaxPool_output_0_MaxPool")
#loc50 = loc("onnx::Conv_443")
#loc51 = loc("onnx::Conv_444")
#loc52 = loc("/conv8/Conv_output_0_Conv")
#loc53 = loc("/conv8/scale/Mul_output_0_Mul")
#loc54 = loc("/conv8/activate/Relu_output_0_Relu")
#loc55 = loc("/conv8/Mul_output_0_Mul")
#loc56 = loc("onnx::Conv_448")
#loc57 = loc("onnx::Conv_449")
#loc58 = loc("/conv9/Conv_output_0_Conv")
#loc59 = loc("/conv9/scale/Mul_output_0_Mul")
#loc60 = loc("/conv9/activate/Relu_output_0_Relu")
#loc61 = loc("/conv9/Mul_output_0_Mul")
#loc62 = loc("/resid3/Add_output_0_Add")
#loc63 = loc("/conv10/pool/MaxPool_output_0_MaxPool")
#loc64 = loc("onnx::Conv_453")
#loc65 = loc("onnx::Conv_454")
#loc66 = loc("/conv10/Conv_output_0_Conv")
#loc67 = loc("/conv10/scale/Mul_output_0_Mul")
#loc68 = loc("/conv10/activate/Relu_output_0_Relu")
#loc69 = loc("/conv10/Mul_output_0_Mul")
#loc70 = loc("/conv11/pool/MaxPool_output_0_MaxPool")
#loc71 = loc("onnx::Conv_458")
#loc72 = loc("onnx::Conv_459")
#loc73 = loc("/conv11/Conv_output_0_Conv")
#loc74 = loc("/conv11/scale/Mul_output_0_Mul")
#loc75 = loc("/conv11/activate/Relu_output_0_Relu")
#loc76 = loc("/conv11/Mul_output_0_Mul")
#loc77 = loc("onnx::Conv_463")
#loc78 = loc("onnx::Conv_464")
#loc79 = loc("/conv12/Conv_output_0_Conv")
#loc80 = loc("/conv12/scale/Mul_output_0_Mul")
#loc81 = loc("/conv12/activate/Relu_output_0_Relu")
#loc82 = loc("/conv12/Mul_output_0_Mul")
#loc83 = loc("/conv13/pool/MaxPool_output_0_MaxPool")
#loc84 = loc("onnx::Conv_468")
#loc85 = loc("onnx::Conv_469")
#loc86 = loc("/conv13/Conv_output_0_Conv")
#loc87 = loc("/conv13/scale/Mul_output_0_Mul")
#loc88 = loc("/conv13/activate/Relu_output_0_Relu")
#loc89 = loc("/conv13/Mul_output_0_Mul")
#loc90 = loc("onnx::Conv_470")
#loc91 = loc("onnx::Conv_471")
#loc92 = loc("/conv14/Conv_output_0_Conv")
#loc93 = loc("/conv14/Mul_output_0_Mul")
#loc94 = loc("output_Reshape")
