#loc = loc(unknown)
module @autoenc attributes {module.chip = "ALL", module.platform = "ONNX", module.state = "TOP_F32", module.top_run_mode = "STATIC", module.weight_file = "autoenc_top_f32_all_origin_weight.npz"} {
  func.func @main(%arg0: tensor<1x256x3xf32> loc(unknown)) -> tensor<*xf32> {
    %0 = "top.None"() : () -> none loc(#loc)
    %1 = "top.Input"(%arg0) {channel_format = "nchw", do_preprocess = true, keep_aspect_ratio = false, keep_ratio_mode = "letterbox", mean = [0.000000e+00, 0.000000e+00, 0.000000e+00], pad_type = "center", pad_value = 0 : i64, pixel_format = "bgr", scale = [1.000000e+00, 1.000000e+00, 1.000000e+00]} : (tensor<1x256x3xf32>) -> tensor<1x256x3xf32> loc(#loc1)
    %2 = "top.Weight"() : () -> tensor<128x256x1xf32> loc(#loc2)
    %3 = "top.Weight"() : () -> tensor<128xf32> loc(#loc3)
    %4 = "top.Conv"(%1, %2, %3) {auto_pad = "NOTSET", dilations = [1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [1], pads = [0, 0], relu_limit = -1.000000e+00 : f64, strides = [1], weight_is_coeff = 1 : i64} : (tensor<1x256x3xf32>, tensor<128x256x1xf32>, tensor<128xf32>) -> tensor<*xf32> loc(#loc4)
    %5 = "top.Weight"() : () -> tensor<1xf32> loc(#loc5)
    %6 = "top.Mul"(%4, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc6)
    %7 = "top.Relu"(%6) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc7)
    %8 = "top.Weight"() : () -> tensor<1xf32> loc(#loc8)
    %9 = "top.Mul"(%7, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc9)
    %10 = "top.Weight"() : () -> tensor<64x128x3xf32> loc(#loc10)
    %11 = "top.Weight"() : () -> tensor<64xf32> loc(#loc11)
    %12 = "top.Conv"(%9, %10, %11) {auto_pad = "NOTSET", dilations = [1], do_relu = false, dynweight_reorderd = false, group = 1 : i64, kernel_shape = [3], pads = [0, 0], relu_limit = -1.000000e+00 : f64, strides = [1], weight_is_coeff = 1 : i64} : (tensor<*xf32>, tensor<64x128x3xf32>, tensor<64xf32>) -> tensor<*xf32> loc(#loc12)
    %13 = "top.Mul"(%12, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc13)
    %14 = "top.Relu"(%13) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc14)
    %15 = "top.Mul"(%14, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc15)
    %16 = "top.Reshape"(%15) {flatten_start_dim = -1 : i64, shape = [1, 64]} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc16)
    %17 = "top.Weight"() : () -> tensor<64x32xf32> loc(#loc17)
    %18 = "top.Weight"() : () -> tensor<32xf32> loc(#loc18)
    %19 = "top.MatMul"(%16, %17, %18) {do_relu = false, hdim_is_batch = false, keep_dims = true, left_transpose = false, output_transpose = false, relu_limit = -1.000000e+00 : f64, right_transpose = false} : (tensor<*xf32>, tensor<64x32xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc19)
    %20 = "top.Mul"(%19, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc20)
    %21 = "top.Relu"(%20) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc21)
    %22 = "top.Mul"(%21, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc22)
    %23 = "top.Weight"() : () -> tensor<32x4xf32> loc(#loc23)
    %24 = "top.MatMul"(%22, %23, %0) {do_relu = false, hdim_is_batch = false, keep_dims = true, left_transpose = false, output_transpose = false, relu_limit = -1.000000e+00 : f64, right_transpose = false} : (tensor<*xf32>, tensor<32x4xf32>, none) -> tensor<*xf32> loc(#loc24)
    %25 = "top.Mul"(%24, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc25)
    %26 = "top.Mul"(%25, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc26)
    %27 = "top.Weight"() : () -> tensor<4x32xf32> loc(#loc27)
    %28 = "top.Weight"() : () -> tensor<32xf32> loc(#loc28)
    %29 = "top.MatMul"(%26, %27, %28) {do_relu = false, hdim_is_batch = false, keep_dims = true, left_transpose = false, output_transpose = false, relu_limit = -1.000000e+00 : f64, right_transpose = false} : (tensor<*xf32>, tensor<4x32xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc29)
    %30 = "top.Mul"(%29, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc30)
    %31 = "top.Relu"(%30) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc31)
    %32 = "top.Mul"(%31, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc32)
    %33 = "top.Weight"() : () -> tensor<32x96xf32> loc(#loc33)
    %34 = "top.Weight"() : () -> tensor<96xf32> loc(#loc34)
    %35 = "top.MatMul"(%32, %33, %34) {do_relu = false, hdim_is_batch = false, keep_dims = true, left_transpose = false, output_transpose = false, relu_limit = -1.000000e+00 : f64, right_transpose = false} : (tensor<*xf32>, tensor<32x96xf32>, tensor<96xf32>) -> tensor<*xf32> loc(#loc35)
    %36 = "top.Mul"(%35, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc36)
    %37 = "top.Relu"(%36) {relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc37)
    %38 = "top.Mul"(%37, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc38)
    %39 = "top.Weight"() : () -> tensor<96x768xf32> loc(#loc39)
    %40 = "top.MatMul"(%38, %39, %0) {do_relu = false, hdim_is_batch = false, keep_dims = true, left_transpose = false, output_transpose = false, relu_limit = -1.000000e+00 : f64, right_transpose = false} : (tensor<*xf32>, tensor<96x768xf32>, none) -> tensor<*xf32> loc(#loc40)
    %41 = "top.Mul"(%40, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc41)
    %42 = "top.Mul"(%41, %8) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<*xf32>, tensor<1xf32>) -> tensor<*xf32> loc(#loc42)
    %43 = "top.Reshape"(%42) {flatten_start_dim = -1 : i64, shape = [1, 256, 3]} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc43)
    return %43 : tensor<*xf32> loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("input")
#loc2 = loc("103")
#loc3 = loc("105")
#loc4 = loc("/en_conv1/Conv_output_0_Conv")
#loc5 = loc("/en_conv1/calc_out_scale/Exp_output_0")
#loc6 = loc("/en_conv1/scale/Mul_output_0_Mul")
#loc7 = loc("/en_conv1/activate/Relu_output_0_Relu")
#loc8 = loc("/en_conv1/Pow_output_0")
#loc9 = loc("/en_conv1/Mul_output_0_Mul")
#loc10 = loc("107")
#loc11 = loc("109")
#loc12 = loc("/en_conv2/Conv_output_0_Conv")
#loc13 = loc("/en_conv2/scale/Mul_output_0_Mul")
#loc14 = loc("/en_conv2/activate/Relu_output_0_Relu")
#loc15 = loc("/en_conv2/Mul_output_0_Mul")
#loc16 = loc("/Reshape_output_0_Reshape")
#loc17 = loc("onnx::Gemm_240_fix")
#loc18 = loc("onnx::Gemm_241")
#loc19 = loc("/en_lin1/Gemm_output_0_Gemm")
#loc20 = loc("/en_lin1/scale/Mul_output_0_Mul")
#loc21 = loc("/en_lin1/activate/Relu_output_0_Relu")
#loc22 = loc("/en_lin1/Mul_output_0_Mul")
#loc23 = loc("onnx::MatMul_246")
#loc24 = loc("/en_lin2/MatMul_output_0_MatMul")
#loc25 = loc("/en_lin2/scale/Mul_output_0_Mul")
#loc26 = loc("/en_lin2/Mul_output_0_Mul")
#loc27 = loc("onnx::Gemm_250_fix")
#loc28 = loc("onnx::Gemm_251")
#loc29 = loc("/de_lin1/Gemm_output_0_Gemm")
#loc30 = loc("/de_lin1/scale/Mul_output_0_Mul")
#loc31 = loc("/de_lin1/activate/Relu_output_0_Relu")
#loc32 = loc("/de_lin1/Mul_output_0_Mul")
#loc33 = loc("onnx::Gemm_255_fix")
#loc34 = loc("onnx::Gemm_256")
#loc35 = loc("/de_lin2/Gemm_output_0_Gemm")
#loc36 = loc("/de_lin2/scale/Mul_output_0_Mul")
#loc37 = loc("/de_lin2/activate/Relu_output_0_Relu")
#loc38 = loc("/de_lin2/Mul_output_0_Mul")
#loc39 = loc("onnx::MatMul_261")
#loc40 = loc("/out_lin/MatMul_output_0_MatMul")
#loc41 = loc("/out_lin/scale/Mul_output_0_Mul")
#loc42 = loc("/out_lin/Mul_output_0_Mul")
#loc43 = loc("output_Reshape")
